
STAB_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  08009d3c  08009d3c  0000ad3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad50  0800ad50  0000c0c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad50  0800ad50  0000bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad58  0800ad58  0000c0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad58  0800ad58  0000bd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad5c  0800ad5c  0000bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800ad60  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000c0  0800ae20  0000c0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800ae20  0000c230  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d960  00000000  00000000  0000c0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197a  00000000  00000000  00019a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0001b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b78  00000000  00000000  0001c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031d65  00000000  00000000  0001cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de5e  00000000  00000000  0004e9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00133e16  00000000  00000000  0005c80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  00190664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00194710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000c0 	.word	0x200000c0
 8000268:	00000000 	.word	0x00000000
 800026c:	08009d24 	.word	0x08009d24

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000c4 	.word	0x200000c4
 8000288:	08009d24 	.word	0x08009d24

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__popcountsi2>:
 800029c:	0843      	lsrs	r3, r0, #1
 800029e:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	0883      	lsrs	r3, r0, #2
 80002a6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002aa:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002ae:	4418      	add	r0, r3
 80002b0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002b4:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002b8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002bc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002c0:	0e00      	lsrs	r0, r0, #24
 80002c2:	4770      	bx	lr

080002c4 <user_provided_block_device_read>:
// Lecture de données depuis SRAM3
int user_provided_block_device_read(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    void *buffer,
                                    lfs_size_t size) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	603b      	str	r3, [r7, #0]
    // Lire les données depuis l'adresse SRAM3
    memcpy(buffer, &sram3_storage[block * c->block_size + offset], size);
 80002d2:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <user_provided_block_device_read+0x38>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	68b9      	ldr	r1, [r7, #8]
 80002dc:	fb03 f101 	mul.w	r1, r3, r1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	440b      	add	r3, r1
 80002e4:	4413      	add	r3, r2
 80002e6:	69ba      	ldr	r2, [r7, #24]
 80002e8:	4619      	mov	r1, r3
 80002ea:	6838      	ldr	r0, [r7, #0]
 80002ec:	f008 ffd3 	bl	8009296 <memcpy>
    return 0;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000

08000300 <user_provided_block_device_prog>:
// Programmation (écriture) de données dans SRAM3
int user_provided_block_device_prog(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    const void *buffer,
                                    lfs_size_t size) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	603b      	str	r3, [r7, #0]
    // Écrire les données dans l'adresse SRAM3
    memcpy(&sram3_storage[block * c->block_size + offset], buffer, size);
 800030e:	4b0a      	ldr	r3, [pc, #40]	@ (8000338 <user_provided_block_device_prog+0x38>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	68b9      	ldr	r1, [r7, #8]
 8000318:	fb03 f101 	mul.w	r1, r3, r1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	440b      	add	r3, r1
 8000320:	4413      	add	r3, r2
 8000322:	69ba      	ldr	r2, [r7, #24]
 8000324:	6839      	ldr	r1, [r7, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f008 ffb5 	bl	8009296 <memcpy>
    return 0;
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000

0800033c <user_provided_block_device_erase>:

// Effacement d'un bloc de SRAM3
int user_provided_block_device_erase(const struct lfs_config *c,
                                     lfs_block_t block) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
    // Effacer le bloc en remplissant de 0xFF
    memset(&sram3_storage[block * c->block_size], 0xFF, c->block_size);
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <user_provided_block_device_erase+0x30>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	6839      	ldr	r1, [r7, #0]
 8000350:	fb01 f303 	mul.w	r3, r1, r3
 8000354:	18d0      	adds	r0, r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	461a      	mov	r2, r3
 800035c:	21ff      	movs	r1, #255	@ 0xff
 800035e:	f008 feee 	bl	800913e <memset>
    return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000000 	.word	0x20000000

08000370 <user_provided_block_device_sync>:

// Synchronisation (pas nécessaire ici, mais fourni pour la conformité)
int user_provided_block_device_sync(const struct lfs_config *c) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b0b8      	sub	sp, #224	@ 0xe0
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038e:	f007 f9bd 	bl	800770c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000392:	f000 f869 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000396:	f000 f8e5 	bl	8000564 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800039a:	f000 f8d7 	bl	800054c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  extern struct lfs_config cfg;
  lfs_t lfs;
  int err = lfs_mount(&lfs, &cfg);
 800039e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003a2:	492d      	ldr	r1, [pc, #180]	@ (8000458 <main+0xd0>)
 80003a4:	4618      	mov	r0, r3
 80003a6:	f007 f851 	bl	800744c <lfs_mount>
 80003aa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

  if (err) {
 80003ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d00d      	beq.n	80003d2 <main+0x4a>
    lfs_format(&lfs, &cfg);
 80003b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003ba:	4927      	ldr	r1, [pc, #156]	@ (8000458 <main+0xd0>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f007 f82f 	bl	8007420 <lfs_format>
    err = lfs_mount(&lfs, &cfg);
 80003c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003c6:	4924      	ldr	r1, [pc, #144]	@ (8000458 <main+0xd0>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f007 f83f 	bl	800744c <lfs_mount>
 80003ce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  }

  if (err == 0) {
 80003d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d136      	bne.n	8000448 <main+0xc0>
      lfs_file_t file;
      const char *text = "Bonjour SRAM3 !";
 80003da:	4b20      	ldr	r3, [pc, #128]	@ (800045c <main+0xd4>)
 80003dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

      if (lfs_file_open(&lfs, &file, "monfichier.txt", LFS_O_WRONLY | LFS_O_CREAT) == 0) {
 80003e0:	1d39      	adds	r1, r7, #4
 80003e2:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80003e6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80003ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000460 <main+0xd8>)
 80003ec:	f007 f844 	bl	8007478 <lfs_file_open>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d112      	bne.n	800041c <main+0x94>
          lfs_file_write(&lfs, &file, text, strlen(text));
 80003f6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80003fa:	f7ff ff47 	bl	800028c <strlen>
 80003fe:	4603      	mov	r3, r0
 8000400:	1d39      	adds	r1, r7, #4
 8000402:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000406:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800040a:	f007 f895 	bl	8007538 <lfs_file_write>
          lfs_file_close(&lfs, &file);
 800040e:	1d3a      	adds	r2, r7, #4
 8000410:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f007 f862 	bl	80074e0 <lfs_file_close>
      }
      while (1) {
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000422:	4810      	ldr	r0, [pc, #64]	@ (8000464 <main+0xdc>)
 8000424:	f007 fd16 	bl	8007e54 <HAL_GPIO_WritePin>
          HAL_Delay(1000);
 8000428:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800042c:	f007 fa2c 	bl	8007888 <HAL_Delay>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000436:	480b      	ldr	r0, [pc, #44]	@ (8000464 <main+0xdc>)
 8000438:	f007 fd0c 	bl	8007e54 <HAL_GPIO_WritePin>
          HAL_Delay(10000);
 800043c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000440:	f007 fa22 	bl	8007888 <HAL_Delay>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000444:	bf00      	nop
 8000446:	e7e9      	b.n	800041c <main+0x94>
      }
  } else {
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800044e:	4805      	ldr	r0, [pc, #20]	@ (8000464 <main+0xdc>)
 8000450:	f007 fd00 	bl	8007e54 <HAL_GPIO_WritePin>
      while (1);
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <main+0xcc>
 8000458:	20000004 	.word	0x20000004
 800045c:	08009d3c 	.word	0x08009d3c
 8000460:	08009d4c 	.word	0x08009d4c
 8000464:	42022000 	.word	0x42022000

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b09c      	sub	sp, #112	@ 0x70
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0320 	add.w	r3, r7, #32
 8000472:	2250      	movs	r2, #80	@ 0x50
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f008 fe61 	bl	800913e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800048e:	4b2d      	ldr	r3, [pc, #180]	@ (8000544 <SystemClock_Config+0xdc>)
 8000490:	691b      	ldr	r3, [r3, #16]
 8000492:	4a2c      	ldr	r2, [pc, #176]	@ (8000544 <SystemClock_Config+0xdc>)
 8000494:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000498:	6113      	str	r3, [r2, #16]
 800049a:	4b2a      	ldr	r3, [pc, #168]	@ (8000544 <SystemClock_Config+0xdc>)
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004a6:	bf00      	nop
 80004a8:	4b26      	ldr	r3, [pc, #152]	@ (8000544 <SystemClock_Config+0xdc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	2b08      	cmp	r3, #8
 80004b2:	d1f9      	bne.n	80004a8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80004b4:	2310      	movs	r3, #16
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80004b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80004be:	2320      	movs	r3, #32
 80004c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c2:	2302      	movs	r3, #2
 80004c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80004c6:	2302      	movs	r3, #2
 80004c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004ca:	2301      	movs	r3, #1
 80004cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004ce:	237d      	movs	r3, #125	@ 0x7d
 80004d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004da:	2302      	movs	r3, #2
 80004dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80004de:	2308      	movs	r3, #8
 80004e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	4618      	mov	r0, r3
 80004f0:	f007 fcd8 	bl	8007ea4 <HAL_RCC_OscConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004fa:	f000 f87f 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	231f      	movs	r3, #31
 8000500:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000502:	2303      	movs	r3, #3
 8000504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2105      	movs	r1, #5
 800051c:	4618      	mov	r0, r3
 800051e:	f008 f8f9 	bl	8008714 <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000528:	f000 f868 	bl	80005fc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <SystemClock_Config+0xe0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000534:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <SystemClock_Config+0xe0>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	3770      	adds	r7, #112	@ 0x70
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	44020800 	.word	0x44020800
 8000548:	40022000 	.word	0x40022000

0800054c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000550:	f007 fc98 	bl	8007e84 <HAL_ICACHE_Enable>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800055a:	f000 f84f 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000580:	481c      	ldr	r0, [pc, #112]	@ (80005f4 <MX_GPIO_Init+0x90>)
 8000582:	f007 fc67 	bl	8007e54 <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_GPIO_Init+0x94>)
 8000588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800058c:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <MX_GPIO_Init+0x94>)
 800058e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000592:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_GPIO_Init+0x94>)
 8000598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800059c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_GPIO_Init+0x94>)
 80005a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005aa:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <MX_GPIO_Init+0x94>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005b4:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <MX_GPIO_Init+0x94>)
 80005b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <MX_GPIO_Init+0x90>)
 80005ca:	f007 fc43 	bl	8007e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80005ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <MX_GPIO_Init+0x90>)
 80005e8:	f007 fad6 	bl	8007b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	42022000 	.word	0x42022000
 80005f8:	44020c00 	.word	0x44020c00

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <HardFault_Handler+0x4>

08000626 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <MemManage_Handler+0x4>

0800062e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000632:	bf00      	nop
 8000634:	e7fd      	b.n	8000632 <BusFault_Handler+0x4>

08000636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063a:	bf00      	nop
 800063c:	e7fd      	b.n	800063a <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f007 f8ec 	bl	8007848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return 1;
 8000678:	2301      	movs	r3, #1
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <_kill>:

int _kill(int pid, int sig)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800068e:	f008 fdd5 	bl	800923c <__errno>
 8000692:	4603      	mov	r3, r0
 8000694:	2216      	movs	r2, #22
 8000696:	601a      	str	r2, [r3, #0]
  return -1;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_exit>:

void _exit (int status)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ffe7 	bl	8000684 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <_exit+0x12>

080006ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	e00a      	b.n	80006e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006cc:	f3af 8000 	nop.w
 80006d0:	4601      	mov	r1, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	60ba      	str	r2, [r7, #8]
 80006d8:	b2ca      	uxtb	r2, r1
 80006da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbf0      	blt.n	80006cc <_read+0x12>
  }

  return len;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e009      	b.n	800071a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbf1      	blt.n	8000706 <_write+0x12>
  }
  return len;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_close>:

int _close(int file)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000754:	605a      	str	r2, [r3, #4]
  return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <_isatty>:

int _isatty(int file)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f008 fd3a 	bl	800923c <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200a0000 	.word	0x200a0000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	200000dc 	.word	0x200000dc
 80007fc:	20000230 	.word	0x20000230

08000800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000802:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000804:	f006 ff06 	bl	8007614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	@ (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	@ (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	@ (800084c <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800082e:	f008 fd0b 	bl	8009248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000832:	f7ff fda9 	bl	8000388 <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   r0, =_estack
 8000838:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000844:	0800ad60 	.word	0x0800ad60
  ldr r2, =_sbss
 8000848:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800084c:	20000230 	.word	0x20000230

08000850 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_IRQHandler>

08000852 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4293      	cmp	r3, r2
 8000862:	bf38      	it	cc
 8000864:	4613      	movcc	r3, r2
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4293      	cmp	r3, r2
 8000882:	bf28      	it	cs
 8000884:	4613      	movcs	r3, r2
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80008a4:	6839      	ldr	r1, [r7, #0]
 80008a6:	fb01 f202 	mul.w	r2, r1, r2
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	1ad3      	subs	r3, r2, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffde 	bl	8000892 <lfs_aligndown>
 80008d6:	4603      	mov	r3, r0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	fab3 f383 	clz	r3, r3
 80008f0:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	fa93 f3a3 	rbit	r3, r3
 800090e:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fcb8 	bl	800029c <__popcountsi2>
 800092c:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	1ad3      	subs	r3, r2, r3
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800095a:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffee 	bl	8000952 <lfs_fromle32>
 8000976:	4603      	mov	r3, r0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ffed 	bl	8000980 <lfs_frombe32>
 80009a6:	4603      	mov	r3, r0
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f008 f9c9 	bl	8008d50 <malloc>
 80009be:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f008 f9c5 	bl	8008d60 <free>
#else
    (void)p;
#endif
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	68d8      	ldr	r0, [r3, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	461a      	mov	r2, r3
 8000a12:	21ff      	movs	r1, #255	@ 0xff
 8000a14:	f008 fb93 	bl	800913e <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a38:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000a3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a3e:	441a      	add	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d80a      	bhi.n	8000a60 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 8124 	beq.w	8000c9c <lfs_bd_read+0x274>
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	f0c0 811e 	bcc.w	8000c9c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000a60:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8000a64:	e11f      	b.n	8000ca6 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a68:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d03f      	beq.n	8000af0 <lfs_bd_read+0xc8>
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d13a      	bne.n	8000af0 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d232      	bcs.n	8000af0 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d324      	bcc.n	8000ade <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	6859      	ldr	r1, [r3, #4]
 8000a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a9e:	1acb      	subs	r3, r1, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	69b8      	ldr	r0, [r7, #24]
 8000aa6:	f7ff fee4 	bl	8000872 <lfs_min>
 8000aaa:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ab6:	1acb      	subs	r3, r1, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4619      	mov	r1, r3
 8000abe:	69f8      	ldr	r0, [r7, #28]
 8000ac0:	f008 fbe9 	bl	8009296 <memcpy>

                data += diff;
 8000ac4:	69fa      	ldr	r2, [r7, #28]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4413      	add	r3, r2
 8000aca:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000acc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000adc:	e0de      	b.n	8000c9c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	69b8      	ldr	r0, [r7, #24]
 8000aea:	f7ff fec2 	bl	8000872 <lfs_min>
 8000aee:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d13a      	bne.n	8000b70 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d232      	bcs.n	8000b70 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d324      	bcc.n	8000b5e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6859      	ldr	r1, [r3, #4]
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b1e:	1acb      	subs	r3, r1, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	4619      	mov	r1, r3
 8000b24:	69b8      	ldr	r0, [r7, #24]
 8000b26:	f7ff fea4 	bl	8000872 <lfs_min>
 8000b2a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000b36:	1acb      	subs	r3, r1, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	69f8      	ldr	r0, [r7, #28]
 8000b40:	f008 fba9 	bl	8009296 <memcpy>

                data += diff;
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4413      	add	r3, r2
 8000b4a:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4413      	add	r3, r2
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8000b54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8000b5c:	e09e      	b.n	8000c9c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4619      	mov	r1, r3
 8000b68:	69b8      	ldr	r0, [r7, #24]
 8000b6a:	f7ff fe82 	bl	8000872 <lfs_min>
 8000b6e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000b70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d336      	bcc.n	8000be6 <lfs_bd_read+0x1be>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b84:	fb01 f202 	mul.w	r2, r1, r2
 8000b88:	1a9b      	subs	r3, r3, r2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d12b      	bne.n	8000be6 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000b92:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d325      	bcc.n	8000be6 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	69b8      	ldr	r0, [r7, #24]
 8000ba4:	f7ff fe75 	bl	8000892 <lfs_aligndown>
 8000ba8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000bae:	685c      	ldr	r4, [r3, #4]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000bbe:	47a0      	blx	r4
 8000bc0:	6178      	str	r0, [r7, #20]
            if (err) {
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <lfs_bd_read+0x1a4>
                return err;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	e06c      	b.n	8000ca6 <lfs_bd_read+0x27e>
            }

            data += diff;
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4413      	add	r3, r2
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8000bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8000be4:	e05a      	b.n	8000c9c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00a      	beq.n	8000c04 <lfs_bd_read+0x1dc>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d305      	bcc.n	8000c04 <lfs_bd_read+0x1dc>
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <lfs_bd_read+0x288>)
 8000bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8000cb4 <lfs_bd_read+0x28c>)
 8000bfc:	216b      	movs	r1, #107	@ 0x6b
 8000bfe:	482e      	ldr	r0, [pc, #184]	@ (8000cb8 <lfs_bd_read+0x290>)
 8000c00:	f008 f888 	bl	8008d14 <__assert_func>
        rcache->block = block;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c08:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	4619      	mov	r1, r3
 8000c12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c14:	f7ff fe3d 	bl	8000892 <lfs_aligndown>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c28:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	f7ff fe45 	bl	80008bc <lfs_alignup>
 8000c32:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c38:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	f7ff fe18 	bl	8000872 <lfs_min>
 8000c42:	4602      	mov	r2, r0
                - rcache->off,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000c48:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8000c50:	4619      	mov	r1, r3
 8000c52:	4610      	mov	r0, r2
 8000c54:	f7ff fe0d 	bl	8000872 <lfs_min>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c62:	685c      	ldr	r4, [r3, #4]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6819      	ldr	r1, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	462b      	mov	r3, r5
 8000c7c:	47a0      	blx	r4
 8000c7e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dd05      	ble.n	8000c92 <lfs_bd_read+0x26a>
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <lfs_bd_read+0x294>)
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <lfs_bd_read+0x28c>)
 8000c8a:	2176      	movs	r1, #118	@ 0x76
 8000c8c:	480a      	ldr	r0, [pc, #40]	@ (8000cb8 <lfs_bd_read+0x290>)
 8000c8e:	f008 f841 	bl	8008d14 <__assert_func>
        if (err) {
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <lfs_bd_read+0x274>
            return err;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	e004      	b.n	8000ca6 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f47f aee1 	bne.w	8000a66 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdb0      	pop	{r4, r5, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	08009d5c 	.word	0x08009d5c
 8000cb4:	0800ab6c 	.word	0x0800ab6c
 8000cb8:	08009d8c 	.word	0x08009d8c
 8000cbc:	08009dd8 	.word	0x08009dd8

08000cc0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b090      	sub	sp, #64	@ 0x40
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cda:	e039      	b.n	8000d50 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fdc4 	bl	8000872 <lfs_min>
 8000cea:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf0:	1ad1      	subs	r1, r2, r3
 8000cf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf6:	4413      	add	r3, r2
 8000cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cfa:	9203      	str	r2, [sp, #12]
 8000cfc:	f107 0214 	add.w	r2, r7, #20
 8000d00:	9202      	str	r2, [sp, #8]
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fe8a 	bl	8000a28 <lfs_bd_read>
 8000d14:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <lfs_bd_cmp+0x60>
            return err;
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	e01c      	b.n	8000d5a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d24:	18d1      	adds	r1, r2, r3
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f008 f9f6 	bl	800911e <memcmp>
 8000d32:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da01      	bge.n	8000d44 <lfs_bd_cmp+0x84>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e00a      	b.n	8000d5a <lfs_bd_cmp+0x9a>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e008      	b.n	8000d5a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	4413      	add	r3, r2
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d3c1      	bcc.n	8000cdc <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3730      	adds	r7, #48	@ 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b08e      	sub	sp, #56	@ 0x38
 8000d66:	af04      	add	r7, sp, #16
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d78:	e030      	b.n	8000ddc <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000d7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2108      	movs	r1, #8
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fd75 	bl	8000872 <lfs_min>
 8000d88:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8e:	1ad1      	subs	r1, r2, r3
 8000d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	4413      	add	r3, r2
 8000d96:	6a3a      	ldr	r2, [r7, #32]
 8000d98:	9203      	str	r2, [sp, #12]
 8000d9a:	f107 0214 	add.w	r2, r7, #20
 8000d9e:	9202      	str	r2, [sp, #8]
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	460b      	mov	r3, r1
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f7ff fe3b 	bl	8000a28 <lfs_bd_read>
 8000db2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <lfs_bd_crc+0x5c>
            return err;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	e013      	b.n	8000de6 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f107 0114 	add.w	r1, r7, #20
 8000dc6:	6a3a      	ldr	r2, [r7, #32]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f006 fbe5 	bl	8007598 <lfs_crc>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dd2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	4413      	add	r3, r2
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3ca      	bcc.n	8000d7a <lfs_bd_crc+0x18>
    }

    return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af04      	add	r7, sp, #16
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d060      	beq.n	8000eca <lfs_bd_flush+0xda>
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f113 0f02 	cmn.w	r3, #2
 8000e10:	d05b      	beq.n	8000eca <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d305      	bcc.n	8000e2a <lfs_bd_flush+0x3a>
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <lfs_bd_flush+0xe4>)
 8000e20:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed8 <lfs_bd_flush+0xe8>)
 8000e22:	21b3      	movs	r1, #179	@ 0xb3
 8000e24:	482d      	ldr	r0, [pc, #180]	@ (8000edc <lfs_bd_flush+0xec>)
 8000e26:	f007 ff75 	bl	8008d14 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4610      	mov	r0, r2
 8000e38:	f7ff fd40 	bl	80008bc <lfs_alignup>
 8000e3c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000e42:	689c      	ldr	r4, [r3, #8]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	462b      	mov	r3, r5
 8000e5a:	47a0      	blx	r4
 8000e5c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dd05      	ble.n	8000e70 <lfs_bd_flush+0x80>
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <lfs_bd_flush+0xf0>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <lfs_bd_flush+0xe8>)
 8000e68:	21b7      	movs	r1, #183	@ 0xb7
 8000e6a:	481c      	ldr	r0, [pc, #112]	@ (8000edc <lfs_bd_flush+0xec>)
 8000e6c:	f007 ff52 	bl	8008d14 <__assert_func>
        if (err) {
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <lfs_bd_flush+0x8a>
            return err;
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	e028      	b.n	8000ecc <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d020      	beq.n	8000ec2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff fdab 	bl	80009de <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000e94:	69f8      	ldr	r0, [r7, #28]
 8000e96:	9003      	str	r0, [sp, #12]
 8000e98:	9102      	str	r1, [sp, #8]
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ff0b 	bl	8000cc0 <lfs_bd_cmp>
 8000eaa:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da01      	bge.n	8000eb6 <lfs_bd_flush+0xc6>
                return res;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000ebc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8000ec0:	e004      	b.n	8000ecc <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f7ff fd99 	bl	80009fc <lfs_cache_zero>
    }

    return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed4:	08009de4 	.word	0x08009de4
 8000ed8:	0800ab78 	.word	0x0800ab78
 8000edc:	08009d8c 	.word	0x08009d8c
 8000ee0:	08009dd8 	.word	0x08009dd8

08000ee4 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fd72 	bl	80009de <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff ff75 	bl	8000df0 <lfs_bd_flush>
 8000f06:	6178      	str	r0, [r7, #20]
    if (err) {
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <lfs_bd_sync+0x2e>
        return err;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	e011      	b.n	8000f36 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4798      	blx	r3
 8000f20:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dd05      	ble.n	8000f34 <lfs_bd_sync+0x50>
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <lfs_bd_sync+0x5c>)
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <lfs_bd_sync+0x60>)
 8000f2c:	21dd      	movs	r1, #221	@ 0xdd
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <lfs_bd_sync+0x64>)
 8000f30:	f007 fef0 	bl	8008d14 <__assert_func>
    return err;
 8000f34:	697b      	ldr	r3, [r7, #20]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08009dd8 	.word	0x08009dd8
 8000f44:	0800ab88 	.word	0x0800ab88
 8000f48:	08009d8c 	.word	0x08009d8c

08000f4c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f60:	f113 0f02 	cmn.w	r3, #2
 8000f64:	d00a      	beq.n	8000f7c <lfs_bd_prog+0x30>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d305      	bcc.n	8000f7c <lfs_bd_prog+0x30>
 8000f70:	4b48      	ldr	r3, [pc, #288]	@ (8001094 <lfs_bd_prog+0x148>)
 8000f72:	4a49      	ldr	r2, [pc, #292]	@ (8001098 <lfs_bd_prog+0x14c>)
 8000f74:	21e8      	movs	r1, #232	@ 0xe8
 8000f76:	4849      	ldr	r0, [pc, #292]	@ (800109c <lfs_bd_prog+0x150>)
 8000f78:	f007 fecc 	bl	8008d14 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f80:	441a      	add	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d97a      	bls.n	8001082 <lfs_bd_prog+0x136>
 8000f8c:	4b44      	ldr	r3, [pc, #272]	@ (80010a0 <lfs_bd_prog+0x154>)
 8000f8e:	4a42      	ldr	r2, [pc, #264]	@ (8001098 <lfs_bd_prog+0x14c>)
 8000f90:	21e9      	movs	r1, #233	@ 0xe9
 8000f92:	4842      	ldr	r0, [pc, #264]	@ (800109c <lfs_bd_prog+0x150>)
 8000f94:	f007 febe 	bl	8008d14 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d151      	bne.n	8001046 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d34c      	bcc.n	8001046 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb6:	4413      	add	r3, r2
                off >= pcache->off &&
 8000fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d243      	bcs.n	8001046 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000fc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	6859      	ldr	r1, [r3, #4]
 8000fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fca:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000fcc:	4413      	add	r3, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000fd2:	f7ff fc4e 	bl	8000872 <lfs_min>
 8000fd6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000fe2:	1acb      	subs	r3, r1, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	69f9      	ldr	r1, [r7, #28]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f008 f953 	bl	8009296 <memcpy>

            data += diff;
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8001000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	6898      	ldr	r0, [r3, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fc1c 	bl	8000852 <lfs_max>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800102a:	429a      	cmp	r2, r3
 800102c:	d128      	bne.n	8001080 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f7ff fedb 	bl	8000df0 <lfs_bd_flush>
 800103a:	6178      	str	r0, [r7, #20]
                if (err) {
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d01e      	beq.n	8001080 <lfs_bd_prog+0x134>
                    return err;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	e021      	b.n	800108a <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104e:	d006      	beq.n	800105e <lfs_bd_prog+0x112>
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <lfs_bd_prog+0x158>)
 8001052:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <lfs_bd_prog+0x14c>)
 8001054:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001058:	4810      	ldr	r0, [pc, #64]	@ (800109c <lfs_bd_prog+0x150>)
 800105a:	f007 fe5b 	bl	8008d14 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001062:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4619      	mov	r1, r3
 800106c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800106e:	f7ff fc10 	bl	8000892 <lfs_aligndown>
 8001072:	4602      	mov	r2, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	e000      	b.n	8001082 <lfs_bd_prog+0x136>
            continue;
 8001080:	bf00      	nop
    while (size > 0) {
 8001082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001084:	2b00      	cmp	r3, #0
 8001086:	d187      	bne.n	8000f98 <lfs_bd_prog+0x4c>
    }

    return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08009e08 	.word	0x08009e08
 8001098:	0800ab94 	.word	0x0800ab94
 800109c:	08009d8c 	.word	0x08009d8c
 80010a0:	08009e40 	.word	0x08009e40
 80010a4:	08009e64 	.word	0x08009e64

080010a8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d306      	bcc.n	80010ca <lfs_bd_erase+0x22>
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <lfs_bd_erase+0x54>)
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <lfs_bd_erase+0x58>)
 80010c0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80010c4:	480f      	ldr	r0, [pc, #60]	@ (8001104 <lfs_bd_erase+0x5c>)
 80010c6:	f007 fe25 	bl	8008d14 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	4610      	mov	r0, r2
 80010d8:	4798      	blx	r3
 80010da:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dd06      	ble.n	80010f0 <lfs_bd_erase+0x48>
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <lfs_bd_erase+0x60>)
 80010e4:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <lfs_bd_erase+0x58>)
 80010e6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <lfs_bd_erase+0x5c>)
 80010ec:	f007 fe12 	bl	8008d14 <__assert_func>
    return err;
 80010f0:	68fb      	ldr	r3, [r7, #12]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08009e88 	.word	0x08009e88
 8001100:	0800aba0 	.word	0x0800aba0
 8001104:	08009d8c 	.word	0x08009d8c
 8001108:	08009dd8 	.word	0x08009dd8

0800110c <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 8001114:	4904      	ldr	r1, [pc, #16]	@ (8001128 <lfs_path_namelen+0x1c>)
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f008 f819 	bl	800914e <strcspn>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	08009ea4 	.word	0x08009ea4

0800112c <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffe9 	bl	800110c <lfs_path_namelen>
 800113a:	60f8      	str	r0, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	4909      	ldr	r1, [pc, #36]	@ (8001168 <lfs_path_islast+0x3c>)
 8001144:	4618      	mov	r0, r3
 8001146:	f008 f813 	bl	8009170 <strspn>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	bf0c      	ite	eq
 800115a:	2301      	moveq	r3, #1
 800115c:	2300      	movne	r3, #0
 800115e:	b2db      	uxtb	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	08009ea4 	.word	0x08009ea4

0800116c <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffc9 	bl	800110c <lfs_path_namelen>
 800117a:	4602      	mov	r2, r0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	b2db      	uxtb	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ce:	d005      	beq.n	80011dc <lfs_pair_isnull+0x1e>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3304      	adds	r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011da:	d101      	bne.n	80011e0 <lfs_pair_isnull+0x22>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <lfs_pair_isnull+0x24>
 80011e0:	2300      	movs	r3, #0
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d017      	beq.n	800123a <lfs_pair_cmp+0x46>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d00f      	beq.n	800123a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3304      	adds	r3, #4
 8001222:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001224:	429a      	cmp	r2, r3
 8001226:	d008      	beq.n	800123a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3304      	adds	r3, #4
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <lfs_pair_cmp+0x46>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <lfs_pair_cmp+0x48>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d107      	bne.n	800126e <lfs_pair_issync+0x26>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3304      	adds	r3, #4
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3304      	adds	r3, #4
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d00d      	beq.n	800128a <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001278:	429a      	cmp	r2, r3
 800127a:	d108      	bne.n	800128e <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3304      	adds	r3, #4
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d101      	bne.n	800128e <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <lfs_pair_issync+0x48>
 800128e:	2300      	movs	r3, #0
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80012a2:	b590      	push	{r4, r7, lr}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb4f 	bl	8000952 <lfs_fromle32>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	1d1c      	adds	r4, r3, #4
 80012c4:	4610      	mov	r0, r2
 80012c6:	f7ff fb44 	bl	8000952 <lfs_fromle32>
 80012ca:	4603      	mov	r3, r0
 80012cc:	6023      	str	r3, [r4, #0]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}

080012d6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb40 	bl	8000968 <lfs_tole32>
 80012e8:	4602      	mov	r2, r0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1d1c      	adds	r4, r3, #4
 80012f8:	4610      	mov	r0, r2
 80012fa:	f7ff fb35 	bl	8000968 <lfs_tole32>
 80012fe:	4603      	mov	r3, r0
 8001300:	6023      	str	r3, [r4, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}

0800130a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	43db      	mvns	r3, r3
 8001316:	0fdb      	lsrs	r3, r3, #31
 8001318:	b2db      	uxtb	r3, r3
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	059b      	lsls	r3, r3, #22
 8001332:	159b      	asrs	r3, r3, #22
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	0d1b      	lsrs	r3, r3, #20
 8001358:	b29b      	uxth	r3, r3
 800135a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800135e:	b29b      	uxth	r3, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	0d1b      	lsrs	r3, r3, #20
 8001378:	b29b      	uxth	r3, r3
 800137a:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800137e:	b29b      	uxth	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	b29b      	uxth	r3, r3
 800139a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139e:	b29b      	uxth	r3, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0d1b      	lsrs	r3, r3, #20
 80013b8:	b2db      	uxtb	r3, r3
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffec 	bl	80013ac <lfs_tag_chunk>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b25b      	sxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0a9b      	lsrs	r3, r3, #10
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f2:	b29b      	uxth	r3, r3
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff7f 	bl	8001326 <lfs_tag_isdelete>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffe5 	bl	8001400 <lfs_tag_size>
 8001436:	4603      	mov	r3, r0
 8001438:	3304      	adds	r3, #4
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	405a      	eors	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	405a      	eors	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	405a      	eors	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	609a      	str	r2, [r3, #8]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <lfs_gstate_iszero+0x24>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <lfs_gstate_iszero+0x26>
 80014a6:	2300      	movs	r3, #0
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff9a 	bl	8001400 <lfs_tag_size>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	bf14      	ite	ne
 80014d2:	2301      	movne	r3, #1
 80014d4:	2300      	moveq	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff87 	bl	8001400 <lfs_tag_size>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b2db      	uxtb	r3, r3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff1e 	bl	800134c <lfs_tag_type1>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf14      	ite	ne
 8001516:	2301      	movne	r3, #1
 8001518:	2300      	moveq	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff65 	bl	8001400 <lfs_tag_size>
 8001536:	4603      	mov	r3, r0
 8001538:	0a5b      	lsrs	r3, r3, #9
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fef6 	bl	800134c <lfs_tag_type1>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00a      	beq.n	800157c <lfs_gstate_hasmovehere+0x30>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3304      	adds	r3, #4
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe41 	bl	80011f4 <lfs_pair_cmp>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <lfs_gstate_hasmovehere+0x30>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <lfs_gstate_hasmovehere+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f9da 	bl	8000952 <lfs_fromle32>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f9d2 	bl	8000952 <lfs_fromle32>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f9ca 	bl	8000952 <lfs_fromle32>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f9c5 	bl	8000968 <lfs_tole32>
 80015de:	4602      	mov	r2, r0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff f9bd 	bl	8000968 <lfs_tole32>
 80015ee:	4602      	mov	r2, r0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff f9b5 	bl	8000968 <lfs_tole32>
 80015fe:	4602      	mov	r2, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff f99a 	bl	8000952 <lfs_fromle32>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f992 	bl	8000952 <lfs_fromle32>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	605a      	str	r2, [r3, #4]
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f98d 	bl	8000968 <lfs_tole32>
 800164e:	4602      	mov	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f985 	bl	8000968 <lfs_tole32>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	605a      	str	r2, [r3, #4]
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f96a 	bl	8000952 <lfs_fromle32>
 800167e:	4602      	mov	r2, r0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f962 	bl	8000952 <lfs_fromle32>
 800168e:	4602      	mov	r2, r0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f95d 	bl	8000968 <lfs_tole32>
 80016ae:	4602      	mov	r2, r0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f955 	bl	8000968 <lfs_tole32>
 80016be:	4602      	mov	r2, r0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	605a      	str	r2, [r3, #4]
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f93a 	bl	8000952 <lfs_fromle32>
 80016de:	4602      	mov	r2, r0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f932 	bl	8000952 <lfs_fromle32>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f92a 	bl	8000952 <lfs_fromle32>
 80016fe:	4602      	mov	r2, r0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f922 	bl	8000952 <lfs_fromle32>
 800170e:	4602      	mov	r2, r0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f91a 	bl	8000952 <lfs_fromle32>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f912 	bl	8000952 <lfs_fromle32>
 800172e:	4602      	mov	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	615a      	str	r2, [r3, #20]
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f90d 	bl	8000968 <lfs_tole32>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f905 	bl	8000968 <lfs_tole32>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff f8fd 	bl	8000968 <lfs_tole32>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f8f5 	bl	8000968 <lfs_tole32>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff f8ed 	bl	8000968 <lfs_tole32>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f8e5 	bl	8000968 <lfs_tole32>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	615a      	str	r2, [r3, #20]
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e009      	b.n	80017d0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d101      	bne.n	80017ca <lfs_mlist_isopen+0x1e>
            return true;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e007      	b.n	80017da <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f1      	bne.n	80017bc <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3328      	adds	r3, #40	@ 0x28
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e00d      	b.n	8001814 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d105      	bne.n	800180e <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]
            break;
 800180c:	e007      	b.n	800181e <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ed      	bne.n	80017f8 <lfs_mlist_remove+0x12>
        }
    }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <lfs_fs_disk_version+0x18>)
    }
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	00020001 	.word	0x00020001

0800186c <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffeb 	bl	8001850 <lfs_fs_disk_version>
 800187a:	4603      	mov	r3, r0
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	b29b      	uxth	r3, r3

}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffdd 	bl	8001850 <lfs_fs_disk_version>
 8001896:	4603      	mov	r3, r0
 8001898:	b29b      	uxth	r3, r3
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffe5 	bl	80018a2 <lfs_alloc_ckpoint>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018fa:	4413      	add	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001900:	fbb3 f1f2 	udiv	r1, r3, r2
 8001904:	fb01 f202 	mul.w	r2, r1, r2
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	429a      	cmp	r2, r3
 8001914:	d212      	bcs.n	800193c <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	441a      	add	r2, r3
 8001920:	7811      	ldrb	r1, [r2, #0]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f002 0207 	and.w	r2, r2, #7
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8001934:	4403      	add	r3, r0
 8001936:	430a      	orrs	r2, r1
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195c:	4413      	add	r3, r2
            % lfs->block_count;
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8001962:	fbb3 f1f2 	udiv	r1, r3, r2
 8001966:	fb01 f202 	mul.w	r2, r1, r2
 800196a:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 800197c:	00da      	lsls	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f7fe ff74 	bl	8000872 <lfs_min>
 800198a:	4602      	mov	r2, r0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	461a      	mov	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f007 fbce 	bl	800913e <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80019a2:	2301      	movs	r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4909      	ldr	r1, [pc, #36]	@ (80019cc <lfs_alloc_scan+0x80>)
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f004 ff91 	bl	80068d0 <lfs_fs_traverse_>
 80019ae:	60f8      	str	r0, [r7, #12]
    if (err) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff81 	bl	80018be <lfs_alloc_drop>
        return err;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	e000      	b.n	80019c2 <lfs_alloc_scan+0x76>
    }

    return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	080018e1 	.word	0x080018e1

080019d0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80019da:	e04d      	b.n	8001a78 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d131      	bne.n	8001a64 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a08:	4413      	add	r3, r2
                        % lfs->block_count;
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8001a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a12:	fb01 f202 	mul.w	r2, r1, r2
 8001a16:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	1e5a      	subs	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d211      	bcs.n	8001a60 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1dd      	bne.n	8001a1c <lfs_alloc+0x4c>
                        return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e032      	b.n	8001aca <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3ab      	bcc.n	80019dc <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d116      	bne.n	8001aba <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a94:	4413      	add	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8001a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a9e:	fb01 f202 	mul.w	r2, r1, r2
 8001aa2:	1a9b      	subs	r3, r3, r2
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <lfs_alloc+0x104>)
 8001aa6:	9200      	str	r2, [sp, #0]
 8001aa8:	f240 22bd 	movw	r2, #701	@ 0x2bd
 8001aac:	490a      	ldr	r1, [pc, #40]	@ (8001ad8 <lfs_alloc+0x108>)
 8001aae:	480b      	ldr	r0, [pc, #44]	@ (8001adc <lfs_alloc+0x10c>)
 8001ab0:	f007 fae0 	bl	8009074 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8001ab4:	f06f 031b 	mvn.w	r3, #27
 8001ab8:	e007      	b.n	8001aca <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff46 	bl	800194c <lfs_alloc_scan>
 8001ac0:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d088      	beq.n	80019da <lfs_alloc+0xa>
            return err;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08009ed4 	.word	0x08009ed4
 8001ad8:	08009d8c 	.word	0x08009d8c
 8001adc:	08009ea8 	.word	0x08009ea8

08001ae0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08f      	sub	sp, #60	@ 0x3c
 8001ae4:	af04      	add	r7, sp, #16
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	333c      	adds	r3, #60	@ 0x3c
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fd20 	bl	800154c <lfs_gstate_hasmovehere>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80ca 	beq.w	8001ca8 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fc63 	bl	80013e0 <lfs_tag_id>
 8001b1a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80c3 	beq.w	8001ca8 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fc5a 	bl	80013e0 <lfs_tag_id>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461c      	mov	r4, r3
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f7ff fc55 	bl	80013e0 <lfs_tag_id>
 8001b36:	4603      	mov	r3, r0
 8001b38:	429c      	cmp	r4, r3
 8001b3a:	d102      	bne.n	8001b42 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8001b3c:	f06f 0301 	mvn.w	r3, #1
 8001b40:	e0be      	b.n	8001cc0 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc4a 	bl	80013e0 <lfs_tag_id>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461c      	mov	r4, r3
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	f7ff fc45 	bl	80013e0 <lfs_tag_id>
 8001b56:	4603      	mov	r3, r0
 8001b58:	429c      	cmp	r4, r3
 8001b5a:	f080 80a5 	bcs.w	8001ca8 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001b64:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b66:	e09f      	b.n	8001ca8 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fc55 	bl	800141a <lfs_tag_dsize>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001b7c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8001b82:	2204      	movs	r2, #4
 8001b84:	9203      	str	r2, [sp, #12]
 8001b86:	f107 0210 	add.w	r2, r7, #16
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8e:	9201      	str	r2, [sp, #4]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2304      	movs	r3, #4
 8001b94:	460a      	mov	r2, r1
 8001b96:	2100      	movs	r1, #0
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7fe ff45 	bl	8000a28 <lfs_bd_read>
 8001b9e:	61b8      	str	r0, [r7, #24]
        if (err) {
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <lfs_dir_getslice+0xca>
            return err;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	e08a      	b.n	8001cc0 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fee7 	bl	8000980 <lfs_frombe32>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4053      	eors	r3, r2
 8001bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fc0e 	bl	80013e0 <lfs_tag_id>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d02b      	beq.n	8001c22 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bca:	69f8      	ldr	r0, [r7, #28]
 8001bcc:	f7ff fbbe 	bl	800134c <lfs_tag_type1>
 8001bd0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd6:	d124      	bne.n	8001c22 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001bd8:	69f8      	ldr	r0, [r7, #28]
 8001bda:	f7ff fc01 	bl	80013e0 <lfs_tag_id>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461c      	mov	r4, r3
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fbf9 	bl	80013e0 <lfs_tag_id>
 8001bee:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bf0:	429c      	cmp	r4, r3
 8001bf2:	d816      	bhi.n	8001c22 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	1ad2      	subs	r2, r2, r3
 8001bfa:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <lfs_dir_getslice+0x1e8>)
 8001bfc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001bfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d102      	bne.n	8001c12 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8001c0c:	f06f 0301 	mvn.w	r3, #1
 8001c10:	e056      	b.n	8001cc0 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001c12:	69f8      	ldr	r0, [r7, #28]
 8001c14:	f7ff fbd7 	bl	80013c6 <lfs_tag_splice>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	029a      	lsls	r2, r3, #10
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	4413      	add	r3, r2
 8001c20:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	401a      	ands	r2, r3
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	1ac9      	subs	r1, r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	400b      	ands	r3, r1
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d138      	bne.n	8001ca8 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 8001c36:	69f8      	ldr	r0, [r7, #28]
 8001c38:	f7ff fb75 	bl	8001326 <lfs_tag_isdelete>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 8001c42:	f06f 0301 	mvn.w	r3, #1
 8001c46:	e03b      	b.n	8001cc0 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001c48:	69f8      	ldr	r0, [r7, #28]
 8001c4a:	f7ff fbd9 	bl	8001400 <lfs_tag_size>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fe0d 	bl	8000872 <lfs_min>
 8001c58:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001c5a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c64:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001c66:	3204      	adds	r2, #4
 8001c68:	6979      	ldr	r1, [r7, #20]
 8001c6a:	9103      	str	r1, [sp, #12]
 8001c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c6e:	9102      	str	r1, [sp, #8]
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4602      	mov	r2, r0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7fe fed4 	bl	8000a28 <lfs_bd_read>
 8001c80:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <lfs_dir_getslice+0x1ac>
                return err;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	e019      	b.n	8001cc0 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	18d0      	adds	r0, r2, r3
 8001c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f007 fa4f 	bl	800913e <memset>

            return tag + gdiff;
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	e00b      	b.n	8001cc0 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fbb5 	bl	800141a <lfs_tag_dsize>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	f4bf af56 	bcs.w	8001b68 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8001cbc:	f06f 0301 	mvn.w	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	372c      	adds	r7, #44	@ 0x2c
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	000ffc00 	.word	0x000ffc00

08001ccc <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af04      	add	r7, sp, #16
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f7ff fb90 	bl	8001400 <lfs_tag_size>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff fef4 	bl	8001ae0 <lfs_dir_getslice>
 8001cf8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b08c      	sub	sp, #48	@ 0x30
 8001d06:	af04      	add	r7, sp, #16
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d12:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d18:	441a      	add	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f240 80c0 	bls.w	8001ea6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001d26:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8001d2a:	e0c1      	b.n	8001eb0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d2e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03f      	beq.n	8001db6 <lfs_dir_getread+0xb4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f113 0f02 	cmn.w	r3, #2
 8001d3e:	d13a      	bne.n	8001db6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d232      	bcs.n	8001db6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d324      	bcc.n	8001da4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d64:	1acb      	subs	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	69b8      	ldr	r0, [r7, #24]
 8001d6c:	f7fe fd81 	bl	8000872 <lfs_min>
 8001d70:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d7c:	1acb      	subs	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4619      	mov	r1, r3
 8001d84:	69f8      	ldr	r0, [r7, #28]
 8001d86:	f007 fa86 	bl	8009296 <memcpy>

                data += diff;
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	4413      	add	r3, r2
 8001d98:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001d9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001da2:	e080      	b.n	8001ea6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4619      	mov	r1, r3
 8001dae:	69b8      	ldr	r0, [r7, #24]
 8001db0:	f7fe fd5f 	bl	8000872 <lfs_min>
 8001db4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f113 0f02 	cmn.w	r3, #2
 8001dbe:	d13a      	bne.n	8001e36 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d232      	bcs.n	8001e36 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d324      	bcc.n	8001e24 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de4:	1acb      	subs	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	69b8      	ldr	r0, [r7, #24]
 8001dec:	f7fe fd41 	bl	8000872 <lfs_min>
 8001df0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dfc:	1acb      	subs	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4619      	mov	r1, r3
 8001e04:	69f8      	ldr	r0, [r7, #28]
 8001e06:	f007 fa46 	bl	8009296 <memcpy>

                data += diff;
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4413      	add	r3, r2
 8001e18:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001e1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001e22:	e040      	b.n	8001ea6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	69b8      	ldr	r0, [r7, #24]
 8001e30:	f7fe fd1f 	bl	8000872 <lfs_min>
 8001e34:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	4619      	mov	r1, r3
 8001e46:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e48:	f7fe fd23 	bl	8000892 <lfs_aligndown>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e56:	441a      	add	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7fe fd2b 	bl	80008bc <lfs_alignup>
 8001e66:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7fe fcfe 	bl	8000872 <lfs_min>
 8001e76:	4602      	mov	r2, r0
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	6889      	ldr	r1, [r1, #8]
 8001e88:	9102      	str	r1, [sp, #8]
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff fe23 	bl	8001ae0 <lfs_dir_getslice>
 8001e9a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da01      	bge.n	8001ea6 <lfs_dir_getread+0x1a4>
            return err;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	e004      	b.n	8001eb0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f47f af3f 	bne.w	8001d2c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <lfs_dir_traverse_filter+0x1e>
 8001ed2:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <lfs_dir_traverse_filter+0xac>)
 8001ed4:	e000      	b.n	8001ed8 <lfs_dir_traverse_filter+0x20>
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ed8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	405a      	eors	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d014      	beq.n	8001f14 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fa19 	bl	8001326 <lfs_tag_isdelete>
 8001ef4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <lfs_dir_traverse_filter+0xac>)
 8001efe:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <lfs_dir_traverse_filter+0xb4>)
 8001f06:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001f08:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8001f0c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d104      	bne.n	8001f1e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
        return true;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01e      	b.n	8001f5c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f7ff fa14 	bl	800134c <lfs_tag_type1>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2a:	d116      	bne.n	8001f5a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f7ff fa57 	bl	80013e0 <lfs_tag_id>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461c      	mov	r4, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fa50 	bl	80013e0 <lfs_tag_id>
 8001f40:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f42:	429c      	cmp	r4, r3
 8001f44:	d809      	bhi.n	8001f5a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001f46:	68b8      	ldr	r0, [r7, #8]
 8001f48:	f7ff fa3d 	bl	80013c6 <lfs_tag_splice>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	029a      	lsls	r2, r3, #10
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	441a      	add	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	7ffffc00 	.word	0x7ffffc00
 8001f68:	700ffc00 	.word	0x700ffc00
 8001f6c:	000ffc00 	.word	0x000ffc00

08001f70 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b0c1      	sub	sp, #260	@ 0x104
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001f84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f7ff fa43 	bl	800141a <lfs_tag_dsize>
 8001f94:	4602      	mov	r2, r0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	441a      	add	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d237      	bcs.n	8002012 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001fa2:	6838      	ldr	r0, [r7, #0]
 8001fa4:	f7ff fa39 	bl	800141a <lfs_tag_dsize>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001fb0:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	9203      	str	r2, [sp, #12]
 8001fba:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001fbe:	9202      	str	r2, [sp, #8]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	9201      	str	r2, [sp, #4]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	460a      	mov	r2, r1
 8001fca:	2100      	movs	r1, #0
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7fe fd2b 	bl	8000a28 <lfs_bd_read>
 8001fd2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8001fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <lfs_dir_traverse+0x74>
                    return err;
 8001fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fe2:	e3a5      	b.n	8002730 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fcca 	bl	8000980 <lfs_frombe32>
 8001fec:	4602      	mov	r2, r0
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	4053      	eors	r3, r2
 8001ff2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001ff6:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8002004:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	e01b      	b.n	800204a <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8002012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002016:	2b00      	cmp	r3, #0
 8002018:	dd13      	ble.n	8002042 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800201a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8002022:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800202c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002030:	3308      	adds	r3, #8
 8002032:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8002036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800203a:	3b01      	subs	r3, #1
 800203c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002040:	e003      	b.n	800204a <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8002048:	e2a1      	b.n	800258e <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800204a:	4b7e      	ldr	r3, [pc, #504]	@ (8002244 <lfs_dir_traverse+0x2d4>)
 800204c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002056:	405a      	eors	r2, r3
 8002058:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800205c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002060:	400b      	ands	r3, r1
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 8284 	bne.w	8002572 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800206a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800206e:	f7ff f9b7 	bl	80013e0 <lfs_tag_id>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80ef 	beq.w	8002258 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800207a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800207e:	2b02      	cmp	r3, #2
 8002080:	d906      	bls.n	8002090 <lfs_dir_traverse+0x120>
 8002082:	4b71      	ldr	r3, [pc, #452]	@ (8002248 <lfs_dir_traverse+0x2d8>)
 8002084:	4a71      	ldr	r2, [pc, #452]	@ (800224c <lfs_dir_traverse+0x2dc>)
 8002086:	f240 31c2 	movw	r1, #962	@ 0x3c2
 800208a:	4871      	ldr	r0, [pc, #452]	@ (8002250 <lfs_dir_traverse+0x2e0>)
 800208c:	f006 fe42 	bl	8008d14 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002090:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002092:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	33f0      	adds	r3, #240	@ 0xf0
 80020a0:	443b      	add	r3, r7
 80020a2:	3b98      	subs	r3, #152	@ 0x98
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	33f0      	adds	r3, #240	@ 0xf0
 80020b6:	443b      	add	r3, r7
 80020b8:	3b94      	subs	r3, #148	@ 0x94
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	33f0      	adds	r3, #240	@ 0xf0
 80020cc:	443b      	add	r3, r7
 80020ce:	3b90      	subs	r3, #144	@ 0x90
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	33f0      	adds	r3, #240	@ 0xf0
 80020e2:	443b      	add	r3, r7
 80020e4:	3b8c      	subs	r3, #140	@ 0x8c
 80020e6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80020f0:	4613      	mov	r3, r2
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	33f0      	adds	r3, #240	@ 0xf0
 80020fa:	443b      	add	r3, r7
 80020fc:	3b88      	subs	r3, #136	@ 0x88
 80020fe:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	33f0      	adds	r3, #240	@ 0xf0
 8002112:	443b      	add	r3, r7
 8002114:	3b84      	subs	r3, #132	@ 0x84
 8002116:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	33f0      	adds	r3, #240	@ 0xf0
 800212a:	443b      	add	r3, r7
 800212c:	3b80      	subs	r3, #128	@ 0x80
 800212e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	33f0      	adds	r3, #240	@ 0xf0
 8002142:	443b      	add	r3, r7
 8002144:	3b7c      	subs	r3, #124	@ 0x7c
 8002146:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	33f0      	adds	r3, #240	@ 0xf0
 800215a:	443b      	add	r3, r7
 800215c:	3b7a      	subs	r3, #122	@ 0x7a
 800215e:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	33f0      	adds	r3, #240	@ 0xf0
 8002172:	443b      	add	r3, r7
 8002174:	3b78      	subs	r3, #120	@ 0x78
 8002176:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	33f0      	adds	r3, #240	@ 0xf0
 800218a:	443b      	add	r3, r7
 800218c:	3b74      	subs	r3, #116	@ 0x74
 800218e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	33f0      	adds	r3, #240	@ 0xf0
 80021a2:	443b      	add	r3, r7
 80021a4:	3b70      	subs	r3, #112	@ 0x70
 80021a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	33f0      	adds	r3, #240	@ 0xf0
 80021ba:	443b      	add	r3, r7
 80021bc:	3b6c      	subs	r3, #108	@ 0x6c
 80021be:	6019      	str	r1, [r3, #0]
 80021c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	33f0      	adds	r3, #240	@ 0xf0
 80021ce:	443b      	add	r3, r7
 80021d0:	3b68      	subs	r3, #104	@ 0x68
 80021d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	33f0      	adds	r3, #240	@ 0xf0
 80021e6:	443b      	add	r3, r7
 80021e8:	3b68      	subs	r3, #104	@ 0x68
 80021ea:	3304      	adds	r3, #4
 80021ec:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80021f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f4:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80021f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021fc:	3301      	adds	r3, #1
 80021fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <lfs_dir_traverse+0x2e4>)
 8002222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8002226:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800222a:	1e5a      	subs	r2, r3, #1
 800222c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	3328      	adds	r3, #40	@ 0x28
 800223a:	440b      	add	r3, r1
 800223c:	3304      	adds	r3, #4
 800223e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8002242:	e19d      	b.n	8002580 <lfs_dir_traverse+0x610>
 8002244:	7ff00000 	.word	0x7ff00000
 8002248:	08009ed8 	.word	0x08009ed8
 800224c:	0800abb0 	.word	0x0800abb0
 8002250:	08009d8c 	.word	0x08009d8c
 8002254:	08001eb9 	.word	0x08001eb9
            }
        }

popped:
 8002258:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800225a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800225e:	f7ff f8bf 	bl	80013e0 <lfs_tag_id>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f8b8 	bl	80013e0 <lfs_tag_id>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002274:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8002278:	4293      	cmp	r3, r2
 800227a:	f200 817c 	bhi.w	8002576 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800227e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f8ad 	bl	80013e0 <lfs_tag_id>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800228e:	4293      	cmp	r3, r2
 8002290:	f240 8171 	bls.w	8002576 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f878 	bl	800138c <lfs_tag_type3>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f43f ae75 	beq.w	8001f8e <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80022a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f870 	bl	800138c <lfs_tag_type3>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	f240 1301 	movw	r3, #257	@ 0x101
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 80e0 	bne.w	800247a <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80022ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022be:	4ab1      	ldr	r2, [pc, #708]	@ (8002584 <lfs_dir_traverse+0x614>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	f000 815a 	beq.w	800257a <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80022c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	33f0      	adds	r3, #240	@ 0xf0
 80022d4:	443b      	add	r3, r7
 80022d6:	3b98      	subs	r3, #152	@ 0x98
 80022d8:	4618      	mov	r0, r3
 80022da:	233c      	movs	r3, #60	@ 0x3c
 80022dc:	461a      	mov	r2, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	f006 ff2d 	bl	800913e <memset>
 80022e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	33f0      	adds	r3, #240	@ 0xf0
 80022f2:	443b      	add	r3, r7
 80022f4:	3b98      	subs	r3, #152	@ 0x98
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	33f0      	adds	r3, #240	@ 0xf0
 8002308:	443b      	add	r3, r7
 800230a:	3b94      	subs	r3, #148	@ 0x94
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	33f0      	adds	r3, #240	@ 0xf0
 800231e:	443b      	add	r3, r7
 8002320:	3b90      	subs	r3, #144	@ 0x90
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	33f0      	adds	r3, #240	@ 0xf0
 8002334:	443b      	add	r3, r7
 8002336:	3b8c      	subs	r3, #140	@ 0x8c
 8002338:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	33f0      	adds	r3, #240	@ 0xf0
 800234c:	443b      	add	r3, r7
 800234e:	3b88      	subs	r3, #136	@ 0x88
 8002350:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	33f0      	adds	r3, #240	@ 0xf0
 8002364:	443b      	add	r3, r7
 8002366:	3b84      	subs	r3, #132	@ 0x84
 8002368:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	33f0      	adds	r3, #240	@ 0xf0
 800237c:	443b      	add	r3, r7
 800237e:	3b80      	subs	r3, #128	@ 0x80
 8002380:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	33f0      	adds	r3, #240	@ 0xf0
 8002394:	443b      	add	r3, r7
 8002396:	3b7c      	subs	r3, #124	@ 0x7c
 8002398:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	33f0      	adds	r3, #240	@ 0xf0
 80023ac:	443b      	add	r3, r7
 80023ae:	3b7a      	subs	r3, #122	@ 0x7a
 80023b0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	33f0      	adds	r3, #240	@ 0xf0
 80023c4:	443b      	add	r3, r7
 80023c6:	3b78      	subs	r3, #120	@ 0x78
 80023c8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80023cc:	801a      	strh	r2, [r3, #0]
 80023ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	33f0      	adds	r3, #240	@ 0xf0
 80023dc:	443b      	add	r3, r7
 80023de:	3b74      	subs	r3, #116	@ 0x74
 80023e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	33f0      	adds	r3, #240	@ 0xf0
 80023f4:	443b      	add	r3, r7
 80023f6:	3b70      	subs	r3, #112	@ 0x70
 80023f8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80023fc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80023fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002402:	3301      	adds	r3, #1
 8002404:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fff8 	bl	8001400 <lfs_tag_size>
 8002410:	4603      	mov	r3, r0
 8002412:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ffe1 	bl	80013e0 <lfs_tag_id>
 800241e:	4603      	mov	r3, r0
 8002420:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8002424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002428:	60bb      	str	r3, [r7, #8]
            off = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002440:	4b51      	ldr	r3, [pc, #324]	@ (8002588 <lfs_dir_traverse+0x618>)
 8002442:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002446:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800244a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800244e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002452:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8002456:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800245a:	3301      	adds	r3, #1
 800245c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8002460:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8002464:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	b29a      	uxth	r2, r3
 800246c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8002470:	4413      	add	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8002478:	e589      	b.n	8001f8e <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800247a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe ff85 	bl	800138c <lfs_tag_type3>
 8002482:	4603      	mov	r3, r0
 8002484:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002488:	d159      	bne.n	800253e <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002490:	e04b      	b.n	800252a <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8002492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800249a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	461a      	mov	r2, r3
 80024a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024b4:	051c      	lsls	r4, r3, #20
 80024b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ff91 	bl	80013e0 <lfs_tag_id>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80024c6:	4413      	add	r3, r2
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	ea44 0103 	orr.w	r1, r4, r3
 80024ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024e0:	4413      	add	r3, r2
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80024e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	461a      	mov	r2, r3
 80024f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024f8:	4413      	add	r3, r2
 80024fa:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80024fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002500:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002504:	4798      	blx	r3
 8002506:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800250a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800250e:	2b00      	cmp	r3, #0
 8002510:	da02      	bge.n	8002518 <lfs_dir_traverse+0x5a8>
                    return res;
 8002512:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002516:	e10b      	b.n	8002730 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8002518:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d12e      	bne.n	800257e <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002524:	3301      	adds	r3, #1
 8002526:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800252a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe ff67 	bl	8001400 <lfs_tag_size>
 8002532:	4602      	mov	r2, r0
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002538:	4293      	cmp	r3, r2
 800253a:	d3aa      	bcc.n	8002492 <lfs_dir_traverse+0x522>
 800253c:	e527      	b.n	8001f8e <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800253e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8002542:	029a      	lsls	r2, r3, #10
 8002544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002546:	18d1      	adds	r1, r2, r3
 8002548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800254c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002550:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002554:	4798      	blx	r3
 8002556:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800255a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800255e:	2b00      	cmp	r3, #0
 8002560:	da02      	bge.n	8002568 <lfs_dir_traverse+0x5f8>
                return res;
 8002562:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002566:	e0e3      	b.n	8002730 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8002568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <lfs_dir_traverse+0x61c>
 8002570:	e50d      	b.n	8001f8e <lfs_dir_traverse+0x1e>
                continue;
 8002572:	bf00      	nop
 8002574:	e50b      	b.n	8001f8e <lfs_dir_traverse+0x1e>
            continue;
 8002576:	bf00      	nop
 8002578:	e509      	b.n	8001f8e <lfs_dir_traverse+0x1e>
                continue;
 800257a:	bf00      	nop
 800257c:	e507      	b.n	8001f8e <lfs_dir_traverse+0x1e>
                    break;
 800257e:	bf00      	nop
        {
 8002580:	e505      	b.n	8001f8e <lfs_dir_traverse+0x1e>
 8002582:	bf00      	nop
 8002584:	08001eb9 	.word	0x08001eb9
 8002588:	600ffc00 	.word	0x600ffc00
                break;
 800258c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800258e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80ca 	beq.w	800272c <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002598:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	33f0      	adds	r3, #240	@ 0xf0
 80025a8:	443b      	add	r3, r7
 80025aa:	3b98      	subs	r3, #152	@ 0x98
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80025b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025b4:	1e5a      	subs	r2, r3, #1
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	33f0      	adds	r3, #240	@ 0xf0
 80025c0:	443b      	add	r3, r7
 80025c2:	3b94      	subs	r3, #148	@ 0x94
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80025c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	33f0      	adds	r3, #240	@ 0xf0
 80025d8:	443b      	add	r3, r7
 80025da:	3b90      	subs	r3, #144	@ 0x90
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80025e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	33f0      	adds	r3, #240	@ 0xf0
 80025f0:	443b      	add	r3, r7
 80025f2:	3b8c      	subs	r3, #140	@ 0x8c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 80025fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80025fe:	1e5a      	subs	r2, r3, #1
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	33f0      	adds	r3, #240	@ 0xf0
 800260a:	443b      	add	r3, r7
 800260c:	3b88      	subs	r3, #136	@ 0x88
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8002614:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	33f0      	adds	r3, #240	@ 0xf0
 8002624:	443b      	add	r3, r7
 8002626:	3b84      	subs	r3, #132	@ 0x84
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800262e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	33f0      	adds	r3, #240	@ 0xf0
 800263e:	443b      	add	r3, r7
 8002640:	3b80      	subs	r3, #128	@ 0x80
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8002648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	33f0      	adds	r3, #240	@ 0xf0
 8002658:	443b      	add	r3, r7
 800265a:	3b7c      	subs	r3, #124	@ 0x7c
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8002662:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	33f0      	adds	r3, #240	@ 0xf0
 8002672:	443b      	add	r3, r7
 8002674:	3b7a      	subs	r3, #122	@ 0x7a
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800267c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	33f0      	adds	r3, #240	@ 0xf0
 800268c:	443b      	add	r3, r7
 800268e:	3b78      	subs	r3, #120	@ 0x78
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8002696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800269a:	1e5a      	subs	r2, r3, #1
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	33f0      	adds	r3, #240	@ 0xf0
 80026a6:	443b      	add	r3, r7
 80026a8:	3b74      	subs	r3, #116	@ 0x74
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 80026b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	33f0      	adds	r3, #240	@ 0xf0
 80026c0:	443b      	add	r3, r7
 80026c2:	3b70      	subs	r3, #112	@ 0x70
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 80026ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	33f0      	adds	r3, #240	@ 0xf0
 80026da:	443b      	add	r3, r7
 80026dc:	3b6c      	subs	r3, #108	@ 0x6c
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 80026e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	33f0      	adds	r3, #240	@ 0xf0
 80026f2:	443b      	add	r3, r7
 80026f4:	3b68      	subs	r3, #104	@ 0x68
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 80026fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	33f0      	adds	r3, #240	@ 0xf0
 800270c:	443b      	add	r3, r7
 800270e:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8002712:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002716:	3204      	adds	r2, #4
 8002718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800271c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002724:	3b01      	subs	r3, #1
 8002726:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800272a:	e596      	b.n	800225a <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800272c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8002730:	4618      	mov	r0, r3
 8002732:	37f4      	adds	r7, #244	@ 0xf4
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	b0a5      	sub	sp, #148	@ 0x94
 800273c:	af04      	add	r7, sp, #16
 800273e:	6178      	str	r0, [r7, #20]
 8002740:	6139      	str	r1, [r7, #16]
 8002742:	60fa      	str	r2, [r7, #12]
 8002744:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00f      	beq.n	8002774 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275c:	429a      	cmp	r2, r3
 800275e:	d206      	bcs.n	800276e <lfs_dir_fetchmatch+0x36>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3304      	adds	r3, #4
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800276e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002772:	e3a4      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002774:	2300      	movs	r3, #0
 8002776:	647b      	str	r3, [r7, #68]	@ 0x44
 8002778:	2300      	movs	r3, #0
 800277a:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8002780:	2300      	movs	r3, #0
 8002782:	677b      	str	r3, [r7, #116]	@ 0x74
 8002784:	e05a      	b.n	800283c <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8002786:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002790:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002792:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002796:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800279c:	2104      	movs	r1, #4
 800279e:	9103      	str	r1, [sp, #12]
 80027a0:	9202      	str	r2, [sp, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	9201      	str	r2, [sp, #4]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2304      	movs	r3, #4
 80027aa:	4602      	mov	r2, r0
 80027ac:	2100      	movs	r1, #0
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7fe f93a 	bl	8000a28 <lfs_bd_read>
 80027b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80027b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3378      	adds	r3, #120	@ 0x78
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	4413      	add	r3, r2
 80027c2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe f8c3 	bl	8000952 <lfs_fromle32>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	3378      	adds	r3, #120	@ 0x78
 80027d4:	f107 0108 	add.w	r1, r7, #8
 80027d8:	440b      	add	r3, r1
 80027da:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80027de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <lfs_dir_fetchmatch+0xb8>
 80027e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80027ea:	d001      	beq.n	80027f0 <lfs_dir_fetchmatch+0xb8>
            return err;
 80027ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ee:	e366      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 80027f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027f2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80027f6:	d01e      	beq.n	8002836 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80027f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	3378      	adds	r3, #120	@ 0x78
 80027fe:	f107 0208 	add.w	r2, r7, #8
 8002802:	4413      	add	r3, r2
 8002804:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800280a:	3301      	adds	r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	bfb8      	it	lt
 8002814:	425b      	neglt	r3, r3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3378      	adds	r3, #120	@ 0x78
 800281a:	f107 0108 	add.w	r1, r7, #8
 800281e:	440b      	add	r3, r1
 8002820:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f7fe f885 	bl	8000936 <lfs_scmp>
 800282c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	dd01      	ble.n	8002836 <lfs_dir_fetchmatch+0xfe>
            r = i;
 8002832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002834:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8002836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002838:	3301      	adds	r3, #1
 800283a:	677b      	str	r3, [r7, #116]	@ 0x74
 800283c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800283e:	2b01      	cmp	r3, #1
 8002840:	dda1      	ble.n	8002786 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002844:	2b00      	cmp	r3, #0
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	bfb8      	it	lt
 800284c:	425b      	neglt	r3, r3
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800285a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800285c:	3301      	adds	r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	bfb8      	it	lt
 8002866:	425b      	neglt	r3, r3
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002876:	2b00      	cmp	r3, #0
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	bfb8      	it	lt
 800287e:	425b      	neglt	r3, r3
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	3378      	adds	r3, #120	@ 0x78
 8002884:	f107 0208 	add.w	r2, r7, #8
 8002888:	4413      	add	r3, r2
 800288a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002898:	2300      	movs	r3, #0
 800289a:	673b      	str	r3, [r7, #112]	@ 0x70
 800289c:	e2fb      	b.n	8002e96 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80028ae:	4aa9      	ldr	r2, [pc, #676]	@ (8002b54 <lfs_dir_fetchmatch+0x41c>)
 80028b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80028b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028b8:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 80028c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f846 	bl	8000968 <lfs_tole32>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	3308      	adds	r3, #8
 80028e6:	2204      	movs	r2, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 30ff 	mov.w	r0, #4294967295
 80028ee:	f004 fe53 	bl	8007598 <lfs_crc>
 80028f2:	4603      	mov	r3, r0
 80028f4:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe f829 	bl	8000952 <lfs_fromle32>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002906:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002908:	f7fe fd87 	bl	800141a <lfs_tag_dsize>
 800290c:	4602      	mov	r2, r0
 800290e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002910:	4413      	add	r3, r2
 8002912:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8002914:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800291a:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2204      	movs	r2, #4
 8002922:	9203      	str	r2, [sp, #12]
 8002924:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002928:	9202      	str	r2, [sp, #8]
 800292a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800292c:	9201      	str	r2, [sp, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4603      	mov	r3, r0
 8002932:	460a      	mov	r2, r1
 8002934:	2100      	movs	r1, #0
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7fe f876 	bl	8000a28 <lfs_bd_read>
 800293c:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800293e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8002944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002946:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800294a:	f000 81d6 	beq.w	8002cfa <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800294e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002950:	e2b5      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002958:	2204      	movs	r2, #4
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fe1c 	bl	8007598 <lfs_crc>
 8002960:	4603      	mov	r3, r0
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe f80a 	bl	8000980 <lfs_frombe32>
 800296c:	4602      	mov	r2, r0
 800296e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002970:	4053      	eors	r3, r2
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fcc7 	bl	800130a <lfs_tag_isvalid>
 800297c:	4603      	mov	r3, r0
 800297e:	f083 0301 	eor.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8002988:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800298a:	f7fe fcef 	bl	800136c <lfs_tag_type2>
 800298e:	4603      	mov	r3, r0
 8002990:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800299e:	e1bb      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80029a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fd39 	bl	800141a <lfs_tag_dsize>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ac:	441a      	add	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f200 81a2 	bhi.w	8002cfe <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fcd3 	bl	800136c <lfs_tag_type2>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80029cc:	d15e      	bne.n	8002a8c <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80029ce:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029dc:	3204      	adds	r2, #4
 80029de:	2104      	movs	r1, #4
 80029e0:	9103      	str	r1, [sp, #12]
 80029e2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80029e6:	9102      	str	r1, [sp, #8]
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4623      	mov	r3, r4
 80029ee:	4602      	mov	r2, r0
 80029f0:	2100      	movs	r1, #0
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7fe f818 	bl	8000a28 <lfs_bd_read>
 80029f8:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80029fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 8002a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a02:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002a06:	f000 817c 	beq.w	8002d02 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8002a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8002a0c:	e257      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 8002a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd ff9e 	bl	8000952 <lfs_fromle32>
 8002a16:	4603      	mov	r3, r0
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8002a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	f040 8171 	bne.w	8002d06 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fcc0 	bl	80013ac <lfs_tag_chunk>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	07db      	lsls	r3, r3, #31
 8002a30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a32:	4053      	eors	r3, r2
 8002a34:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fda9 	bl	8007598 <lfs_crc>
 8002a46:	4602      	mov	r2, r0
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fce1 	bl	800141a <lfs_tag_dsize>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5c:	441a      	add	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a66:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8002a6e:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002a70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002a76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8002a82:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a8a:	e73c      	b.n	8002906 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002a8c:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	681c      	ldr	r4, [r3, #0]
 8002a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9c:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fcba 	bl	800141a <lfs_tag_dsize>
 8002aa6:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002aa8:	3b04      	subs	r3, #4
 8002aaa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002aae:	9203      	str	r2, [sp, #12]
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	9501      	str	r5, [sp, #4]
 8002ab4:	9400      	str	r4, [sp, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4632      	mov	r2, r6
 8002aba:	2100      	movs	r1, #0
 8002abc:	6978      	ldr	r0, [r7, #20]
 8002abe:	f7fe f950 	bl	8000d62 <lfs_bd_crc>
 8002ac2:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8002ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8002aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002acc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002ad0:	f000 811b 	beq.w	8002d0a <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8002ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ad6:	e1f2      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fc36 	bl	800134c <lfs_tag_type1>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fc79 	bl	80013e0 <lfs_tag_id>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002af6:	4293      	cmp	r3, r2
 8002af8:	f200 80b6 	bhi.w	8002c68 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fc6e 	bl	80013e0 <lfs_tag_id>
 8002b04:	4603      	mov	r3, r0
 8002b06:	3301      	adds	r3, #1
 8002b08:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002b0c:	e0ac      	b.n	8002c68 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fc1b 	bl	800134c <lfs_tag_type1>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1c:	d13a      	bne.n	8002b94 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8002b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fc50 	bl	80013c6 <lfs_tag_splice>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002b2e:	4413      	add	r3, r2
 8002b30:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002b34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b36:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <lfs_dir_fetchmatch+0x420>)
 8002b38:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002b3a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8002b3e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8002b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d109      	bne.n	8002b5c <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8002b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b50:	e08a      	b.n	8002c68 <lfs_dir_fetchmatch+0x530>
 8002b52:	bf00      	nop
 8002b54:	08009f18 	.word	0x08009f18
 8002b58:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002b5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	f000 8081 	beq.w	8002c68 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fc39 	bl	80013e0 <lfs_tag_id>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461c      	mov	r4, r3
 8002b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fc33 	bl	80013e0 <lfs_tag_id>
 8002b7a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002b7c:	429c      	cmp	r4, r3
 8002b7e:	d873      	bhi.n	8002c68 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fc1f 	bl	80013c6 <lfs_tag_splice>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	029a      	lsls	r2, r3, #10
 8002b8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b8e:	4413      	add	r3, r2
 8002b90:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b92:	e069      	b.n	8002c68 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fbd8 	bl	800134c <lfs_tag_type1>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ba2:	d132      	bne.n	8002c0a <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fc00 	bl	80013ac <lfs_tag_chunk>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 8002bbe:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bcc:	3204      	adds	r2, #4
 8002bce:	2108      	movs	r1, #8
 8002bd0:	9103      	str	r1, [sp, #12]
 8002bd2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002bd6:	9102      	str	r1, [sp, #8]
 8002bd8:	9201      	str	r2, [sp, #4]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4623      	mov	r3, r4
 8002bde:	4602      	mov	r2, r0
 8002be0:	2100      	movs	r1, #0
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7fd ff20 	bl	8000a28 <lfs_bd_read>
 8002be8:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8002bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002bf6:	f000 808a 	beq.w	8002d0e <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8002bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bfc:	e15f      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8002bfe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fb4d 	bl	80012a2 <lfs_pair_fromle32>
 8002c08:	e02e      	b.n	8002c68 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fbbd 	bl	800138c <lfs_tag_type3>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d124      	bne.n	8002c68 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8002c1e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c24:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c2c:	3204      	adds	r2, #4
 8002c2e:	2108      	movs	r1, #8
 8002c30:	9103      	str	r1, [sp, #12]
 8002c32:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002c36:	9102      	str	r1, [sp, #8]
 8002c38:	9201      	str	r2, [sp, #4]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	4602      	mov	r2, r0
 8002c40:	2100      	movs	r1, #0
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7fd fef0 	bl	8000a28 <lfs_bd_read>
 8002c48:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8002c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c52:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002c56:	d05c      	beq.n	8002d12 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002c58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fcd5 	bl	800160c <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c6e:	405a      	eors	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f ae46 	bne.w	8002906 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c80:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c84:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c88:	f107 0220 	add.w	r2, r7, #32
 8002c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002c94:	4798      	blx	r3
 8002c96:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 8002c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da05      	bge.n	8002caa <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002ca4:	d037      	beq.n	8002d16 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 8002ca8:	e109      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8002caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cb4:	e627      	b.n	8002906 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cba:	405a      	eors	r2, r3
 8002cbc:	4b82      	ldr	r3, [pc, #520]	@ (8002ec8 <lfs_dir_fetchmatch+0x790>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cca:	e61c      	b.n	8002906 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	f47f ae19 	bne.w	8002906 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fb82 	bl	80013e0 <lfs_tag_id>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461c      	mov	r4, r3
 8002ce0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fb7c 	bl	80013e0 <lfs_tag_id>
 8002ce8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002cea:	429c      	cmp	r4, r3
 8002cec:	f63f ae0b 	bhi.w	8002906 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cf8:	e605      	b.n	8002906 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8002cfa:	bf00      	nop
 8002cfc:	e00c      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                break;
 8002cfe:	bf00      	nop
 8002d00:	e00a      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002d02:	bf00      	nop
 8002d04:	e008      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002d06:	bf00      	nop
 8002d08:	e006      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002d0a:	bf00      	nop
 8002d0c:	e004      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002d0e:	bf00      	nop
 8002d10:	e002      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002d16:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d000      	beq.n	8002d22 <lfs_dir_fetchmatch+0x5ea>
 8002d20:	e017      	b.n	8002d52 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fa35 	bl	8001194 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002d2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	bfb8      	it	lt
 8002d36:	425b      	neglt	r3, r3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	3378      	adds	r3, #120	@ 0x78
 8002d3c:	f107 0208 	add.w	r2, r7, #8
 8002d40:	4413      	add	r3, r2
 8002d42:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d50:	e0a1      	b.n	8002e96 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2200      	movs	r2, #0
 8002d56:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002d58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03a      	beq.n	8002dd6 <lfs_dir_fetchmatch+0x69e>
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d68:	6992      	ldr	r2, [r2, #24]
 8002d6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d6e:	fb01 f202 	mul.w	r2, r1, r2
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d12e      	bne.n	8002dd6 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002d78:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02a      	beq.n	8002dd6 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002d86:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8c:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d98:	f107 001c 	add.w	r0, r7, #28
 8002d9c:	9003      	str	r0, [sp, #12]
 8002d9e:	9102      	str	r1, [sp, #8]
 8002da0:	9201      	str	r2, [sp, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	462b      	mov	r3, r5
 8002da6:	4622      	mov	r2, r4
 8002da8:	2100      	movs	r1, #0
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f7fd ffd9 	bl	8000d62 <lfs_bd_crc>
 8002db0:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <lfs_dir_fetchmatch+0x68c>
 8002db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dba:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8002dbe:	d001      	beq.n	8002dc4 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8002dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc2:	e07c      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	333c      	adds	r3, #60	@ 0x3c
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fbb4 	bl	800154c <lfs_gstate_hasmovehere>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d028      	beq.n	8002e3c <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe faf6 	bl	80013e0 <lfs_tag_id>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461c      	mov	r4, r3
 8002df8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe faf0 	bl	80013e0 <lfs_tag_id>
 8002e00:	4603      	mov	r3, r0
 8002e02:	429c      	cmp	r4, r3
 8002e04:	d104      	bne.n	8002e10 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8002e06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e0e:	e015      	b.n	8002e3c <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8002e10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d011      	beq.n	8002e3c <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fadf 	bl	80013e0 <lfs_tag_id>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461c      	mov	r4, r3
 8002e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fad9 	bl	80013e0 <lfs_tag_id>
 8002e2e:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002e30:	429c      	cmp	r4, r3
 8002e32:	d203      	bcs.n	8002e3c <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e36:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe faca 	bl	80013e0 <lfs_tag_id>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	8a9b      	ldrh	r3, [r3, #20]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7fd fd0b 	bl	8000872 <lfs_min>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e64:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002e66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe fa4e 	bl	800130a <lfs_tag_isvalid>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8002e74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e76:	e022      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002e78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fab0 	bl	80013e0 <lfs_tag_id>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	8a9b      	ldrh	r3, [r3, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d202      	bcs.n	8002e92 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8002e8c:	f06f 0301 	mvn.w	r3, #1
 8002e90:	e015      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e013      	b.n	8002ebe <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8002e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f77f ad00 	ble.w	800289e <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4909      	ldr	r1, [pc, #36]	@ (8002ecc <lfs_dir_fetchmatch+0x794>)
 8002ea8:	9101      	str	r1, [sp, #4]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	f240 5265 	movw	r2, #1381	@ 0x565
 8002eb2:	4907      	ldr	r1, [pc, #28]	@ (8002ed0 <lfs_dir_fetchmatch+0x798>)
 8002eb4:	4807      	ldr	r0, [pc, #28]	@ (8002ed4 <lfs_dir_fetchmatch+0x79c>)
 8002eb6:	f006 f8dd 	bl	8009074 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002eba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3784      	adds	r7, #132	@ 0x84
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	7ffffc00 	.word	0x7ffffc00
 8002ecc:	08009ed4 	.word	0x08009ed4
 8002ed0:	08009d8c 	.word	0x08009d8c
 8002ed4:	08009ee0 	.word	0x08009ee0

08002ed8 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af04      	add	r7, sp, #16
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	2300      	movs	r3, #0
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff fc1a 	bl	8002738 <lfs_dir_fetchmatch>
 8002f04:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08a      	sub	sp, #40	@ 0x28
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <lfs_dir_getgstate+0x5c>)
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <lfs_dir_getgstate+0x60>)
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7fe fecf 	bl	8001ccc <lfs_dir_get>
 8002f2e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	da05      	bge.n	8002f42 <lfs_dir_getgstate+0x32>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f113 0f02 	cmn.w	r3, #2
 8002f3c:	d001      	beq.n	8002f42 <lfs_dir_getgstate+0x32>
        return res;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	e00f      	b.n	8002f62 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f113 0f02 	cmn.w	r3, #2
 8002f48:	d00a      	beq.n	8002f60 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fb1c 	bl	800158c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe fa71 	bl	8001442 <lfs_gstate_xor>
    }

    return 0;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	7ff0000c 	.word	0x7ff0000c
 8002f70:	7ff00000 	.word	0x7ff00000

08002f74 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08f      	sub	sp, #60	@ 0x3c
 8002f78:	af04      	add	r7, sp, #16
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	689c      	ldr	r4, [r3, #8]
 8002f92:	68b8      	ldr	r0, [r7, #8]
 8002f94:	f7fe fa34 	bl	8001400 <lfs_tag_size>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f7fd fc68 	bl	8000872 <lfs_min>
 8002fa2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002fa4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8002fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb0:	6849      	ldr	r1, [r1, #4]
 8002fb2:	69b8      	ldr	r0, [r7, #24]
 8002fb4:	9003      	str	r0, [sp, #12]
 8002fb6:	9102      	str	r1, [sp, #8]
 8002fb8:	9201      	str	r2, [sp, #4]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	6a38      	ldr	r0, [r7, #32]
 8002fc4:	f7fd fe7c 	bl	8000cc0 <lfs_bd_cmp>
 8002fc8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <lfs_dir_find_match+0x60>
        return res;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	e014      	b.n	8002ffe <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	689c      	ldr	r4, [r3, #8]
 8002fd8:	68b8      	ldr	r0, [r7, #8]
 8002fda:	f7fe fa11 	bl	8001400 <lfs_tag_size>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	429c      	cmp	r4, r3
 8002fe2:	d00b      	beq.n	8002ffc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	689c      	ldr	r4, [r3, #8]
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f7fe fa09 	bl	8001400 <lfs_tag_size>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	429c      	cmp	r4, r3
 8002ff2:	d201      	bcs.n	8002ff8 <lfs_dir_find_match+0x84>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e002      	b.n	8002ffe <lfs_dir_find_match+0x8a>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e000      	b.n	8002ffe <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	372c      	adds	r7, #44	@ 0x2c
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}
	...

08003008 <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	@ 0x48
 800300c:	af04      	add	r7, sp, #16
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800301c:	4b76      	ldr	r3, [pc, #472]	@ (80031f8 <lfs_dir_find+0x1f0>)
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 8003030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <lfs_dir_find+0x34>
        return LFS_ERR_INVAL;
    }

    while (true) {
nextname:
 8003038:	bf00      	nop
 800303a:	e002      	b.n	8003042 <lfs_dir_find+0x3a>
        return LFS_ERR_INVAL;
 800303c:	f06f 0315 	mvn.w	r3, #21
 8003040:	e0d6      	b.n	80031f0 <lfs_dir_find+0x1e8>
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe f9a1 	bl	800138c <lfs_tag_type3>
 800304a:	4603      	mov	r3, r0
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <lfs_dir_find+0x58>
            name += strspn(name, "/");
 8003050:	496a      	ldr	r1, [pc, #424]	@ (80031fc <lfs_dir_find+0x1f4>)
 8003052:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003054:	f006 f88c 	bl	8009170 <strspn>
 8003058:	4602      	mov	r2, r0
 800305a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305c:	4413      	add	r3, r2
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 8003060:	4966      	ldr	r1, [pc, #408]	@ (80031fc <lfs_dir_find+0x1f4>)
 8003062:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003064:	f006 f873 	bl	800914e <strcspn>
 8003068:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10a      	bne.n	8003086 <lfs_dir_find+0x7e>
 8003070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	4b62      	ldr	r3, [pc, #392]	@ (8003200 <lfs_dir_find+0x1f8>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d104      	bne.n	8003086 <lfs_dir_find+0x7e>
            name += namelen;
 800307c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	4413      	add	r3, r2
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8003084:	e7dd      	b.n	8003042 <lfs_dir_find+0x3a>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	2b02      	cmp	r3, #2
 800308a:	d10a      	bne.n	80030a2 <lfs_dir_find+0x9a>
 800308c:	2202      	movs	r2, #2
 800308e:	495d      	ldr	r1, [pc, #372]	@ (8003204 <lfs_dir_find+0x1fc>)
 8003090:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003092:	f006 f844 	bl	800911e <memcmp>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <lfs_dir_find+0x9a>
            return LFS_ERR_INVAL;
 800309c:	f06f 0315 	mvn.w	r3, #21
 80030a0:	e0a6      	b.n	80031f0 <lfs_dir_find+0x1e8>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80030a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	4413      	add	r3, r2
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80030ae:	4953      	ldr	r1, [pc, #332]	@ (80031fc <lfs_dir_find+0x1f4>)
 80030b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030b2:	f006 f85d 	bl	8009170 <strspn>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ba:	4413      	add	r3, r2
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 80030be:	494f      	ldr	r1, [pc, #316]	@ (80031fc <lfs_dir_find+0x1f4>)
 80030c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030c2:	f006 f844 	bl	800914e <strcspn>
 80030c6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d026      	beq.n	800311c <lfs_dir_find+0x114>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <lfs_dir_find+0xd8>
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <lfs_dir_find+0x1f8>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d018      	beq.n	8003112 <lfs_dir_find+0x10a>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d112      	bne.n	800310c <lfs_dir_find+0x104>
 80030e6:	2202      	movs	r2, #2
 80030e8:	4946      	ldr	r1, [pc, #280]	@ (8003204 <lfs_dir_find+0x1fc>)
 80030ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030ec:	f006 f817 	bl	800911e <memcmp>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <lfs_dir_find+0x104>
                depth -= 1;
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <lfs_dir_find+0x10a>
                    name = suffix + sufflen;
 8003102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	4413      	add	r3, r2
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800310a:	e79a      	b.n	8003042 <lfs_dir_find+0x3a>
                }
            } else {
                depth += 1;
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	3301      	adds	r3, #1
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8003112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	4413      	add	r3, r2
 8003118:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800311a:	e7c8      	b.n	80030ae <lfs_dir_find+0xa6>
                break;
 800311c:	bf00      	nop
        }

        // found path
        if (*name == '\0') {
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <lfs_dir_find+0x122>
            return tag;
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	e062      	b.n	80031f0 <lfs_dir_find+0x1e8>
        }

        // update what we've found so far
        *path = name;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800312e:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe f92a 	bl	800138c <lfs_tag_type3>
 8003138:	4603      	mov	r3, r0
 800313a:	2b02      	cmp	r3, #2
 800313c:	d002      	beq.n	8003144 <lfs_dir_find+0x13c>
            return LFS_ERR_NOTDIR;
 800313e:	f06f 0313 	mvn.w	r3, #19
 8003142:	e055      	b.n	80031f0 <lfs_dir_find+0x1e8>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f94a 	bl	80013e0 <lfs_tag_id>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003154:	429a      	cmp	r2, r3
 8003156:	d01c      	beq.n	8003192 <lfs_dir_find+0x18a>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f940 	bl	80013e0 <lfs_tag_id>
 8003160:	4603      	mov	r3, r0
 8003162:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003168:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003170:	9200      	str	r2, [sp, #0]
 8003172:	4a25      	ldr	r2, [pc, #148]	@ (8003208 <lfs_dir_find+0x200>)
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7fe fda8 	bl	8001ccc <lfs_dir_get>
 800317c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da01      	bge.n	8003188 <lfs_dir_find+0x180>
                return res;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	e033      	b.n	80031f0 <lfs_dir_find+0x1e8>
            }
            lfs_pair_fromle32(dir->tail);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3318      	adds	r3, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe f888 	bl	80012a2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f103 0218 	add.w	r2, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	61bb      	str	r3, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	9303      	str	r3, [sp, #12]
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <lfs_dir_find+0x204>)
 80031ac:	9302      	str	r3, [sp, #8]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff fabb 	bl	8002738 <lfs_dir_fetchmatch>
 80031c2:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80031c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da01      	bge.n	80031ce <lfs_dir_find+0x1c6>
                return tag;
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	e010      	b.n	80031f0 <lfs_dir_find+0x1e8>
            }

            if (tag) {
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <lfs_dir_find+0x1d6>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80031d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	4413      	add	r3, r2
 80031da:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80031dc:	e731      	b.n	8003042 <lfs_dir_find+0x3a>
            if (!dir->split) {
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	7ddb      	ldrb	r3, [r3, #23]
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0d2      	beq.n	8003192 <lfs_dir_find+0x18a>
                return LFS_ERR_NOENT;
 80031ec:	f06f 0301 	mvn.w	r3, #1
    }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3738      	adds	r7, #56	@ 0x38
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	002ffc00 	.word	0x002ffc00
 80031fc:	08009ea4 	.word	0x08009ea4
 8003200:	08009f20 	.word	0x08009f20
 8003204:	08009f24 	.word	0x08009f24
 8003208:	700ffc00 	.word	0x700ffc00
 800320c:	08002f75 	.word	0x08002f75

08003210 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b08b      	sub	sp, #44	@ 0x2c
 8003214:	af04      	add	r7, sp, #16
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f103 0010 	add.w	r0, r3, #16
 8003224:	68fc      	ldr	r4, [r7, #12]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	6852      	ldr	r2, [r2, #4]
 800322e:	6839      	ldr	r1, [r7, #0]
 8003230:	9103      	str	r1, [sp, #12]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	9102      	str	r1, [sp, #8]
 8003236:	9201      	str	r2, [sp, #4]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2300      	movs	r3, #0
 800323c:	4622      	mov	r2, r4
 800323e:	4601      	mov	r1, r0
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7fd fe83 	bl	8000f4c <lfs_bd_prog>
 8003246:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <lfs_dir_commitprog+0x42>
        return err;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e010      	b.n	8003274 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f004 f99c 	bl	8007598 <lfs_crc>
 8003260:	4602      	mov	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	441a      	add	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	605a      	str	r2, [r3, #4]
    return 0;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}

0800327c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b08f      	sub	sp, #60	@ 0x3c
 8003280:	af04      	add	r7, sp, #16
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe f8c5 	bl	800141a <lfs_tag_dsize>
 8003290:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	441a      	add	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d902      	bls.n	80032a8 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80032a2:	f06f 031b 	mvn.w	r3, #27
 80032a6:	e065      	b.n	8003374 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4053      	eors	r3, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fb6f 	bl	8000998 <lfs_tobe32>
 80032ba:	4603      	mov	r3, r0
 80032bc:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80032be:	f107 0214 	add.w	r2, r7, #20
 80032c2:	2304      	movs	r3, #4
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7ff ffa2 	bl	8003210 <lfs_dir_commitprog>
 80032cc:	61f8      	str	r0, [r7, #28]
    if (err) {
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <lfs_dir_commitattr+0x5c>
        return err;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	e04d      	b.n	8003374 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	db0c      	blt.n	80032f8 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	3b04      	subs	r3, #4
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff92 	bl	8003210 <lfs_dir_commitprog>
 80032ec:	61f8      	str	r0, [r7, #28]
        if (err) {
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d039      	beq.n	8003368 <lfs_dir_commitattr+0xec>
            return err;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	e03d      	b.n	8003374 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	e02d      	b.n	800335e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8003302:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800330a:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003316:	440a      	add	r2, r1
 8003318:	2101      	movs	r1, #1
 800331a:	9103      	str	r1, [sp, #12]
 800331c:	f107 0113 	add.w	r1, r7, #19
 8003320:	9102      	str	r1, [sp, #8]
 8003322:	9201      	str	r2, [sp, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4623      	mov	r3, r4
 8003328:	4602      	mov	r2, r0
 800332a:	2100      	movs	r1, #0
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7fd fb7b 	bl	8000a28 <lfs_bd_read>
 8003332:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <lfs_dir_commitattr+0xc2>
                return err;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	e01a      	b.n	8003374 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800333e:	f107 0213 	add.w	r2, r7, #19
 8003342:	2301      	movs	r3, #1
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff ff62 	bl	8003210 <lfs_dir_commitprog>
 800334c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <lfs_dir_commitattr+0xdc>
                return err;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	e00d      	b.n	8003374 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	3301      	adds	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	3b04      	subs	r3, #4
 8003362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003364:	429a      	cmp	r2, r3
 8003366:	d3cc      	bcc.n	8003302 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
    return 0;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	372c      	adds	r7, #44	@ 0x2c
 8003378:	46bd      	mov	sp, r7
 800337a:	bd90      	pop	{r4, r7, pc}

0800337c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b097      	sub	sp, #92	@ 0x5c
 8003380:	af04      	add	r7, sp, #16
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800338a:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003392:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fd fa6b 	bl	8000872 <lfs_min>
 800339c:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033a2:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7fd fa88 	bl	80008bc <lfs_alignup>
 80033ac:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80033b6:	e0fe      	b.n	80035b6 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	3b04      	subs	r3, #4
 80033c2:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fa53 	bl	8000872 <lfs_min>
 80033cc:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4413      	add	r3, r2
        lfs_off_t noff = (
 80033d4:	3304      	adds	r3, #4
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80033d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033dc:	429a      	cmp	r2, r3
 80033de:	d206      	bcs.n	80033ee <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e2:	3b14      	subs	r3, #20
 80033e4:	4619      	mov	r1, r3
 80033e6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033e8:	f7fd fa43 	bl	8000872 <lfs_min>
 80033ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80033ee:	23ff      	movs	r3, #255	@ 0xff
 80033f0:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80033f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d35f      	bcc.n	80034ba <lfs_dir_commitcrc+0x13e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800340a:	429a      	cmp	r2, r3
 800340c:	d855      	bhi.n	80034ba <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800340e:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003414:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	9203      	str	r2, [sp, #12]
 800341e:	f107 021b 	add.w	r2, r7, #27
 8003422:	9202      	str	r2, [sp, #8]
 8003424:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4603      	mov	r3, r0
 800342c:	460a      	mov	r2, r1
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7fd faf9 	bl	8000a28 <lfs_bd_read>
 8003436:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <lfs_dir_commitcrc+0xce>
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003444:	d001      	beq.n	800344a <lfs_dir_commitcrc+0xce>
                return err;
 8003446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003448:	e101      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800344e:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003458:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800345e:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	f107 0108 	add.w	r1, r7, #8
 800346a:	3104      	adds	r1, #4
 800346c:	9103      	str	r1, [sp, #12]
 800346e:	9202      	str	r2, [sp, #8]
 8003470:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003472:	9201      	str	r2, [sp, #4]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	4623      	mov	r3, r4
 8003478:	4602      	mov	r2, r0
 800347a:	2100      	movs	r1, #0
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd fc70 	bl	8000d62 <lfs_bd_crc>
 8003482:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <lfs_dir_commitcrc+0x11a>
 800348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003490:	d001      	beq.n	8003496 <lfs_dir_commitcrc+0x11a>
                    return err;
 8003492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003494:	e010      	b.n	80034b8 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f8ce 	bl	800163c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	4a6c      	ldr	r2, [pc, #432]	@ (8003658 <lfs_dir_commitcrc+0x2dc>)
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fee7 	bl	800327c <lfs_dir_commitattr>
 80034ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80034b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <lfs_dir_commitcrc+0x13e>
                    return err;
 80034b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80034b8:	e0c9      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80034ba:	7efb      	ldrb	r3, [r7, #27]
 80034bc:	43db      	mvns	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	09db      	lsrs	r3, r3, #7
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c8:	051a      	lsls	r2, r3, #20
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d0:	1acb      	subs	r3, r1, r3
 80034d2:	3b04      	subs	r3, #4
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 80034da:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	4053      	eors	r3, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fa55 	bl	8000998 <lfs_tobe32>
 80034ee:	4603      	mov	r3, r0
 80034f0:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f107 0110 	add.w	r1, r7, #16
 80034fa:	2204      	movs	r2, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 f84b 	bl	8007598 <lfs_crc>
 8003502:	4602      	mov	r2, r0
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fa2b 	bl	8000968 <lfs_tole32>
 8003512:	4603      	mov	r3, r0
 8003514:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f103 0010 	add.w	r0, r3, #16
 800351c:	687c      	ldr	r4, [r7, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6852      	ldr	r2, [r2, #4]
 8003526:	2108      	movs	r1, #8
 8003528:	9103      	str	r1, [sp, #12]
 800352a:	f107 0110 	add.w	r1, r7, #16
 800352e:	9102      	str	r1, [sp, #8]
 8003530:	9201      	str	r2, [sp, #4]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	4622      	mov	r2, r4
 8003538:	4601      	mov	r1, r0
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fd06 	bl	8000f4c <lfs_bd_prog>
 8003540:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <lfs_dir_commitcrc+0x1d0>
            return err;
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	e080      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800354c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003564:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003566:	7efb      	ldrb	r3, [r7, #27]
 8003568:	43db      	mvns	r3, r3
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	405a      	eors	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f04f 32ff 	mov.w	r2, #4294967295
 800357e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8003580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003584:	429a      	cmp	r2, r3
 8003586:	d208      	bcs.n	800359a <lfs_dir_commitcrc+0x21e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	4413      	add	r3, r2
 8003594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003596:	429a      	cmp	r2, r3
 8003598:	d30d      	bcc.n	80035b6 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f103 0110 	add.w	r1, r3, #16
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	2300      	movs	r3, #0
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fc9d 	bl	8000ee4 <lfs_bd_sync>
 80035aa:	6238      	str	r0, [r7, #32]
            if (err) {
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <lfs_dir_commitcrc+0x23a>
                return err;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	e04b      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035bc:	429a      	cmp	r2, r3
 80035be:	f63f aefb 	bhi.w	80033b8 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d2:	1d1c      	adds	r4, r3, #4
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035dc:	1a8a      	subs	r2, r1, r2
 80035de:	f107 011c 	add.w	r1, r7, #28
 80035e2:	9103      	str	r1, [sp, #12]
 80035e4:	9202      	str	r2, [sp, #8]
 80035e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035e8:	9201      	str	r2, [sp, #4]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	4623      	mov	r3, r4
 80035ee:	4602      	mov	r2, r0
 80035f0:	2100      	movs	r1, #0
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fbb5 	bl	8000d62 <lfs_bd_crc>
 80035f8:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <lfs_dir_commitcrc+0x288>
        return err;
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	e024      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003608:	429a      	cmp	r2, r3
 800360a:	d002      	beq.n	8003612 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800360c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003610:	e01d      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f107 021c 	add.w	r2, r7, #28
 800361c:	9203      	str	r2, [sp, #12]
 800361e:	2204      	movs	r2, #4
 8003620:	9202      	str	r2, [sp, #8]
 8003622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003624:	9201      	str	r2, [sp, #4]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2304      	movs	r3, #4
 800362a:	460a      	mov	r2, r1
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fb97 	bl	8000d62 <lfs_bd_crc>
 8003634:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <lfs_dir_commitcrc+0x2c4>
        return err;
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	e006      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003646:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800364a:	e000      	b.n	800364e <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	374c      	adds	r7, #76	@ 0x4c
 8003652:	46bd      	mov	sp, r7
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	bf00      	nop
 8003658:	5ffffc08 	.word	0x5ffffc08

0800365c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af04      	add	r7, sp, #16
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e016      	b.n	800369a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	bfb8      	it	lt
 8003678:	425b      	neglt	r3, r3
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	4413      	add	r3, r2
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe f9a4 	bl	80019d0 <lfs_alloc>
 8003688:	60f8      	str	r0, [r7, #12]
        if (err) {
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <lfs_dir_alloc+0x38>
            return err;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	e058      	b.n	8003746 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3301      	adds	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b01      	cmp	r3, #1
 800369e:	dde5      	ble.n	800366c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80036b0:	2004      	movs	r0, #4
 80036b2:	9003      	str	r0, [sp, #12]
 80036b4:	9202      	str	r2, [sp, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	9201      	str	r2, [sp, #4]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2304      	movs	r3, #4
 80036be:	460a      	mov	r2, r1
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd f9b0 	bl	8000a28 <lfs_bd_read>
 80036c8:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd f93f 	bl	8000952 <lfs_fromle32>
 80036d4:	4602      	mov	r2, r0
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <lfs_dir_alloc+0x90>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80036e6:	d001      	beq.n	80036ec <lfs_dir_alloc+0x90>
        return err;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	e02c      	b.n	8003746 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	dd0e      	ble.n	8003714 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	3301      	adds	r3, #1
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fd f8d7 	bl	80008bc <lfs_alignup>
 800370e:	4602      	mov	r2, r0
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2204      	movs	r2, #4
 8003718:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f04f 32ff 	mov.w	r2, #4294967295
 8003736:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800374e:	b580      	push	{r7, lr}
 8003750:	b092      	sub	sp, #72	@ 0x48
 8003752:	af04      	add	r7, sp, #16
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4619      	mov	r1, r3
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff ff7a 	bl	800365c <lfs_dir_alloc>
 8003768:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800376a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <lfs_dir_split+0x26>
        return err;
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	e03c      	b.n	80037ee <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	7ddb      	ldrb	r3, [r3, #23]
 8003778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003788:	f107 0110 	add.w	r1, r7, #16
 800378c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f879 	bl	8003898 <lfs_dir_compact>
 80037a6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da01      	bge.n	80037b2 <lfs_dir_split+0x64>
        return res;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	e01d      	b.n	80037ee <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2201      	movs	r2, #1
 80037c2:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3320      	adds	r3, #32
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f7fd fd11 	bl	80011f4 <lfs_pair_cmp>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <lfs_dir_split+0x9e>
 80037d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3738      	adds	r7, #56	@ 0x38
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003806:	68b8      	ldr	r0, [r7, #8]
 8003808:	f7fd fe07 	bl	800141a <lfs_tag_dsize>
 800380c:	4602      	mov	r2, r0
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	441a      	add	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	601a      	str	r2, [r3, #0]
    return 0;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	f7ff fd1d 	bl	800327c <lfs_dir_commitattr>
 8003842:	4603      	mov	r3, r0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800385c:	2b00      	cmp	r3, #0
 800385e:	dd11      	ble.n	8003884 <lfs_dir_needsrelocation+0x38>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800386a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800386c:	3201      	adds	r2, #1
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	fbb3 f1f2 	udiv	r1, r3, r2
 8003876:	fb01 f202 	mul.w	r2, r1, r2
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <lfs_dir_needsrelocation+0x38>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <lfs_dir_needsrelocation+0x3a>
 8003884:	2300      	movs	r3, #0
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b0a4      	sub	sp, #144	@ 0x90
 800389c:	af0a      	add	r7, sp, #40	@ 0x28
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ffcc 	bl	800384c <lfs_dir_needsrelocation>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80038c4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <lfs_dir_compact+0x52>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	657a      	str	r2, [r7, #84]	@ 0x54
 80038d2:	2201      	movs	r2, #1
 80038d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038d6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fc89 	bl	80011f4 <lfs_pair_cmp>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 8155 	bne.w	8003b94 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f0:	2300      	movs	r3, #0
 80038f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003900:	2300      	movs	r3, #0
 8003902:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <lfs_dir_compact+0x80>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003914:	3b08      	subs	r3, #8
 8003916:	e003      	b.n	8003920 <lfs_dir_compact+0x88>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003920:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7fd fbbd 	bl	80010a8 <lfs_bd_erase>
 800392e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8003930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003938:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800393c:	f000 812c 	beq.w	8003b98 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003942:	e188      	b.n	8003c56 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fd f80d 	bl	8000968 <lfs_tole32>
 800394e:	4602      	mov	r2, r0
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800395a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800395e:	2304      	movs	r3, #4
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff fc55 	bl	8003210 <lfs_dir_commitprog>
 8003966:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fff0 	bl	8000952 <lfs_fromle32>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]
            if (err) {
 8003978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800397e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003980:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003984:	f000 810a 	beq.w	8003b9c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800398a:	e164      	b.n	8003c56 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800398c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003990:	425b      	negs	r3, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	637a      	str	r2, [r7, #52]	@ 0x34
 800399a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800399e:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 80039a0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80039a4:	9208      	str	r2, [sp, #32]
 80039a6:	4aae      	ldr	r2, [pc, #696]	@ (8003c60 <lfs_dir_compact+0x3c8>)
 80039a8:	9207      	str	r2, [sp, #28]
 80039aa:	9306      	str	r3, [sp, #24]
 80039ac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80039b0:	9305      	str	r3, [sp, #20]
 80039b2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80039b6:	9304      	str	r3, [sp, #16]
 80039b8:	2300      	movs	r3, #0
 80039ba:	9303      	str	r3, [sp, #12]
 80039bc:	4ba9      	ldr	r3, [pc, #676]	@ (8003c64 <lfs_dir_compact+0x3cc>)
 80039be:	9302      	str	r3, [sp, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	2200      	movs	r2, #0
 80039ce:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7fe facd 	bl	8001f70 <lfs_dir_traverse>
 80039d6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 80039d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d006      	beq.n	80039ec <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80039de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039e0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80039e4:	f000 80dc 	beq.w	8003ba0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80039e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ea:	e134      	b.n	8003c56 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3318      	adds	r3, #24
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fbe4 	bl	80011be <lfs_pair_isnull>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f083 0301 	eor.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d022      	beq.n	8003a48 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3318      	adds	r3, #24
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fc65 	bl	80012d6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	7ddb      	ldrb	r3, [r3, #23]
 8003a10:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003a14:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003a16:	4a94      	ldr	r2, [pc, #592]	@ (8003c68 <lfs_dir_compact+0x3d0>)
 8003a18:	431a      	orrs	r2, r3
                        dir->tail);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003a1e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff fc2a 	bl	800327c <lfs_dir_commitattr>
 8003a28:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd fc37 	bl	80012a2 <lfs_pair_fromle32>
                if (err) {
 8003a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a3c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003a40:	f000 80b0 	beq.w	8003ba4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003a44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a46:	e106      	b.n	8003c56 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003a48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003a54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003a58:	f083 0301 	eor.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8003a68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fce7 	bl	8001442 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003a7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fcde 	bl	8001442 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fcd5 	bl	8001442 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a9e:	f023 0303 	bic.w	r3, r3, #3
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003aa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff fa2f 	bl	8002f10 <lfs_dir_getgstate>
 8003ab2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8003ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <lfs_dir_compact+0x226>
                return err;
 8003aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003abc:	e0cb      	b.n	8003c56 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fcdd 	bl	8001482 <lfs_gstate_iszero>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003ad4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd fd77 	bl	80015cc <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ae2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003ae6:	4a61      	ldr	r2, [pc, #388]	@ (8003c6c <lfs_dir_compact+0x3d4>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fbc7 	bl	800327c <lfs_dir_commitattr>
 8003aee:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003af8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003afc:	d054      	beq.n	8003ba8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b00:	e0a9      	b.n	8003c56 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003b02:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003b06:	4619      	mov	r1, r3
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fc37 	bl	800337c <lfs_dir_commitcrc>
 8003b0e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8003b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b18:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003b1c:	d046      	beq.n	8003bac <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b20:	e099      	b.n	8003c56 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b28:	6992      	ldr	r2, [r2, #24]
 8003b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b2e:	fb01 f202 	mul.w	r2, r1, r2
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d006      	beq.n	8003b46 <lfs_dir_compact+0x2ae>
 8003b38:	4b4d      	ldr	r3, [pc, #308]	@ (8003c70 <lfs_dir_compact+0x3d8>)
 8003b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8003c74 <lfs_dir_compact+0x3dc>)
 8003b3c:	f640 0121 	movw	r1, #2081	@ 0x821
 8003b40:	484d      	ldr	r0, [pc, #308]	@ (8003c78 <lfs_dir_compact+0x3e0>)
 8003b42:	f005 f8e7 	bl	8008d14 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fb23 	bl	8001194 <lfs_pair_swap>
            dir->count = end - begin;
 8003b4e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8003b52:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003b64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3348      	adds	r3, #72	@ 0x48
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003b76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d065      	beq.n	8003c50 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	333c      	adds	r3, #60	@ 0x3c
 8003b8a:	3230      	adds	r2, #48	@ 0x30
 8003b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003b92:	e05d      	b.n	8003c50 <lfs_dir_compact+0x3b8>
        goto relocate;
 8003b94:	bf00      	nop
 8003b96:	e00a      	b.n	8003bae <lfs_dir_compact+0x316>
                    goto relocate;
 8003b98:	bf00      	nop
 8003b9a:	e008      	b.n	8003bae <lfs_dir_compact+0x316>
                    goto relocate;
 8003b9c:	bf00      	nop
 8003b9e:	e006      	b.n	8003bae <lfs_dir_compact+0x316>
                    goto relocate;
 8003ba0:	bf00      	nop
 8003ba2:	e004      	b.n	8003bae <lfs_dir_compact+0x316>
                        goto relocate;
 8003ba4:	bf00      	nop
 8003ba6:	e002      	b.n	8003bae <lfs_dir_compact+0x316>
                        goto relocate;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <lfs_dir_compact+0x316>
                    goto relocate;
 8003bac:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7fc ff0f 	bl	80009de <lfs_cache_drop>
        if (!tired) {
 8003bc0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c7c <lfs_dir_compact+0x3e4>)
 8003bd4:	9200      	str	r2, [sp, #0]
 8003bd6:	f640 0233 	movw	r2, #2099	@ 0x833
 8003bda:	4927      	ldr	r1, [pc, #156]	@ (8003c78 <lfs_dir_compact+0x3e0>)
 8003bdc:	4828      	ldr	r0, [pc, #160]	@ (8003c80 <lfs_dir_compact+0x3e8>)
 8003bde:	f005 fa49 	bl	8009074 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	617a      	str	r2, [r7, #20]
 8003be8:	2201      	movs	r2, #1
 8003bea:	61ba      	str	r2, [r7, #24]
 8003bec:	f107 0214 	add.w	r2, r7, #20
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fafe 	bl	80011f4 <lfs_pair_cmp>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	@ (8003c7c <lfs_dir_compact+0x3e4>)
 8003c04:	9200      	str	r2, [sp, #0]
 8003c06:	f640 0238 	movw	r2, #2104	@ 0x838
 8003c0a:	491b      	ldr	r1, [pc, #108]	@ (8003c78 <lfs_dir_compact+0x3e0>)
 8003c0c:	481d      	ldr	r0, [pc, #116]	@ (8003c84 <lfs_dir_compact+0x3ec>)
 8003c0e:	f005 fa31 	bl	8009074 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003c12:	f06f 031b 	mvn.w	r3, #27
 8003c16:	e01e      	b.n	8003c56 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7fd fed6 	bl	80019d0 <lfs_alloc>
 8003c24:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <lfs_dir_compact+0x3ae>
 8003c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c2e:	f113 0f1c 	cmn.w	r3, #28
 8003c32:	d106      	bne.n	8003c42 <lfs_dir_compact+0x3aa>
 8003c34:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003c38:	f083 0301 	eor.w	r3, r3, #1
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <lfs_dir_compact+0x3ae>
            return err;
 8003c42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c44:	e007      	b.n	8003c56 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8003c4c:	bf00      	nop
    while (true) {
 8003c4e:	e64c      	b.n	80038ea <lfs_dir_compact+0x52>
        break;
 8003c50:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003c52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3768      	adds	r7, #104	@ 0x68
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	08003823 	.word	0x08003823
 8003c64:	400ffc00 	.word	0x400ffc00
 8003c68:	000ffc08 	.word	0x000ffc08
 8003c6c:	7ffffc0c 	.word	0x7ffffc0c
 8003c70:	08009f28 	.word	0x08009f28
 8003c74:	0800abc4 	.word	0x0800abc4
 8003c78:	08009d8c 	.word	0x08009d8c
 8003c7c:	08009ed4 	.word	0x08009ed4
 8003c80:	08009f50 	.word	0x08009f50
 8003c84:	08009f74 	.word	0x08009f74

08003c88 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	b099      	sub	sp, #100	@ 0x64
 8003c8c:	af0a      	add	r7, sp, #40	@ 0x28
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003c96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 8003c9c:	e057      	b.n	8003d4e <lfs_dir_splittingcompact+0xc6>
            lfs_size_t size = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	4252      	negs	r2, r2
 8003cac:	b292      	uxth	r2, r2
 8003cae:	b212      	sxth	r2, r2
 8003cb0:	f107 011c 	add.w	r1, r7, #28
 8003cb4:	9108      	str	r1, [sp, #32]
 8003cb6:	4979      	ldr	r1, [pc, #484]	@ (8003e9c <lfs_dir_splittingcompact+0x214>)
 8003cb8:	9107      	str	r1, [sp, #28]
 8003cba:	9206      	str	r2, [sp, #24]
 8003cbc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003cc0:	9205      	str	r2, [sp, #20]
 8003cc2:	9304      	str	r3, [sp, #16]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9303      	str	r3, [sp, #12]
 8003cc8:	4b75      	ldr	r3, [pc, #468]	@ (8003ea0 <lfs_dir_splittingcompact+0x218>)
 8003cca:	9302      	str	r3, [sp, #8]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd8:	2200      	movs	r2, #0
 8003cda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7fe f947 	bl	8001f70 <lfs_dir_traverse>
 8003ce2:	6338      	str	r0, [r7, #48]	@ 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <lfs_dir_splittingcompact+0x66>
                return err;
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	e0d1      	b.n	8003e92 <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <lfs_dir_splittingcompact+0x78>
                    ? lfs->cfg->metadata_max
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                    : lfs->cfg->block_size;
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfe:	e002      	b.n	8003d06 <lfs_dir_splittingcompact+0x7e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d04:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (end - split < 0xff
 8003d08:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2bfe      	cmp	r3, #254	@ 0xfe
 8003d12:	d814      	bhi.n	8003d3e <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d16:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
 8003d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1c:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d22:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7fc fdc8 	bl	80008bc <lfs_alignup>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4620      	mov	r0, r4
 8003d32:	f7fc fd9e 	bl	8000872 <lfs_min>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20e      	bcs.n	8003d5c <lfs_dir_splittingcompact+0xd4>
                break;
            }

            split = split + ((end - split) / 2);
 8003d3e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d4a:	4413      	add	r3, r2
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 8003d4e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d8a1      	bhi.n	8003c9e <lfs_dir_splittingcompact+0x16>
 8003d5a:	e000      	b.n	8003d5e <lfs_dir_splittingcompact+0xd6>
                break;
 8003d5c:	bf00      	nop
        }

        if (split == begin) {
 8003d5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d02d      	beq.n	8003dc4 <lfs_dir_splittingcompact+0x13c>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003d70:	9202      	str	r2, [sp, #8]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff fce5 	bl	800374e <lfs_dir_split>
 8003d84:	62b8      	str	r0, [r7, #40]	@ 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <lfs_dir_splittingcompact+0x110>
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	f113 0f1c 	cmn.w	r3, #28
 8003d92:	d001      	beq.n	8003d98 <lfs_dir_splittingcompact+0x110>
            return err;
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	e07c      	b.n	8003e92 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8003d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00e      	beq.n	8003dbc <lfs_dir_splittingcompact+0x134>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	493f      	ldr	r1, [pc, #252]	@ (8003ea4 <lfs_dir_splittingcompact+0x21c>)
 8003da8:	9101      	str	r1, [sp, #4]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	f640 028c 	movw	r2, #2188	@ 0x88c
 8003db2:	493d      	ldr	r1, [pc, #244]	@ (8003ea8 <lfs_dir_splittingcompact+0x220>)
 8003db4:	483d      	ldr	r0, [pc, #244]	@ (8003eac <lfs_dir_splittingcompact+0x224>)
 8003db6:	f005 f95d 	bl	8009074 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003dba:	e004      	b.n	8003dc6 <lfs_dir_splittingcompact+0x13e>
        } else {
            end = split;
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    while (true) {
 8003dc2:	e768      	b.n	8003c96 <lfs_dir_splittingcompact+0xe>
            break;
 8003dc4:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff fd3f 	bl	800384c <lfs_dir_needsrelocation>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d04f      	beq.n	8003e74 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	617a      	str	r2, [r7, #20]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	61ba      	str	r2, [r7, #24]
 8003dde:	f107 0214 	add.w	r2, r7, #20
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fa05 	bl	80011f4 <lfs_pair_cmp>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d141      	bne.n	8003e74 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f003 fafb 	bl	80073ec <lfs_fs_size_>
 8003df6:	6278      	str	r0, [r7, #36]	@ 0x24
        if (size < 0) {
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da01      	bge.n	8003e02 <lfs_dir_splittingcompact+0x17a>
            return size;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	e047      	b.n	8003e92 <lfs_dir_splittingcompact+0x20a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	1ad2      	subs	r2, r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d92f      	bls.n	8003e74 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a22      	ldr	r2, [pc, #136]	@ (8003ea4 <lfs_dir_splittingcompact+0x21c>)
 8003e1a:	9200      	str	r2, [sp, #0]
 8003e1c:	f640 02a2 	movw	r2, #2210	@ 0x8a2
 8003e20:	4921      	ldr	r1, [pc, #132]	@ (8003ea8 <lfs_dir_splittingcompact+0x220>)
 8003e22:	4823      	ldr	r0, [pc, #140]	@ (8003eb0 <lfs_dir_splittingcompact+0x228>)
 8003e24:	f005 f926 	bl	8009074 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003e28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fc85 	bl	800374e <lfs_dir_split>
 8003e44:	6238      	str	r0, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <lfs_dir_splittingcompact+0x1d0>
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	f113 0f1c 	cmn.w	r3, #28
 8003e52:	d001      	beq.n	8003e58 <lfs_dir_splittingcompact+0x1d0>
                return err;
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	e01c      	b.n	8003e92 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003e5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <lfs_dir_splittingcompact+0x21c>)
 8003e60:	f640 02ac 	movw	r2, #2220	@ 0x8ac
 8003e64:	4910      	ldr	r1, [pc, #64]	@ (8003ea8 <lfs_dir_splittingcompact+0x220>)
 8003e66:	4813      	ldr	r0, [pc, #76]	@ (8003eb4 <lfs_dir_splittingcompact+0x22c>)
 8003e68:	f005 f904 	bl	8009074 <iprintf>
 8003e6c:	e002      	b.n	8003e74 <lfs_dir_splittingcompact+0x1ec>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e78:	9302      	str	r3, [sp, #8]
 8003e7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff fd04 	bl	8003898 <lfs_dir_compact>
 8003e90:	4603      	mov	r3, r0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	373c      	adds	r7, #60	@ 0x3c
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080037f7 	.word	0x080037f7
 8003ea0:	400ffc00 	.word	0x400ffc00
 8003ea4:	08009ed4 	.word	0x08009ed4
 8003ea8:	08009d8c 	.word	0x08009d8c
 8003eac:	08009fac 	.word	0x08009fac
 8003eb0:	08009fdc 	.word	0x08009fdc
 8003eb4:	0800a00c 	.word	0x0800a00c

08003eb8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b0a6      	sub	sp, #152	@ 0x98
 8003ebc:	af0a      	add	r7, sp, #40	@ 0x28
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ed4:	e06d      	b.n	8003fb2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003ed6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fd fa53 	bl	800138c <lfs_tag_type3>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f240 4301 	movw	r3, #1025	@ 0x401
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d106      	bne.n	8003f00 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	8a9b      	ldrh	r3, [r3, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	829a      	strh	r2, [r3, #20]
 8003efe:	e055      	b.n	8003fac <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4413      	add	r3, r2
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd fa3e 	bl	800138c <lfs_tag_type3>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d114      	bne.n	8003f46 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	8a9b      	ldrh	r3, [r3, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <lfs_dir_relocatingcommit+0x7a>
 8003f24:	4ba4      	ldr	r3, [pc, #656]	@ (80041b8 <lfs_dir_relocatingcommit+0x300>)
 8003f26:	4aa5      	ldr	r2, [pc, #660]	@ (80041bc <lfs_dir_relocatingcommit+0x304>)
 8003f28:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 8003f2c:	48a4      	ldr	r0, [pc, #656]	@ (80041c0 <lfs_dir_relocatingcommit+0x308>)
 8003f2e:	f004 fef1 	bl	8008d14 <__assert_func>
            dir->count -= 1;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	8a9b      	ldrh	r3, [r3, #20]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8003f44:	e032      	b.n	8003fac <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fd f9fb 	bl	800134c <lfs_tag_type1>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f5c:	d126      	bne.n	8003fac <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003f5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	4413      	add	r3, r2
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003f7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	4413      	add	r3, r2
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd fa0f 	bl	80013ac <lfs_tag_chunk>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd f97b 	bl	80012a2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fae:	3301      	adds	r3, #1
 8003fb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	db8c      	blt.n	8003ed6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003fbc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02b      	beq.n	800401c <lfs_dir_relocatingcommit+0x164>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	8a9b      	ldrh	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d127      	bne.n	800401c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <lfs_dir_relocatingcommit+0x12a>
 8003fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80041c4 <lfs_dir_relocatingcommit+0x30c>)
 8003fd6:	4a79      	ldr	r2, [pc, #484]	@ (80041bc <lfs_dir_relocatingcommit+0x304>)
 8003fd8:	f640 01d2 	movw	r1, #2258	@ 0x8d2
 8003fdc:	4878      	ldr	r0, [pc, #480]	@ (80041c0 <lfs_dir_relocatingcommit+0x308>)
 8003fde:	f004 fe99 	bl	8008d14 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003fe8:	4619      	mov	r1, r3
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f002 fda0 	bl	8006b30 <lfs_fs_pred>
 8003ff0:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <lfs_dir_relocatingcommit+0x14c>
 8003ff8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ffa:	f113 0f02 	cmn.w	r3, #2
 8003ffe:	d001      	beq.n	8004004 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004002:	e214      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8004004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004006:	f113 0f02 	cmn.w	r3, #2
 800400a:	d007      	beq.n	800401c <lfs_dir_relocatingcommit+0x164>
 800400c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004010:	7ddb      	ldrb	r3, [r3, #23]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8004016:	2302      	movs	r3, #2
 8004018:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800401a:	e121      	b.n	8004260 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	7d9b      	ldrb	r3, [r3, #22]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80fb 	beq.w	800421c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800402a:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004030:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004042:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <lfs_dir_relocatingcommit+0x1a0>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	3b08      	subs	r3, #8
 8004056:	e003      	b.n	8004060 <lfs_dir_relocatingcommit+0x1a8>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8004060:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3318      	adds	r3, #24
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd f935 	bl	80012d6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004078:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800407c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800407e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004082:	9308      	str	r3, [sp, #32]
 8004084:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <lfs_dir_relocatingcommit+0x310>)
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	2300      	movs	r3, #0
 800408a:	9306      	str	r3, [sp, #24]
 800408c:	2300      	movs	r3, #0
 800408e:	9305      	str	r3, [sp, #20]
 8004090:	2300      	movs	r3, #0
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	2300      	movs	r3, #0
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	460b      	mov	r3, r1
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f7fd ff60 	bl	8001f70 <lfs_dir_traverse>
 80040b0:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3318      	adds	r3, #24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd f8f3 	bl	80012a2 <lfs_pair_fromle32>
        if (err) {
 80040bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80040c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c4:	f113 0f1c 	cmn.w	r3, #28
 80040c8:	f000 80aa 	beq.w	8004220 <lfs_dir_relocatingcommit+0x368>
 80040cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ce:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80040d2:	f000 80a5 	beq.w	8004220 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	e1a9      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80040da:	f107 031c 	add.w	r3, r7, #28
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
 80040e4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80040ec:	f107 031c 	add.w	r3, r7, #28
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd f9a5 	bl	8001442 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80040fe:	f107 031c 	add.w	r3, r7, #28
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd f99c 	bl	8001442 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd f993 	bl	8001442 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004128:	f107 031c 	add.w	r3, r7, #28
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd f9a8 	bl	8001482 <lfs_gstate_iszero>
 8004132:	4603      	mov	r3, r0
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d027      	beq.n	800418e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800413e:	f107 031c 	add.w	r3, r7, #28
 8004142:	461a      	mov	r2, r3
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7fe fee2 	bl	8002f10 <lfs_dir_getgstate>
 800414c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004156:	e16a      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
            }

            lfs_gstate_tole32(&delta);
 8004158:	f107 031c 	add.w	r3, r7, #28
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd fa35 	bl	80015cc <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8004162:	f107 031c 	add.w	r3, r7, #28
 8004166:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800416a:	4a18      	ldr	r2, [pc, #96]	@ (80041cc <lfs_dir_relocatingcommit+0x314>)
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff f885 	bl	800327c <lfs_dir_commitattr>
 8004172:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8004174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800417a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417c:	f113 0f1c 	cmn.w	r3, #28
 8004180:	d050      	beq.n	8004224 <lfs_dir_relocatingcommit+0x36c>
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004188:	d04c      	beq.n	8004224 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	e14f      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800418e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004192:	4619      	mov	r1, r3
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff f8f1 	bl	800337c <lfs_dir_commitcrc>
 800419a:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 800419c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a4:	f113 0f1c 	cmn.w	r3, #28
 80041a8:	d03e      	beq.n	8004228 <lfs_dir_relocatingcommit+0x370>
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80041b0:	d03a      	beq.n	8004228 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	e13b      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
 80041b6:	bf00      	nop
 80041b8:	0800a038 	.word	0x0800a038
 80041bc:	0800abd4 	.word	0x0800abd4
 80041c0:	08009d8c 	.word	0x08009d8c
 80041c4:	0800a048 	.word	0x0800a048
 80041c8:	08003823 	.word	0x08003823
 80041cc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041d6:	6992      	ldr	r2, [r2, #24]
 80041d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80041dc:	fb01 f202 	mul.w	r2, r1, r2
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <lfs_dir_relocatingcommit+0x33c>
 80041e6:	4b94      	ldr	r3, [pc, #592]	@ (8004438 <lfs_dir_relocatingcommit+0x580>)
 80041e8:	4a94      	ldr	r2, [pc, #592]	@ (800443c <lfs_dir_relocatingcommit+0x584>)
 80041ea:	f640 111c 	movw	r1, #2332	@ 0x91c
 80041ee:	4894      	ldr	r0, [pc, #592]	@ (8004440 <lfs_dir_relocatingcommit+0x588>)
 80041f0:	f004 fd90 	bl	8008d14 <__assert_func>
        dir->off = commit.off;
 80041f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80041fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	333c      	adds	r3, #60	@ 0x3c
 8004206:	3230      	adds	r2, #48	@ 0x30
 8004208:	ca07      	ldmia	r2, {r0, r1, r2}
 800420a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3348      	adds	r3, #72	@ 0x48
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	e021      	b.n	8004260 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800421c:	bf00      	nop
 800421e:	e004      	b.n	800422a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004228:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3310      	adds	r3, #16
 800422e:	4619      	mov	r1, r3
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7fc fbd4 	bl	80009de <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	8a9b      	ldrh	r3, [r3, #20]
 800423a:	9302      	str	r3, [sp, #8]
 800423c:	2300      	movs	r3, #0
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fd1b 	bl	8003c88 <lfs_dir_splittingcompact>
 8004252:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004256:	2b00      	cmp	r3, #0
 8004258:	da01      	bge.n	800425e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800425a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425c:	e0e7      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
    }

    goto fixmlist;
 800425e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	663b      	str	r3, [r7, #96]	@ 0x60
 8004274:	e0d6      	b.n	8004424 <lfs_dir_relocatingcommit+0x56c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8004276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004278:	3308      	adds	r3, #8
 800427a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc ffb7 	bl	80011f4 <lfs_pair_cmp>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 80c8 	bne.w	800441e <lfs_dir_relocatingcommit+0x566>
            d->m = *dir;
 800428e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	f103 0408 	add.w	r4, r3, #8
 8004296:	4615      	mov	r5, r2
 8004298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800429a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800429c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80042a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a6:	3308      	adds	r3, #8
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	f000 80ad 	beq.w	800440a <lfs_dir_relocatingcommit+0x552>
                for (int i = 0; i < attrcount; i++) {
 80042b0:	2300      	movs	r3, #0
 80042b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042b4:	e07f      	b.n	80043b6 <lfs_dir_relocatingcommit+0x4fe>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd f863 	bl	800138c <lfs_tag_type3>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d119      	bne.n	8004306 <lfs_dir_relocatingcommit+0x44e>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 80042d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d4:	889c      	ldrh	r4, [r3, #4]
 80042d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd f87d 	bl	80013e0 <lfs_tag_id>
 80042e6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042e8:	429c      	cmp	r4, r3
 80042ea:	d10c      	bne.n	8004306 <lfs_dir_relocatingcommit+0x44e>
                            d->type != LFS_TYPE_DIR) {
 80042ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ee:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d008      	beq.n	8004306 <lfs_dir_relocatingcommit+0x44e>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80042f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f6:	f04f 32ff 	mov.w	r2, #4294967295
 80042fa:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80042fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e054      	b.n	80043b0 <lfs_dir_relocatingcommit+0x4f8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fd f83b 	bl	800138c <lfs_tag_type3>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800431e:	429a      	cmp	r2, r3
 8004320:	d11c      	bne.n	800435c <lfs_dir_relocatingcommit+0x4a4>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004324:	889c      	ldrh	r4, [r3, #4]
 8004326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4413      	add	r3, r2
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd f855 	bl	80013e0 <lfs_tag_id>
 8004336:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004338:	429c      	cmp	r4, r3
 800433a:	d90f      	bls.n	800435c <lfs_dir_relocatingcommit+0x4a4>
                        d->id -= 1;
 800433c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800433e:	889b      	ldrh	r3, [r3, #4]
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004346:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004348:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800434a:	799b      	ldrb	r3, [r3, #6]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d12f      	bne.n	80043b0 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	1e5a      	subs	r2, r3, #1
 8004356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004358:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800435a:	e029      	b.n	80043b0 <lfs_dir_relocatingcommit+0x4f8>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800435c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	4413      	add	r3, r2
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f810 	bl	800138c <lfs_tag_type3>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	f240 4301 	movw	r3, #1025	@ 0x401
 8004374:	429a      	cmp	r2, r3
 8004376:	d11b      	bne.n	80043b0 <lfs_dir_relocatingcommit+0x4f8>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004378:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437a:	889c      	ldrh	r4, [r3, #4]
 800437c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	4413      	add	r3, r2
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd f82a 	bl	80013e0 <lfs_tag_id>
 800438c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800438e:	429c      	cmp	r4, r3
 8004390:	d30e      	bcc.n	80043b0 <lfs_dir_relocatingcommit+0x4f8>
                        d->id += 1;
 8004392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004394:	889b      	ldrh	r3, [r3, #4]
 8004396:	3301      	adds	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800439c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800439e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a0:	799b      	ldrb	r3, [r3, #6]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d104      	bne.n	80043b0 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos += 1;
 80043a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 80043b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b2:	3301      	adds	r3, #1
 80043b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80043b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043bc:	429a      	cmp	r2, r3
 80043be:	f6ff af7a 	blt.w	80042b6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80043c2:	e022      	b.n	800440a <lfs_dir_relocatingcommit+0x552>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80043c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c6:	f103 0220 	add.w	r2, r3, #32
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3320      	adds	r3, #32
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7fc ff0f 	bl	80011f4 <lfs_pair_cmp>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <lfs_dir_relocatingcommit+0x534>
                    d->id -= d->m.count;
 80043dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043de:	889a      	ldrh	r2, [r3, #4]
 80043e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043e2:	8b9b      	ldrh	r3, [r3, #28]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ea:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80043ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043ee:	f103 0108 	add.w	r1, r3, #8
 80043f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043f4:	3320      	adds	r3, #32
 80043f6:	461a      	mov	r2, r3
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7fe fd6d 	bl	8002ed8 <lfs_dir_fetch>
 80043fe:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8004400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <lfs_dir_relocatingcommit+0x552>
                    return err;
 8004406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004408:	e011      	b.n	800442e <lfs_dir_relocatingcommit+0x576>
            while (d->id >= d->m.count && d->m.split) {
 800440a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800440c:	889a      	ldrh	r2, [r3, #4]
 800440e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004410:	8b9b      	ldrh	r3, [r3, #28]
 8004412:	429a      	cmp	r2, r3
 8004414:	d303      	bcc.n	800441e <lfs_dir_relocatingcommit+0x566>
 8004416:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004418:	7fdb      	ldrb	r3, [r3, #31]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d2      	bne.n	80043c4 <lfs_dir_relocatingcommit+0x50c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800441e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	663b      	str	r3, [r7, #96]	@ 0x60
 8004424:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004426:	2b00      	cmp	r3, #0
 8004428:	f47f af25 	bne.w	8004276 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800442c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800442e:	4618      	mov	r0, r3
 8004430:	3770      	adds	r7, #112	@ 0x70
 8004432:	46bd      	mov	sp, r7
 8004434:	bdb0      	pop	{r4, r5, r7, pc}
 8004436:	bf00      	nop
 8004438:	08009f28 	.word	0x08009f28
 800443c:	0800abd4 	.word	0x0800abd4
 8004440:	08009d8c 	.word	0x08009d8c

08004444 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004444:	b5b0      	push	{r4, r5, r7, lr}
 8004446:	b0bc      	sub	sp, #240	@ 0xf0
 8004448:	af04      	add	r7, sp, #16
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800445a:	e045      	b.n	80044e8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800445c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004460:	3308      	adds	r3, #8
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	d03a      	beq.n	80044de <lfs_dir_orphaningcommit+0x9a>
 8004468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446c:	3308      	adds	r3, #8
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f7fc febe 	bl	80011f4 <lfs_pair_cmp>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d12f      	bne.n	80044de <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800447e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004482:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004484:	2b01      	cmp	r3, #1
 8004486:	d12a      	bne.n	80044de <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d023      	beq.n	80044de <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d91b      	bls.n	80044de <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80044a6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f001 f802 	bl	80054b4 <lfs_file_outline>
 80044b0:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80044b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80044bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044c0:	e2ad      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80044c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f001 f816 	bl	80054f8 <lfs_file_flush>
 80044cc:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80044d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <lfs_dir_orphaningcommit+0x9a>
                return err;
 80044d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044dc:	e29f      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80044de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80044e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1b5      	bne.n	800445c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004506:	461d      	mov	r5, r3
 8004508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800450a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800450c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800451a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff fcc6 	bl	8003eb8 <lfs_dir_relocatingcommit>
 800452c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004534:	2b00      	cmp	r3, #0
 8004536:	da02      	bge.n	800453e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800453c:	e26f      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fe54 	bl	80011f4 <lfs_pair_cmp>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	461d      	mov	r5, r3
 8004556:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800455a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800455c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800455e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004562:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800456a:	2b02      	cmp	r3, #2
 800456c:	d14a      	bne.n	8004604 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3348      	adds	r3, #72	@ 0x48
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7fe fcca 	bl	8002f10 <lfs_dir_getgstate>
 800457c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8004580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800458c:	e247      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800458e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8004594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3318      	adds	r3, #24
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fc fe99 	bl	80012d6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	7ddb      	ldrb	r3, [r3, #23]
 80045a8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80045ac:	051a      	lsls	r2, r3, #20
 80045ae:	4bc2      	ldr	r3, [pc, #776]	@ (80048b8 <lfs_dir_orphaningcommit+0x474>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3318      	adds	r3, #24
 80045b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80045be:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80045c2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80045c6:	2000      	movs	r0, #0
 80045c8:	9001      	str	r0, [sp, #4]
 80045ca:	2001      	movs	r0, #1
 80045cc:	9000      	str	r0, [sp, #0]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff fc72 	bl	8003eb8 <lfs_dir_relocatingcommit>
 80045d4:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	3318      	adds	r3, #24
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fc fe60 	bl	80012a2 <lfs_pair_fromle32>
        if (state < 0) {
 80045e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da02      	bge.n	80045f0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80045ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045ee:	e216      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80045f0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80045f4:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80045f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 800460a:	e1fc      	b.n	8004a06 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800460c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004614:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004618:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800461c:	4ca7      	ldr	r4, [pc, #668]	@ (80048bc <lfs_dir_orphaningcommit+0x478>)
 800461e:	9403      	str	r4, [sp, #12]
 8004620:	9102      	str	r1, [sp, #8]
 8004622:	9201      	str	r2, [sp, #4]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4603      	mov	r3, r0
 8004628:	f640 12a9 	movw	r2, #2473	@ 0x9a9
 800462c:	49a4      	ldr	r1, [pc, #656]	@ (80048c0 <lfs_dir_orphaningcommit+0x47c>)
 800462e:	48a5      	ldr	r0, [pc, #660]	@ (80048c4 <lfs_dir_orphaningcommit+0x480>)
 8004630:	f004 fd20 	bl	8009074 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f103 0220 	add.w	r2, r3, #32
 8004640:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc fdd4 	bl	80011f4 <lfs_pair_cmp>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004652:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800465a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004666:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800466a:	e037      	b.n	80046dc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800466c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004670:	f103 0208 	add.w	r2, r3, #8
 8004674:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fdba 	bl	80011f4 <lfs_pair_cmp>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004686:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800468a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800468e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004690:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004694:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004698:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800469a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800469e:	799b      	ldrb	r3, [r3, #6]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d116      	bne.n	80046d2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80046a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046a8:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80046ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80046b0:	4611      	mov	r1, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc fd9e 	bl	80011f4 <lfs_pair_cmp>
 80046b8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80046be:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80046c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80046c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80046cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046d0:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80046d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1c3      	bne.n	800466c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80046e4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80046e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80046ec:	4619      	mov	r1, r3
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f002 faae 	bl	8006c50 <lfs_fs_parent>
 80046f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80046f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da07      	bge.n	8004710 <lfs_dir_orphaningcommit+0x2cc>
 8004700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004704:	f113 0f02 	cmn.w	r3, #2
 8004708:	d002      	beq.n	8004710 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800470a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800470e:	e186      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004714:	f113 0f02 	cmn.w	r3, #2
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004726:	f113 0f02 	cmn.w	r3, #2
 800472a:	f000 809e 	beq.w	800486a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800472e:	2101      	movs	r1, #1
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f002 fb01 	bl	8006d38 <lfs_fs_preporphans>
 8004736:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800473a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <lfs_dir_orphaningcommit+0x304>
                return err;
 8004742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004746:	e16a      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004748:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800474c:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3330      	adds	r3, #48	@ 0x30
 8004754:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fef6 	bl	800154c <lfs_gstate_hasmovehere>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02d      	beq.n	80047c2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fe38 	bl	80013e0 <lfs_tag_id>
 8004770:	4603      	mov	r3, r0
 8004772:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004776:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800477a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800477e:	484f      	ldr	r0, [pc, #316]	@ (80048bc <lfs_dir_orphaningcommit+0x478>)
 8004780:	9002      	str	r0, [sp, #8]
 8004782:	9201      	str	r2, [sp, #4]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	460b      	mov	r3, r1
 8004788:	f640 12d6 	movw	r2, #2518	@ 0x9d6
 800478c:	494c      	ldr	r1, [pc, #304]	@ (80048c0 <lfs_dir_orphaningcommit+0x47c>)
 800478e:	484e      	ldr	r0, [pc, #312]	@ (80048c8 <lfs_dir_orphaningcommit+0x484>)
 8004790:	f004 fc70 	bl	8009074 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004794:	2200      	movs	r2, #0
 8004796:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f002 fb1c 	bl	8006dd8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80047a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fc fe1b 	bl	80013e0 <lfs_tag_id>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d205      	bcs.n	80047c2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80047b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047ba:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80047be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80047c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80047c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047c8:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 80047ca:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc fd81 	bl	80012d6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80047d4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80047d8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <lfs_dir_orphaningcommit+0x3ac>
 80047e0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80047e4:	029b      	lsls	r3, r3, #10
 80047e6:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80047ea:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80047ee:	e000      	b.n	80047f2 <lfs_dir_orphaningcommit+0x3ae>
 80047f0:	2300      	movs	r3, #0
 80047f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f4:	2300      	movs	r3, #0
 80047f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047fe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004802:	653b      	str	r3, [r7, #80]	@ 0x50
 8004804:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004808:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800480c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8004810:	2000      	movs	r0, #0
 8004812:	9001      	str	r0, [sp, #4]
 8004814:	2002      	movs	r0, #2
 8004816:	9000      	str	r0, [sp, #0]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fb4d 	bl	8003eb8 <lfs_dir_relocatingcommit>
 800481e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004822:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004826:	4618      	mov	r0, r3
 8004828:	f7fc fd3b 	bl	80012a2 <lfs_pair_fromle32>
            if (state < 0) {
 800482c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004830:	2b00      	cmp	r3, #0
 8004832:	da02      	bge.n	800483a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004838:	e0f1      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800483a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800483e:	2b01      	cmp	r3, #1
 8004840:	d113      	bne.n	800486a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8004848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800484a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 800484e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8004852:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8004856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800485a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800485e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004868:	e0cd      	b.n	8004a06 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800486a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800486e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004872:	4619      	mov	r1, r3
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f002 f95b 	bl	8006b30 <lfs_fs_pred>
 800487a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800487e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <lfs_dir_orphaningcommit+0x452>
 8004886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800488a:	f113 0f02 	cmn.w	r3, #2
 800488e:	d002      	beq.n	8004896 <lfs_dir_orphaningcommit+0x452>
            return err;
 8004890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004894:	e0c3      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004896:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01a      	beq.n	80048d4 <lfs_dir_orphaningcommit+0x490>
 800489e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048a2:	f113 0f02 	cmn.w	r3, #2
 80048a6:	d115      	bne.n	80048d4 <lfs_dir_orphaningcommit+0x490>
 80048a8:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <lfs_dir_orphaningcommit+0x488>)
 80048aa:	4a09      	ldr	r2, [pc, #36]	@ (80048d0 <lfs_dir_orphaningcommit+0x48c>)
 80048ac:	f640 11f9 	movw	r1, #2553	@ 0x9f9
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <lfs_dir_orphaningcommit+0x47c>)
 80048b2:	f004 fa2f 	bl	8008d14 <__assert_func>
 80048b6:	bf00      	nop
 80048b8:	000ffc08 	.word	0x000ffc08
 80048bc:	08009ed4 	.word	0x08009ed4
 80048c0:	08009d8c 	.word	0x08009d8c
 80048c4:	0800a050 	.word	0x0800a050
 80048c8:	0800a08c 	.word	0x0800a08c
 80048cc:	0800a0d0 	.word	0x0800a0d0
 80048d0:	0800abf0 	.word	0x0800abf0

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80048d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048d8:	f113 0f02 	cmn.w	r3, #2
 80048dc:	f000 8093 	beq.w	8004a06 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3330      	adds	r3, #48	@ 0x30
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fc fde8 	bl	80014ba <lfs_gstate_hasorphans>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d011      	beq.n	8004914 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 80048f0:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80048f4:	425b      	negs	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	4619      	mov	r1, r3
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f002 fa1b 	bl	8006d38 <lfs_fs_preporphans>
 8004902:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8004906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800490e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004912:	e084      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004914:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8004918:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3330      	adds	r3, #48	@ 0x30
 8004920:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7fc fe10 	bl	800154c <lfs_gstate_hasmovehere>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01c      	beq.n	800496c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc fd52 	bl	80013e0 <lfs_tag_id>
 800493c:	4603      	mov	r3, r0
 800493e:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004942:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004946:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 800494a:	4837      	ldr	r0, [pc, #220]	@ (8004a28 <lfs_dir_orphaningcommit+0x5e4>)
 800494c:	9002      	str	r0, [sp, #8]
 800494e:	9201      	str	r2, [sp, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	460b      	mov	r3, r1
 8004954:	f640 220a 	movw	r2, #2570	@ 0xa0a
 8004958:	4934      	ldr	r1, [pc, #208]	@ (8004a2c <lfs_dir_orphaningcommit+0x5e8>)
 800495a:	4835      	ldr	r0, [pc, #212]	@ (8004a30 <lfs_dir_orphaningcommit+0x5ec>)
 800495c:	f004 fb8a 	bl	8009074 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004960:	2200      	movs	r2, #0
 8004962:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f002 fa36 	bl	8006dd8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800496c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8004972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8004978:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800497c:	4618      	mov	r0, r3
 800497e:	f7fc fcaa 	bl	80012d6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004982:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8004986:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <lfs_dir_orphaningcommit+0x55a>
 800498e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8004998:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800499c:	e000      	b.n	80049a0 <lfs_dir_orphaningcommit+0x55c>
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a2:	2300      	movs	r3, #0
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80049aa:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80049ae:	051a      	lsls	r2, r3, #20
 80049b0:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <lfs_dir_orphaningcommit+0x5f0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80049bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049c0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80049c4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80049c8:	2000      	movs	r0, #0
 80049ca:	9001      	str	r0, [sp, #4]
 80049cc:	2002      	movs	r0, #2
 80049ce:	9000      	str	r0, [sp, #0]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff fa71 	bl	8003eb8 <lfs_dir_relocatingcommit>
 80049d6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80049da:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fc fc5f 	bl	80012a2 <lfs_pair_fromle32>
            if (state < 0) {
 80049e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da02      	bge.n	80049f2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80049ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f0:	e015      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80049f2:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80049f6:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80049fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	f43f adfe 	beq.w	800460c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004a10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <lfs_dir_orphaningcommit+0x5d8>
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e000      	b.n	8004a1e <lfs_dir_orphaningcommit+0x5da>
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	37e0      	adds	r7, #224	@ 0xe0
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bdb0      	pop	{r4, r5, r7, pc}
 8004a26:	bf00      	nop
 8004a28:	08009ed4 	.word	0x08009ed4
 8004a2c:	08009d8c 	.word	0x08009d8c
 8004a30:	0800a08c 	.word	0x0800a08c
 8004a34:	000ffc08 	.word	0x000ffc08

08004a38 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff fcf9 	bl	8004444 <lfs_dir_orphaningcommit>
 8004a52:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da01      	bge.n	8004a5e <lfs_dir_commit+0x26>
        return orphans;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	e00d      	b.n	8004a7a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004a64:	2100      	movs	r1, #0
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f002 fad8 	bl	800701c <lfs_fs_deorphan>
 8004a6c:	6138      	str	r0, [r7, #16]
        if (err) {
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <lfs_dir_commit+0x40>
            return err;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	e000      	b.n	8004a7a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004a82:	b590      	push	{r4, r7, lr}
 8004a84:	b087      	sub	sp, #28
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	3b08      	subs	r3, #8
 8004a9a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <lfs_ctz_index+0x2e>
        return 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e01c      	b.n	8004aea <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb ff32 	bl	800091e <lfs_popc>
 8004aba:	4603      	mov	r3, r0
 8004abc:	3302      	adds	r3, #2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	fb02 f303 	mul.w	r3, r2, r3
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	1ad4      	subs	r4, r2, r3
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7fb ff20 	bl	800091e <lfs_popc>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	1ae2      	subs	r2, r4, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	601a      	str	r2, [r3, #0]
    return i;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd90      	pop	{r4, r7, pc}

08004af2 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004af2:	b590      	push	{r4, r7, lr}
 8004af4:	b08f      	sub	sp, #60	@ 0x3c
 8004af6:	af04      	add	r7, sp, #16
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
        return 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e053      	b.n	8004bc0 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4619      	mov	r1, r3
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff ffac 	bl	8004a82 <lfs_ctz_index>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004b2e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ffa4 	bl	8004a82 <lfs_ctz_index>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004b3e:	e034      	b.n	8004baa <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fb fec9 	bl	80008e0 <lfs_npw2>
 8004b4e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004b50:	1e5c      	subs	r4, r3, #1
 8004b52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b54:	f7fb fed4 	bl	8000900 <lfs_ctz>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7fb fe88 	bl	8000872 <lfs_min>
 8004b62:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	0092      	lsls	r2, r2, #2
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	9103      	str	r1, [sp, #12]
 8004b6e:	4639      	mov	r1, r7
 8004b70:	9102      	str	r1, [sp, #8]
 8004b72:	9201      	str	r2, [sp, #4]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2304      	movs	r3, #4
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7fb ff53 	bl	8000a28 <lfs_bd_read>
 8004b82:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fb fee3 	bl	8000952 <lfs_fromle32>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	603b      	str	r3, [r7, #0]
        if (err) {
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <lfs_ctz_find+0xa8>
            return err;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	e012      	b.n	8004bc0 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8004baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d8c6      	bhi.n	8004b40 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bbc:	601a      	str	r2, [r3, #0]
    return 0;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	372c      	adds	r7, #44	@ 0x2c
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}

08004bc8 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b092      	sub	sp, #72	@ 0x48
 8004bcc:	af04      	add	r7, sp, #16
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004bd6:	f107 0320 	add.w	r3, r7, #32
 8004bda:	4619      	mov	r1, r3
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f7fc fef7 	bl	80019d0 <lfs_alloc>
 8004be2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8004be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <lfs_ctz_extend+0x26>
            return err;
 8004bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bec:	e0eb      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7fc fa58 	bl	80010a8 <lfs_bd_erase>
 8004bf8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c02:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004c06:	f000 80cd 	beq.w	8004da4 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 8004c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0c:	e0db      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d107      	bne.n	8004c24 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c18:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
                return 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e0d0      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8004c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c26:	3b01      	subs	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004c2a:	f107 031c 	add.w	r3, r7, #28
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff ff26 	bl	8004a82 <lfs_ctz_index>
 8004c36:	4603      	mov	r3, r0
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d046      	beq.n	8004cda <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c50:	e037      	b.n	8004cc2 <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	f107 0317 	add.w	r3, r7, #23
 8004c60:	9302      	str	r3, [sp, #8]
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	2100      	movs	r1, #0
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7fb fed9 	bl	8000a28 <lfs_bd_read>
 8004c76:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <lfs_ctz_extend+0xba>
                        return err;
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	e01e      	b.n	8004cc0 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	2201      	movs	r2, #1
 8004c86:	9203      	str	r2, [sp, #12]
 8004c88:	f107 0217 	add.w	r2, r7, #23
 8004c8c:	9202      	str	r2, [sp, #8]
 8004c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c90:	9201      	str	r2, [sp, #4]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2301      	movs	r3, #1
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7fc f956 	bl	8000f4c <lfs_bd_prog>
 8004ca0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004caa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004cae:	d101      	bne.n	8004cb4 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004cb0:	bf00      	nop
                    goto relocate;
 8004cb2:	e07a      	b.n	8004daa <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb6:	e003      	b.n	8004cc0 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cba:	3301      	adds	r3, #1
 8004cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbe:	e000      	b.n	8004cc2 <lfs_ctz_extend+0xfa>
                return err;
 8004cc0:	e081      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d3c3      	bcc.n	8004c52 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004cca:	6a3a      	ldr	r2, [r7, #32]
 8004ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cce:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd4:	601a      	str	r2, [r3, #0]
                return 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e075      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	3301      	adds	r3, #1
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce2:	f7fb fe0d 	bl	8000900 <lfs_ctz>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	3301      	adds	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf4:	e049      	b.n	8004d8a <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fe35 	bl	8000968 <lfs_tole32>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	2104      	movs	r1, #4
 8004d0a:	9103      	str	r1, [sp, #12]
 8004d0c:	f107 0118 	add.w	r1, r7, #24
 8004d10:	9102      	str	r1, [sp, #8]
 8004d12:	9201      	str	r2, [sp, #4]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	2301      	movs	r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7fc f915 	bl	8000f4c <lfs_bd_prog>
 8004d22:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fb fe13 	bl	8000952 <lfs_fromle32>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004d3c:	d034      	beq.n	8004da8 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d40:	e041      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	3b01      	subs	r3, #1
 8004d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d01b      	beq.n	8004d84 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d50:	0092      	lsls	r2, r2, #2
 8004d52:	2104      	movs	r1, #4
 8004d54:	9103      	str	r1, [sp, #12]
 8004d56:	f107 0118 	add.w	r1, r7, #24
 8004d5a:	9102      	str	r1, [sp, #8]
 8004d5c:	9201      	str	r2, [sp, #4]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2304      	movs	r3, #4
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	2100      	movs	r1, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7fb fe5e 	bl	8000a28 <lfs_bd_read>
 8004d6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fdee 	bl	8000952 <lfs_fromle32>
 8004d76:	4603      	mov	r3, r0
 8004d78:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <lfs_ctz_extend+0x1bc>
                        return err;
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	e020      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	3301      	adds	r3, #1
 8004d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d3b1      	bcc.n	8004cf6 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d96:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	009a      	lsls	r2, r3, #2
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d9e:	601a      	str	r2, [r3, #0]
            return 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e010      	b.n	8004dc6 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 8004da4:	bf00      	nop
 8004da6:	e000      	b.n	8004daa <lfs_ctz_extend+0x1e2>
                        goto relocate;
 8004da8:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	4a08      	ldr	r2, [pc, #32]	@ (8004dd0 <lfs_ctz_extend+0x208>)
 8004dae:	9200      	str	r2, [sp, #0]
 8004db0:	f640 32c3 	movw	r2, #3011	@ 0xbc3
 8004db4:	4907      	ldr	r1, [pc, #28]	@ (8004dd4 <lfs_ctz_extend+0x20c>)
 8004db6:	4808      	ldr	r0, [pc, #32]	@ (8004dd8 <lfs_ctz_extend+0x210>)
 8004db8:	f004 f95c 	bl	8009074 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7fb fe0d 	bl	80009de <lfs_cache_drop>
    while (true) {
 8004dc4:	e707      	b.n	8004bd6 <lfs_ctz_extend+0xe>
    }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3738      	adds	r7, #56	@ 0x38
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	08009ed4 	.word	0x08009ed4
 8004dd4:	08009d8c 	.word	0x08009d8c
 8004dd8:	08009f50 	.word	0x08009f50

08004ddc <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b090      	sub	sp, #64	@ 0x40
 8004de0:	af04      	add	r7, sp, #16
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <lfs_ctz_traverse+0x18>
        return 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e06b      	b.n	8004ecc <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	3b01      	subs	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	f107 031c 	add.w	r3, r7, #28
 8004dfe:	4619      	mov	r1, r3
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff fe3e 	bl	8004a82 <lfs_ctz_index>
 8004e06:	4603      	mov	r3, r0
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004e10:	4798      	blx	r3
 8004e12:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <lfs_ctz_traverse+0x42>
            return err;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	e056      	b.n	8004ecc <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <lfs_ctz_traverse+0x4c>
            return 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e051      	b.n	8004ecc <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	f1c3 0302 	rsb	r3, r3, #2
 8004e32:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004e34:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004e36:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004e38:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004e3a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004e3c:	9303      	str	r3, [sp, #12]
 8004e3e:	f107 0314 	add.w	r3, r7, #20
 8004e42:	9302      	str	r3, [sp, #8]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7fb fde8 	bl	8000a28 <lfs_bd_read>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fd78 	bl	8000952 <lfs_fromle32>
 8004e62:	4603      	mov	r3, r0
 8004e64:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb fd72 	bl	8000952 <lfs_fromle32>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <lfs_ctz_traverse+0xa0>
            return err;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	e027      	b.n	8004ecc <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e80:	e012      	b.n	8004ea8 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	3330      	adds	r3, #48	@ 0x30
 8004e88:	443b      	add	r3, r7
 8004e8a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e90:	4611      	mov	r1, r2
 8004e92:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004e94:	4798      	blx	r3
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <lfs_ctz_traverse+0xc6>
                return err;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	e014      	b.n	8004ecc <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	dbe7      	blt.n	8004e82 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	3330      	adds	r3, #48	@ 0x30
 8004eba:	443b      	add	r3, r7
 8004ebc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004ec0:	603b      	str	r3, [r7, #0]
        index -= count;
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8004eca:	e79e      	b.n	8004e0a <lfs_ctz_traverse+0x2e>
    }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3730      	adds	r7, #48	@ 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004ed4:	b5b0      	push	{r4, r5, r7, lr}
 8004ed6:	b09a      	sub	sp, #104	@ 0x68
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f002 fa45 	bl	800737c <lfs_fs_forceconsistency>
 8004ef2:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8004ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <lfs_file_opencfg_+0x2a>
            return err;
 8004efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004efc:	e1bf      	b.n	800527e <lfs_file_opencfg_+0x3aa>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004f02:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f103 0108 	add.w	r1, r3, #8
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3304      	adds	r3, #4
 8004f26:	1d3a      	adds	r2, r7, #4
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7fe f86d 	bl	8003008 <lfs_dir_find>
 8004f2e:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 8004f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da10      	bge.n	8004f58 <lfs_file_opencfg_+0x84>
 8004f36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f38:	f113 0f02 	cmn.w	r3, #2
 8004f3c:	d109      	bne.n	8004f52 <lfs_file_opencfg_+0x7e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fc f8f3 	bl	800112c <lfs_path_islast>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f083 0301 	eor.w	r3, r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <lfs_file_opencfg_+0x84>
        err = tag;
 8004f52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8004f56:	e187      	b.n	8005268 <lfs_file_opencfg_+0x394>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7fc fc62 	bl	800182a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f68:	f113 0f02 	cmn.w	r3, #2
 8004f6c:	d159      	bne.n	8005022 <lfs_file_opencfg_+0x14e>
        if (!(flags & LFS_O_CREAT)) {
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <lfs_file_opencfg_+0xac>
            err = LFS_ERR_NOENT;
 8004f78:	f06f 0301 	mvn.w	r3, #1
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004f7e:	e173      	b.n	8005268 <lfs_file_opencfg_+0x394>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc f8f2 	bl	800116c <lfs_path_isdir>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <lfs_file_opencfg_+0xc2>
            err = LFS_ERR_NOTDIR;
 8004f8e:	f06f 0313 	mvn.w	r3, #19
 8004f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004f94:	e168      	b.n	8005268 <lfs_file_opencfg_+0x394>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fc f8b7 	bl	800110c <lfs_path_namelen>
 8004f9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d903      	bls.n	8004fb2 <lfs_file_opencfg_+0xde>
            err = LFS_ERR_NAMETOOLONG;
 8004faa:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8004fb0:	e15a      	b.n	8005268 <lfs_file_opencfg_+0x394>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f103 0108 	add.w	r1, r3, #8
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	889b      	ldrh	r3, [r3, #4]
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc8:	2300      	movs	r3, #0
 8004fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	889b      	ldrh	r3, [r3, #4]
 8004fd0:	029a      	lsls	r2, r3, #10
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	889b      	ldrh	r3, [r3, #4]
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ff4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff fd1c 	bl	8004a38 <lfs_dir_commit>
 8005000:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005004:	f113 0f1c 	cmn.w	r3, #28
 8005008:	d001      	beq.n	800500e <lfs_file_opencfg_+0x13a>
 800500a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800500c:	e001      	b.n	8005012 <lfs_file_opencfg_+0x13e>
 800500e:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8005012:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8005014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 8125 	bne.w	8005266 <lfs_file_opencfg_+0x392>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800501c:	4b9a      	ldr	r3, [pc, #616]	@ (8005288 <lfs_file_opencfg_+0x3b4>)
 800501e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005020:	e044      	b.n	80050ac <lfs_file_opencfg_+0x1d8>
    } else if (flags & LFS_O_EXCL) {
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <lfs_file_opencfg_+0x160>
        err = LFS_ERR_EXIST;
 800502c:	f06f 0310 	mvn.w	r3, #16
 8005030:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005032:	e119      	b.n	8005268 <lfs_file_opencfg_+0x394>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005036:	4618      	mov	r0, r3
 8005038:	f7fc f9a8 	bl	800138c <lfs_tag_type3>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d003      	beq.n	800504a <lfs_file_opencfg_+0x176>
        err = LFS_ERR_ISDIR;
 8005042:	f06f 0314 	mvn.w	r3, #20
 8005046:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8005048:	e10e      	b.n	8005268 <lfs_file_opencfg_+0x394>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <lfs_file_opencfg_+0x19e>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	889b      	ldrh	r3, [r3, #4]
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800505e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005062:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005070:	e01c      	b.n	80050ac <lfs_file_opencfg_+0x1d8>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	889b      	ldrh	r3, [r3, #4]
 800507c:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800507e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005082:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800508a:	9200      	str	r2, [sp, #0]
 800508c:	4a7f      	ldr	r2, [pc, #508]	@ (800528c <lfs_file_opencfg_+0x3b8>)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7fc fe1c 	bl	8001ccc <lfs_dir_get>
 8005094:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8005096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005098:	2b00      	cmp	r3, #0
 800509a:	da02      	bge.n	80050a2 <lfs_file_opencfg_+0x1ce>
            err = tag;
 800509c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800509e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80050a0:	e0e2      	b.n	8005268 <lfs_file_opencfg_+0x394>
        }
        lfs_ctz_fromle32(&file->ctz);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	3328      	adds	r3, #40	@ 0x28
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc fae0 	bl	800166c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80050ac:	2300      	movs	r3, #0
 80050ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80050b0:	e063      	b.n	800517a <lfs_file_opencfg_+0x2a6>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d03c      	beq.n	8005138 <lfs_file_opencfg_+0x264>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c8:	6859      	ldr	r1, [r3, #4]
 80050ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050cc:	4613      	mov	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80050dc:	051a      	lsls	r2, r3, #20
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	889b      	ldrh	r3, [r3, #4]
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	ea42 0103 	orr.w	r1, r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ec:	6858      	ldr	r0, [r3, #4]
 80050ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4403      	add	r3, r0
 80050fa:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050fc:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	4603      	mov	r3, r0
 8005118:	4a5d      	ldr	r2, [pc, #372]	@ (8005290 <lfs_file_opencfg_+0x3bc>)
 800511a:	4621      	mov	r1, r4
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7fc fdd5 	bl	8001ccc <lfs_dir_get>
 8005122:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005126:	2b00      	cmp	r3, #0
 8005128:	da06      	bge.n	8005138 <lfs_file_opencfg_+0x264>
 800512a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512c:	f113 0f02 	cmn.w	r3, #2
 8005130:	d002      	beq.n	8005138 <lfs_file_opencfg_+0x264>
                err = res;
 8005132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005134:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005136:	e097      	b.n	8005268 <lfs_file_opencfg_+0x394>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d017      	beq.n	8005174 <lfs_file_opencfg_+0x2a0>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800515c:	429a      	cmp	r2, r3
 800515e:	d903      	bls.n	8005168 <lfs_file_opencfg_+0x294>
                err = LFS_ERR_NOSPC;
 8005160:	f06f 031b 	mvn.w	r3, #27
 8005164:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005166:	e07f      	b.n	8005268 <lfs_file_opencfg_+0x394>
            }

            file->flags |= LFS_F_DIRTY;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005176:	3301      	adds	r3, #1
 8005178:	657b      	str	r3, [r7, #84]	@ 0x54
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005182:	429a      	cmp	r2, r3
 8005184:	d395      	bcc.n	80050b2 <lfs_file_opencfg_+0x1de>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <lfs_file_opencfg_+0x2c8>
        file->cache.buffer = file->cfg->buffer;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	64da      	str	r2, [r3, #76]	@ 0x4c
 800519a:	e010      	b.n	80051be <lfs_file_opencfg_+0x2ea>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb fc04 	bl	80009b0 <lfs_malloc>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <lfs_file_opencfg_+0x2ea>
            err = LFS_ERR_NOMEM;
 80051b6:	f06f 030b 	mvn.w	r3, #11
 80051ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80051bc:	e054      	b.n	8005268 <lfs_file_opencfg_+0x394>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3340      	adds	r3, #64	@ 0x40
 80051c2:	4619      	mov	r1, r3
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7fb fc19 	bl	80009fc <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80051ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fc f8dd 	bl	800138c <lfs_tag_type3>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	f240 2301 	movw	r3, #513	@ 0x201
 80051da:	429a      	cmp	r2, r3
 80051dc:	d141      	bne.n	8005262 <lfs_file_opencfg_+0x38e>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f06f 0201 	mvn.w	r2, #1
 80051e4:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 80051e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fc f909 	bl	8001400 <lfs_tag_size>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005212:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <lfs_file_opencfg_+0x38e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	889b      	ldrh	r3, [r3, #4]
 800522a:	029c      	lsls	r4, r3, #10
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005230:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb fb1c 	bl	8000872 <lfs_min>
 800523a:	4603      	mov	r3, r0
 800523c:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800523e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	4a10      	ldr	r2, [pc, #64]	@ (800528c <lfs_file_opencfg_+0x3b8>)
 800524c:	4629      	mov	r1, r5
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7fc fd3c 	bl	8001ccc <lfs_dir_get>
 8005254:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8005256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005258:	2b00      	cmp	r3, #0
 800525a:	da02      	bge.n	8005262 <lfs_file_opencfg_+0x38e>
                err = res;
 800525c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800525e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8005260:	e002      	b.n	8005268 <lfs_file_opencfg_+0x394>
            }
        }
    }

    return 0;
 8005262:	2300      	movs	r3, #0
 8005264:	e00b      	b.n	800527e <lfs_file_opencfg_+0x3aa>
            goto cleanup;
 8005266:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f824 	bl	80052c4 <lfs_file_close_>
    return err;
 800527c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800527e:	4618      	mov	r0, r3
 8005280:	3760      	adds	r7, #96	@ 0x60
 8005282:	46bd      	mov	sp, r7
 8005284:	bdb0      	pop	{r4, r5, r7, pc}
 8005286:	bf00      	nop
 8005288:	20100000 	.word	0x20100000
 800528c:	700ffc00 	.word	0x700ffc00
 8005290:	7ffffc00 	.word	0x7ffffc00

08005294 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80052a2:	4b07      	ldr	r3, [pc, #28]	@ (80052c0 <lfs_file_open_+0x2c>)
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fe11 	bl	8004ed4 <lfs_file_opencfg_>
 80052b2:	6178      	str	r0, [r7, #20]
    return err;
 80052b4:	697b      	ldr	r3, [r7, #20]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	0800ac08 	.word	0x0800ac08

080052c4 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f9e5 	bl	80056a0 <lfs_file_sync_>
 80052d6:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fa83 	bl	80017e6 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb fb6a 	bl	80009c8 <lfs_free>
    }

    return err;
 80052f4:	68fb      	ldr	r3, [r7, #12]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b08d      	sub	sp, #52	@ 0x34
 8005304:	af06      	add	r7, sp, #24
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fc fb5d 	bl	80019d0 <lfs_alloc>
 8005316:	6138      	str	r0, [r7, #16]
        if (err) {
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <lfs_file_relocate+0x22>
            return err;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	e0bb      	b.n	800549a <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fb febe 	bl	80010a8 <lfs_bd_erase>
 800532c:	6138      	str	r0, [r7, #16]
        if (err) {
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800533a:	f000 809b 	beq.w	8005474 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	e0ab      	b.n	800549a <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e069      	b.n	800541c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d027      	beq.n	80053a4 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f103 0008 	add.w	r0, r3, #8
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	889b      	ldrh	r3, [r3, #4]
 800536c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800536e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005376:	2101      	movs	r1, #1
 8005378:	9105      	str	r1, [sp, #20]
 800537a:	f107 010b 	add.w	r1, r7, #11
 800537e:	9104      	str	r1, [sp, #16]
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	9103      	str	r1, [sp, #12]
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	4b47      	ldr	r3, [pc, #284]	@ (80054a4 <lfs_file_relocate+0x1a4>)
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	9200      	str	r2, [sp, #0]
 800538c:	4623      	mov	r3, r4
 800538e:	2200      	movs	r2, #0
 8005390:	4601      	mov	r1, r0
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc fcb5 	bl	8001d02 <lfs_dir_getread>
 8005398:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <lfs_file_relocate+0xde>
                    return err;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	e07a      	b.n	800549a <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 80053aa:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	1ad4      	subs	r4, r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	2201      	movs	r2, #1
 80053ba:	9203      	str	r2, [sp, #12]
 80053bc:	f107 020b 	add.w	r2, r7, #11
 80053c0:	9202      	str	r2, [sp, #8]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	9201      	str	r2, [sp, #4]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	4623      	mov	r3, r4
 80053ca:	4602      	mov	r2, r0
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fb fb2b 	bl	8000a28 <lfs_bd_read>
 80053d2:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <lfs_file_relocate+0xde>
                    return err;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	e05d      	b.n	800549a <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0110 	add.w	r1, r3, #16
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	9203      	str	r2, [sp, #12]
 80053ec:	f107 020b 	add.w	r2, r7, #11
 80053f0:	9202      	str	r2, [sp, #8]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	9201      	str	r2, [sp, #4]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2301      	movs	r3, #1
 80053fa:	4602      	mov	r2, r0
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fb fda5 	bl	8000f4c <lfs_bd_prog>
 8005402:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005410:	d032      	beq.n	8005478 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	e041      	b.n	800549a <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	3301      	adds	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	429a      	cmp	r2, r3
 8005424:	d390      	bcc.n	8005348 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69d9      	ldr	r1, [r3, #28]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	461a      	mov	r2, r3
 8005436:	f003 ff2e 	bl	8009296 <memcpy>
        file->cache.block = lfs->pcache.block;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3310      	adds	r3, #16
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fb facf 	bl	80009fc <lfs_cache_zero>

        file->block = nblock;
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8005470:	2300      	movs	r3, #0
 8005472:	e012      	b.n	800549a <lfs_file_relocate+0x19a>
                goto relocate;
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <lfs_file_relocate+0x17a>
                    goto relocate;
 8005478:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a0a      	ldr	r2, [pc, #40]	@ (80054a8 <lfs_file_relocate+0x1a8>)
 800547e:	9200      	str	r2, [sp, #0]
 8005480:	f640 42ff 	movw	r2, #3327	@ 0xcff
 8005484:	4909      	ldr	r1, [pc, #36]	@ (80054ac <lfs_file_relocate+0x1ac>)
 8005486:	480a      	ldr	r0, [pc, #40]	@ (80054b0 <lfs_file_relocate+0x1b0>)
 8005488:	f003 fdf4 	bl	8009074 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3310      	adds	r3, #16
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fb faa3 	bl	80009de <lfs_cache_drop>
    while (true) {
 8005498:	e737      	b.n	800530a <lfs_file_relocate+0xa>
    }
}
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}
 80054a2:	bf00      	nop
 80054a4:	fff7fc00 	.word	0xfff7fc00
 80054a8:	08009ed4 	.word	0x08009ed4
 80054ac:	08009d8c 	.word	0x08009d8c
 80054b0:	08009f50 	.word	0x08009f50

080054b4 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc f9eb 	bl	80018a2 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff ff16 	bl	8005300 <lfs_file_relocate>
 80054d4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <lfs_file_outline+0x2c>
        return err;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	e006      	b.n	80054ee <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b09f      	sub	sp, #124	@ 0x7c
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d011      	beq.n	8005532 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	3340      	adds	r3, #64	@ 0x40
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb fa5c 	bl	80009de <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a4 	beq.w	8005688 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005544:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d176      	bne.n	8005640 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005552:	f107 030c 	add.w	r3, r7, #12
 8005556:	2254      	movs	r2, #84	@ 0x54
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f003 fdef 	bl	800913e <memset>
                .ctz.head = file->ctz.head,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 800556a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800556c:	2301      	movs	r3, #1
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800557c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800557e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4619      	mov	r1, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fb fa29 	bl	80009de <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800558c:	e02b      	b.n	80055e6 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800558e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8005592:	f107 010c 	add.w	r1, r7, #12
 8005596:	2301      	movs	r3, #1
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f921 	bl	80057e0 <lfs_file_flushedread>
 800559e:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80055a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da01      	bge.n	80055aa <lfs_file_flush+0xb2>
                    return res;
 80055a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a8:	e06f      	b.n	800568a <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80055aa:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80055ae:	2301      	movs	r3, #1
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9e6 	bl	8005984 <lfs_file_flushedwrite>
 80055b8:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80055ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da01      	bge.n	80055c4 <lfs_file_flush+0xcc>
                    return res;
 80055c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055c2:	e062      	b.n	800568a <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d00b      	beq.n	80055e6 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80055ce:	f107 030c 	add.w	r3, r7, #12
 80055d2:	3340      	adds	r3, #64	@ 0x40
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb fa01 	bl	80009de <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fb f9fc 	bl	80009de <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3cd      	bcc.n	800558e <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	2301      	movs	r3, #1
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fb fbf7 	bl	8000df0 <lfs_bd_flush>
 8005602:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8005604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005606:	2b00      	cmp	r3, #0
 8005608:	d026      	beq.n	8005658 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800560a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800560c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005610:	d001      	beq.n	8005616 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005614:	e039      	b.n	800568a <lfs_file_flush+0x192>
                        goto relocate;
 8005616:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	4a1d      	ldr	r2, [pc, #116]	@ (8005694 <lfs_file_flush+0x19c>)
 800561e:	9200      	str	r2, [sp, #0]
 8005620:	f640 524e 	movw	r2, #3406	@ 0xd4e
 8005624:	491c      	ldr	r1, [pc, #112]	@ (8005698 <lfs_file_flush+0x1a0>)
 8005626:	481d      	ldr	r0, [pc, #116]	@ (800569c <lfs_file_flush+0x1a4>)
 8005628:	f003 fd24 	bl	8009074 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fe66 	bl	8005300 <lfs_file_relocate>
 8005634:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8005636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0da      	beq.n	80055f2 <lfs_file_flush+0xfa>
                    return err;
 800563c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800563e:	e024      	b.n	800568a <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fb f901 	bl	8000852 <lfs_max>
 8005650:	4602      	mov	r2, r0
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34
 8005656:	e000      	b.n	800565a <lfs_file_flush+0x162>
                break;
 8005658:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005686:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3774      	adds	r7, #116	@ 0x74
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}
 8005692:	bf00      	nop
 8005694:	08009ed4 	.word	0x08009ed4
 8005698:	08009d8c 	.word	0x08009d8c
 800569c:	08009f50 	.word	0x08009f50

080056a0 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b090      	sub	sp, #64	@ 0x40
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e08e      	b.n	80057d8 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff1b 	bl	80054f8 <lfs_file_flush>
 80056c2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 80056c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	e07e      	b.n	80057d8 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d077      	beq.n	80057d6 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fb fd67 	bl	80011be <lfs_pair_isnull>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f083 0301 	eor.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d06c      	beq.n	80057d6 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f103 0110 	add.w	r1, r3, #16
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	2300      	movs	r3, #0
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb fbe6 	bl	8000ee4 <lfs_bd_sync>
 8005718:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <lfs_file_sync_+0x84>
                return err;
 8005720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005722:	e059      	b.n	80057d8 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005730:	f240 2301 	movw	r3, #513	@ 0x201
 8005734:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573a:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
 8005742:	e014      	b.n	800576e <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005744:	f240 2302 	movw	r3, #514	@ 0x202
 8005748:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005750:	3228      	adds	r2, #40	@ 0x28
 8005752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005756:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800575a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800575e:	4618      	mov	r0, r3
 8005760:	f7fb ff9c 	bl	800169c <lfs_ctz_tole32>
            buffer = &ctz;
 8005764:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 800576a:	2308      	movs	r3, #8
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f103 0108 	add.w	r1, r3, #8
 8005774:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005776:	051a      	lsls	r2, r3, #20
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	889b      	ldrh	r3, [r3, #4]
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	431a      	orrs	r2, r3
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	889b      	ldrh	r3, [r3, #4]
 800578e:	029a      	lsls	r2, r3, #10
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a6:	f107 0218 	add.w	r2, r7, #24
 80057aa:	2302      	movs	r3, #2
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff f943 	bl	8004a38 <lfs_dir_commit>
 80057b2:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	e006      	b.n	80057d8 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3740      	adds	r7, #64	@ 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80057e0:	b5b0      	push	{r4, r5, r7, lr}
 80057e2:	b090      	sub	sp, #64	@ 0x40
 80057e4:	af06      	add	r7, sp, #24
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d301      	bcc.n	8005806 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005802:	2300      	movs	r3, #0
 8005804:	e0b7      	b.n	8005976 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6838      	ldr	r0, [r7, #0]
 8005814:	f7fb f82d 	bl	8000872 <lfs_min>
 8005818:	6038      	str	r0, [r7, #0]
    nsize = size;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800581e:	e0a5      	b.n	800596c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d006      	beq.n	800583a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005834:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d130      	bne.n	800589c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11c      	bne.n	8005880 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	3138      	adds	r1, #56	@ 0x38
 800585c:	68b8      	ldr	r0, [r7, #8]
 800585e:	303c      	adds	r0, #60	@ 0x3c
 8005860:	9003      	str	r0, [sp, #12]
 8005862:	9102      	str	r1, [sp, #8]
 8005864:	9201      	str	r2, [sp, #4]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	462b      	mov	r3, r5
 800586a:	4622      	mov	r2, r4
 800586c:	2100      	movs	r1, #0
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff f93f 	bl	8004af2 <lfs_ctz_find>
 8005874:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <lfs_file_flushedread+0xb0>
                    return err;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	e07a      	b.n	8005976 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f06f 0201 	mvn.w	r2, #1
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	4619      	mov	r1, r3
 80058aa:	6a38      	ldr	r0, [r7, #32]
 80058ac:	f7fa ffe1 	bl	8000872 <lfs_min>
 80058b0:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d026      	beq.n	800590c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f103 0408 	add.w	r4, r3, #8
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ce:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	889b      	ldrh	r3, [r3, #4]
 80058d4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80058d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80058e2:	69b8      	ldr	r0, [r7, #24]
 80058e4:	9005      	str	r0, [sp, #20]
 80058e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058e8:	9004      	str	r0, [sp, #16]
 80058ea:	9103      	str	r1, [sp, #12]
 80058ec:	9302      	str	r3, [sp, #8]
 80058ee:	4b24      	ldr	r3, [pc, #144]	@ (8005980 <lfs_file_flushedread+0x1a0>)
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	9200      	str	r2, [sp, #0]
 80058f4:	462b      	mov	r3, r5
 80058f6:	2200      	movs	r2, #0
 80058f8:	4621      	mov	r1, r4
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7fc fa01 	bl	8001d02 <lfs_dir_getread>
 8005900:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01d      	beq.n	8005944 <lfs_file_flushedread+0x164>
                return err;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	e034      	b.n	8005976 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005916:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005920:	69b9      	ldr	r1, [r7, #24]
 8005922:	9103      	str	r1, [sp, #12]
 8005924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005926:	9102      	str	r1, [sp, #8]
 8005928:	9201      	str	r2, [sp, #4]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	4623      	mov	r3, r4
 800592e:	4602      	mov	r2, r0
 8005930:	2100      	movs	r1, #0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7fb f878 	bl	8000a28 <lfs_bd_read>
 8005938:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <lfs_file_flushedread+0x164>
                return err;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	e018      	b.n	8005976 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	441a      	add	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	441a      	add	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 800595c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	4413      	add	r3, r2
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f47f af56 	bne.w	8005820 <lfs_file_flushedread+0x40>
    }

    return size;
 8005974:	683b      	ldr	r3, [r7, #0]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	@ 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bdb0      	pop	{r4, r5, r7, pc}
 800597e:	bf00      	nop
 8005980:	fff7fc00 	.word	0xfff7fc00

08005984 <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005984:	b5b0      	push	{r4, r5, r7, lr}
 8005986:	b090      	sub	sp, #64	@ 0x40
 8005988:	af04      	add	r7, sp, #16
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80f4 	beq.w	8005b90 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	441a      	add	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7fa ff4b 	bl	8000852 <lfs_max>
 80059bc:	4602      	mov	r2, r0
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80059c2:	429a      	cmp	r2, r3
 80059c4:	f240 80e4 	bls.w	8005b90 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fd72 	bl	80054b4 <lfs_file_outline>
 80059d0:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80db 	beq.w	8005b90 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e8:	e0d7      	b.n	8005b9a <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059fe:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d16d      	bne.n	8005ae0 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d159      	bne.n	8005ac4 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d12f      	bne.n	8005a7c <lfs_file_flushedwrite+0xf8>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d02b      	beq.n	8005a7c <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a36:	3a01      	subs	r2, #1
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a40:	f107 0010 	add.w	r0, r7, #16
 8005a44:	9003      	str	r0, [sp, #12]
 8005a46:	9102      	str	r1, [sp, #8]
 8005a48:	9201      	str	r2, [sp, #4]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	4622      	mov	r2, r4
 8005a50:	2100      	movs	r1, #0
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff f84d 	bl	8004af2 <lfs_ctz_find>
 8005a58:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	e094      	b.n	8005b9a <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3340      	adds	r3, #64	@ 0x40
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7fa ffc0 	bl	80009fc <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7fb ff10 	bl	80018a2 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005a88:	68fc      	ldr	r4, [r7, #12]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	3238      	adds	r2, #56	@ 0x38
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	313c      	adds	r1, #60	@ 0x3c
 8005a9a:	9102      	str	r1, [sp, #8]
 8005a9c:	9201      	str	r2, [sp, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	4601      	mov	r1, r0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff f88e 	bl	8004bc8 <lfs_ctz_extend>
 8005aac:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00f      	beq.n	8005ad4 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	e06a      	b.n	8005b9a <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f06f 0201 	mvn.w	r2, #1
 8005aca:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	4619      	mov	r1, r3
 8005aee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af0:	f7fa febf 	bl	8000872 <lfs_min>
 8005af4:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005afc:	68fc      	ldr	r4, [r7, #12]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	9103      	str	r1, [sp, #12]
 8005b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b0c:	9102      	str	r1, [sp, #8]
 8005b0e:	9201      	str	r2, [sp, #4]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2301      	movs	r3, #1
 8005b14:	4622      	mov	r2, r4
 8005b16:	4601      	mov	r1, r0
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7fb fa17 	bl	8000f4c <lfs_bd_prog>
 8005b1e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01c      	beq.n	8005b60 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005b2c:	d007      	beq.n	8005b3e <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e02d      	b.n	8005b9a <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8005b3e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fbdc 	bl	8005300 <lfs_file_relocate>
 8005b48:	6178      	str	r0, [r7, #20]
            if (err) {
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0d2      	beq.n	8005af6 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b54:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	e01c      	b.n	8005b9a <lfs_file_flushedwrite+0x216>
            break;
 8005b60:	bf00      	nop
            }
        }

        file->pos += diff;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	441a      	add	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	441a      	add	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8005b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8005b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7fb fe89 	bl	80018a2 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f47f af29 	bne.w	80059ea <lfs_file_flushedwrite+0x66>
    }

    return size;
 8005b98:	683b      	ldr	r3, [r7, #0]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3730      	adds	r7, #48	@ 0x30
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ba4 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08a      	sub	sp, #40	@ 0x28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <lfs_file_write_+0x28>
 8005bbe:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <lfs_file_write_+0xfc>)
 8005bc0:	4a38      	ldr	r2, [pc, #224]	@ (8005ca4 <lfs_file_write_+0x100>)
 8005bc2:	f640 6149 	movw	r1, #3657	@ 0xe49
 8005bc6:	4838      	ldr	r0, [pc, #224]	@ (8005ca8 <lfs_file_write_+0x104>)
 8005bc8:	f003 f8a4 	bl	8008d14 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7ff fc8c 	bl	80054f8 <lfs_file_flush>
 8005be0:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <lfs_file_write_+0x48>
            return err;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	e055      	b.n	8005c98 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <lfs_file_write_+0x68>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d203      	bcs.n	8005c0c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d902      	bls.n	8005c22 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005c1c:	f06f 031a 	mvn.w	r3, #26
 8005c20:	e03a      	b.n	8005c98 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d121      	bne.n	8005c72 <lfs_file_write_+0xce>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d91b      	bls.n	8005c72 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8005c48:	e00e      	b.n	8005c68 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
 8005c4e:	f107 0217 	add.w	r2, r7, #23
 8005c52:	2301      	movs	r3, #1
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fe94 	bl	8005984 <lfs_file_flushedwrite>
 8005c5c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da01      	bge.n	8005c68 <lfs_file_write_+0xc4>
                return res;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	e017      	b.n	8005c98 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6c:	6a3a      	ldr	r2, [r7, #32]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d8eb      	bhi.n	8005c4a <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff fe83 	bl	8005984 <lfs_file_flushedwrite>
 8005c7e:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da01      	bge.n	8005c8a <lfs_file_write_+0xe6>
        return nsize;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	e006      	b.n	8005c98 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8005c96:	69bb      	ldr	r3, [r7, #24]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	@ 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0800a128 	.word	0x0800a128
 8005ca4:	0800ac14 	.word	0x0800ac14
 8005ca8:	08009d8c 	.word	0x08009d8c

08005cac <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b08d      	sub	sp, #52	@ 0x34
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <lfs_init+0x34>
 8005cd2:	4b98      	ldr	r3, [pc, #608]	@ (8005f34 <lfs_init+0x288>)
 8005cd4:	4a98      	ldr	r2, [pc, #608]	@ (8005f38 <lfs_init+0x28c>)
 8005cd6:	f241 0176 	movw	r1, #4214	@ 0x1076
 8005cda:	4898      	ldr	r0, [pc, #608]	@ (8005f3c <lfs_init+0x290>)
 8005cdc:	f003 f81a 	bl	8008d14 <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <lfs_init+0x4c>
 8005cea:	4b95      	ldr	r3, [pc, #596]	@ (8005f40 <lfs_init+0x294>)
 8005cec:	4a92      	ldr	r2, [pc, #584]	@ (8005f38 <lfs_init+0x28c>)
 8005cee:	f241 0178 	movw	r1, #4216	@ 0x1078
 8005cf2:	4892      	ldr	r0, [pc, #584]	@ (8005f3c <lfs_init+0x290>)
 8005cf4:	f003 f80e 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <lfs_init+0x64>
 8005d02:	4b90      	ldr	r3, [pc, #576]	@ (8005f44 <lfs_init+0x298>)
 8005d04:	4a8c      	ldr	r2, [pc, #560]	@ (8005f38 <lfs_init+0x28c>)
 8005d06:	f241 0179 	movw	r1, #4217	@ 0x1079
 8005d0a:	488c      	ldr	r0, [pc, #560]	@ (8005f3c <lfs_init+0x290>)
 8005d0c:	f003 f802 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <lfs_init+0x7c>
 8005d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8005f48 <lfs_init+0x29c>)
 8005d1c:	4a86      	ldr	r2, [pc, #536]	@ (8005f38 <lfs_init+0x28c>)
 8005d1e:	f241 017a 	movw	r1, #4218	@ 0x107a
 8005d22:	4886      	ldr	r0, [pc, #536]	@ (8005f3c <lfs_init+0x290>)
 8005d24:	f002 fff6 	bl	8008d14 <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <lfs_init+0x94>
 8005d32:	4b86      	ldr	r3, [pc, #536]	@ (8005f4c <lfs_init+0x2a0>)
 8005d34:	4a80      	ldr	r2, [pc, #512]	@ (8005f38 <lfs_init+0x28c>)
 8005d36:	f241 017f 	movw	r1, #4223	@ 0x107f
 8005d3a:	4880      	ldr	r0, [pc, #512]	@ (8005f3c <lfs_init+0x290>)
 8005d3c:	f002 ffea 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <lfs_init+0xac>
 8005d4a:	4b81      	ldr	r3, [pc, #516]	@ (8005f50 <lfs_init+0x2a4>)
 8005d4c:	4a7a      	ldr	r2, [pc, #488]	@ (8005f38 <lfs_init+0x28c>)
 8005d4e:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8005d52:	487a      	ldr	r0, [pc, #488]	@ (8005f3c <lfs_init+0x290>)
 8005d54:	f002 ffde 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <lfs_init+0xc4>
 8005d62:	4b7c      	ldr	r3, [pc, #496]	@ (8005f54 <lfs_init+0x2a8>)
 8005d64:	4a74      	ldr	r2, [pc, #464]	@ (8005f38 <lfs_init+0x28c>)
 8005d66:	f241 0181 	movw	r1, #4225	@ 0x1081
 8005d6a:	4874      	ldr	r0, [pc, #464]	@ (8005f3c <lfs_init+0x290>)
 8005d6c:	f002 ffd2 	bl	8008d14 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d7a:	6952      	ldr	r2, [r2, #20]
 8005d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d80:	fb01 f202 	mul.w	r2, r1, r2
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d006      	beq.n	8005d98 <lfs_init+0xec>
 8005d8a:	4b73      	ldr	r3, [pc, #460]	@ (8005f58 <lfs_init+0x2ac>)
 8005d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8005f38 <lfs_init+0x28c>)
 8005d8e:	f241 0185 	movw	r1, #4229	@ 0x1085
 8005d92:	486a      	ldr	r0, [pc, #424]	@ (8005f3c <lfs_init+0x290>)
 8005d94:	f002 ffbe 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005da2:	6992      	ldr	r2, [r2, #24]
 8005da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005da8:	fb01 f202 	mul.w	r2, r1, r2
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d006      	beq.n	8005dc0 <lfs_init+0x114>
 8005db2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f5c <lfs_init+0x2b0>)
 8005db4:	4a60      	ldr	r2, [pc, #384]	@ (8005f38 <lfs_init+0x28c>)
 8005db6:	f241 0186 	movw	r1, #4230	@ 0x1086
 8005dba:	4860      	ldr	r0, [pc, #384]	@ (8005f3c <lfs_init+0x290>)
 8005dbc:	f002 ffaa 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005dca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd0:	fb01 f202 	mul.w	r2, r1, r2
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <lfs_init+0x13c>
 8005dda:	4b61      	ldr	r3, [pc, #388]	@ (8005f60 <lfs_init+0x2b4>)
 8005ddc:	4a56      	ldr	r2, [pc, #344]	@ (8005f38 <lfs_init+0x28c>)
 8005dde:	f241 0187 	movw	r1, #4231	@ 0x1087
 8005de2:	4856      	ldr	r0, [pc, #344]	@ (8005f3c <lfs_init+0x290>)
 8005de4:	f002 ff96 	bl	8008d14 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df0:	d806      	bhi.n	8005e00 <lfs_init+0x154>
 8005df2:	4b5c      	ldr	r3, [pc, #368]	@ (8005f64 <lfs_init+0x2b8>)
 8005df4:	4a50      	ldr	r2, [pc, #320]	@ (8005f38 <lfs_init+0x28c>)
 8005df6:	f241 018a 	movw	r1, #4234	@ 0x108a
 8005dfa:	4850      	ldr	r0, [pc, #320]	@ (8005f3c <lfs_init+0x290>)
 8005dfc:	f002 ff8a 	bl	8008d14 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	3b08      	subs	r3, #8
 8005e08:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fa fd65 	bl	80008e0 <lfs_npw2>
 8005e16:	4603      	mov	r3, r0
 8005e18:	009a      	lsls	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d906      	bls.n	8005e32 <lfs_init+0x186>
 8005e24:	4b50      	ldr	r3, [pc, #320]	@ (8005f68 <lfs_init+0x2bc>)
 8005e26:	4a44      	ldr	r2, [pc, #272]	@ (8005f38 <lfs_init+0x28c>)
 8005e28:	f241 018d 	movw	r1, #4237	@ 0x108d
 8005e2c:	4843      	ldr	r0, [pc, #268]	@ (8005f3c <lfs_init+0x290>)
 8005e2e:	f002 ff71 	bl	8008d14 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <lfs_init+0x19e>
 8005e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f6c <lfs_init+0x2c0>)
 8005e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005f38 <lfs_init+0x28c>)
 8005e40:	f241 0196 	movw	r1, #4246	@ 0x1096
 8005e44:	483d      	ldr	r0, [pc, #244]	@ (8005f3c <lfs_init+0x290>)
 8005e46:	f002 ff65 	bl	8008d14 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <lfs_init+0x1c8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d206      	bcs.n	8005e74 <lfs_init+0x1c8>
 8005e66:	4b42      	ldr	r3, [pc, #264]	@ (8005f70 <lfs_init+0x2c4>)
 8005e68:	4a33      	ldr	r2, [pc, #204]	@ (8005f38 <lfs_init+0x28c>)
 8005e6a:	f241 019c 	movw	r1, #4252	@ 0x109c
 8005e6e:	4833      	ldr	r0, [pc, #204]	@ (8005f3c <lfs_init+0x290>)
 8005e70:	f002 ff50 	bl	8008d14 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d00e      	beq.n	8005e9e <lfs_init+0x1f2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d906      	bls.n	8005e9e <lfs_init+0x1f2>
 8005e90:	4b38      	ldr	r3, [pc, #224]	@ (8005f74 <lfs_init+0x2c8>)
 8005e92:	4a29      	ldr	r2, [pc, #164]	@ (8005f38 <lfs_init+0x28c>)
 8005e94:	f241 019e 	movw	r1, #4254	@ 0x109e
 8005e98:	4828      	ldr	r0, [pc, #160]	@ (8005f3c <lfs_init+0x290>)
 8005e9a:	f002 ff3b 	bl	8008d14 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d013      	beq.n	8005ed0 <lfs_init+0x224>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005eb2:	6952      	ldr	r2, [r2, #20]
 8005eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eb8:	fb01 f202 	mul.w	r2, r1, r2
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d006      	beq.n	8005ed0 <lfs_init+0x224>
 8005ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8005f78 <lfs_init+0x2cc>)
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <lfs_init+0x28c>)
 8005ec6:	f241 01a3 	movw	r1, #4259	@ 0x10a3
 8005eca:	481c      	ldr	r0, [pc, #112]	@ (8005f3c <lfs_init+0x290>)
 8005ecc:	f002 ff22 	bl	8008d14 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d013      	beq.n	8005f02 <lfs_init+0x256>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ee4:	6992      	ldr	r2, [r2, #24]
 8005ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eea:	fb01 f202 	mul.w	r2, r1, r2
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <lfs_init+0x256>
 8005ef4:	4b21      	ldr	r3, [pc, #132]	@ (8005f7c <lfs_init+0x2d0>)
 8005ef6:	4a10      	ldr	r2, [pc, #64]	@ (8005f38 <lfs_init+0x28c>)
 8005ef8:	f241 01a5 	movw	r1, #4261	@ 0x10a5
 8005efc:	480f      	ldr	r0, [pc, #60]	@ (8005f3c <lfs_init+0x290>)
 8005efe:	f002 ff09 	bl	8008d14 <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d03b      	beq.n	8005f84 <lfs_init+0x2d8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f16:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f1c:	fb01 f202 	mul.w	r2, r1, r2
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d02e      	beq.n	8005f84 <lfs_init+0x2d8>
 8005f26:	4b16      	ldr	r3, [pc, #88]	@ (8005f80 <lfs_init+0x2d4>)
 8005f28:	4a03      	ldr	r2, [pc, #12]	@ (8005f38 <lfs_init+0x28c>)
 8005f2a:	f241 01a7 	movw	r1, #4263	@ 0x10a7
 8005f2e:	4803      	ldr	r0, [pc, #12]	@ (8005f3c <lfs_init+0x290>)
 8005f30:	f002 fef0 	bl	8008d14 <__assert_func>
 8005f34:	0800a158 	.word	0x0800a158
 8005f38:	0800ac24 	.word	0x0800ac24
 8005f3c:	08009d8c 	.word	0x08009d8c
 8005f40:	0800a178 	.word	0x0800a178
 8005f44:	0800a198 	.word	0x0800a198
 8005f48:	0800a1b8 	.word	0x0800a1b8
 8005f4c:	0800a1d8 	.word	0x0800a1d8
 8005f50:	0800a1f4 	.word	0x0800a1f4
 8005f54:	0800a210 	.word	0x0800a210
 8005f58:	0800a22c 	.word	0x0800a22c
 8005f5c:	0800a25c 	.word	0x0800a25c
 8005f60:	0800a28c 	.word	0x0800a28c
 8005f64:	0800a2c0 	.word	0x0800a2c0
 8005f68:	0800a2dc 	.word	0x0800a2dc
 8005f6c:	0800a328 	.word	0x0800a328
 8005f70:	0800a344 	.word	0x0800a344
 8005f74:	0800a398 	.word	0x0800a398
 8005f78:	0800a3f8 	.word	0x0800a3f8
 8005f7c:	0800a448 	.word	0x0800a448
 8005f80:	0800a498 	.word	0x0800a498
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <lfs_init+0x2ee>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	e010      	b.n	8005fbc <lfs_init+0x310>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fa fd05 	bl	80009b0 <lfs_malloc>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <lfs_init+0x310>
            err = LFS_ERR_NOMEM;
 8005fb4:	f06f 030b 	mvn.w	r3, #11
 8005fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005fba:	e145      	b.n	8006248 <lfs_init+0x59c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <lfs_init+0x326>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	61da      	str	r2, [r3, #28]
 8005fd0:	e010      	b.n	8005ff4 <lfs_init+0x348>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fa fce9 	bl	80009b0 <lfs_malloc>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <lfs_init+0x348>
            err = LFS_ERR_NOMEM;
 8005fec:	f06f 030b 	mvn.w	r3, #11
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8005ff2:	e129      	b.n	8006248 <lfs_init+0x59c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7fa fcff 	bl	80009fc <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3310      	adds	r3, #16
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fa fcf9 	bl	80009fc <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <lfs_init+0x376>
 8006014:	4b90      	ldr	r3, [pc, #576]	@ (8006258 <lfs_init+0x5ac>)
 8006016:	4a91      	ldr	r2, [pc, #580]	@ (800625c <lfs_init+0x5b0>)
 8006018:	f241 01c6 	movw	r1, #4294	@ 0x10c6
 800601c:	4890      	ldr	r0, [pc, #576]	@ (8006260 <lfs_init+0x5b4>)
 800601e:	f002 fe79 	bl	8008d14 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <lfs_init+0x38c>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	665a      	str	r2, [r3, #100]	@ 0x64
 8006036:	e010      	b.n	800605a <lfs_init+0x3ae>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa fcb6 	bl	80009b0 <lfs_malloc>
 8006044:	4602      	mov	r2, r0
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <lfs_init+0x3ae>
            err = LFS_ERR_NOMEM;
 8006052:	f06f 030b 	mvn.w	r3, #11
 8006056:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8006058:	e0f6      	b.n	8006248 <lfs_init+0x59c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	2bff      	cmp	r3, #255	@ 0xff
 8006062:	d906      	bls.n	8006072 <lfs_init+0x3c6>
 8006064:	4b7f      	ldr	r3, [pc, #508]	@ (8006264 <lfs_init+0x5b8>)
 8006066:	4a7d      	ldr	r2, [pc, #500]	@ (800625c <lfs_init+0x5b0>)
 8006068:	f241 01d2 	movw	r1, #4306	@ 0x10d2
 800606c:	487c      	ldr	r0, [pc, #496]	@ (8006260 <lfs_init+0x5b4>)
 800606e:	f002 fe51 	bl	8008d14 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <lfs_init+0x3de>
        lfs->name_max = LFS_NAME_MAX;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	22ff      	movs	r2, #255	@ 0xff
 8006088:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800608e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006090:	2b00      	cmp	r3, #0
 8006092:	da06      	bge.n	80060a2 <lfs_init+0x3f6>
 8006094:	4b74      	ldr	r3, [pc, #464]	@ (8006268 <lfs_init+0x5bc>)
 8006096:	4a71      	ldr	r2, [pc, #452]	@ (800625c <lfs_init+0x5b0>)
 8006098:	f241 01d8 	movw	r1, #4312	@ 0x10d8
 800609c:	4870      	ldr	r0, [pc, #448]	@ (8006260 <lfs_init+0x5b4>)
 800609e:	f002 fe39 	bl	8008d14 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <lfs_init+0x410>
        lfs->file_max = LFS_FILE_MAX;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80060ba:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d906      	bls.n	80060d8 <lfs_init+0x42c>
 80060ca:	4b68      	ldr	r3, [pc, #416]	@ (800626c <lfs_init+0x5c0>)
 80060cc:	4a63      	ldr	r2, [pc, #396]	@ (800625c <lfs_init+0x5b0>)
 80060ce:	f241 01de 	movw	r1, #4318	@ 0x10de
 80060d2:	4863      	ldr	r0, [pc, #396]	@ (8006260 <lfs_init+0x5b4>)
 80060d4:	f002 fe1e 	bl	8008d14 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <lfs_init+0x446>
        lfs->attr_max = LFS_ATTR_MAX;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80060f0:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d906      	bls.n	8006110 <lfs_init+0x464>
 8006102:	4b5b      	ldr	r3, [pc, #364]	@ (8006270 <lfs_init+0x5c4>)
 8006104:	4a55      	ldr	r2, [pc, #340]	@ (800625c <lfs_init+0x5b0>)
 8006106:	f241 01e4 	movw	r1, #4324	@ 0x10e4
 800610a:	4855      	ldr	r0, [pc, #340]	@ (8006260 <lfs_init+0x5b4>)
 800610c:	f002 fe02 	bl	8008d14 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d00e      	beq.n	800613a <lfs_init+0x48e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	429a      	cmp	r2, r3
 800612a:	d906      	bls.n	800613a <lfs_init+0x48e>
 800612c:	4b51      	ldr	r3, [pc, #324]	@ (8006274 <lfs_init+0x5c8>)
 800612e:	4a4b      	ldr	r2, [pc, #300]	@ (800625c <lfs_init+0x5b0>)
 8006130:	f241 01e6 	movw	r1, #4326	@ 0x10e6
 8006134:	484a      	ldr	r0, [pc, #296]	@ (8006260 <lfs_init+0x5b4>)
 8006136:	f002 fded 	bl	8008d14 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800613e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d00d      	beq.n	8006162 <lfs_init+0x4b6>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800614a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006150:	429a      	cmp	r2, r3
 8006152:	d906      	bls.n	8006162 <lfs_init+0x4b6>
 8006154:	4b48      	ldr	r3, [pc, #288]	@ (8006278 <lfs_init+0x5cc>)
 8006156:	4a41      	ldr	r2, [pc, #260]	@ (800625c <lfs_init+0x5b0>)
 8006158:	f241 01e8 	movw	r1, #4328	@ 0x10e8
 800615c:	4840      	ldr	r0, [pc, #256]	@ (8006260 <lfs_init+0x5b4>)
 800615e:	f002 fdd9 	bl	8008d14 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d019      	beq.n	80061a2 <lfs_init+0x4f6>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <lfs_init+0x4dc>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006184:	08db      	lsrs	r3, r3, #3
 8006186:	e003      	b.n	8006190 <lfs_init+0x4e4>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	08db      	lsrs	r3, r3, #3
 8006190:	4293      	cmp	r3, r2
 8006192:	d206      	bcs.n	80061a2 <lfs_init+0x4f6>
 8006194:	4b39      	ldr	r3, [pc, #228]	@ (800627c <lfs_init+0x5d0>)
 8006196:	4a31      	ldr	r2, [pc, #196]	@ (800625c <lfs_init+0x5b0>)
 8006198:	f241 01ea 	movw	r1, #4330	@ 0x10ea
 800619c:	4830      	ldr	r0, [pc, #192]	@ (8006260 <lfs_init+0x5b4>)
 800619e:	f002 fdb9 	bl	8008d14 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b4:	d103      	bne.n	80061be <lfs_init+0x512>
        lfs->inline_max = 0;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	67da      	str	r2, [r3, #124]	@ 0x7c
 80061bc:	e022      	b.n	8006204 <lfs_init+0x558>
    } else if (lfs->inline_max == 0) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d11e      	bne.n	8006204 <lfs_init+0x558>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061ca:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <lfs_init+0x538>
                        ? lfs->cfg->metadata_max
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 80061e0:	08db      	lsrs	r3, r3, #3
 80061e2:	e003      	b.n	80061ec <lfs_init+0x540>
                        : lfs->cfg->block_size)/8));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061e8:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fa fb3f 	bl	8000872 <lfs_min>
 80061f4:	4603      	mov	r3, r0
 80061f6:	4619      	mov	r1, r3
 80061f8:	4620      	mov	r0, r4
 80061fa:	f7fa fb3a 	bl	8000872 <lfs_min>
 80061fe:	4602      	mov	r2, r0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f04f 32ff 	mov.w	r2, #4294967295
 800620a:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f04f 32ff 	mov.w	r2, #4294967295
 8006212:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	333c      	adds	r3, #60	@ 0x3c
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3330      	adds	r3, #48	@ 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3348      	adds	r3, #72	@ 0x48
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006244:	2300      	movs	r3, #0
 8006246:	e003      	b.n	8006250 <lfs_init+0x5a4>

cleanup:
    lfs_deinit(lfs);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f819 	bl	8006280 <lfs_deinit>
    return err;
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006250:	4618      	mov	r0, r3
 8006252:	3734      	adds	r7, #52	@ 0x34
 8006254:	46bd      	mov	sp, r7
 8006256:	bd90      	pop	{r4, r7, pc}
 8006258:	0800a4e8 	.word	0x0800a4e8
 800625c:	0800ac24 	.word	0x0800ac24
 8006260:	08009d8c 	.word	0x08009d8c
 8006264:	0800a508 	.word	0x0800a508
 8006268:	0800a524 	.word	0x0800a524
 800626c:	0800a548 	.word	0x0800a548
 8006270:	0800a564 	.word	0x0800a564
 8006274:	0800a594 	.word	0x0800a594
 8006278:	0800a5ec 	.word	0x0800a5ec
 800627c:	0800a63c 	.word	0x0800a63c

08006280 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800628c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628e:	2b00      	cmp	r3, #0
 8006290:	d104      	bne.n	800629c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa fb96 	bl	80009c8 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa fb8c 	bl	80009c8 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fa fb82 	bl	80009c8 <lfs_free>
    }

    return 0;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b0a0      	sub	sp, #128	@ 0x80
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
    int err = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff fce3 	bl	8005cac <lfs_init>
 80062e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80062e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <lfs_format_+0x22>
            return err;
 80062ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062f0:	e08d      	b.n	800640e <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <lfs_format_+0x38>
 80062fa:	4b47      	ldr	r3, [pc, #284]	@ (8006418 <lfs_format_+0x148>)
 80062fc:	4a47      	ldr	r2, [pc, #284]	@ (800641c <lfs_format_+0x14c>)
 80062fe:	f241 112a 	movw	r1, #4394	@ 0x112a
 8006302:	4847      	ldr	r0, [pc, #284]	@ (8006420 <lfs_format_+0x150>)
 8006304:	f002 fd06 	bl	8008d14 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	461a      	mov	r2, r3
 8006314:	2100      	movs	r1, #0
 8006316:	f002 ff12 	bl	800913e <memset>
        lfs->lookahead.start = 0;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	00da      	lsls	r2, r3, #3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f7fa fa9f 	bl	8000872 <lfs_min>
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7fb faae 	bl	80018a2 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006346:	f107 030c 	add.w	r3, r7, #12
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fd f985 	bl	800365c <lfs_dir_alloc>
 8006352:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8006354:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d150      	bne.n	80063fc <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb fa78 	bl	8001850 <lfs_fs_disk_version>
 8006360:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8006362:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006368:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800636a:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8006370:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8006376:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 800637c:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 8006382:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8006384:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006388:	4618      	mov	r0, r3
 800638a:	f7fb f9d7 	bl	800173c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800638e:	4b25      	ldr	r3, [pc, #148]	@ (8006424 <lfs_format_+0x154>)
 8006390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006392:	2300      	movs	r3, #0
 8006394:	653b      	str	r3, [r7, #80]	@ 0x50
 8006396:	4b24      	ldr	r3, [pc, #144]	@ (8006428 <lfs_format_+0x158>)
 8006398:	657b      	str	r3, [r7, #84]	@ 0x54
 800639a:	4b24      	ldr	r3, [pc, #144]	@ (800642c <lfs_format_+0x15c>)
 800639c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800639e:	4b24      	ldr	r3, [pc, #144]	@ (8006430 <lfs_format_+0x160>)
 80063a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80063a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80063a8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80063ac:	f107 010c 	add.w	r1, r7, #12
 80063b0:	2303      	movs	r3, #3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fe fb40 	bl	8004a38 <lfs_dir_commit>
 80063b8:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80063ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11f      	bne.n	8006400 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80063c6:	f107 010c 	add.w	r1, r7, #12
 80063ca:	2300      	movs	r3, #0
 80063cc:	2200      	movs	r2, #0
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fe fb32 	bl	8004a38 <lfs_dir_commit>
 80063d4:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80063d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d113      	bne.n	8006404 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80063dc:	2300      	movs	r3, #0
 80063de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e0:	2301      	movs	r3, #1
 80063e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80063e8:	f107 030c 	add.w	r3, r7, #12
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fc fd72 	bl	8002ed8 <lfs_dir_fetch>
 80063f4:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80063f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	e004      	b.n	8006406 <lfs_format_+0x136>
            goto cleanup;
 80063fc:	bf00      	nop
 80063fe:	e002      	b.n	8006406 <lfs_format_+0x136>
            goto cleanup;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <lfs_format_+0x136>
            goto cleanup;
 8006404:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff ff3a 	bl	8006280 <lfs_deinit>
    return err;
 800640c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 800640e:	4618      	mov	r0, r3
 8006410:	3780      	adds	r7, #128	@ 0x80
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	0800a6cc 	.word	0x0800a6cc
 800641c:	0800ac30 	.word	0x0800ac30
 8006420:	08009d8c 	.word	0x08009d8c
 8006424:	40100000 	.word	0x40100000
 8006428:	0ff00008 	.word	0x0ff00008
 800642c:	0800a6e4 	.word	0x0800a6e4
 8006430:	20100018 	.word	0x20100018

08006434 <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3318      	adds	r3, #24
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa fefe 	bl	8001248 <lfs_pair_issync>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <lfs_tortoise_detectcycles+0x32>
        LFS_WARN("Cycle detected in tail list");
 8006452:	4b15      	ldr	r3, [pc, #84]	@ (80064a8 <lfs_tortoise_detectcycles+0x74>)
 8006454:	f241 126f 	movw	r2, #4463	@ 0x116f
 8006458:	4914      	ldr	r1, [pc, #80]	@ (80064ac <lfs_tortoise_detectcycles+0x78>)
 800645a:	4815      	ldr	r0, [pc, #84]	@ (80064b0 <lfs_tortoise_detectcycles+0x7c>)
 800645c:	f002 fe0a 	bl	8009074 <iprintf>
        return LFS_ERR_CORRUPT;
 8006460:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006464:	e01b      	b.n	800649e <lfs_tortoise_detectcycles+0x6a>
    }
    if (tortoise->i == tortoise->period) {
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d10f      	bne.n	8006492 <lfs_tortoise_detectcycles+0x5e>
        tortoise->pair[0] = dir->tail[0];
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2200      	movs	r2, #0
 8006486:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	005a      	lsls	r2, r3, #1
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	08009ed4 	.word	0x08009ed4
 80064ac:	08009d8c 	.word	0x08009d8c
 80064b0:	0800a6f0 	.word	0x0800a6f0

080064b4 <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 80064b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b6:	b0a1      	sub	sp, #132	@ 0x84
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fbf3 	bl	8005cac <lfs_init>
 80064c6:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 80064c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <lfs_mount_+0x1e>
        return err;
 80064ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d0:	e1e5      	b.n	800689e <lfs_mount_+0x3ea>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80064d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80064d6:	2220      	movs	r2, #32
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f002 fe2f 	bl	800913e <memset>
 80064e0:	2301      	movs	r3, #1
 80064e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    struct lfs_tortoise_t tortoise = {
 80064e4:	4ba0      	ldr	r3, [pc, #640]	@ (8006768 <lfs_mount_+0x2b4>)
 80064e6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80064ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 80064f0:	e17f      	b.n	80067f2 <lfs_mount_+0x33e>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 80064f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80064f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff ff99 	bl	8006434 <lfs_tortoise_detectcycles>
 8006502:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err < 0) {
 8006504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006506:	2b00      	cmp	r3, #0
 8006508:	f2c0 81c2 	blt.w	8006890 <lfs_mount_+0x3dc>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006510:	4b96      	ldr	r3, [pc, #600]	@ (800676c <lfs_mount_+0x2b8>)
 8006512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006514:	2308      	movs	r3, #8
 8006516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006518:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800651c:	f103 0218 	add.w	r2, r3, #24
 8006520:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8006524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006528:	9303      	str	r3, [sp, #12]
 800652a:	4b91      	ldr	r3, [pc, #580]	@ (8006770 <lfs_mount_+0x2bc>)
 800652c:	9302      	str	r3, [sp, #8]
 800652e:	2300      	movs	r3, #0
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	4b90      	ldr	r3, [pc, #576]	@ (8006774 <lfs_mount_+0x2c0>)
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4b90      	ldr	r3, [pc, #576]	@ (8006778 <lfs_mount_+0x2c4>)
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7fc f8fd 	bl	8002738 <lfs_dir_fetchmatch>
 800653e:	6678      	str	r0, [r7, #100]	@ 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006540:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006542:	2b00      	cmp	r3, #0
 8006544:	da02      	bge.n	800654c <lfs_mount_+0x98>
            err = tag;
 8006546:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006548:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 800654a:	e1a4      	b.n	8006896 <lfs_mount_+0x3e2>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800654c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8142 	beq.w	80067d8 <lfs_mount_+0x324>
 8006554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa fee5 	bl	8001326 <lfs_tag_isdelete>
 800655c:	4603      	mov	r3, r0
 800655e:	f083 0301 	eor.w	r3, r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8137 	beq.w	80067d8 <lfs_mount_+0x324>
            // update root
            lfs->root[0] = dir.pair[0];
 800656a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006576:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800657a:	f107 030c 	add.w	r3, r7, #12
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	4b7e      	ldr	r3, [pc, #504]	@ (800677c <lfs_mount_+0x2c8>)
 8006582:	4a7d      	ldr	r2, [pc, #500]	@ (8006778 <lfs_mount_+0x2c4>)
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fb fba1 	bl	8001ccc <lfs_dir_get>
 800658a:	6678      	str	r0, [r7, #100]	@ 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800658c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800658e:	2b00      	cmp	r3, #0
 8006590:	da02      	bge.n	8006598 <lfs_mount_+0xe4>
                err = tag;
 8006592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006594:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006596:	e11e      	b.n	80067d6 <lfs_mount_+0x322>
            }
            lfs_superblock_fromle32(&superblock);
 8006598:	f107 030c 	add.w	r3, r7, #12
 800659c:	4618      	mov	r0, r3
 800659e:	f7fb f895 	bl	80016cc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
            if (major_version != lfs_fs_disk_version_major(lfs)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fb f95b 	bl	800186c <lfs_fs_disk_version_major>
 80065b6:	4603      	mov	r3, r0
 80065b8:	461a      	mov	r2, r3
 80065ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <lfs_mount_+0x120>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fb f960 	bl	8001888 <lfs_fs_disk_version_minor>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461a      	mov	r2, r3
 80065cc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d91d      	bls.n	8006610 <lfs_mount_+0x15c>
                LFS_ERROR("Invalid version "
 80065d4:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 80065d8:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fb f945 	bl	800186c <lfs_fs_disk_version_major>
 80065e2:	4603      	mov	r3, r0
 80065e4:	461e      	mov	r6, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fb f94e 	bl	8001888 <lfs_fs_disk_version_minor>
 80065ec:	4603      	mov	r3, r0
 80065ee:	461a      	mov	r2, r3
 80065f0:	4b63      	ldr	r3, [pc, #396]	@ (8006780 <lfs_mount_+0x2cc>)
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	9202      	str	r2, [sp, #8]
 80065f6:	9601      	str	r6, [sp, #4]
 80065f8:	9400      	str	r4, [sp, #0]
 80065fa:	462b      	mov	r3, r5
 80065fc:	f241 12b2 	movw	r2, #4530	@ 0x11b2
 8006600:	4960      	ldr	r1, [pc, #384]	@ (8006784 <lfs_mount_+0x2d0>)
 8006602:	4861      	ldr	r0, [pc, #388]	@ (8006788 <lfs_mount_+0x2d4>)
 8006604:	f002 fd36 	bl	8009074 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8006608:	f06f 0315 	mvn.w	r3, #21
 800660c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800660e:	e0e2      	b.n	80067d6 <lfs_mount_+0x322>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8006610:	2300      	movs	r3, #0
 8006612:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb f936 	bl	8001888 <lfs_fs_disk_version_minor>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006624:	4293      	cmp	r3, r2
 8006626:	d21c      	bcs.n	8006662 <lfs_mount_+0x1ae>
                LFS_DEBUG("Found older minor version "
 8006628:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 800662c:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fb f91b 	bl	800186c <lfs_fs_disk_version_major>
 8006636:	4603      	mov	r3, r0
 8006638:	461e      	mov	r6, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb f924 	bl	8001888 <lfs_fs_disk_version_minor>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	4b4e      	ldr	r3, [pc, #312]	@ (8006780 <lfs_mount_+0x2cc>)
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	9202      	str	r2, [sp, #8]
 800664a:	9601      	str	r6, [sp, #4]
 800664c:	9400      	str	r4, [sp, #0]
 800664e:	462b      	mov	r3, r5
 8006650:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 8006654:	494b      	ldr	r1, [pc, #300]	@ (8006784 <lfs_mount_+0x2d0>)
 8006656:	484d      	ldr	r0, [pc, #308]	@ (800678c <lfs_mount_+0x2d8>)
 8006658:	f002 fd0c 	bl	8009074 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 800665c:	2301      	movs	r3, #1
 800665e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8006662:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb4f 	bl	8006d0c <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d018      	beq.n	80066a6 <lfs_mount_+0x1f2>
                if (superblock.name_max > lfs->name_max) {
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800667a:	429a      	cmp	r2, r3
 800667c:	d910      	bls.n	80066a0 <lfs_mount_+0x1ec>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	493e      	ldr	r1, [pc, #248]	@ (8006780 <lfs_mount_+0x2cc>)
 8006686:	9101      	str	r1, [sp, #4]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	4613      	mov	r3, r2
 800668c:	f241 12d0 	movw	r2, #4560	@ 0x11d0
 8006690:	493c      	ldr	r1, [pc, #240]	@ (8006784 <lfs_mount_+0x2d0>)
 8006692:	483f      	ldr	r0, [pc, #252]	@ (8006790 <lfs_mount_+0x2dc>)
 8006694:	f002 fcee 	bl	8009074 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006698:	f06f 0315 	mvn.w	r3, #21
 800669c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800669e:	e09a      	b.n	80067d6 <lfs_mount_+0x322>
                }

                lfs->name_max = superblock.name_max;
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d018      	beq.n	80066de <lfs_mount_+0x22a>
                if (superblock.file_max > lfs->file_max) {
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d910      	bls.n	80066d8 <lfs_mount_+0x224>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066bc:	4930      	ldr	r1, [pc, #192]	@ (8006780 <lfs_mount_+0x2cc>)
 80066be:	9101      	str	r1, [sp, #4]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	f241 12db 	movw	r2, #4571	@ 0x11db
 80066c8:	492e      	ldr	r1, [pc, #184]	@ (8006784 <lfs_mount_+0x2d0>)
 80066ca:	4832      	ldr	r0, [pc, #200]	@ (8006794 <lfs_mount_+0x2e0>)
 80066cc:	f002 fcd2 	bl	8009074 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80066d0:	f06f 0315 	mvn.w	r3, #21
 80066d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80066d6:	e07e      	b.n	80067d6 <lfs_mount_+0x322>
                }

                lfs->file_max = superblock.file_max;
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d023      	beq.n	800672c <lfs_mount_+0x278>
                if (superblock.attr_max > lfs->attr_max) {
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d910      	bls.n	8006710 <lfs_mount_+0x25c>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80066ee:	6a3a      	ldr	r2, [r7, #32]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066f4:	4922      	ldr	r1, [pc, #136]	@ (8006780 <lfs_mount_+0x2cc>)
 80066f6:	9101      	str	r1, [sp, #4]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	f241 12e6 	movw	r2, #4582	@ 0x11e6
 8006700:	4920      	ldr	r1, [pc, #128]	@ (8006784 <lfs_mount_+0x2d0>)
 8006702:	4825      	ldr	r0, [pc, #148]	@ (8006798 <lfs_mount_+0x2e4>)
 8006704:	f002 fcb6 	bl	8009074 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006708:	f06f 0315 	mvn.w	r3, #21
 800670c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800670e:	e062      	b.n	80067d6 <lfs_mount_+0x322>
                }

                lfs->attr_max = superblock.attr_max;
 8006710:	6a3a      	ldr	r2, [r7, #32]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fa f8a6 	bl	8000872 <lfs_min>
 8006726:	4602      	mov	r2, r0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d034      	beq.n	80067a0 <lfs_mount_+0x2ec>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	429a      	cmp	r2, r3
 8006740:	d02e      	beq.n	80067a0 <lfs_mount_+0x2ec>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	490d      	ldr	r1, [pc, #52]	@ (8006780 <lfs_mount_+0x2cc>)
 800674c:	9101      	str	r1, [sp, #4]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	f241 12f5 	movw	r2, #4597	@ 0x11f5
 8006756:	490b      	ldr	r1, [pc, #44]	@ (8006784 <lfs_mount_+0x2d0>)
 8006758:	4810      	ldr	r0, [pc, #64]	@ (800679c <lfs_mount_+0x2e8>)
 800675a:	f002 fc8b 	bl	8009074 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800675e:	f06f 0315 	mvn.w	r3, #21
 8006762:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8006764:	e037      	b.n	80067d6 <lfs_mount_+0x322>
 8006766:	bf00      	nop
 8006768:	0800a8cc 	.word	0x0800a8cc
 800676c:	0800a6e4 	.word	0x0800a6e4
 8006770:	08002f75 	.word	0x08002f75
 8006774:	0ff00008 	.word	0x0ff00008
 8006778:	7ffffc00 	.word	0x7ffffc00
 800677c:	20100018 	.word	0x20100018
 8006780:	08009ed4 	.word	0x08009ed4
 8006784:	08009d8c 	.word	0x08009d8c
 8006788:	0800a71c 	.word	0x0800a71c
 800678c:	0800a754 	.word	0x0800a754
 8006790:	0800a794 	.word	0x0800a794
 8006794:	0800a7c8 	.word	0x0800a7c8
 8006798:	0800a7fc 	.word	0x0800a7fc
 800679c:	0800a830 	.word	0x0800a830
            }

            lfs->block_count = superblock.block_count;
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d012      	beq.n	80067d8 <lfs_mount_+0x324>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	493b      	ldr	r1, [pc, #236]	@ (80068a8 <lfs_mount_+0x3f4>)
 80067bc:	9101      	str	r1, [sp, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4613      	mov	r3, r2
 80067c2:	f241 12fe 	movw	r2, #4606	@ 0x11fe
 80067c6:	4939      	ldr	r1, [pc, #228]	@ (80068ac <lfs_mount_+0x3f8>)
 80067c8:	4839      	ldr	r0, [pc, #228]	@ (80068b0 <lfs_mount_+0x3fc>)
 80067ca:	f002 fc53 	bl	8009074 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80067ce:	f06f 0315 	mvn.w	r3, #21
 80067d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80067d4:	bf00      	nop
            goto cleanup;
 80067d6:	e05e      	b.n	8006896 <lfs_mount_+0x3e2>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fc fb93 	bl	8002f10 <lfs_dir_getgstate>
 80067ea:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 80067ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d150      	bne.n	8006894 <lfs_mount_+0x3e0>
    while (!lfs_pair_isnull(dir.tail)) {
 80067f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80067f6:	3318      	adds	r3, #24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fa fce0 	bl	80011be <lfs_pair_isnull>
 80067fe:	4603      	mov	r3, r0
 8006800:	f083 0301 	eor.w	r3, r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	f47f ae73 	bne.w	80064f2 <lfs_mount_+0x3e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3330      	adds	r3, #48	@ 0x30
 8006810:	4618      	mov	r0, r3
 8006812:	f7fa fe36 	bl	8001482 <lfs_gstate_iszero>
 8006816:	4603      	mov	r3, r0
 8006818:	f083 0301 	eor.w	r3, r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <lfs_mount_+0x390>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800682e:	481e      	ldr	r0, [pc, #120]	@ (80068a8 <lfs_mount_+0x3f4>)
 8006830:	9002      	str	r0, [sp, #8]
 8006832:	9201      	str	r2, [sp, #4]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	460b      	mov	r3, r1
 8006838:	f241 220e 	movw	r2, #4622	@ 0x120e
 800683c:	491b      	ldr	r1, [pc, #108]	@ (80068ac <lfs_mount_+0x3f8>)
 800683e:	481d      	ldr	r0, [pc, #116]	@ (80068b4 <lfs_mount_+0x400>)
 8006840:	f002 fc18 	bl	8009074 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	4618      	mov	r0, r3
 800684a:	f7fa fd5e 	bl	800130a <lfs_tag_isvalid>
 800684e:	4603      	mov	r3, r0
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	441a      	add	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	333c      	adds	r3, #60	@ 0x3c
 8006868:	3230      	adds	r2, #48	@ 0x30
 800686a:	ca07      	ldmia	r2, {r0, r1, r2}
 800686c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006878:	fbb3 f1f2 	udiv	r1, r3, r2
 800687c:	fb01 f202 	mul.w	r2, r1, r2
 8006880:	1a9a      	subs	r2, r3, r2
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fb f819 	bl	80018be <lfs_alloc_drop>

    return 0;
 800688c:	2300      	movs	r3, #0
 800688e:	e006      	b.n	800689e <lfs_mount_+0x3ea>
            goto cleanup;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <lfs_mount_+0x3e2>
            goto cleanup;
 8006894:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f80e 	bl	80068b8 <lfs_unmount_>
    return err;
 800689c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3774      	adds	r7, #116	@ 0x74
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a6:	bf00      	nop
 80068a8:	08009ed4 	.word	0x08009ed4
 80068ac:	08009d8c 	.word	0x08009d8c
 80068b0:	0800a864 	.word	0x0800a864
 80068b4:	0800a894 	.word	0x0800a894

080068b8 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fcdd 	bl	8006280 <lfs_deinit>
 80068c6:	4603      	mov	r3, r0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b0a1      	sub	sp, #132	@ 0x84
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80068de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80068e2:	2220      	movs	r2, #32
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f002 fc29 	bl	800913e <memset>
 80068ec:	2301      	movs	r3, #1
 80068ee:	647b      	str	r3, [r7, #68]	@ 0x44
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 80068f0:	4b8d      	ldr	r3, [pc, #564]	@ (8006b28 <lfs_fs_traverse_+0x258>)
 80068f2:	f107 0418 	add.w	r4, r7, #24
 80068f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006900:	e0a9      	b.n	8006a56 <lfs_fs_traverse_+0x186>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 8006902:	f107 0218 	add.w	r2, r7, #24
 8006906:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800690a:	4611      	mov	r1, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fd91 	bl	8006434 <lfs_tortoise_detectcycles>
 8006912:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err < 0) {
 8006914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006916:	2b00      	cmp	r3, #0
 8006918:	da02      	bge.n	8006920 <lfs_fs_traverse_+0x50>
            return LFS_ERR_CORRUPT;
 800691a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800691e:	e0ff      	b.n	8006b20 <lfs_fs_traverse_+0x250>
        }

        for (int i = 0; i < 2; i++) {
 8006920:	2300      	movs	r3, #0
 8006922:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006924:	e013      	b.n	800694e <lfs_fs_traverse_+0x7e>
            int err = cb(data, dir.tail[i]);
 8006926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006928:	3306      	adds	r3, #6
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	3370      	adds	r3, #112	@ 0x70
 800692e:	443b      	add	r3, r7
 8006930:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
 800693c:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (err) {
 800693e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <lfs_fs_traverse_+0x78>
                return err;
 8006944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006946:	e0eb      	b.n	8006b20 <lfs_fs_traverse_+0x250>
        for (int i = 0; i < 2; i++) {
 8006948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800694a:	3301      	adds	r3, #1
 800694c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800694e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006950:	2b01      	cmp	r3, #1
 8006952:	dde8      	ble.n	8006926 <lfs_fs_traverse_+0x56>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006958:	f103 0218 	add.w	r2, r3, #24
 800695c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006960:	4619      	mov	r1, r3
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7fc fab8 	bl	8002ed8 <lfs_dir_fetch>
 8006968:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 800696a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <lfs_fs_traverse_+0xa4>
            return err;
 8006970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006972:	e0d5      	b.n	8006b20 <lfs_fs_traverse_+0x250>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006974:	2300      	movs	r3, #0
 8006976:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800697a:	e067      	b.n	8006a4c <lfs_fs_traverse_+0x17c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800697c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006980:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006982:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800698e:	f107 0210 	add.w	r2, r7, #16
 8006992:	9200      	str	r2, [sp, #0]
 8006994:	4a65      	ldr	r2, [pc, #404]	@ (8006b2c <lfs_fs_traverse_+0x25c>)
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7fb f998 	bl	8001ccc <lfs_dir_get>
 800699c:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (tag < 0) {
 800699e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da05      	bge.n	80069b0 <lfs_fs_traverse_+0xe0>
                if (tag == LFS_ERR_NOENT) {
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	f113 0f02 	cmn.w	r3, #2
 80069aa:	d049      	beq.n	8006a40 <lfs_fs_traverse_+0x170>
                    continue;
                }
                return tag;
 80069ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ae:	e0b7      	b.n	8006b20 <lfs_fs_traverse_+0x250>
            }
            lfs_ctz_fromle32(&ctz);
 80069b0:	f107 0310 	add.w	r3, r7, #16
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fa fe59 	bl	800166c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80069ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fa fce5 	bl	800138c <lfs_tag_type3>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	f240 2302 	movw	r3, #514	@ 0x202
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d113      	bne.n	80069f6 <lfs_fs_traverse_+0x126>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	6938      	ldr	r0, [r7, #16]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	9202      	str	r2, [sp, #8]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	9201      	str	r2, [sp, #4]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4603      	mov	r3, r0
 80069e0:	460a      	mov	r2, r1
 80069e2:	2100      	movs	r1, #0
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7fe f9f9 	bl	8004ddc <lfs_ctz_traverse>
 80069ea:	6538      	str	r0, [r7, #80]	@ 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80069ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d027      	beq.n	8006a42 <lfs_fs_traverse_+0x172>
                    return err;
 80069f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069f4:	e094      	b.n	8006b20 <lfs_fs_traverse_+0x250>
                }
            } else if (includeorphans &&
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d022      	beq.n	8006a42 <lfs_fs_traverse_+0x172>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80069fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fa fcc4 	bl	800138c <lfs_tag_type3>
 8006a04:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a0a:	d11a      	bne.n	8006a42 <lfs_fs_traverse_+0x172>
                for (int i = 0; i < 2; i++) {
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a10:	e012      	b.n	8006a38 <lfs_fs_traverse_+0x168>
                    err = cb(data, (&ctz.head)[i]);
 8006a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	f107 0210 	add.w	r2, r7, #16
 8006a1a:	4413      	add	r3, r2
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	4611      	mov	r1, r2
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	6538      	str	r0, [r7, #80]	@ 0x50
                    if (err) {
 8006a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <lfs_fs_traverse_+0x162>
                        return err;
 8006a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a30:	e076      	b.n	8006b20 <lfs_fs_traverse_+0x250>
                for (int i = 0; i < 2; i++) {
 8006a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a34:	3301      	adds	r3, #1
 8006a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	dde9      	ble.n	8006a12 <lfs_fs_traverse_+0x142>
 8006a3e:	e000      	b.n	8006a42 <lfs_fs_traverse_+0x172>
                    continue;
 8006a40:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006a42:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8006a46:	3301      	adds	r3, #1
 8006a48:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8006a4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a4e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d392      	bcc.n	800697c <lfs_fs_traverse_+0xac>
    while (!lfs_pair_isnull(dir.tail)) {
 8006a56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006a5a:	3318      	adds	r3, #24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fa fbae 	bl	80011be <lfs_pair_isnull>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f083 0301 	eor.w	r3, r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f af49 	bne.w	8006902 <lfs_fs_traverse_+0x32>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a76:	e04f      	b.n	8006b18 <lfs_fs_traverse_+0x248>
        if (f->type != LFS_TYPE_REG) {
 8006a78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a7a:	799b      	ldrb	r3, [r3, #6]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d147      	bne.n	8006b10 <lfs_fs_traverse_+0x240>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01d      	beq.n	8006ac8 <lfs_fs_traverse_+0x1f8>
 8006a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d117      	bne.n	8006ac8 <lfs_fs_traverse_+0x1f8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a9a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aa2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	9202      	str	r2, [sp, #8]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	9201      	str	r2, [sp, #4]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7fe f990 	bl	8004ddc <lfs_ctz_traverse>
 8006abc:	65b8      	str	r0, [r7, #88]	@ 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006abe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <lfs_fs_traverse_+0x1f8>
                return err;
 8006ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ac6:	e02b      	b.n	8006b20 <lfs_fs_traverse_+0x250>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01e      	beq.n	8006b12 <lfs_fs_traverse_+0x242>
 8006ad4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d118      	bne.n	8006b12 <lfs_fs_traverse_+0x242>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ae2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aea:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8006aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	9202      	str	r2, [sp, #8]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4623      	mov	r3, r4
 8006afc:	4602      	mov	r2, r0
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7fe f96c 	bl	8004ddc <lfs_ctz_traverse>
 8006b04:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 8006b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <lfs_fs_traverse_+0x242>
                return err;
 8006b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0e:	e007      	b.n	8006b20 <lfs_fs_traverse_+0x250>
            continue;
 8006b10:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1ac      	bne.n	8006a78 <lfs_fs_traverse_+0x1a8>
            }
        }
    }
#endif

    return 0;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3774      	adds	r7, #116	@ 0x74
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}
 8006b28:	0800a8cc 	.word	0x0800a8cc
 8006b2c:	700ffc00 	.word	0x700ffc00

08006b30 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b08b      	sub	sp, #44	@ 0x2c
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8006b48:	4b1f      	ldr	r3, [pc, #124]	@ (8006bc8 <lfs_fs_pred+0x98>)
 8006b4a:	f107 0410 	add.w	r4, r7, #16
 8006b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8006b58:	e024      	b.n	8006ba4 <lfs_fs_pred+0x74>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8006b5a:	f107 0310 	add.w	r3, r7, #16
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fc67 	bl	8006434 <lfs_tortoise_detectcycles>
 8006b66:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err < 0) {
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da02      	bge.n	8006b74 <lfs_fs_pred+0x44>
            return LFS_ERR_CORRUPT;
 8006b6e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006b72:	e024      	b.n	8006bbe <lfs_fs_pred+0x8e>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3318      	adds	r3, #24
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fa fb3a 	bl	80011f4 <lfs_pair_cmp>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <lfs_fs_pred+0x5a>
            return 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e019      	b.n	8006bbe <lfs_fs_pred+0x8e>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7fc f9a0 	bl	8002ed8 <lfs_dir_fetch>
 8006b98:	6238      	str	r0, [r7, #32]
        if (err) {
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <lfs_fs_pred+0x74>
            return err;
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	e00c      	b.n	8006bbe <lfs_fs_pred+0x8e>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3318      	adds	r3, #24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fa fb08 	bl	80011be <lfs_pair_isnull>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f083 0301 	eor.w	r3, r3, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1cf      	bne.n	8006b5a <lfs_fs_pred+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8006bba:	f06f 0301 	mvn.w	r3, #1
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	372c      	adds	r7, #44	@ 0x2c
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd90      	pop	{r4, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	0800a8cc 	.word	0x0800a8cc

08006bcc <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006bcc:	b5b0      	push	{r4, r5, r7, lr}
 8006bce:	b08e      	sub	sp, #56	@ 0x38
 8006bd0:	af04      	add	r7, sp, #16
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006bec:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bf2:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8006bfc:	2108      	movs	r1, #8
 8006bfe:	9103      	str	r1, [sp, #12]
 8006c00:	f107 0110 	add.w	r1, r7, #16
 8006c04:	9102      	str	r1, [sp, #8]
 8006c06:	9201      	str	r2, [sp, #4]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	4601      	mov	r1, r0
 8006c10:	6a38      	ldr	r0, [r7, #32]
 8006c12:	f7f9 ff09 	bl	8000a28 <lfs_bd_read>
 8006c16:	61b8      	str	r0, [r7, #24]
    if (err) {
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <lfs_fs_parent_match+0x56>
        return err;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	e012      	b.n	8006c48 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006c22:	f107 0310 	add.w	r3, r7, #16
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fa fb3b 	bl	80012a2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	f107 0310 	add.w	r3, r7, #16
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fa fadc 	bl	80011f4 <lfs_pair_cmp>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf14      	ite	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	2300      	moveq	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3728      	adds	r7, #40	@ 0x28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}

08006c50 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b093      	sub	sp, #76	@ 0x4c
 8006c54:	af04      	add	r7, sp, #16
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8006c68:	4b24      	ldr	r3, [pc, #144]	@ (8006cfc <lfs_fs_parent+0xac>)
 8006c6a:	f107 0420 	add.w	r4, r7, #32
 8006c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 8006c78:	e02f      	b.n	8006cda <lfs_fs_parent+0x8a>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 8006c7a:	f107 0320 	add.w	r3, r7, #32
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff fbd7 	bl	8006434 <lfs_tortoise_detectcycles>
 8006c86:	6378      	str	r0, [r7, #52]	@ 0x34
        if (err < 0) {
 8006c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da01      	bge.n	8006c92 <lfs_fs_parent+0x42>
            return err;
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c90:	e030      	b.n	8006cf4 <lfs_fs_parent+0xa4>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006ca0:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006ca8:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006caa:	f107 0314 	add.w	r3, r7, #20
 8006cae:	9303      	str	r3, [sp, #12]
 8006cb0:	4b13      	ldr	r3, [pc, #76]	@ (8006d00 <lfs_fs_parent+0xb0>)
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <lfs_fs_parent+0xb4>)
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <lfs_fs_parent+0xb8>)
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7fb fd39 	bl	8002738 <lfs_dir_fetchmatch>
 8006cc6:	6338      	str	r0, [r7, #48]	@ 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <lfs_fs_parent+0x8a>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	f113 0f02 	cmn.w	r3, #2
 8006cd4:	d001      	beq.n	8006cda <lfs_fs_parent+0x8a>
            return tag;
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	e00c      	b.n	8006cf4 <lfs_fs_parent+0xa4>
    while (!lfs_pair_isnull(parent->tail)) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3318      	adds	r3, #24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fa fa6d 	bl	80011be <lfs_pair_isnull>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f083 0301 	eor.w	r3, r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1c4      	bne.n	8006c7a <lfs_fs_parent+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8006cf0:	f06f 0301 	mvn.w	r3, #1
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	373c      	adds	r7, #60	@ 0x3c
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd90      	pop	{r4, r7, pc}
 8006cfc:	0800a8cc 	.word	0x0800a8cc
 8006d00:	08006bcd 	.word	0x08006bcd
 8006d04:	20000008 	.word	0x20000008
 8006d08:	7ff003ff 	.word	0x7ff003ff

08006d0c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	025b      	lsls	r3, r3, #9
 8006d24:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fa fb59 	bl	8001400 <lfs_tag_size>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <lfs_fs_preporphans+0x32>
 8006d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da06      	bge.n	8006d6a <lfs_fs_preporphans+0x32>
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc8 <lfs_fs_preporphans+0x90>)
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <lfs_fs_preporphans+0x94>)
 8006d60:	f241 311a 	movw	r1, #4890	@ 0x131a
 8006d64:	481a      	ldr	r0, [pc, #104]	@ (8006dd0 <lfs_fs_preporphans+0x98>)
 8006d66:	f001 ffd5 	bl	8008d14 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa fb46 	bl	8001400 <lfs_tag_size>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8006d7a:	d90a      	bls.n	8006d92 <lfs_fs_preporphans+0x5a>
 8006d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dd06      	ble.n	8006d92 <lfs_fs_preporphans+0x5a>
 8006d84:	4b13      	ldr	r3, [pc, #76]	@ (8006dd4 <lfs_fs_preporphans+0x9c>)
 8006d86:	4a11      	ldr	r2, [pc, #68]	@ (8006dcc <lfs_fs_preporphans+0x94>)
 8006d88:	f241 311b 	movw	r1, #4891	@ 0x131b
 8006d8c:	4810      	ldr	r0, [pc, #64]	@ (8006dd0 <lfs_fs_preporphans+0x98>)
 8006d8e:	f001 ffc1 	bl	8008d14 <__assert_func>
    lfs->gstate.tag += orphans;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d9a:	441a      	add	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3330      	adds	r3, #48	@ 0x30
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fa fb84 	bl	80014ba <lfs_gstate_hasorphans>
 8006db2:	4603      	mov	r3, r0
 8006db4:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006db6:	ea44 0203 	orr.w	r2, r4, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd90      	pop	{r4, r7, pc}
 8006dc8:	0800a8dc 	.word	0x0800a8dc
 8006dcc:	0800ac3c 	.word	0x0800ac3c
 8006dd0:	08009d8c 	.word	0x08009d8c
 8006dd4:	0800a914 	.word	0x0800a914

08006dd8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	460b      	mov	r3, r1
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	4a17      	ldr	r2, [pc, #92]	@ (8006e48 <lfs_fs_prepmove+0x70>)
 8006dec:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006dee:	897b      	ldrh	r3, [r7, #10]
 8006df0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006df4:	428b      	cmp	r3, r1
 8006df6:	d006      	beq.n	8006e06 <lfs_fs_prepmove+0x2e>
 8006df8:	897b      	ldrh	r3, [r7, #10]
 8006dfa:	029b      	lsls	r3, r3, #10
 8006dfc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006e00:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006e04:	e000      	b.n	8006e08 <lfs_fs_prepmove+0x30>
 8006e06:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006e0e:	897b      	ldrh	r3, [r7, #10]
 8006e10:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d002      	beq.n	8006e1e <lfs_fs_prepmove+0x46>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	e000      	b.n	8006e20 <lfs_fs_prepmove+0x48>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006e24:	897b      	ldrh	r3, [r7, #10]
 8006e26:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <lfs_fs_prepmove+0x5e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3304      	adds	r3, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	e000      	b.n	8006e38 <lfs_fs_prepmove+0x60>
 8006e36:	2300      	movs	r3, #0
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	800003ff 	.word	0x800003ff

08006e4c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b098      	sub	sp, #96	@ 0x60
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3330      	adds	r3, #48	@ 0x30
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fa fb63 	bl	8001524 <lfs_gstate_needssuperblock>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f083 0301 	eor.w	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <lfs_fs_desuperblock+0x22>
        return 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e04e      	b.n	8006f0c <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	4927      	ldr	r1, [pc, #156]	@ (8006f14 <lfs_fs_desuperblock+0xc8>)
 8006e78:	9101      	str	r1, [sp, #4]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	f241 3234 	movw	r2, #4916	@ 0x1334
 8006e82:	4925      	ldr	r1, [pc, #148]	@ (8006f18 <lfs_fs_desuperblock+0xcc>)
 8006e84:	4825      	ldr	r0, [pc, #148]	@ (8006f1c <lfs_fs_desuperblock+0xd0>)
 8006e86:	f002 f8f5 	bl	8009074 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f103 0220 	add.w	r2, r3, #32
 8006e90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fc f81e 	bl	8002ed8 <lfs_dir_fetch>
 8006e9c:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <lfs_fs_desuperblock+0x5c>
        return err;
 8006ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea6:	e031      	b.n	8006f0c <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fa fcd1 	bl	8001850 <lfs_fs_disk_version>
 8006eae:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006eb0:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eb6:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006eb8:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8006eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8006ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006ed2:	f107 031c 	add.w	r3, r7, #28
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fa fc30 	bl	800173c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006edc:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <lfs_fs_desuperblock+0xd4>)
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	f107 031c 	add.w	r3, r7, #28
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	f107 0214 	add.w	r2, r7, #20
 8006eea:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8006eee:	2301      	movs	r3, #1
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fd fda1 	bl	8004a38 <lfs_dir_commit>
 8006ef6:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <lfs_fs_desuperblock+0xb6>
        return err;
 8006efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f00:	e004      	b.n	8006f0c <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006f02:	2100      	movs	r1, #0
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ff01 	bl	8006d0c <lfs_fs_prepsuperblock>
    return 0;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3758      	adds	r7, #88	@ 0x58
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	08009ed4 	.word	0x08009ed4
 8006f18:	08009d8c 	.word	0x08009d8c
 8006f1c:	0800a94c 	.word	0x0800a94c
 8006f20:	20100018 	.word	0x20100018

08006f24 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006f24:	b5b0      	push	{r4, r5, r7, lr}
 8006f26:	b094      	sub	sp, #80	@ 0x50
 8006f28:	af04      	add	r7, sp, #16
 8006f2a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	333c      	adds	r3, #60	@ 0x3c
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fa fae4 	bl	80014fe <lfs_gstate_hasmove>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f083 0301 	eor.w	r3, r3, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <lfs_fs_demove+0x22>
        return 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e05b      	b.n	8006ffe <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fa fa44 	bl	80013e0 <lfs_tag_id>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8007008 <lfs_fs_demove+0xe4>)
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	9201      	str	r2, [sp, #4]
 8006f62:	9400      	str	r4, [sp, #0]
 8006f64:	462b      	mov	r3, r5
 8006f66:	f241 325c 	movw	r2, #4956	@ 0x135c
 8006f6a:	4928      	ldr	r1, [pc, #160]	@ (800700c <lfs_fs_demove+0xe8>)
 8006f6c:	4828      	ldr	r0, [pc, #160]	@ (8007010 <lfs_fs_demove+0xec>)
 8006f6e:	f002 f881 	bl	8009074 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fa fa08 	bl	800138c <lfs_tag_type3>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d006      	beq.n	8006f96 <lfs_fs_demove+0x72>
 8006f88:	4b22      	ldr	r3, [pc, #136]	@ (8007014 <lfs_fs_demove+0xf0>)
 8006f8a:	4a23      	ldr	r2, [pc, #140]	@ (8007018 <lfs_fs_demove+0xf4>)
 8006f8c:	f241 3163 	movw	r1, #4963	@ 0x1363
 8006f90:	481e      	ldr	r0, [pc, #120]	@ (800700c <lfs_fs_demove+0xe8>)
 8006f92:	f001 febf 	bl	8008d14 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fb ff98 	bl	8002ed8 <lfs_dir_fetch>
 8006fa8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8006faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <lfs_fs_demove+0x90>
        return err;
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb2:	e024      	b.n	8006ffe <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fa fa11 	bl	80013e0 <lfs_tag_id>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff05 	bl	8006dd8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006fce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006fd0:	029b      	lsls	r3, r3, #10
 8006fd2:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8006fd6:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	f107 0210 	add.w	r2, r7, #16
 8006fe4:	f107 0118 	add.w	r1, r7, #24
 8006fe8:	2301      	movs	r3, #1
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fd fd24 	bl	8004a38 <lfs_dir_commit>
 8006ff0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <lfs_fs_demove+0xd8>
        return err;
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffa:	e000      	b.n	8006ffe <lfs_fs_demove+0xda>
    }

    return 0;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3740      	adds	r7, #64	@ 0x40
 8007002:	46bd      	mov	sp, r7
 8007004:	bdb0      	pop	{r4, r5, r7, pc}
 8007006:	bf00      	nop
 8007008:	08009ed4 	.word	0x08009ed4
 800700c:	08009d8c 	.word	0x08009d8c
 8007010:	0800a980 	.word	0x0800a980
 8007014:	0800a9b4 	.word	0x0800a9b4
 8007018:	0800ac50 	.word	0x0800ac50

0800701c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800701c:	b5b0      	push	{r4, r5, r7, lr}
 800701e:	b0b2      	sub	sp, #200	@ 0xc8
 8007020:	af04      	add	r7, sp, #16
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3330      	adds	r3, #48	@ 0x30
 800702c:	4618      	mov	r0, r3
 800702e:	f7fa fa44 	bl	80014ba <lfs_gstate_hasorphans>
 8007032:	4603      	mov	r3, r0
 8007034:	f083 0301 	eor.w	r3, r3, #1
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <lfs_fs_deorphan+0x26>
        return 0;
 800703e:	2300      	movs	r3, #0
 8007040:	e188      	b.n	8007354 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 8007048:	e171      	b.n	800732e <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800704a:	f107 0308 	add.w	r3, r7, #8
 800704e:	2220      	movs	r2, #32
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f002 f873 	bl	800913e <memset>
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	2301      	movs	r3, #1
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8007060:	2300      	movs	r3, #0
 8007062:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8007066:	e14a      	b.n	80072fe <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8007068:	f107 0308 	add.w	r3, r7, #8
 800706c:	f103 0218 	add.w	r2, r3, #24
 8007070:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fb ff2e 	bl	8002ed8 <lfs_dir_fetch>
 800707c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8007080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <lfs_fs_deorphan+0x72>
                return err;
 8007088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800708c:	e162      	b.n	8007354 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800708e:	7ffb      	ldrb	r3, [r7, #31]
 8007090:	f083 0301 	eor.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 8125 	beq.w	80072e6 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800709c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80070a0:	f107 0308 	add.w	r3, r7, #8
 80070a4:	3318      	adds	r3, #24
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fdd1 	bl	8006c50 <lfs_fs_parent>
 80070ae:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80070b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da07      	bge.n	80070ca <lfs_fs_deorphan+0xae>
 80070ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070be:	f113 0f02 	cmn.w	r3, #2
 80070c2:	d002      	beq.n	80070ca <lfs_fs_deorphan+0xae>
                    return tag;
 80070c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070c8:	e10c      	b.n	80072e4 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80070ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 80ac 	bne.w	800722c <lfs_fs_deorphan+0x210>
 80070d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070d8:	f113 0f02 	cmn.w	r3, #2
 80070dc:	f000 80a6 	beq.w	800722c <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80070e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070e4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80070e8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4613      	mov	r3, r2
 80070f0:	4a9a      	ldr	r2, [pc, #616]	@ (800735c <lfs_fs_deorphan+0x340>)
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fa fdea 	bl	8001ccc <lfs_dir_get>
 80070f8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80070fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007100:	2b00      	cmp	r3, #0
 8007102:	da02      	bge.n	800710a <lfs_fs_deorphan+0xee>
                        return state;
 8007104:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 8007108:	e124      	b.n	8007354 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 800710a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800710e:	4618      	mov	r0, r3
 8007110:	f7fa f8c7 	bl	80012a2 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	f103 0218 	add.w	r2, r3, #24
 800711c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f7fa f890 	bl	8001248 <lfs_pair_issync>
 8007128:	4603      	mov	r3, r0
 800712a:	f083 0301 	eor.w	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d07b      	beq.n	800722c <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8007134:	6a38      	ldr	r0, [r7, #32]
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800713c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8007140:	4c87      	ldr	r4, [pc, #540]	@ (8007360 <lfs_fs_deorphan+0x344>)
 8007142:	9403      	str	r4, [sp, #12]
 8007144:	9102      	str	r1, [sp, #8]
 8007146:	9201      	str	r2, [sp, #4]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4603      	mov	r3, r0
 800714c:	f241 32a9 	movw	r2, #5033	@ 0x13a9
 8007150:	4984      	ldr	r1, [pc, #528]	@ (8007364 <lfs_fs_deorphan+0x348>)
 8007152:	4885      	ldr	r0, [pc, #532]	@ (8007368 <lfs_fs_deorphan+0x34c>)
 8007154:	f001 ff8e 	bl	8009074 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007158:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800715c:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3330      	adds	r3, #48	@ 0x30
 8007164:	f107 0208 	add.w	r2, r7, #8
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f7fa f9ee 	bl	800154c <lfs_gstate_hasmovehere>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01c      	beq.n	80071b0 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	4618      	mov	r0, r3
 800717c:	f7fa f930 	bl	80013e0 <lfs_tag_id>
 8007180:	4603      	mov	r3, r0
 8007182:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800718e:	4874      	ldr	r0, [pc, #464]	@ (8007360 <lfs_fs_deorphan+0x344>)
 8007190:	9002      	str	r0, [sp, #8]
 8007192:	9201      	str	r2, [sp, #4]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	460b      	mov	r3, r1
 8007198:	f241 32b4 	movw	r2, #5044	@ 0x13b4
 800719c:	4971      	ldr	r1, [pc, #452]	@ (8007364 <lfs_fs_deorphan+0x348>)
 800719e:	4873      	ldr	r0, [pc, #460]	@ (800736c <lfs_fs_deorphan+0x350>)
 80071a0:	f001 ff68 	bl	8009074 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80071a4:	2200      	movs	r2, #0
 80071a6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff fe14 	bl	8006dd8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80071b0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fa f88e 	bl	80012d6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80071ba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80071be:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <lfs_fs_deorphan+0x1ba>
 80071c6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80071d0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80071d4:	e000      	b.n	80071d8 <lfs_fs_deorphan+0x1bc>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071e2:	4b63      	ldr	r3, [pc, #396]	@ (8007370 <lfs_fs_deorphan+0x354>)
 80071e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071e8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80071ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071f0:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	2302      	movs	r3, #2
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fd f922 	bl	8004444 <lfs_dir_orphaningcommit>
 8007200:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8007204:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007208:	4618      	mov	r0, r3
 800720a:	f7fa f84a 	bl	80012a2 <lfs_pair_fromle32>
                        if (state < 0) {
 800720e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007212:	2b00      	cmp	r3, #0
 8007214:	da02      	bge.n	800721c <lfs_fs_deorphan+0x200>
                            return state;
 8007216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 800721a:	e063      	b.n	80072e4 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800721c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007220:	2b03      	cmp	r3, #3
 8007222:	d16c      	bne.n	80072fe <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 8007224:	2301      	movs	r3, #1
 8007226:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800722a:	e068      	b.n	80072fe <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800722c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007230:	2b01      	cmp	r3, #1
 8007232:	d158      	bne.n	80072e6 <lfs_fs_deorphan+0x2ca>
 8007234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007238:	f113 0f02 	cmn.w	r3, #2
 800723c:	d153      	bne.n	80072e6 <lfs_fs_deorphan+0x2ca>
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d050      	beq.n	80072e6 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	4945      	ldr	r1, [pc, #276]	@ (8007360 <lfs_fs_deorphan+0x344>)
 800724a:	9101      	str	r1, [sp, #4]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4613      	mov	r3, r2
 8007250:	f241 32d4 	movw	r2, #5076	@ 0x13d4
 8007254:	4943      	ldr	r1, [pc, #268]	@ (8007364 <lfs_fs_deorphan+0x348>)
 8007256:	4847      	ldr	r0, [pc, #284]	@ (8007374 <lfs_fs_deorphan+0x358>)
 8007258:	f001 ff0c 	bl	8009074 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8007262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fb fe51 	bl	8002f10 <lfs_dir_getgstate>
 800726e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8007272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <lfs_fs_deorphan+0x264>
                        return err;
 800727a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800727e:	e030      	b.n	80072e2 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8007280:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007284:	3318      	adds	r3, #24
 8007286:	4618      	mov	r0, r3
 8007288:	f7fa f825 	bl	80012d6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800728c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007290:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007294:	051a      	lsls	r2, r3, #20
 8007296:	4b38      	ldr	r3, [pc, #224]	@ (8007378 <lfs_fs_deorphan+0x35c>)
 8007298:	4313      	orrs	r3, r2
 800729a:	673b      	str	r3, [r7, #112]	@ 0x70
 800729c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80072a0:	3318      	adds	r3, #24
 80072a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80072a4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80072a8:	f107 0108 	add.w	r1, r7, #8
 80072ac:	2301      	movs	r3, #1
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fd f8c8 	bl	8004444 <lfs_dir_orphaningcommit>
 80072b4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80072b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80072bc:	3318      	adds	r3, #24
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 ffef 	bl	80012a2 <lfs_pair_fromle32>
                    if (state < 0) {
 80072c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da02      	bge.n	80072d2 <lfs_fs_deorphan+0x2b6>
                        return state;
 80072cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072d0:	e007      	b.n	80072e2 <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80072d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d110      	bne.n	80072fc <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80072e0:	e00d      	b.n	80072fe <lfs_fs_deorphan+0x2e2>
                    return tag;
 80072e2:	e037      	b.n	8007354 <lfs_fs_deorphan+0x338>
                return err;
 80072e4:	e036      	b.n	8007354 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 80072e6:	f107 0408 	add.w	r4, r7, #8
 80072ea:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 80072ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80072f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80072fa:	e000      	b.n	80072fe <lfs_fs_deorphan+0x2e2>
                    continue;
 80072fc:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	3318      	adds	r3, #24
 8007304:	4618      	mov	r0, r3
 8007306:	f7f9 ff5a 	bl	80011be <lfs_pair_isnull>
 800730a:	4603      	mov	r3, r0
 800730c:	f083 0301 	eor.w	r3, r3, #1
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	f47f aea8 	bne.w	8007068 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8007318:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <lfs_fs_deorphan+0x308>
 8007320:	2300      	movs	r3, #0
 8007322:	e002      	b.n	800732a <lfs_fs_deorphan+0x30e>
 8007324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007328:	3301      	adds	r3, #1
 800732a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800732e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007332:	2b01      	cmp	r3, #1
 8007334:	f77f ae89 	ble.w	800704a <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3330      	adds	r3, #48	@ 0x30
 800733c:	4618      	mov	r0, r3
 800733e:	f7fa f8cf 	bl	80014e0 <lfs_gstate_getorphans>
 8007342:	4603      	mov	r3, r0
 8007344:	425b      	negs	r3, r3
 8007346:	b2db      	uxtb	r3, r3
 8007348:	b25b      	sxtb	r3, r3
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fcf3 	bl	8006d38 <lfs_fs_preporphans>
 8007352:	4603      	mov	r3, r0
}
 8007354:	4618      	mov	r0, r3
 8007356:	37b8      	adds	r7, #184	@ 0xb8
 8007358:	46bd      	mov	sp, r7
 800735a:	bdb0      	pop	{r4, r5, r7, pc}
 800735c:	7ffffc00 	.word	0x7ffffc00
 8007360:	08009ed4 	.word	0x08009ed4
 8007364:	08009d8c 	.word	0x08009d8c
 8007368:	0800a9e8 	.word	0x0800a9e8
 800736c:	0800aa2c 	.word	0x0800aa2c
 8007370:	600ffc08 	.word	0x600ffc08
 8007374:	0800aa74 	.word	0x0800aa74
 8007378:	000ffc08 	.word	0x000ffc08

0800737c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fd61 	bl	8006e4c <lfs_fs_desuperblock>
 800738a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <lfs_fs_forceconsistency+0x1a>
        return err;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e013      	b.n	80073be <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff fdc4 	bl	8006f24 <lfs_fs_demove>
 800739c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <lfs_fs_forceconsistency+0x2c>
        return err;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	e00a      	b.n	80073be <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 80073a8:	2101      	movs	r1, #1
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fe36 	bl	800701c <lfs_fs_deorphan>
 80073b0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <lfs_fs_forceconsistency+0x40>
        return err;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	e000      	b.n	80073be <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	601a      	str	r2, [r3, #0]
    return 0;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 80073f8:	f107 0208 	add.w	r2, r7, #8
 80073fc:	2300      	movs	r3, #0
 80073fe:	4907      	ldr	r1, [pc, #28]	@ (800741c <lfs_fs_size_+0x30>)
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff fa65 	bl	80068d0 <lfs_fs_traverse_>
 8007406:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <lfs_fs_size_+0x26>
        return err;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	e000      	b.n	8007414 <lfs_fs_size_+0x28>
    }

    return size;
 8007412:	68bb      	ldr	r3, [r7, #8]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	080073c7 	.word	0x080073c7

08007420 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <lfs_format+0x18>
        return err;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	e005      	b.n	8007444 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fe ff48 	bl	80062d0 <lfs_format_>
 8007440:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007442:	68fb      	ldr	r3, [r7, #12]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
    if (err) {
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <lfs_mount+0x18>
        return err;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e005      	b.n	8007470 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff f824 	bl	80064b4 <lfs_mount_>
 800746c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
    if (err) {
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <lfs_file_open+0x1c>
        return err;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	e01a      	b.n	80074ca <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	4618      	mov	r0, r3
 800749c:	f7fa f986 	bl	80017ac <lfs_mlist_isopen>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f083 0301 	eor.w	r3, r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <lfs_file_open+0x42>
 80074ac:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <lfs_file_open+0x5c>)
 80074ae:	4a0a      	ldr	r2, [pc, #40]	@ (80074d8 <lfs_file_open+0x60>)
 80074b0:	f241 71e5 	movw	r1, #6117	@ 0x17e5
 80074b4:	4809      	ldr	r0, [pc, #36]	@ (80074dc <lfs_file_open+0x64>)
 80074b6:	f001 fc2d 	bl	8008d14 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7fd fee7 	bl	8005294 <lfs_file_open_>
 80074c6:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80074c8:	697b      	ldr	r3, [r7, #20]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	0800aac4 	.word	0x0800aac4
 80074d8:	0800ac60 	.word	0x0800ac60
 80074dc:	08009d8c 	.word	0x08009d8c

080074e0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
    if (err) {
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <lfs_file_close+0x18>
        return err;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	e015      	b.n	8007524 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fa f954 	bl	80017ac <lfs_mlist_isopen>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <lfs_file_close+0x38>
 800750a:	4b08      	ldr	r3, [pc, #32]	@ (800752c <lfs_file_close+0x4c>)
 800750c:	4a08      	ldr	r2, [pc, #32]	@ (8007530 <lfs_file_close+0x50>)
 800750e:	f641 0109 	movw	r1, #6153	@ 0x1809
 8007512:	4808      	ldr	r0, [pc, #32]	@ (8007534 <lfs_file_close+0x54>)
 8007514:	f001 fbfe 	bl	8008d14 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fd fed2 	bl	80052c4 <lfs_file_close_>
 8007520:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	0800aafc 	.word	0x0800aafc
 8007530:	0800ac70 	.word	0x0800ac70
 8007534:	08009d8c 	.word	0x08009d8c

08007538 <lfs_file_write>:
    return res;
}

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007546:	2300      	movs	r3, #0
 8007548:	617b      	str	r3, [r7, #20]
    if (err) {
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <lfs_file_write+0x1c>
        return err;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	e017      	b.n	8007584 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f7fa f926 	bl	80017ac <lfs_mlist_isopen>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <lfs_file_write+0x3c>
 8007566:	4b09      	ldr	r3, [pc, #36]	@ (800758c <lfs_file_write+0x54>)
 8007568:	4a09      	ldr	r2, [pc, #36]	@ (8007590 <lfs_file_write+0x58>)
 800756a:	f641 013d 	movw	r1, #6205	@ 0x183d
 800756e:	4809      	ldr	r0, [pc, #36]	@ (8007594 <lfs_file_write+0x5c>)
 8007570:	f001 fbd0 	bl	8008d14 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7fe fb12 	bl	8005ba4 <lfs_file_write_>
 8007580:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007582:	693b      	ldr	r3, [r7, #16]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	0800aafc 	.word	0x0800aafc
 8007590:	0800ac80 	.word	0x0800ac80
 8007594:	08009d8c 	.word	0x08009d8c

08007598 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	e024      	b.n	80075f8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	091a      	lsrs	r2, r3, #4
 80075b2:	6939      	ldr	r1, [r7, #16]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	440b      	add	r3, r1
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	404b      	eors	r3, r1
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	4912      	ldr	r1, [pc, #72]	@ (8007610 <lfs_crc+0x78>)
 80075c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075ca:	4053      	eors	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	091a      	lsrs	r2, r3, #4
 80075d2:	6939      	ldr	r1, [r7, #16]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	440b      	add	r3, r1
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	091b      	lsrs	r3, r3, #4
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	404b      	eors	r3, r1
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	4909      	ldr	r1, [pc, #36]	@ (8007610 <lfs_crc+0x78>)
 80075ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075ee:	4053      	eors	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	3301      	adds	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d3d6      	bcc.n	80075ae <lfs_crc+0x16>
    }

    return crc;
 8007600:	68fb      	ldr	r3, [r7, #12]
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	0800ac90 	.word	0x0800ac90

08007614 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800761a:	4b35      	ldr	r3, [pc, #212]	@ (80076f0 <SystemInit+0xdc>)
 800761c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007620:	4a33      	ldr	r2, [pc, #204]	@ (80076f0 <SystemInit+0xdc>)
 8007622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007626:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800762a:	4b32      	ldr	r3, [pc, #200]	@ (80076f4 <SystemInit+0xe0>)
 800762c:	2201      	movs	r2, #1
 800762e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007630:	4b30      	ldr	r3, [pc, #192]	@ (80076f4 <SystemInit+0xe0>)
 8007632:	2200      	movs	r2, #0
 8007634:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8007636:	4b2f      	ldr	r3, [pc, #188]	@ (80076f4 <SystemInit+0xe0>)
 8007638:	2200      	movs	r2, #0
 800763a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800763c:	4b2d      	ldr	r3, [pc, #180]	@ (80076f4 <SystemInit+0xe0>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	492c      	ldr	r1, [pc, #176]	@ (80076f4 <SystemInit+0xe0>)
 8007642:	4b2d      	ldr	r3, [pc, #180]	@ (80076f8 <SystemInit+0xe4>)
 8007644:	4013      	ands	r3, r2
 8007646:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8007648:	4b2a      	ldr	r3, [pc, #168]	@ (80076f4 <SystemInit+0xe0>)
 800764a:	2200      	movs	r2, #0
 800764c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800764e:	4b29      	ldr	r3, [pc, #164]	@ (80076f4 <SystemInit+0xe0>)
 8007650:	2200      	movs	r2, #0
 8007652:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8007654:	4b27      	ldr	r3, [pc, #156]	@ (80076f4 <SystemInit+0xe0>)
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800765a:	4b26      	ldr	r3, [pc, #152]	@ (80076f4 <SystemInit+0xe0>)
 800765c:	4a27      	ldr	r2, [pc, #156]	@ (80076fc <SystemInit+0xe8>)
 800765e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8007660:	4b24      	ldr	r3, [pc, #144]	@ (80076f4 <SystemInit+0xe0>)
 8007662:	2200      	movs	r2, #0
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8007666:	4b23      	ldr	r3, [pc, #140]	@ (80076f4 <SystemInit+0xe0>)
 8007668:	4a24      	ldr	r2, [pc, #144]	@ (80076fc <SystemInit+0xe8>)
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800766c:	4b21      	ldr	r3, [pc, #132]	@ (80076f4 <SystemInit+0xe0>)
 800766e:	2200      	movs	r2, #0
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8007672:	4b20      	ldr	r3, [pc, #128]	@ (80076f4 <SystemInit+0xe0>)
 8007674:	4a21      	ldr	r2, [pc, #132]	@ (80076fc <SystemInit+0xe8>)
 8007676:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8007678:	4b1e      	ldr	r3, [pc, #120]	@ (80076f4 <SystemInit+0xe0>)
 800767a:	2200      	movs	r2, #0
 800767c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800767e:	4b1d      	ldr	r3, [pc, #116]	@ (80076f4 <SystemInit+0xe0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1c      	ldr	r2, [pc, #112]	@ (80076f4 <SystemInit+0xe0>)
 8007684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007688:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800768a:	4b1a      	ldr	r3, [pc, #104]	@ (80076f4 <SystemInit+0xe0>)
 800768c:	2200      	movs	r2, #0
 800768e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007690:	4b17      	ldr	r3, [pc, #92]	@ (80076f0 <SystemInit+0xdc>)
 8007692:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007696:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8007698:	4b19      	ldr	r3, [pc, #100]	@ (8007700 <SystemInit+0xec>)
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80076a0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80076a8:	d003      	beq.n	80076b2 <SystemInit+0x9e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80076b0:	d117      	bne.n	80076e2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80076b2:	4b13      	ldr	r3, [pc, #76]	@ (8007700 <SystemInit+0xec>)
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80076be:	4b10      	ldr	r3, [pc, #64]	@ (8007700 <SystemInit+0xec>)
 80076c0:	4a10      	ldr	r2, [pc, #64]	@ (8007704 <SystemInit+0xf0>)
 80076c2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80076c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007700 <SystemInit+0xec>)
 80076c6:	4a10      	ldr	r2, [pc, #64]	@ (8007708 <SystemInit+0xf4>)
 80076c8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <SystemInit+0xec>)
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007700 <SystemInit+0xec>)
 80076d0:	f043 0302 	orr.w	r3, r3, #2
 80076d4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80076d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007700 <SystemInit+0xec>)
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	4a09      	ldr	r2, [pc, #36]	@ (8007700 <SystemInit+0xec>)
 80076dc:	f043 0301 	orr.w	r3, r3, #1
 80076e0:	61d3      	str	r3, [r2, #28]
  }
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	e000ed00 	.word	0xe000ed00
 80076f4:	44020c00 	.word	0x44020c00
 80076f8:	eae2eae3 	.word	0xeae2eae3
 80076fc:	01010280 	.word	0x01010280
 8007700:	40022000 	.word	0x40022000
 8007704:	08192a3b 	.word	0x08192a3b
 8007708:	4c5d6e7f 	.word	0x4c5d6e7f

0800770c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007710:	2003      	movs	r0, #3
 8007712:	f000 f96c 	bl	80079ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007716:	f001 f9b5 	bl	8008a84 <HAL_RCC_GetSysClockFreq>
 800771a:	4602      	mov	r2, r0
 800771c:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <HAL_Init+0x44>)
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	490b      	ldr	r1, [pc, #44]	@ (8007754 <HAL_Init+0x48>)
 8007726:	5ccb      	ldrb	r3, [r1, r3]
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
 800772c:	4a0a      	ldr	r2, [pc, #40]	@ (8007758 <HAL_Init+0x4c>)
 800772e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007730:	2004      	movs	r0, #4
 8007732:	f000 f9a3 	bl	8007a7c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007736:	200f      	movs	r0, #15
 8007738:	f000 f810 	bl	800775c <HAL_InitTick>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e002      	b.n	800774c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007746:	f7f8 ff5f 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	bd80      	pop	{r7, pc}
 8007750:	44020c00 	.word	0x44020c00
 8007754:	0800acd0 	.word	0x0800acd0
 8007758:	20000058 	.word	0x20000058

0800775c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007768:	4b33      	ldr	r3, [pc, #204]	@ (8007838 <HAL_InitTick+0xdc>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e05c      	b.n	800782e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8007774:	4b31      	ldr	r3, [pc, #196]	@ (800783c <HAL_InitTick+0xe0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b04      	cmp	r3, #4
 800777e:	d10c      	bne.n	800779a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8007780:	4b2f      	ldr	r3, [pc, #188]	@ (8007840 <HAL_InitTick+0xe4>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4b2c      	ldr	r3, [pc, #176]	@ (8007838 <HAL_InitTick+0xdc>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	4619      	mov	r1, r3
 800778a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800778e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e037      	b.n	800780a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800779a:	f000 f9c7 	bl	8007b2c <HAL_SYSTICK_GetCLKSourceConfig>
 800779e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d023      	beq.n	80077ee <HAL_InitTick+0x92>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d82d      	bhi.n	8007808 <HAL_InitTick+0xac>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_InitTick+0x5e>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d00d      	beq.n	80077d4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80077b8:	e026      	b.n	8007808 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80077ba:	4b21      	ldr	r3, [pc, #132]	@ (8007840 <HAL_InitTick+0xe4>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b1e      	ldr	r3, [pc, #120]	@ (8007838 <HAL_InitTick+0xdc>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	4619      	mov	r1, r3
 80077c4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80077c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	60fb      	str	r3, [r7, #12]
        break;
 80077d2:	e01a      	b.n	800780a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80077d4:	4b18      	ldr	r3, [pc, #96]	@ (8007838 <HAL_InitTick+0xdc>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077de:	fbb3 f3f2 	udiv	r3, r3, r2
 80077e2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80077e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ea:	60fb      	str	r3, [r7, #12]
        break;
 80077ec:	e00d      	b.n	800780a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80077ee:	4b12      	ldr	r3, [pc, #72]	@ (8007838 <HAL_InitTick+0xdc>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007800:	fbb2 f3f3 	udiv	r3, r2, r3
 8007804:	60fb      	str	r3, [r7, #12]
        break;
 8007806:	e000      	b.n	800780a <HAL_InitTick+0xae>
        break;
 8007808:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f914 	bl	8007a38 <HAL_SYSTICK_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e009      	b.n	800782e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800781a:	2200      	movs	r2, #0
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	f04f 30ff 	mov.w	r0, #4294967295
 8007822:	f000 f8ef 	bl	8007a04 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8007826:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <HAL_InitTick+0xe8>)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000060 	.word	0x20000060
 800783c:	e000e010 	.word	0xe000e010
 8007840:	20000058 	.word	0x20000058
 8007844:	2000005c 	.word	0x2000005c

08007848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800784c:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <HAL_IncTick+0x20>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	4b06      	ldr	r3, [pc, #24]	@ (800786c <HAL_IncTick+0x24>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4413      	add	r3, r2
 8007858:	4a04      	ldr	r2, [pc, #16]	@ (800786c <HAL_IncTick+0x24>)
 800785a:	6013      	str	r3, [r2, #0]
}
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	20000060 	.word	0x20000060
 800786c:	200000e0 	.word	0x200000e0

08007870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  return uwTick;
 8007874:	4b03      	ldr	r3, [pc, #12]	@ (8007884 <HAL_GetTick+0x14>)
 8007876:	681b      	ldr	r3, [r3, #0]
}
 8007878:	4618      	mov	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	200000e0 	.word	0x200000e0

08007888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007890:	f7ff ffee 	bl	8007870 <HAL_GetTick>
 8007894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d005      	beq.n	80078ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078a2:	4b0a      	ldr	r3, [pc, #40]	@ (80078cc <HAL_Delay+0x44>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80078ae:	bf00      	nop
 80078b0:	f7ff ffde 	bl	8007870 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d8f7      	bhi.n	80078b0 <HAL_Delay+0x28>
  {
  }
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000060 	.word	0x20000060

080078d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007914 <__NVIC_SetPriorityGrouping+0x44>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80078ec:	4013      	ands	r3, r2
 80078ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80078fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007902:	4a04      	ldr	r2, [pc, #16]	@ (8007914 <__NVIC_SetPriorityGrouping+0x44>)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	60d3      	str	r3, [r2, #12]
}
 8007908:	bf00      	nop
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	e000ed00 	.word	0xe000ed00

08007918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800791c:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <__NVIC_GetPriorityGrouping+0x18>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	0a1b      	lsrs	r3, r3, #8
 8007922:	f003 0307 	and.w	r3, r3, #7
}
 8007926:	4618      	mov	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	e000ed00 	.word	0xe000ed00

08007934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	db0a      	blt.n	800795e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	b2da      	uxtb	r2, r3
 800794c:	490c      	ldr	r1, [pc, #48]	@ (8007980 <__NVIC_SetPriority+0x4c>)
 800794e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007952:	0112      	lsls	r2, r2, #4
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	440b      	add	r3, r1
 8007958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800795c:	e00a      	b.n	8007974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	4908      	ldr	r1, [pc, #32]	@ (8007984 <__NVIC_SetPriority+0x50>)
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	3b04      	subs	r3, #4
 800796c:	0112      	lsls	r2, r2, #4
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	440b      	add	r3, r1
 8007972:	761a      	strb	r2, [r3, #24]
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	e000e100 	.word	0xe000e100
 8007984:	e000ed00 	.word	0xe000ed00

08007988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	@ 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f1c3 0307 	rsb	r3, r3, #7
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	bf28      	it	cs
 80079a6:	2304      	movcs	r3, #4
 80079a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3304      	adds	r3, #4
 80079ae:	2b06      	cmp	r3, #6
 80079b0:	d902      	bls.n	80079b8 <NVIC_EncodePriority+0x30>
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	3b03      	subs	r3, #3
 80079b6:	e000      	b.n	80079ba <NVIC_EncodePriority+0x32>
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	43da      	mvns	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	401a      	ands	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079d0:	f04f 31ff 	mov.w	r1, #4294967295
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	fa01 f303 	lsl.w	r3, r1, r3
 80079da:	43d9      	mvns	r1, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079e0:	4313      	orrs	r3, r2
         );
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3724      	adds	r7, #36	@ 0x24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff ff6a 	bl	80078d0 <__NVIC_SetPriorityGrouping>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a12:	f7ff ff81 	bl	8007918 <__NVIC_GetPriorityGrouping>
 8007a16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	6978      	ldr	r0, [r7, #20]
 8007a1e:	f7ff ffb3 	bl	8007988 <NVIC_EncodePriority>
 8007a22:	4602      	mov	r2, r0
 8007a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff ff82 	bl	8007934 <__NVIC_SetPriority>
}
 8007a30:	bf00      	nop
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a48:	d301      	bcc.n	8007a4e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e00d      	b.n	8007a6a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a78 <HAL_SYSTICK_Config+0x40>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8007a56:	4b08      	ldr	r3, [pc, #32]	@ (8007a78 <HAL_SYSTICK_Config+0x40>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <HAL_SYSTICK_Config+0x40>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a05      	ldr	r2, [pc, #20]	@ (8007a78 <HAL_SYSTICK_Config+0x40>)
 8007a62:	f043 0303 	orr.w	r3, r3, #3
 8007a66:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	e000e010 	.word	0xe000e010

08007a7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d844      	bhi.n	8007b14 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8007a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ab3 	.word	0x08007ab3
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007af3 	.word	0x08007af3
 8007a9c:	08007b15 	.word	0x08007b15
 8007aa0:	08007aa5 	.word	0x08007aa5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007aaa:	f043 0304 	orr.w	r3, r3, #4
 8007aae:	6013      	str	r3, [r2, #0]
      break;
 8007ab0:	e031      	b.n	8007b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ab8:	f023 0304 	bic.w	r3, r3, #4
 8007abc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8007abe:	4b1a      	ldr	r3, [pc, #104]	@ (8007b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ac4:	4a18      	ldr	r2, [pc, #96]	@ (8007b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ac6:	f023 030c 	bic.w	r3, r3, #12
 8007aca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8007ace:	e022      	b.n	8007b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007ad0:	4b14      	ldr	r3, [pc, #80]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a13      	ldr	r2, [pc, #76]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ad6:	f023 0304 	bic.w	r3, r3, #4
 8007ada:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8007adc:	4b12      	ldr	r3, [pc, #72]	@ (8007b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ade:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ae2:	f023 030c 	bic.w	r3, r3, #12
 8007ae6:	4a10      	ldr	r2, [pc, #64]	@ (8007b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ae8:	f043 0304 	orr.w	r3, r3, #4
 8007aec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8007af0:	e011      	b.n	8007b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007af2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a0b      	ldr	r2, [pc, #44]	@ (8007b24 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007af8:	f023 0304 	bic.w	r3, r3, #4
 8007afc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8007afe:	4b0a      	ldr	r3, [pc, #40]	@ (8007b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007b00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b04:	f023 030c 	bic.w	r3, r3, #12
 8007b08:	4a07      	ldr	r2, [pc, #28]	@ (8007b28 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007b0a:	f043 0308 	orr.w	r3, r3, #8
 8007b0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8007b12:	e000      	b.n	8007b16 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8007b14:	bf00      	nop
  }
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	e000e010 	.word	0xe000e010
 8007b28:	44020c00 	.word	0x44020c00

08007b2c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8007b32:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8007b3e:	2304      	movs	r3, #4
 8007b40:	607b      	str	r3, [r7, #4]
 8007b42:	e01e      	b.n	8007b82 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8007b44:	4b13      	ldr	r3, [pc, #76]	@ (8007b94 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8007b46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b4a:	f003 030c 	and.w	r3, r3, #12
 8007b4e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d00f      	beq.n	8007b76 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d80f      	bhi.n	8007b7c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d003      	beq.n	8007b70 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8007b68:	e008      	b.n	8007b7c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	607b      	str	r3, [r7, #4]
        break;
 8007b6e:	e008      	b.n	8007b82 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8007b70:	2301      	movs	r3, #1
 8007b72:	607b      	str	r3, [r7, #4]
        break;
 8007b74:	e005      	b.n	8007b82 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8007b76:	2302      	movs	r3, #2
 8007b78:	607b      	str	r3, [r7, #4]
        break;
 8007b7a:	e002      	b.n	8007b82 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	607b      	str	r3, [r7, #4]
        break;
 8007b80:	bf00      	nop
    }
  }
  return systick_source;
 8007b82:	687b      	ldr	r3, [r7, #4]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	e000e010 	.word	0xe000e010
 8007b94:	44020c00 	.word	0x44020c00

08007b98 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007ba6:	e142      	b.n	8007e2e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	2101      	movs	r1, #1
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8134 	beq.w	8007e28 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d003      	beq.n	8007bd0 <HAL_GPIO_Init+0x38>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2b12      	cmp	r3, #18
 8007bce:	d125      	bne.n	8007c1c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	08da      	lsrs	r2, r3, #3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3208      	adds	r2, #8
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	220f      	movs	r2, #15
 8007be8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	08da      	lsrs	r2, r3, #3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3208      	adds	r2, #8
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	2203      	movs	r2, #3
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	4013      	ands	r3, r2
 8007c32:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f003 0203 	and.w	r2, r3, #3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d00b      	beq.n	8007c70 <HAL_GPIO_Init+0xd8>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d007      	beq.n	8007c70 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c64:	2b11      	cmp	r3, #17
 8007c66:	d003      	beq.n	8007c70 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2b12      	cmp	r3, #18
 8007c6e:	d130      	bne.n	8007cd2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	43db      	mvns	r3, r3
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4013      	ands	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	091b      	lsrs	r3, r3, #4
 8007cbc:	f003 0201 	and.w	r2, r3, #1
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d109      	bne.n	8007cf2 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d11b      	bne.n	8007d22 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d017      	beq.n	8007d22 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	43db      	mvns	r3, r3
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	4013      	ands	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d07c      	beq.n	8007e28 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007d2e:	4a47      	ldr	r2, [pc, #284]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	089b      	lsrs	r3, r3, #2
 8007d34:	3318      	adds	r3, #24
 8007d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	220f      	movs	r2, #15
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	0a9a      	lsrs	r2, r3, #10
 8007d56:	4b3e      	ldr	r3, [pc, #248]	@ (8007e50 <HAL_GPIO_Init+0x2b8>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	f002 0203 	and.w	r2, r2, #3
 8007d60:	00d2      	lsls	r2, r2, #3
 8007d62:	4093      	lsls	r3, r2
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007d6a:	4938      	ldr	r1, [pc, #224]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	3318      	adds	r3, #24
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007d78:	4b34      	ldr	r3, [pc, #208]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	43db      	mvns	r3, r3
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4013      	ands	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8007d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007da2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	43db      	mvns	r3, r3
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4013      	ands	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8007dc6:	4a21      	ldr	r2, [pc, #132]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8007df2:	4a16      	ldr	r2, [pc, #88]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8007dfa:	4b14      	ldr	r3, [pc, #80]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	43db      	mvns	r3, r3
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8007e20:	4a0a      	ldr	r2, [pc, #40]	@ (8007e4c <HAL_GPIO_Init+0x2b4>)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	fa22 f303 	lsr.w	r3, r2, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f47f aeb5 	bne.w	8007ba8 <HAL_GPIO_Init+0x10>
  }
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	44022000 	.word	0x44022000
 8007e50:	002f7f7f 	.word	0x002f7f7f

08007e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	807b      	strh	r3, [r7, #2]
 8007e60:	4613      	mov	r3, r2
 8007e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e64:	787b      	ldrb	r3, [r7, #1]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e6a:	887a      	ldrh	r2, [r7, #2]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e70:	e002      	b.n	8007e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e72:	887a      	ldrh	r2, [r7, #2]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007e88:	4b05      	ldr	r3, [pc, #20]	@ (8007ea0 <HAL_ICACHE_Enable+0x1c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a04      	ldr	r2, [pc, #16]	@ (8007ea0 <HAL_ICACHE_Enable+0x1c>)
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	40030400 	.word	0x40030400

08007ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f000 bc28 	b.w	8008708 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb8:	4b94      	ldr	r3, [pc, #592]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f003 0318 	and.w	r3, r3, #24
 8007ec0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8007ec2:	4b92      	ldr	r3, [pc, #584]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05b      	beq.n	8007f90 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d005      	beq.n	8007eea <HAL_RCC_OscConfig+0x46>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b18      	cmp	r3, #24
 8007ee2:	d114      	bne.n	8007f0e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d111      	bne.n	8007f0e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d102      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f000 bc08 	b.w	8008708 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007ef8:	4b84      	ldr	r3, [pc, #528]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	4981      	ldr	r1, [pc, #516]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007f0c:	e040      	b.n	8007f90 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d023      	beq.n	8007f5e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f16:	4b7d      	ldr	r3, [pc, #500]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f22:	f7ff fca5 	bl	8007870 <HAL_GetTick>
 8007f26:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007f28:	e008      	b.n	8007f3c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007f2a:	f7ff fca1 	bl	8007870 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e3e5      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007f3c:	4b73      	ldr	r3, [pc, #460]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0f0      	beq.n	8007f2a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007f48:	4b70      	ldr	r3, [pc, #448]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	041b      	lsls	r3, r3, #16
 8007f56:	496d      	ldr	r1, [pc, #436]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	618b      	str	r3, [r1, #24]
 8007f5c:	e018      	b.n	8007f90 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f5e:	4b6b      	ldr	r3, [pc, #428]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a6a      	ldr	r2, [pc, #424]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6a:	f7ff fc81 	bl	8007870 <HAL_GetTick>
 8007f6e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007f72:	f7ff fc7d 	bl	8007870 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e3c1      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007f84:	4b61      	ldr	r3, [pc, #388]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f0      	bne.n	8007f72 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80a0 	beq.w	80080de <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d005      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x10c>
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	2b18      	cmp	r3, #24
 8007fa8:	d109      	bne.n	8007fbe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d106      	bne.n	8007fbe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f040 8092 	bne.w	80080de <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e3a4      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fc6:	d106      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x132>
 8007fc8:	4b50      	ldr	r3, [pc, #320]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e058      	b.n	8008088 <HAL_RCC_OscConfig+0x1e4>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d112      	bne.n	8008004 <HAL_RCC_OscConfig+0x160>
 8007fde:	4b4b      	ldr	r3, [pc, #300]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4b48      	ldr	r3, [pc, #288]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a47      	ldr	r2, [pc, #284]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007ff0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	4b45      	ldr	r3, [pc, #276]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a44      	ldr	r2, [pc, #272]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8007ffc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	e041      	b.n	8008088 <HAL_RCC_OscConfig+0x1e4>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800800c:	d112      	bne.n	8008034 <HAL_RCC_OscConfig+0x190>
 800800e:	4b3f      	ldr	r3, [pc, #252]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a3e      	ldr	r2, [pc, #248]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	4b3c      	ldr	r3, [pc, #240]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a3b      	ldr	r2, [pc, #236]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008020:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	4b39      	ldr	r3, [pc, #228]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a38      	ldr	r2, [pc, #224]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 800802c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	e029      	b.n	8008088 <HAL_RCC_OscConfig+0x1e4>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800803c:	d112      	bne.n	8008064 <HAL_RCC_OscConfig+0x1c0>
 800803e:	4b33      	ldr	r3, [pc, #204]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a32      	ldr	r2, [pc, #200]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	4b30      	ldr	r3, [pc, #192]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a2f      	ldr	r2, [pc, #188]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	4b2d      	ldr	r3, [pc, #180]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a2c      	ldr	r2, [pc, #176]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 800805c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	e011      	b.n	8008088 <HAL_RCC_OscConfig+0x1e4>
 8008064:	4b29      	ldr	r3, [pc, #164]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a28      	ldr	r2, [pc, #160]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 800806a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	4b26      	ldr	r3, [pc, #152]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a25      	ldr	r2, [pc, #148]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	4b23      	ldr	r3, [pc, #140]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a22      	ldr	r2, [pc, #136]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 8008082:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d013      	beq.n	80080b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008090:	f7ff fbee 	bl	8007870 <HAL_GetTick>
 8008094:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008098:	f7ff fbea 	bl	8007870 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b64      	cmp	r3, #100	@ 0x64
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e32e      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080aa:	4b18      	ldr	r3, [pc, #96]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0f0      	beq.n	8008098 <HAL_RCC_OscConfig+0x1f4>
 80080b6:	e012      	b.n	80080de <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7ff fbda 	bl	8007870 <HAL_GetTick>
 80080bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80080c0:	f7ff fbd6 	bl	8007870 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	@ 0x64
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e31a      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080d2:	4b0e      	ldr	r3, [pc, #56]	@ (800810c <HAL_RCC_OscConfig+0x268>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 809a 	beq.w	8008220 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_RCC_OscConfig+0x25a>
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2b18      	cmp	r3, #24
 80080f6:	d149      	bne.n	800818c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d146      	bne.n	800818c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d104      	bne.n	8008110 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e2fe      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
 800810a:	bf00      	nop
 800810c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d11c      	bne.n	8008150 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8008116:	4b9a      	ldr	r3, [pc, #616]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0218 	and.w	r2, r3, #24
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	429a      	cmp	r2, r3
 8008124:	d014      	beq.n	8008150 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8008126:	4b96      	ldr	r3, [pc, #600]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f023 0218 	bic.w	r2, r3, #24
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	4993      	ldr	r1, [pc, #588]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008134:	4313      	orrs	r3, r2
 8008136:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8008138:	f000 fdd0 	bl	8008cdc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800813c:	4b91      	ldr	r3, [pc, #580]	@ (8008384 <HAL_RCC_OscConfig+0x4e0>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff fb0b 	bl	800775c <HAL_InitTick>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e2db      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7ff fb8e 	bl	8007870 <HAL_GetTick>
 8008154:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008158:	f7ff fb8a 	bl	8007870 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e2ce      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800816a:	4b85      	ldr	r3, [pc, #532]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0f0      	beq.n	8008158 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8008176:	4b82      	ldr	r3, [pc, #520]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	497e      	ldr	r1, [pc, #504]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008186:	4313      	orrs	r3, r2
 8008188:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800818a:	e049      	b.n	8008220 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d02c      	beq.n	80081ee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8008194:	4b7a      	ldr	r3, [pc, #488]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f023 0218 	bic.w	r2, r3, #24
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	4977      	ldr	r1, [pc, #476]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80081a6:	4b76      	ldr	r3, [pc, #472]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a75      	ldr	r2, [pc, #468]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081ac:	f043 0301 	orr.w	r3, r3, #1
 80081b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b2:	f7ff fb5d 	bl	8007870 <HAL_GetTick>
 80081b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081b8:	e008      	b.n	80081cc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80081ba:	f7ff fb59 	bl	8007870 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e29d      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0f0      	beq.n	80081ba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80081d8:	4b69      	ldr	r3, [pc, #420]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	4966      	ldr	r1, [pc, #408]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	610b      	str	r3, [r1, #16]
 80081ec:	e018      	b.n	8008220 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ee:	4b64      	ldr	r3, [pc, #400]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a63      	ldr	r2, [pc, #396]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fa:	f7ff fb39 	bl	8007870 <HAL_GetTick>
 80081fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008200:	e008      	b.n	8008214 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008202:	f7ff fb35 	bl	8007870 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d901      	bls.n	8008214 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e279      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008214:	4b5a      	ldr	r3, [pc, #360]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1f0      	bne.n	8008202 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b00      	cmp	r3, #0
 800822a:	d03c      	beq.n	80082a6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01c      	beq.n	800826e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008234:	4b52      	ldr	r3, [pc, #328]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800823a:	4a51      	ldr	r2, [pc, #324]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 800823c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008240:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008244:	f7ff fb14 	bl	8007870 <HAL_GetTick>
 8008248:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800824c:	f7ff fb10 	bl	8007870 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e254      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800825e:	4b48      	ldr	r3, [pc, #288]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0ef      	beq.n	800824c <HAL_RCC_OscConfig+0x3a8>
 800826c:	e01b      	b.n	80082a6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800826e:	4b44      	ldr	r3, [pc, #272]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008274:	4a42      	ldr	r2, [pc, #264]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800827a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827e:	f7ff faf7 	bl	8007870 <HAL_GetTick>
 8008282:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008286:	f7ff faf3 	bl	8007870 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e237      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008298:	4b39      	ldr	r3, [pc, #228]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 800829a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800829e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1ef      	bne.n	8008286 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 80d2 	beq.w	8008458 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80082b4:	4b34      	ldr	r3, [pc, #208]	@ (8008388 <HAL_RCC_OscConfig+0x4e4>)
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d118      	bne.n	80082f2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80082c0:	4b31      	ldr	r3, [pc, #196]	@ (8008388 <HAL_RCC_OscConfig+0x4e4>)
 80082c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c4:	4a30      	ldr	r2, [pc, #192]	@ (8008388 <HAL_RCC_OscConfig+0x4e4>)
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082cc:	f7ff fad0 	bl	8007870 <HAL_GetTick>
 80082d0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80082d2:	e008      	b.n	80082e6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d4:	f7ff facc 	bl	8007870 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e210      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80082e6:	4b28      	ldr	r3, [pc, #160]	@ (8008388 <HAL_RCC_OscConfig+0x4e4>)
 80082e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d108      	bne.n	800830c <HAL_RCC_OscConfig+0x468>
 80082fa:	4b21      	ldr	r3, [pc, #132]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 80082fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008300:	4a1f      	ldr	r2, [pc, #124]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800830a:	e074      	b.n	80083f6 <HAL_RCC_OscConfig+0x552>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d118      	bne.n	8008346 <HAL_RCC_OscConfig+0x4a2>
 8008314:	4b1a      	ldr	r3, [pc, #104]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800831a:	4a19      	ldr	r2, [pc, #100]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 800831c:	f023 0301 	bic.w	r3, r3, #1
 8008320:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008324:	4b16      	ldr	r3, [pc, #88]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800832a:	4a15      	ldr	r2, [pc, #84]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 800832c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008330:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008334:	4b12      	ldr	r3, [pc, #72]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800833a:	4a11      	ldr	r2, [pc, #68]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 800833c:	f023 0304 	bic.w	r3, r3, #4
 8008340:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008344:	e057      	b.n	80083f6 <HAL_RCC_OscConfig+0x552>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b05      	cmp	r3, #5
 800834c:	d11e      	bne.n	800838c <HAL_RCC_OscConfig+0x4e8>
 800834e:	4b0c      	ldr	r3, [pc, #48]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008354:	4a0a      	ldr	r2, [pc, #40]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008356:	f043 0304 	orr.w	r3, r3, #4
 800835a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800835e:	4b08      	ldr	r3, [pc, #32]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008364:	4a06      	ldr	r2, [pc, #24]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800836a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800836e:	4b04      	ldr	r3, [pc, #16]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008374:	4a02      	ldr	r2, [pc, #8]	@ (8008380 <HAL_RCC_OscConfig+0x4dc>)
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800837e:	e03a      	b.n	80083f6 <HAL_RCC_OscConfig+0x552>
 8008380:	44020c00 	.word	0x44020c00
 8008384:	2000005c 	.word	0x2000005c
 8008388:	44020800 	.word	0x44020800
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b85      	cmp	r3, #133	@ 0x85
 8008392:	d118      	bne.n	80083c6 <HAL_RCC_OscConfig+0x522>
 8008394:	4ba2      	ldr	r3, [pc, #648]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800839a:	4aa1      	ldr	r2, [pc, #644]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800839c:	f043 0304 	orr.w	r3, r3, #4
 80083a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083a4:	4b9e      	ldr	r3, [pc, #632]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083aa:	4a9d      	ldr	r2, [pc, #628]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083b4:	4b9a      	ldr	r3, [pc, #616]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ba:	4a99      	ldr	r2, [pc, #612]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083c4:	e017      	b.n	80083f6 <HAL_RCC_OscConfig+0x552>
 80083c6:	4b96      	ldr	r3, [pc, #600]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083cc:	4a94      	ldr	r2, [pc, #592]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083d6:	4b92      	ldr	r3, [pc, #584]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083dc:	4a90      	ldr	r2, [pc, #576]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083de:	f023 0304 	bic.w	r3, r3, #4
 80083e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80083e6:	4b8e      	ldr	r3, [pc, #568]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083ec:	4a8c      	ldr	r2, [pc, #560]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80083ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d016      	beq.n	800842c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fe:	f7ff fa37 	bl	8007870 <HAL_GetTick>
 8008402:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008404:	e00a      	b.n	800841c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008406:	f7ff fa33 	bl	8007870 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e175      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800841c:	4b80      	ldr	r3, [pc, #512]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800841e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0ed      	beq.n	8008406 <HAL_RCC_OscConfig+0x562>
 800842a:	e015      	b.n	8008458 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842c:	f7ff fa20 	bl	8007870 <HAL_GetTick>
 8008430:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008432:	e00a      	b.n	800844a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008434:	f7ff fa1c 	bl	8007870 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008442:	4293      	cmp	r3, r2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e15e      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800844a:	4b75      	ldr	r3, [pc, #468]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800844c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1ed      	bne.n	8008434 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0320 	and.w	r3, r3, #32
 8008460:	2b00      	cmp	r3, #0
 8008462:	d036      	beq.n	80084d2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d019      	beq.n	80084a0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800846c:	4b6c      	ldr	r3, [pc, #432]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a6b      	ldr	r2, [pc, #428]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008472:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008476:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008478:	f7ff f9fa 	bl	8007870 <HAL_GetTick>
 800847c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8008480:	f7ff f9f6 	bl	8007870 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e13a      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008492:	4b63      	ldr	r3, [pc, #396]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f0      	beq.n	8008480 <HAL_RCC_OscConfig+0x5dc>
 800849e:	e018      	b.n	80084d2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084a0:	4b5f      	ldr	r3, [pc, #380]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a5e      	ldr	r2, [pc, #376]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80084a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ac:	f7ff f9e0 	bl	8007870 <HAL_GetTick>
 80084b0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80084b4:	f7ff f9dc 	bl	8007870 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e120      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80084c6:	4b56      	ldr	r3, [pc, #344]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f0      	bne.n	80084b4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8115 	beq.w	8008706 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	2b18      	cmp	r3, #24
 80084e0:	f000 80af 	beq.w	8008642 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	f040 8086 	bne.w	80085fa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80084ee:	4b4c      	ldr	r3, [pc, #304]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a4b      	ldr	r2, [pc, #300]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80084f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fa:	f7ff f9b9 	bl	8007870 <HAL_GetTick>
 80084fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008500:	e008      	b.n	8008514 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8008502:	f7ff f9b5 	bl	8007870 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e0f9      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008514:	4b42      	ldr	r3, [pc, #264]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1f0      	bne.n	8008502 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8008520:	4b3f      	ldr	r3, [pc, #252]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008524:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008534:	0212      	lsls	r2, r2, #8
 8008536:	430a      	orrs	r2, r1
 8008538:	4939      	ldr	r1, [pc, #228]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800853a:	4313      	orrs	r3, r2
 800853c:	628b      	str	r3, [r1, #40]	@ 0x28
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008542:	3b01      	subs	r3, #1
 8008544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	3b01      	subs	r3, #1
 800854e:	025b      	lsls	r3, r3, #9
 8008550:	b29b      	uxth	r3, r3
 8008552:	431a      	orrs	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008558:	3b01      	subs	r3, #1
 800855a:	041b      	lsls	r3, r3, #16
 800855c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	3b01      	subs	r3, #1
 8008568:	061b      	lsls	r3, r3, #24
 800856a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800856e:	492c      	ldr	r1, [pc, #176]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008570:	4313      	orrs	r3, r2
 8008572:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8008574:	4b2a      	ldr	r3, [pc, #168]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008578:	4a29      	ldr	r2, [pc, #164]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008584:	4a26      	ldr	r2, [pc, #152]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800858a:	4b25      	ldr	r3, [pc, #148]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 800858c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858e:	4a24      	ldr	r2, [pc, #144]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008590:	f043 0310 	orr.w	r3, r3, #16
 8008594:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8008596:	4b22      	ldr	r3, [pc, #136]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859a:	f023 020c 	bic.w	r2, r3, #12
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a2:	491f      	ldr	r1, [pc, #124]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80085a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ac:	f023 0220 	bic.w	r2, r3, #32
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b4:	491a      	ldr	r1, [pc, #104]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085ba:	4b19      	ldr	r3, [pc, #100]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	4a18      	ldr	r2, [pc, #96]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80085c6:	4b16      	ldr	r3, [pc, #88]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a15      	ldr	r2, [pc, #84]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d2:	f7ff f94d 	bl	8007870 <HAL_GetTick>
 80085d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80085d8:	e008      	b.n	80085ec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80085da:	f7ff f949 	bl	8007870 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e08d      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80085ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0f0      	beq.n	80085da <HAL_RCC_OscConfig+0x736>
 80085f8:	e085      	b.n	8008706 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80085fa:	4b09      	ldr	r3, [pc, #36]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a08      	ldr	r2, [pc, #32]	@ (8008620 <HAL_RCC_OscConfig+0x77c>)
 8008600:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008606:	f7ff f933 	bl	8007870 <HAL_GetTick>
 800860a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800860c:	e00a      	b.n	8008624 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800860e:	f7ff f92f 	bl	8007870 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d903      	bls.n	8008624 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e073      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
 8008620:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008624:	4b3a      	ldr	r3, [pc, #232]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ee      	bne.n	800860e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008630:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 8008632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008634:	4a36      	ldr	r2, [pc, #216]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 8008636:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	6293      	str	r3, [r2, #40]	@ 0x28
 8008640:	e061      	b.n	8008706 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008642:	4b33      	ldr	r3, [pc, #204]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008648:	4b31      	ldr	r3, [pc, #196]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 800864a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	2b01      	cmp	r3, #1
 8008654:	d031      	beq.n	80086ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f003 0203 	and.w	r2, r3, #3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008660:	429a      	cmp	r2, r3
 8008662:	d12a      	bne.n	80086ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8008670:	429a      	cmp	r2, r3
 8008672:	d122      	bne.n	80086ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8008680:	429a      	cmp	r2, r3
 8008682:	d11a      	bne.n	80086ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	0a5b      	lsrs	r3, r3, #9
 8008688:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8008692:	429a      	cmp	r2, r3
 8008694:	d111      	bne.n	80086ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d108      	bne.n	80086ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	0e1b      	lsrs	r3, r3, #24
 80086ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d001      	beq.n	80086be <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e024      	b.n	8008708 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80086be:	4b14      	ldr	r3, [pc, #80]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 80086c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c2:	08db      	lsrs	r3, r3, #3
 80086c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d01a      	beq.n	8008706 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80086d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 80086d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 80086d6:	f023 0310 	bic.w	r3, r3, #16
 80086da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086dc:	f7ff f8c8 	bl	8007870 <HAL_GetTick>
 80086e0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80086e2:	bf00      	nop
 80086e4:	f7ff f8c4 	bl	8007870 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d0f9      	beq.n	80086e4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086f4:	4a06      	ldr	r2, [pc, #24]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80086fa:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	4a04      	ldr	r2, [pc, #16]	@ (8008710 <HAL_RCC_OscConfig+0x86c>)
 8008700:	f043 0310 	orr.w	r3, r3, #16
 8008704:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	44020c00 	.word	0x44020c00

08008714 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e19e      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008728:	4b83      	ldr	r3, [pc, #524]	@ (8008938 <HAL_RCC_ClockConfig+0x224>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d910      	bls.n	8008758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008736:	4b80      	ldr	r3, [pc, #512]	@ (8008938 <HAL_RCC_ClockConfig+0x224>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 020f 	bic.w	r2, r3, #15
 800873e:	497e      	ldr	r1, [pc, #504]	@ (8008938 <HAL_RCC_ClockConfig+0x224>)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	4313      	orrs	r3, r2
 8008744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008746:	4b7c      	ldr	r3, [pc, #496]	@ (8008938 <HAL_RCC_ClockConfig+0x224>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d001      	beq.n	8008758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e186      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	d012      	beq.n	800878a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	695a      	ldr	r2, [r3, #20]
 8008768:	4b74      	ldr	r3, [pc, #464]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	0a1b      	lsrs	r3, r3, #8
 800876e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008772:	429a      	cmp	r2, r3
 8008774:	d909      	bls.n	800878a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008776:	4b71      	ldr	r3, [pc, #452]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	496d      	ldr	r1, [pc, #436]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008786:	4313      	orrs	r3, r2
 8008788:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d012      	beq.n	80087bc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	4b68      	ldr	r3, [pc, #416]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d909      	bls.n	80087bc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80087a8:	4b64      	ldr	r3, [pc, #400]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	4961      	ldr	r1, [pc, #388]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d010      	beq.n	80087ea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68da      	ldr	r2, [r3, #12]
 80087cc:	4b5b      	ldr	r3, [pc, #364]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d908      	bls.n	80087ea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80087d8:	4b58      	ldr	r3, [pc, #352]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	4955      	ldr	r1, [pc, #340]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d010      	beq.n	8008818 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	4b50      	ldr	r3, [pc, #320]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	429a      	cmp	r2, r3
 8008804:	d908      	bls.n	8008818 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8008806:	4b4d      	ldr	r3, [pc, #308]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	f023 020f 	bic.w	r2, r3, #15
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	494a      	ldr	r1, [pc, #296]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008814:	4313      	orrs	r3, r2
 8008816:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8093 	beq.w	800894c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b03      	cmp	r3, #3
 800882c:	d107      	bne.n	800883e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800882e:	4b43      	ldr	r3, [pc, #268]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d121      	bne.n	800887e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e113      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d107      	bne.n	8008856 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008846:	4b3d      	ldr	r3, [pc, #244]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d115      	bne.n	800887e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e107      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d107      	bne.n	800886e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800885e:	4b37      	ldr	r3, [pc, #220]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008866:	2b00      	cmp	r3, #0
 8008868:	d109      	bne.n	800887e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e0fb      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800886e:	4b33      	ldr	r3, [pc, #204]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e0f3      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800887e:	4b2f      	ldr	r3, [pc, #188]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f023 0203 	bic.w	r2, r3, #3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	492c      	ldr	r1, [pc, #176]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 800888c:	4313      	orrs	r3, r2
 800888e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008890:	f7fe ffee 	bl	8007870 <HAL_GetTick>
 8008894:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b03      	cmp	r3, #3
 800889c:	d112      	bne.n	80088c4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800889e:	e00a      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80088a0:	f7fe ffe6 	bl	8007870 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e0d7      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088b6:	4b21      	ldr	r3, [pc, #132]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	f003 0318 	and.w	r3, r3, #24
 80088be:	2b18      	cmp	r3, #24
 80088c0:	d1ee      	bne.n	80088a0 <HAL_RCC_ClockConfig+0x18c>
 80088c2:	e043      	b.n	800894c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d112      	bne.n	80088f2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088cc:	e00a      	b.n	80088e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80088ce:	f7fe ffcf 	bl	8007870 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088dc:	4293      	cmp	r3, r2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0c0      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088e4:	4b15      	ldr	r3, [pc, #84]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	f003 0318 	and.w	r3, r3, #24
 80088ec:	2b10      	cmp	r3, #16
 80088ee:	d1ee      	bne.n	80088ce <HAL_RCC_ClockConfig+0x1ba>
 80088f0:	e02c      	b.n	800894c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d122      	bne.n	8008940 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80088fa:	e00a      	b.n	8008912 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80088fc:	f7fe ffb8 	bl	8007870 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800890a:	4293      	cmp	r3, r2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e0a9      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8008912:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <HAL_RCC_ClockConfig+0x228>)
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f003 0318 	and.w	r3, r3, #24
 800891a:	2b08      	cmp	r3, #8
 800891c:	d1ee      	bne.n	80088fc <HAL_RCC_ClockConfig+0x1e8>
 800891e:	e015      	b.n	800894c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008920:	f7fe ffa6 	bl	8007870 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800892e:	4293      	cmp	r3, r2
 8008930:	d906      	bls.n	8008940 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e097      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
 8008936:	bf00      	nop
 8008938:	40022000 	.word	0x40022000
 800893c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008940:	4b4b      	ldr	r3, [pc, #300]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f003 0318 	and.w	r3, r3, #24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e9      	bne.n	8008920 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d010      	beq.n	800897a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	4b44      	ldr	r3, [pc, #272]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	429a      	cmp	r2, r3
 8008966:	d208      	bcs.n	800897a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8008968:	4b41      	ldr	r3, [pc, #260]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	f023 020f 	bic.w	r2, r3, #15
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	493e      	ldr	r1, [pc, #248]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008976:	4313      	orrs	r3, r2
 8008978:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800897a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a74 <HAL_RCC_ClockConfig+0x360>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d210      	bcs.n	80089aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008988:	4b3a      	ldr	r3, [pc, #232]	@ (8008a74 <HAL_RCC_ClockConfig+0x360>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f023 020f 	bic.w	r2, r3, #15
 8008990:	4938      	ldr	r1, [pc, #224]	@ (8008a74 <HAL_RCC_ClockConfig+0x360>)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008998:	4b36      	ldr	r3, [pc, #216]	@ (8008a74 <HAL_RCC_ClockConfig+0x360>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d001      	beq.n	80089aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e05d      	b.n	8008a66 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d010      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d208      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80089c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	4927      	ldr	r1, [pc, #156]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d012      	beq.n	8008a0a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	4b21      	ldr	r3, [pc, #132]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	091b      	lsrs	r3, r3, #4
 80089ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d209      	bcs.n	8008a0a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80089f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	491a      	ldr	r1, [pc, #104]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0310 	and.w	r3, r3, #16
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d012      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695a      	ldr	r2, [r3, #20]
 8008a1a:	4b15      	ldr	r3, [pc, #84]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d209      	bcs.n	8008a3c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008a28:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	490e      	ldr	r1, [pc, #56]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a3c:	f000 f822 	bl	8008a84 <HAL_RCC_GetSysClockFreq>
 8008a40:	4602      	mov	r2, r0
 8008a42:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <HAL_RCC_ClockConfig+0x35c>)
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	490b      	ldr	r1, [pc, #44]	@ (8008a78 <HAL_RCC_ClockConfig+0x364>)
 8008a4c:	5ccb      	ldrb	r3, [r1, r3]
 8008a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a52:	4a0a      	ldr	r2, [pc, #40]	@ (8008a7c <HAL_RCC_ClockConfig+0x368>)
 8008a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a56:	4b0a      	ldr	r3, [pc, #40]	@ (8008a80 <HAL_RCC_ClockConfig+0x36c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fe7e 	bl	800775c <HAL_InitTick>
 8008a60:	4603      	mov	r3, r0
 8008a62:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	44020c00 	.word	0x44020c00
 8008a74:	40022000 	.word	0x40022000
 8008a78:	0800acd0 	.word	0x0800acd0
 8008a7c:	20000058 	.word	0x20000058
 8008a80:	2000005c 	.word	0x2000005c

08008a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b089      	sub	sp, #36	@ 0x24
 8008a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8008a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f003 0318 	and.w	r3, r3, #24
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d102      	bne.n	8008a9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008a96:	4b8a      	ldr	r3, [pc, #552]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8008a98:	61fb      	str	r3, [r7, #28]
 8008a9a:	e107      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a9c:	4b87      	ldr	r3, [pc, #540]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f003 0318 	and.w	r3, r3, #24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d112      	bne.n	8008ace <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008aa8:	4b84      	ldr	r3, [pc, #528]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d009      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ab4:	4b81      	ldr	r3, [pc, #516]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	08db      	lsrs	r3, r3, #3
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	4a81      	ldr	r2, [pc, #516]	@ (8008cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	e0f1      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8008cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8008aca:	61fb      	str	r3, [r7, #28]
 8008acc:	e0ee      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ace:	4b7b      	ldr	r3, [pc, #492]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f003 0318 	and.w	r3, r3, #24
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ada:	4b7b      	ldr	r3, [pc, #492]	@ (8008cc8 <HAL_RCC_GetSysClockFreq+0x244>)
 8008adc:	61fb      	str	r3, [r7, #28]
 8008ade:	e0e5      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ae0:	4b76      	ldr	r3, [pc, #472]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f003 0318 	and.w	r3, r3, #24
 8008ae8:	2b18      	cmp	r3, #24
 8008aea:	f040 80dd 	bne.w	8008ca8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008aee:	4b73      	ldr	r3, [pc, #460]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af2:	f003 0303 	and.w	r3, r3, #3
 8008af6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008af8:	4b70      	ldr	r3, [pc, #448]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	0a1b      	lsrs	r3, r3, #8
 8008afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008b04:	4b6d      	ldr	r3, [pc, #436]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b08:	091b      	lsrs	r3, r3, #4
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008b10:	4b6a      	ldr	r3, [pc, #424]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	fb02 f303 	mul.w	r3, r2, r3
 8008b20:	ee07 3a90 	vmov	s15, r3
 8008b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b28:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 80b7 	beq.w	8008ca2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d003      	beq.n	8008b42 <HAL_RCC_GetSysClockFreq+0xbe>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d056      	beq.n	8008bee <HAL_RCC_GetSysClockFreq+0x16a>
 8008b40:	e077      	b.n	8008c32 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008b42:	4b5e      	ldr	r3, [pc, #376]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d02d      	beq.n	8008baa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	08db      	lsrs	r3, r3, #3
 8008b54:	f003 0303 	and.w	r3, r3, #3
 8008b58:	4a5a      	ldr	r2, [pc, #360]	@ (8008cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8008b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b78:	4b50      	ldr	r3, [pc, #320]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b88:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b8c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8008ccc <HAL_RCC_GetSysClockFreq+0x248>
 8008b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8008ba8:	e065      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8008cd0 <HAL_RCC_GetSysClockFreq+0x24c>
 8008bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bd0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008ccc <HAL_RCC_GetSysClockFreq+0x248>
 8008bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008bec:	e043      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8008cd4 <HAL_RCC_GetSysClockFreq+0x250>
 8008bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c00:	4b2e      	ldr	r3, [pc, #184]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c10:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c14:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8008ccc <HAL_RCC_GetSysClockFreq+0x248>
 8008c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8008c30:	e021      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008cd8 <HAL_RCC_GetSysClockFreq+0x254>
 8008c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c44:	4b1d      	ldr	r3, [pc, #116]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4c:	ee07 3a90 	vmov	s15, r3
 8008c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c54:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c58:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8008ccc <HAL_RCC_GetSysClockFreq+0x248>
 8008c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008c74:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8008c76:	4b11      	ldr	r3, [pc, #68]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x238>)
 8008c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c7a:	0a5b      	lsrs	r3, r3, #9
 8008c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c80:	3301      	adds	r3, #1
 8008c82:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c8e:	edd7 6a06 	vldr	s13, [r7, #24]
 8008c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c9a:	ee17 3a90 	vmov	r3, s15
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	e004      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	e001      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008ca8:	4b06      	ldr	r3, [pc, #24]	@ (8008cc4 <HAL_RCC_GetSysClockFreq+0x240>)
 8008caa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8008cac:	69fb      	ldr	r3, [r7, #28]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3724      	adds	r7, #36	@ 0x24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	44020c00 	.word	0x44020c00
 8008cc0:	003d0900 	.word	0x003d0900
 8008cc4:	03d09000 	.word	0x03d09000
 8008cc8:	017d7840 	.word	0x017d7840
 8008ccc:	46000000 	.word	0x46000000
 8008cd0:	4c742400 	.word	0x4c742400
 8008cd4:	4bbebc20 	.word	0x4bbebc20
 8008cd8:	4a742400 	.word	0x4a742400

08008cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008ce0:	f7ff fed0 	bl	8008a84 <HAL_RCC_GetSysClockFreq>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4b08      	ldr	r3, [pc, #32]	@ (8008d08 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008cea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008cee:	4907      	ldr	r1, [pc, #28]	@ (8008d0c <HAL_RCC_GetHCLKFreq+0x30>)
 8008cf0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008cf2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfa:	4a05      	ldr	r2, [pc, #20]	@ (8008d10 <HAL_RCC_GetHCLKFreq+0x34>)
 8008cfc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8008cfe:	4b04      	ldr	r3, [pc, #16]	@ (8008d10 <HAL_RCC_GetHCLKFreq+0x34>)
 8008d00:	681b      	ldr	r3, [r3, #0]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	44020c00 	.word	0x44020c00
 8008d0c:	0800acd0 	.word	0x0800acd0
 8008d10:	20000058 	.word	0x20000058

08008d14 <__assert_func>:
 8008d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d16:	4614      	mov	r4, r2
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4b09      	ldr	r3, [pc, #36]	@ (8008d40 <__assert_func+0x2c>)
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68d8      	ldr	r0, [r3, #12]
 8008d22:	b14c      	cbz	r4, 8008d38 <__assert_func+0x24>
 8008d24:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <__assert_func+0x30>)
 8008d26:	9100      	str	r1, [sp, #0]
 8008d28:	4907      	ldr	r1, [pc, #28]	@ (8008d48 <__assert_func+0x34>)
 8008d2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d2e:	462b      	mov	r3, r5
 8008d30:	f000 f970 	bl	8009014 <fiprintf>
 8008d34:	f000 fabc 	bl	80092b0 <abort>
 8008d38:	4b04      	ldr	r3, [pc, #16]	@ (8008d4c <__assert_func+0x38>)
 8008d3a:	461c      	mov	r4, r3
 8008d3c:	e7f3      	b.n	8008d26 <__assert_func+0x12>
 8008d3e:	bf00      	nop
 8008d40:	20000070 	.word	0x20000070
 8008d44:	0800ace0 	.word	0x0800ace0
 8008d48:	0800aced 	.word	0x0800aced
 8008d4c:	0800ad1b 	.word	0x0800ad1b

08008d50 <malloc>:
 8008d50:	4b02      	ldr	r3, [pc, #8]	@ (8008d5c <malloc+0xc>)
 8008d52:	4601      	mov	r1, r0
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f000 b82d 	b.w	8008db4 <_malloc_r>
 8008d5a:	bf00      	nop
 8008d5c:	20000070 	.word	0x20000070

08008d60 <free>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	@ (8008d6c <free+0xc>)
 8008d62:	4601      	mov	r1, r0
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f000 baab 	b.w	80092c0 <_free_r>
 8008d6a:	bf00      	nop
 8008d6c:	20000070 	.word	0x20000070

08008d70 <sbrk_aligned>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4e0f      	ldr	r6, [pc, #60]	@ (8008db0 <sbrk_aligned+0x40>)
 8008d74:	460c      	mov	r4, r1
 8008d76:	4605      	mov	r5, r0
 8008d78:	6831      	ldr	r1, [r6, #0]
 8008d7a:	b911      	cbnz	r1, 8008d82 <sbrk_aligned+0x12>
 8008d7c:	f000 fa3c 	bl	80091f8 <_sbrk_r>
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 fa37 	bl	80091f8 <_sbrk_r>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d103      	bne.n	8008d96 <sbrk_aligned+0x26>
 8008d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008d92:	4620      	mov	r0, r4
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
 8008d96:	1cc4      	adds	r4, r0, #3
 8008d98:	f024 0403 	bic.w	r4, r4, #3
 8008d9c:	42a0      	cmp	r0, r4
 8008d9e:	d0f8      	beq.n	8008d92 <sbrk_aligned+0x22>
 8008da0:	1a21      	subs	r1, r4, r0
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 fa28 	bl	80091f8 <_sbrk_r>
 8008da8:	3001      	adds	r0, #1
 8008daa:	d1f2      	bne.n	8008d92 <sbrk_aligned+0x22>
 8008dac:	e7ef      	b.n	8008d8e <sbrk_aligned+0x1e>
 8008dae:	bf00      	nop
 8008db0:	200000e4 	.word	0x200000e4

08008db4 <_malloc_r>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	1ccd      	adds	r5, r1, #3
 8008dba:	4606      	mov	r6, r0
 8008dbc:	f025 0503 	bic.w	r5, r5, #3
 8008dc0:	3508      	adds	r5, #8
 8008dc2:	2d0c      	cmp	r5, #12
 8008dc4:	bf38      	it	cc
 8008dc6:	250c      	movcc	r5, #12
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	db01      	blt.n	8008dd0 <_malloc_r+0x1c>
 8008dcc:	42a9      	cmp	r1, r5
 8008dce:	d904      	bls.n	8008dda <_malloc_r+0x26>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008eb0 <_malloc_r+0xfc>
 8008dde:	f000 f869 	bl	8008eb4 <__malloc_lock>
 8008de2:	f8d8 3000 	ldr.w	r3, [r8]
 8008de6:	461c      	mov	r4, r3
 8008de8:	bb44      	cbnz	r4, 8008e3c <_malloc_r+0x88>
 8008dea:	4629      	mov	r1, r5
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff ffbf 	bl	8008d70 <sbrk_aligned>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	4604      	mov	r4, r0
 8008df6:	d158      	bne.n	8008eaa <_malloc_r+0xf6>
 8008df8:	f8d8 4000 	ldr.w	r4, [r8]
 8008dfc:	4627      	mov	r7, r4
 8008dfe:	2f00      	cmp	r7, #0
 8008e00:	d143      	bne.n	8008e8a <_malloc_r+0xd6>
 8008e02:	2c00      	cmp	r4, #0
 8008e04:	d04b      	beq.n	8008e9e <_malloc_r+0xea>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	eb04 0903 	add.w	r9, r4, r3
 8008e10:	f000 f9f2 	bl	80091f8 <_sbrk_r>
 8008e14:	4581      	cmp	r9, r0
 8008e16:	d142      	bne.n	8008e9e <_malloc_r+0xea>
 8008e18:	6821      	ldr	r1, [r4, #0]
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	1a6d      	subs	r5, r5, r1
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7ff ffa6 	bl	8008d70 <sbrk_aligned>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d03a      	beq.n	8008e9e <_malloc_r+0xea>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	442b      	add	r3, r5
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	bb62      	cbnz	r2, 8008e90 <_malloc_r+0xdc>
 8008e36:	f8c8 7000 	str.w	r7, [r8]
 8008e3a:	e00f      	b.n	8008e5c <_malloc_r+0xa8>
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	1b52      	subs	r2, r2, r5
 8008e40:	d420      	bmi.n	8008e84 <_malloc_r+0xd0>
 8008e42:	2a0b      	cmp	r2, #11
 8008e44:	d917      	bls.n	8008e76 <_malloc_r+0xc2>
 8008e46:	1961      	adds	r1, r4, r5
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	6025      	str	r5, [r4, #0]
 8008e4c:	bf18      	it	ne
 8008e4e:	6059      	strne	r1, [r3, #4]
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	bf08      	it	eq
 8008e54:	f8c8 1000 	streq.w	r1, [r8]
 8008e58:	5162      	str	r2, [r4, r5]
 8008e5a:	604b      	str	r3, [r1, #4]
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f000 f82f 	bl	8008ec0 <__malloc_unlock>
 8008e62:	f104 000b 	add.w	r0, r4, #11
 8008e66:	1d23      	adds	r3, r4, #4
 8008e68:	f020 0007 	bic.w	r0, r0, #7
 8008e6c:	1ac2      	subs	r2, r0, r3
 8008e6e:	bf1c      	itt	ne
 8008e70:	1a1b      	subne	r3, r3, r0
 8008e72:	50a3      	strne	r3, [r4, r2]
 8008e74:	e7af      	b.n	8008dd6 <_malloc_r+0x22>
 8008e76:	6862      	ldr	r2, [r4, #4]
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	bf0c      	ite	eq
 8008e7c:	f8c8 2000 	streq.w	r2, [r8]
 8008e80:	605a      	strne	r2, [r3, #4]
 8008e82:	e7eb      	b.n	8008e5c <_malloc_r+0xa8>
 8008e84:	4623      	mov	r3, r4
 8008e86:	6864      	ldr	r4, [r4, #4]
 8008e88:	e7ae      	b.n	8008de8 <_malloc_r+0x34>
 8008e8a:	463c      	mov	r4, r7
 8008e8c:	687f      	ldr	r7, [r7, #4]
 8008e8e:	e7b6      	b.n	8008dfe <_malloc_r+0x4a>
 8008e90:	461a      	mov	r2, r3
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d1fb      	bne.n	8008e90 <_malloc_r+0xdc>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6053      	str	r3, [r2, #4]
 8008e9c:	e7de      	b.n	8008e5c <_malloc_r+0xa8>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	6033      	str	r3, [r6, #0]
 8008ea4:	f000 f80c 	bl	8008ec0 <__malloc_unlock>
 8008ea8:	e794      	b.n	8008dd4 <_malloc_r+0x20>
 8008eaa:	6005      	str	r5, [r0, #0]
 8008eac:	e7d6      	b.n	8008e5c <_malloc_r+0xa8>
 8008eae:	bf00      	nop
 8008eb0:	200000e8 	.word	0x200000e8

08008eb4 <__malloc_lock>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	@ (8008ebc <__malloc_lock+0x8>)
 8008eb6:	f000 b9ec 	b.w	8009292 <__retarget_lock_acquire_recursive>
 8008eba:	bf00      	nop
 8008ebc:	2000022c 	.word	0x2000022c

08008ec0 <__malloc_unlock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	@ (8008ec8 <__malloc_unlock+0x8>)
 8008ec2:	f000 b9e7 	b.w	8009294 <__retarget_lock_release_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	2000022c 	.word	0x2000022c

08008ecc <std>:
 8008ecc:	2300      	movs	r3, #0
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	6083      	str	r3, [r0, #8]
 8008ed4:	8181      	strh	r1, [r0, #12]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6643      	str	r3, [r0, #100]	@ 0x64
 8008eda:	81c2      	strh	r2, [r0, #14]
 8008edc:	2208      	movs	r2, #8
 8008ede:	6183      	str	r3, [r0, #24]
 8008ee0:	e9c0 3300 	strd	r3, r3, [r0]
 8008ee4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ee8:	305c      	adds	r0, #92	@ 0x5c
 8008eea:	f000 f928 	bl	800913e <memset>
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <std+0x58>)
 8008ef0:	6224      	str	r4, [r4, #32]
 8008ef2:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <std+0x5c>)
 8008ef6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <std+0x60>)
 8008efa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008efc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f30 <std+0x64>)
 8008efe:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f00:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <std+0x68>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d006      	beq.n	8008f14 <std+0x48>
 8008f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f0a:	4294      	cmp	r4, r2
 8008f0c:	d002      	beq.n	8008f14 <std+0x48>
 8008f0e:	33d0      	adds	r3, #208	@ 0xd0
 8008f10:	429c      	cmp	r4, r3
 8008f12:	d105      	bne.n	8008f20 <std+0x54>
 8008f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f1c:	f000 b9b8 	b.w	8009290 <__retarget_lock_init_recursive>
 8008f20:	bd10      	pop	{r4, pc}
 8008f22:	bf00      	nop
 8008f24:	08009099 	.word	0x08009099
 8008f28:	080090bb 	.word	0x080090bb
 8008f2c:	080090f3 	.word	0x080090f3
 8008f30:	08009117 	.word	0x08009117
 8008f34:	200000ec 	.word	0x200000ec

08008f38 <stdio_exit_handler>:
 8008f38:	4a02      	ldr	r2, [pc, #8]	@ (8008f44 <stdio_exit_handler+0xc>)
 8008f3a:	4903      	ldr	r1, [pc, #12]	@ (8008f48 <stdio_exit_handler+0x10>)
 8008f3c:	4803      	ldr	r0, [pc, #12]	@ (8008f4c <stdio_exit_handler+0x14>)
 8008f3e:	f000 b87b 	b.w	8009038 <_fwalk_sglue>
 8008f42:	bf00      	nop
 8008f44:	20000064 	.word	0x20000064
 8008f48:	08009a01 	.word	0x08009a01
 8008f4c:	20000074 	.word	0x20000074

08008f50 <cleanup_stdio>:
 8008f50:	6841      	ldr	r1, [r0, #4]
 8008f52:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <cleanup_stdio+0x34>)
 8008f54:	4299      	cmp	r1, r3
 8008f56:	b510      	push	{r4, lr}
 8008f58:	4604      	mov	r4, r0
 8008f5a:	d001      	beq.n	8008f60 <cleanup_stdio+0x10>
 8008f5c:	f000 fd50 	bl	8009a00 <_fflush_r>
 8008f60:	68a1      	ldr	r1, [r4, #8]
 8008f62:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <cleanup_stdio+0x38>)
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d002      	beq.n	8008f6e <cleanup_stdio+0x1e>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fd49 	bl	8009a00 <_fflush_r>
 8008f6e:	68e1      	ldr	r1, [r4, #12]
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <cleanup_stdio+0x3c>)
 8008f72:	4299      	cmp	r1, r3
 8008f74:	d004      	beq.n	8008f80 <cleanup_stdio+0x30>
 8008f76:	4620      	mov	r0, r4
 8008f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f7c:	f000 bd40 	b.w	8009a00 <_fflush_r>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	bf00      	nop
 8008f84:	200000ec 	.word	0x200000ec
 8008f88:	20000154 	.word	0x20000154
 8008f8c:	200001bc 	.word	0x200001bc

08008f90 <global_stdio_init.part.0>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc0 <global_stdio_init.part.0+0x30>)
 8008f94:	2104      	movs	r1, #4
 8008f96:	4c0b      	ldr	r4, [pc, #44]	@ (8008fc4 <global_stdio_init.part.0+0x34>)
 8008f98:	4a0b      	ldr	r2, [pc, #44]	@ (8008fc8 <global_stdio_init.part.0+0x38>)
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f7ff ff94 	bl	8008ecc <std>
 8008fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fa8:	2201      	movs	r2, #1
 8008faa:	2109      	movs	r1, #9
 8008fac:	f7ff ff8e 	bl	8008ecc <std>
 8008fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	2112      	movs	r1, #18
 8008fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fbc:	f7ff bf86 	b.w	8008ecc <std>
 8008fc0:	20000224 	.word	0x20000224
 8008fc4:	200000ec 	.word	0x200000ec
 8008fc8:	08008f39 	.word	0x08008f39

08008fcc <__sfp_lock_acquire>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	@ (8008fd4 <__sfp_lock_acquire+0x8>)
 8008fce:	f000 b960 	b.w	8009292 <__retarget_lock_acquire_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	2000022d 	.word	0x2000022d

08008fd8 <__sfp_lock_release>:
 8008fd8:	4801      	ldr	r0, [pc, #4]	@ (8008fe0 <__sfp_lock_release+0x8>)
 8008fda:	f000 b95b 	b.w	8009294 <__retarget_lock_release_recursive>
 8008fde:	bf00      	nop
 8008fe0:	2000022d 	.word	0x2000022d

08008fe4 <__sinit>:
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	f7ff fff0 	bl	8008fcc <__sfp_lock_acquire>
 8008fec:	6a23      	ldr	r3, [r4, #32]
 8008fee:	b11b      	cbz	r3, 8008ff8 <__sinit+0x14>
 8008ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff4:	f7ff bff0 	b.w	8008fd8 <__sfp_lock_release>
 8008ff8:	4b04      	ldr	r3, [pc, #16]	@ (800900c <__sinit+0x28>)
 8008ffa:	6223      	str	r3, [r4, #32]
 8008ffc:	4b04      	ldr	r3, [pc, #16]	@ (8009010 <__sinit+0x2c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1f5      	bne.n	8008ff0 <__sinit+0xc>
 8009004:	f7ff ffc4 	bl	8008f90 <global_stdio_init.part.0>
 8009008:	e7f2      	b.n	8008ff0 <__sinit+0xc>
 800900a:	bf00      	nop
 800900c:	08008f51 	.word	0x08008f51
 8009010:	20000224 	.word	0x20000224

08009014 <fiprintf>:
 8009014:	b40e      	push	{r1, r2, r3}
 8009016:	b503      	push	{r0, r1, lr}
 8009018:	ab03      	add	r3, sp, #12
 800901a:	4601      	mov	r1, r0
 800901c:	4805      	ldr	r0, [pc, #20]	@ (8009034 <fiprintf+0x20>)
 800901e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009022:	6800      	ldr	r0, [r0, #0]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	f000 f9bf 	bl	80093a8 <_vfiprintf_r>
 800902a:	b002      	add	sp, #8
 800902c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009030:	b003      	add	sp, #12
 8009032:	4770      	bx	lr
 8009034:	20000070 	.word	0x20000070

08009038 <_fwalk_sglue>:
 8009038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800903c:	4607      	mov	r7, r0
 800903e:	4688      	mov	r8, r1
 8009040:	4614      	mov	r4, r2
 8009042:	2600      	movs	r6, #0
 8009044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009048:	f1b9 0901 	subs.w	r9, r9, #1
 800904c:	d505      	bpl.n	800905a <_fwalk_sglue+0x22>
 800904e:	6824      	ldr	r4, [r4, #0]
 8009050:	2c00      	cmp	r4, #0
 8009052:	d1f7      	bne.n	8009044 <_fwalk_sglue+0xc>
 8009054:	4630      	mov	r0, r6
 8009056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905a:	89ab      	ldrh	r3, [r5, #12]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d907      	bls.n	8009070 <_fwalk_sglue+0x38>
 8009060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009064:	3301      	adds	r3, #1
 8009066:	d003      	beq.n	8009070 <_fwalk_sglue+0x38>
 8009068:	4629      	mov	r1, r5
 800906a:	4638      	mov	r0, r7
 800906c:	47c0      	blx	r8
 800906e:	4306      	orrs	r6, r0
 8009070:	3568      	adds	r5, #104	@ 0x68
 8009072:	e7e9      	b.n	8009048 <_fwalk_sglue+0x10>

08009074 <iprintf>:
 8009074:	b40f      	push	{r0, r1, r2, r3}
 8009076:	b507      	push	{r0, r1, r2, lr}
 8009078:	4906      	ldr	r1, [pc, #24]	@ (8009094 <iprintf+0x20>)
 800907a:	ab04      	add	r3, sp, #16
 800907c:	6808      	ldr	r0, [r1, #0]
 800907e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009082:	6881      	ldr	r1, [r0, #8]
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	f000 f98f 	bl	80093a8 <_vfiprintf_r>
 800908a:	b003      	add	sp, #12
 800908c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009090:	b004      	add	sp, #16
 8009092:	4770      	bx	lr
 8009094:	20000070 	.word	0x20000070

08009098 <__sread>:
 8009098:	b510      	push	{r4, lr}
 800909a:	460c      	mov	r4, r1
 800909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a0:	f000 f898 	bl	80091d4 <_read_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	bfab      	itete	ge
 80090a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090aa:	89a3      	ldrhlt	r3, [r4, #12]
 80090ac:	181b      	addge	r3, r3, r0
 80090ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090b2:	bfac      	ite	ge
 80090b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090b6:	81a3      	strhlt	r3, [r4, #12]
 80090b8:	bd10      	pop	{r4, pc}

080090ba <__swrite>:
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	461f      	mov	r7, r3
 80090c0:	898b      	ldrh	r3, [r1, #12]
 80090c2:	4605      	mov	r5, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	05db      	lsls	r3, r3, #23
 80090c8:	4616      	mov	r6, r2
 80090ca:	d505      	bpl.n	80090d8 <__swrite+0x1e>
 80090cc:	2302      	movs	r3, #2
 80090ce:	2200      	movs	r2, #0
 80090d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d4:	f000 f86c 	bl	80091b0 <_lseek_r>
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	4632      	mov	r2, r6
 80090dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e0:	4628      	mov	r0, r5
 80090e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	463b      	mov	r3, r7
 80090ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	f000 b893 	b.w	8009218 <_write_r>

080090f2 <__sseek>:
 80090f2:	b510      	push	{r4, lr}
 80090f4:	460c      	mov	r4, r1
 80090f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fa:	f000 f859 	bl	80091b0 <_lseek_r>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	bf15      	itete	ne
 8009104:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800910a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800910e:	81a3      	strheq	r3, [r4, #12]
 8009110:	bf18      	it	ne
 8009112:	81a3      	strhne	r3, [r4, #12]
 8009114:	bd10      	pop	{r4, pc}

08009116 <__sclose>:
 8009116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911a:	f000 b839 	b.w	8009190 <_close_r>

0800911e <memcmp>:
 800911e:	3901      	subs	r1, #1
 8009120:	4402      	add	r2, r0
 8009122:	b510      	push	{r4, lr}
 8009124:	4290      	cmp	r0, r2
 8009126:	d101      	bne.n	800912c <memcmp+0xe>
 8009128:	2000      	movs	r0, #0
 800912a:	e005      	b.n	8009138 <memcmp+0x1a>
 800912c:	7803      	ldrb	r3, [r0, #0]
 800912e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009132:	42a3      	cmp	r3, r4
 8009134:	d001      	beq.n	800913a <memcmp+0x1c>
 8009136:	1b18      	subs	r0, r3, r4
 8009138:	bd10      	pop	{r4, pc}
 800913a:	3001      	adds	r0, #1
 800913c:	e7f2      	b.n	8009124 <memcmp+0x6>

0800913e <memset>:
 800913e:	4402      	add	r2, r0
 8009140:	4603      	mov	r3, r0
 8009142:	4293      	cmp	r3, r2
 8009144:	d100      	bne.n	8009148 <memset+0xa>
 8009146:	4770      	bx	lr
 8009148:	f803 1b01 	strb.w	r1, [r3], #1
 800914c:	e7f9      	b.n	8009142 <memset+0x4>

0800914e <strcspn>:
 800914e:	4603      	mov	r3, r0
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	461e      	mov	r6, r3
 8009154:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009158:	b144      	cbz	r4, 800916c <strcspn+0x1e>
 800915a:	1e4a      	subs	r2, r1, #1
 800915c:	e001      	b.n	8009162 <strcspn+0x14>
 800915e:	42a5      	cmp	r5, r4
 8009160:	d004      	beq.n	800916c <strcspn+0x1e>
 8009162:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009166:	2d00      	cmp	r5, #0
 8009168:	d1f9      	bne.n	800915e <strcspn+0x10>
 800916a:	e7f2      	b.n	8009152 <strcspn+0x4>
 800916c:	1a30      	subs	r0, r6, r0
 800916e:	bd70      	pop	{r4, r5, r6, pc}

08009170 <strspn>:
 8009170:	4603      	mov	r3, r0
 8009172:	b570      	push	{r4, r5, r6, lr}
 8009174:	461e      	mov	r6, r3
 8009176:	f813 4b01 	ldrb.w	r4, [r3], #1
 800917a:	b13c      	cbz	r4, 800918c <strspn+0x1c>
 800917c:	1e4a      	subs	r2, r1, #1
 800917e:	e001      	b.n	8009184 <strspn+0x14>
 8009180:	42a5      	cmp	r5, r4
 8009182:	d0f7      	beq.n	8009174 <strspn+0x4>
 8009184:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009188:	2d00      	cmp	r5, #0
 800918a:	d1f9      	bne.n	8009180 <strspn+0x10>
 800918c:	1a30      	subs	r0, r6, r0
 800918e:	bd70      	pop	{r4, r5, r6, pc}

08009190 <_close_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	2300      	movs	r3, #0
 8009194:	4d05      	ldr	r5, [pc, #20]	@ (80091ac <_close_r+0x1c>)
 8009196:	4604      	mov	r4, r0
 8009198:	4608      	mov	r0, r1
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	f7f7 fac6 	bl	800072c <_close>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_close_r+0x1a>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_close_r+0x1a>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20000228 	.word	0x20000228

080091b0 <_lseek_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4604      	mov	r4, r0
 80091b4:	4d06      	ldr	r5, [pc, #24]	@ (80091d0 <_lseek_r+0x20>)
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	2200      	movs	r2, #0
 80091bc:	602a      	str	r2, [r5, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f7f7 fadb 	bl	800077a <_lseek>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_lseek_r+0x1e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_lseek_r+0x1e>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20000228 	.word	0x20000228

080091d4 <_read_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4604      	mov	r4, r0
 80091d8:	4d06      	ldr	r5, [pc, #24]	@ (80091f4 <_read_r+0x20>)
 80091da:	4608      	mov	r0, r1
 80091dc:	4611      	mov	r1, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f7f7 fa69 	bl	80006ba <_read>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_read_r+0x1e>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_read_r+0x1e>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20000228 	.word	0x20000228

080091f8 <_sbrk_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	2300      	movs	r3, #0
 80091fc:	4d05      	ldr	r5, [pc, #20]	@ (8009214 <_sbrk_r+0x1c>)
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	602b      	str	r3, [r5, #0]
 8009204:	f7f7 fac6 	bl	8000794 <_sbrk>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_sbrk_r+0x1a>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_sbrk_r+0x1a>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20000228 	.word	0x20000228

08009218 <_write_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4604      	mov	r4, r0
 800921c:	4d06      	ldr	r5, [pc, #24]	@ (8009238 <_write_r+0x20>)
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	2200      	movs	r2, #0
 8009224:	602a      	str	r2, [r5, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f7f7 fa64 	bl	80006f4 <_write>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_write_r+0x1e>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_write_r+0x1e>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20000228 	.word	0x20000228

0800923c <__errno>:
 800923c:	4b01      	ldr	r3, [pc, #4]	@ (8009244 <__errno+0x8>)
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000070 	.word	0x20000070

08009248 <__libc_init_array>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	4d0d      	ldr	r5, [pc, #52]	@ (8009280 <__libc_init_array+0x38>)
 800924c:	2600      	movs	r6, #0
 800924e:	4c0d      	ldr	r4, [pc, #52]	@ (8009284 <__libc_init_array+0x3c>)
 8009250:	1b64      	subs	r4, r4, r5
 8009252:	10a4      	asrs	r4, r4, #2
 8009254:	42a6      	cmp	r6, r4
 8009256:	d109      	bne.n	800926c <__libc_init_array+0x24>
 8009258:	4d0b      	ldr	r5, [pc, #44]	@ (8009288 <__libc_init_array+0x40>)
 800925a:	2600      	movs	r6, #0
 800925c:	4c0b      	ldr	r4, [pc, #44]	@ (800928c <__libc_init_array+0x44>)
 800925e:	f000 fd61 	bl	8009d24 <_init>
 8009262:	1b64      	subs	r4, r4, r5
 8009264:	10a4      	asrs	r4, r4, #2
 8009266:	42a6      	cmp	r6, r4
 8009268:	d105      	bne.n	8009276 <__libc_init_array+0x2e>
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009270:	3601      	adds	r6, #1
 8009272:	4798      	blx	r3
 8009274:	e7ee      	b.n	8009254 <__libc_init_array+0xc>
 8009276:	f855 3b04 	ldr.w	r3, [r5], #4
 800927a:	3601      	adds	r6, #1
 800927c:	4798      	blx	r3
 800927e:	e7f2      	b.n	8009266 <__libc_init_array+0x1e>
 8009280:	0800ad58 	.word	0x0800ad58
 8009284:	0800ad58 	.word	0x0800ad58
 8009288:	0800ad58 	.word	0x0800ad58
 800928c:	0800ad5c 	.word	0x0800ad5c

08009290 <__retarget_lock_init_recursive>:
 8009290:	4770      	bx	lr

08009292 <__retarget_lock_acquire_recursive>:
 8009292:	4770      	bx	lr

08009294 <__retarget_lock_release_recursive>:
 8009294:	4770      	bx	lr

08009296 <memcpy>:
 8009296:	440a      	add	r2, r1
 8009298:	1e43      	subs	r3, r0, #1
 800929a:	4291      	cmp	r1, r2
 800929c:	d100      	bne.n	80092a0 <memcpy+0xa>
 800929e:	4770      	bx	lr
 80092a0:	b510      	push	{r4, lr}
 80092a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a6:	4291      	cmp	r1, r2
 80092a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ac:	d1f9      	bne.n	80092a2 <memcpy+0xc>
 80092ae:	bd10      	pop	{r4, pc}

080092b0 <abort>:
 80092b0:	2006      	movs	r0, #6
 80092b2:	b508      	push	{r3, lr}
 80092b4:	f000 fc88 	bl	8009bc8 <raise>
 80092b8:	2001      	movs	r0, #1
 80092ba:	f7f7 f9f3 	bl	80006a4 <_exit>
	...

080092c0 <_free_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4605      	mov	r5, r0
 80092c4:	2900      	cmp	r1, #0
 80092c6:	d041      	beq.n	800934c <_free_r+0x8c>
 80092c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092cc:	1f0c      	subs	r4, r1, #4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bfb8      	it	lt
 80092d2:	18e4      	addlt	r4, r4, r3
 80092d4:	f7ff fdee 	bl	8008eb4 <__malloc_lock>
 80092d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009350 <_free_r+0x90>)
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	b933      	cbnz	r3, 80092ec <_free_r+0x2c>
 80092de:	6063      	str	r3, [r4, #4]
 80092e0:	6014      	str	r4, [r2, #0]
 80092e2:	4628      	mov	r0, r5
 80092e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e8:	f7ff bdea 	b.w	8008ec0 <__malloc_unlock>
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	d908      	bls.n	8009302 <_free_r+0x42>
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	1821      	adds	r1, r4, r0
 80092f4:	428b      	cmp	r3, r1
 80092f6:	bf01      	itttt	eq
 80092f8:	6819      	ldreq	r1, [r3, #0]
 80092fa:	685b      	ldreq	r3, [r3, #4]
 80092fc:	1809      	addeq	r1, r1, r0
 80092fe:	6021      	streq	r1, [r4, #0]
 8009300:	e7ed      	b.n	80092de <_free_r+0x1e>
 8009302:	461a      	mov	r2, r3
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b10b      	cbz	r3, 800930c <_free_r+0x4c>
 8009308:	42a3      	cmp	r3, r4
 800930a:	d9fa      	bls.n	8009302 <_free_r+0x42>
 800930c:	6811      	ldr	r1, [r2, #0]
 800930e:	1850      	adds	r0, r2, r1
 8009310:	42a0      	cmp	r0, r4
 8009312:	d10b      	bne.n	800932c <_free_r+0x6c>
 8009314:	6820      	ldr	r0, [r4, #0]
 8009316:	4401      	add	r1, r0
 8009318:	1850      	adds	r0, r2, r1
 800931a:	6011      	str	r1, [r2, #0]
 800931c:	4283      	cmp	r3, r0
 800931e:	d1e0      	bne.n	80092e2 <_free_r+0x22>
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4408      	add	r0, r1
 8009326:	6053      	str	r3, [r2, #4]
 8009328:	6010      	str	r0, [r2, #0]
 800932a:	e7da      	b.n	80092e2 <_free_r+0x22>
 800932c:	d902      	bls.n	8009334 <_free_r+0x74>
 800932e:	230c      	movs	r3, #12
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	e7d6      	b.n	80092e2 <_free_r+0x22>
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	1821      	adds	r1, r4, r0
 8009338:	428b      	cmp	r3, r1
 800933a:	bf02      	ittt	eq
 800933c:	6819      	ldreq	r1, [r3, #0]
 800933e:	685b      	ldreq	r3, [r3, #4]
 8009340:	1809      	addeq	r1, r1, r0
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	bf08      	it	eq
 8009346:	6021      	streq	r1, [r4, #0]
 8009348:	6054      	str	r4, [r2, #4]
 800934a:	e7ca      	b.n	80092e2 <_free_r+0x22>
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200000e8 	.word	0x200000e8

08009354 <__sfputc_r>:
 8009354:	6893      	ldr	r3, [r2, #8]
 8009356:	3b01      	subs	r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	b410      	push	{r4}
 800935c:	6093      	str	r3, [r2, #8]
 800935e:	da08      	bge.n	8009372 <__sfputc_r+0x1e>
 8009360:	6994      	ldr	r4, [r2, #24]
 8009362:	42a3      	cmp	r3, r4
 8009364:	db01      	blt.n	800936a <__sfputc_r+0x16>
 8009366:	290a      	cmp	r1, #10
 8009368:	d103      	bne.n	8009372 <__sfputc_r+0x1e>
 800936a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800936e:	f000 bb6f 	b.w	8009a50 <__swbuf_r>
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	1c58      	adds	r0, r3, #1
 8009376:	6010      	str	r0, [r2, #0]
 8009378:	4608      	mov	r0, r1
 800937a:	7019      	strb	r1, [r3, #0]
 800937c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009380:	4770      	bx	lr

08009382 <__sfputs_r>:
 8009382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009384:	4606      	mov	r6, r0
 8009386:	460f      	mov	r7, r1
 8009388:	4614      	mov	r4, r2
 800938a:	18d5      	adds	r5, r2, r3
 800938c:	42ac      	cmp	r4, r5
 800938e:	d101      	bne.n	8009394 <__sfputs_r+0x12>
 8009390:	2000      	movs	r0, #0
 8009392:	e007      	b.n	80093a4 <__sfputs_r+0x22>
 8009394:	463a      	mov	r2, r7
 8009396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ffda 	bl	8009354 <__sfputc_r>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d1f3      	bne.n	800938c <__sfputs_r+0xa>
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093a8 <_vfiprintf_r>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	460d      	mov	r5, r1
 80093ae:	b09d      	sub	sp, #116	@ 0x74
 80093b0:	4614      	mov	r4, r2
 80093b2:	4698      	mov	r8, r3
 80093b4:	4606      	mov	r6, r0
 80093b6:	b118      	cbz	r0, 80093c0 <_vfiprintf_r+0x18>
 80093b8:	6a03      	ldr	r3, [r0, #32]
 80093ba:	b90b      	cbnz	r3, 80093c0 <_vfiprintf_r+0x18>
 80093bc:	f7ff fe12 	bl	8008fe4 <__sinit>
 80093c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093c2:	07d9      	lsls	r1, r3, #31
 80093c4:	d405      	bmi.n	80093d2 <_vfiprintf_r+0x2a>
 80093c6:	89ab      	ldrh	r3, [r5, #12]
 80093c8:	059a      	lsls	r2, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_vfiprintf_r+0x2a>
 80093cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ce:	f7ff ff60 	bl	8009292 <__retarget_lock_acquire_recursive>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	071b      	lsls	r3, r3, #28
 80093d6:	d501      	bpl.n	80093dc <_vfiprintf_r+0x34>
 80093d8:	692b      	ldr	r3, [r5, #16]
 80093da:	b99b      	cbnz	r3, 8009404 <_vfiprintf_r+0x5c>
 80093dc:	4629      	mov	r1, r5
 80093de:	4630      	mov	r0, r6
 80093e0:	f000 fb74 	bl	8009acc <__swsetup_r>
 80093e4:	b170      	cbz	r0, 8009404 <_vfiprintf_r+0x5c>
 80093e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093e8:	07dc      	lsls	r4, r3, #31
 80093ea:	d504      	bpl.n	80093f6 <_vfiprintf_r+0x4e>
 80093ec:	f04f 30ff 	mov.w	r0, #4294967295
 80093f0:	b01d      	add	sp, #116	@ 0x74
 80093f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f6:	89ab      	ldrh	r3, [r5, #12]
 80093f8:	0598      	lsls	r0, r3, #22
 80093fa:	d4f7      	bmi.n	80093ec <_vfiprintf_r+0x44>
 80093fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093fe:	f7ff ff49 	bl	8009294 <__retarget_lock_release_recursive>
 8009402:	e7f3      	b.n	80093ec <_vfiprintf_r+0x44>
 8009404:	2300      	movs	r3, #0
 8009406:	f8cd 800c 	str.w	r8, [sp, #12]
 800940a:	f04f 0901 	mov.w	r9, #1
 800940e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80095c4 <_vfiprintf_r+0x21c>
 8009412:	9309      	str	r3, [sp, #36]	@ 0x24
 8009414:	2320      	movs	r3, #32
 8009416:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800941a:	2330      	movs	r3, #48	@ 0x30
 800941c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009420:	4623      	mov	r3, r4
 8009422:	469a      	mov	sl, r3
 8009424:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009428:	b10a      	cbz	r2, 800942e <_vfiprintf_r+0x86>
 800942a:	2a25      	cmp	r2, #37	@ 0x25
 800942c:	d1f9      	bne.n	8009422 <_vfiprintf_r+0x7a>
 800942e:	ebba 0b04 	subs.w	fp, sl, r4
 8009432:	d00b      	beq.n	800944c <_vfiprintf_r+0xa4>
 8009434:	465b      	mov	r3, fp
 8009436:	4622      	mov	r2, r4
 8009438:	4629      	mov	r1, r5
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff ffa1 	bl	8009382 <__sfputs_r>
 8009440:	3001      	adds	r0, #1
 8009442:	f000 80a7 	beq.w	8009594 <_vfiprintf_r+0x1ec>
 8009446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009448:	445a      	add	r2, fp
 800944a:	9209      	str	r2, [sp, #36]	@ 0x24
 800944c:	f89a 3000 	ldrb.w	r3, [sl]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 809f 	beq.w	8009594 <_vfiprintf_r+0x1ec>
 8009456:	2300      	movs	r3, #0
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	f10a 0a01 	add.w	sl, sl, #1
 8009460:	9304      	str	r3, [sp, #16]
 8009462:	9307      	str	r3, [sp, #28]
 8009464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009468:	931a      	str	r3, [sp, #104]	@ 0x68
 800946a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800946e:	4654      	mov	r4, sl
 8009470:	2205      	movs	r2, #5
 8009472:	4854      	ldr	r0, [pc, #336]	@ (80095c4 <_vfiprintf_r+0x21c>)
 8009474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009478:	f000 fbc2 	bl	8009c00 <memchr>
 800947c:	9a04      	ldr	r2, [sp, #16]
 800947e:	b9d8      	cbnz	r0, 80094b8 <_vfiprintf_r+0x110>
 8009480:	06d1      	lsls	r1, r2, #27
 8009482:	bf44      	itt	mi
 8009484:	2320      	movmi	r3, #32
 8009486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800948a:	0713      	lsls	r3, r2, #28
 800948c:	bf44      	itt	mi
 800948e:	232b      	movmi	r3, #43	@ 0x2b
 8009490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009494:	f89a 3000 	ldrb.w	r3, [sl]
 8009498:	2b2a      	cmp	r3, #42	@ 0x2a
 800949a:	d015      	beq.n	80094c8 <_vfiprintf_r+0x120>
 800949c:	9a07      	ldr	r2, [sp, #28]
 800949e:	4654      	mov	r4, sl
 80094a0:	2000      	movs	r0, #0
 80094a2:	f04f 0c0a 	mov.w	ip, #10
 80094a6:	4621      	mov	r1, r4
 80094a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ac:	3b30      	subs	r3, #48	@ 0x30
 80094ae:	2b09      	cmp	r3, #9
 80094b0:	d94b      	bls.n	800954a <_vfiprintf_r+0x1a2>
 80094b2:	b1b0      	cbz	r0, 80094e2 <_vfiprintf_r+0x13a>
 80094b4:	9207      	str	r2, [sp, #28]
 80094b6:	e014      	b.n	80094e2 <_vfiprintf_r+0x13a>
 80094b8:	eba0 0308 	sub.w	r3, r0, r8
 80094bc:	46a2      	mov	sl, r4
 80094be:	fa09 f303 	lsl.w	r3, r9, r3
 80094c2:	4313      	orrs	r3, r2
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	e7d2      	b.n	800946e <_vfiprintf_r+0xc6>
 80094c8:	9b03      	ldr	r3, [sp, #12]
 80094ca:	1d19      	adds	r1, r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	9103      	str	r1, [sp, #12]
 80094d2:	bfbb      	ittet	lt
 80094d4:	425b      	neglt	r3, r3
 80094d6:	f042 0202 	orrlt.w	r2, r2, #2
 80094da:	9307      	strge	r3, [sp, #28]
 80094dc:	9307      	strlt	r3, [sp, #28]
 80094de:	bfb8      	it	lt
 80094e0:	9204      	strlt	r2, [sp, #16]
 80094e2:	7823      	ldrb	r3, [r4, #0]
 80094e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80094e6:	d10a      	bne.n	80094fe <_vfiprintf_r+0x156>
 80094e8:	7863      	ldrb	r3, [r4, #1]
 80094ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ec:	d132      	bne.n	8009554 <_vfiprintf_r+0x1ac>
 80094ee:	9b03      	ldr	r3, [sp, #12]
 80094f0:	3402      	adds	r4, #2
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094fa:	9203      	str	r2, [sp, #12]
 80094fc:	9305      	str	r3, [sp, #20]
 80094fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095d4 <_vfiprintf_r+0x22c>
 8009502:	2203      	movs	r2, #3
 8009504:	7821      	ldrb	r1, [r4, #0]
 8009506:	4650      	mov	r0, sl
 8009508:	f000 fb7a 	bl	8009c00 <memchr>
 800950c:	b138      	cbz	r0, 800951e <_vfiprintf_r+0x176>
 800950e:	eba0 000a 	sub.w	r0, r0, sl
 8009512:	2240      	movs	r2, #64	@ 0x40
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	3401      	adds	r4, #1
 8009518:	4082      	lsls	r2, r0
 800951a:	4313      	orrs	r3, r2
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009522:	2206      	movs	r2, #6
 8009524:	4828      	ldr	r0, [pc, #160]	@ (80095c8 <_vfiprintf_r+0x220>)
 8009526:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800952a:	f000 fb69 	bl	8009c00 <memchr>
 800952e:	2800      	cmp	r0, #0
 8009530:	d03f      	beq.n	80095b2 <_vfiprintf_r+0x20a>
 8009532:	4b26      	ldr	r3, [pc, #152]	@ (80095cc <_vfiprintf_r+0x224>)
 8009534:	bb1b      	cbnz	r3, 800957e <_vfiprintf_r+0x1d6>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	3307      	adds	r3, #7
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	3308      	adds	r3, #8
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009544:	443b      	add	r3, r7
 8009546:	9309      	str	r3, [sp, #36]	@ 0x24
 8009548:	e76a      	b.n	8009420 <_vfiprintf_r+0x78>
 800954a:	fb0c 3202 	mla	r2, ip, r2, r3
 800954e:	460c      	mov	r4, r1
 8009550:	2001      	movs	r0, #1
 8009552:	e7a8      	b.n	80094a6 <_vfiprintf_r+0xfe>
 8009554:	2300      	movs	r3, #0
 8009556:	3401      	adds	r4, #1
 8009558:	f04f 0c0a 	mov.w	ip, #10
 800955c:	4619      	mov	r1, r3
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	4620      	mov	r0, r4
 8009562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009566:	3a30      	subs	r2, #48	@ 0x30
 8009568:	2a09      	cmp	r2, #9
 800956a:	d903      	bls.n	8009574 <_vfiprintf_r+0x1cc>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0c6      	beq.n	80094fe <_vfiprintf_r+0x156>
 8009570:	9105      	str	r1, [sp, #20]
 8009572:	e7c4      	b.n	80094fe <_vfiprintf_r+0x156>
 8009574:	fb0c 2101 	mla	r1, ip, r1, r2
 8009578:	4604      	mov	r4, r0
 800957a:	2301      	movs	r3, #1
 800957c:	e7f0      	b.n	8009560 <_vfiprintf_r+0x1b8>
 800957e:	ab03      	add	r3, sp, #12
 8009580:	462a      	mov	r2, r5
 8009582:	a904      	add	r1, sp, #16
 8009584:	4630      	mov	r0, r6
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4b11      	ldr	r3, [pc, #68]	@ (80095d0 <_vfiprintf_r+0x228>)
 800958a:	f3af 8000 	nop.w
 800958e:	4607      	mov	r7, r0
 8009590:	1c78      	adds	r0, r7, #1
 8009592:	d1d6      	bne.n	8009542 <_vfiprintf_r+0x19a>
 8009594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009596:	07d9      	lsls	r1, r3, #31
 8009598:	d405      	bmi.n	80095a6 <_vfiprintf_r+0x1fe>
 800959a:	89ab      	ldrh	r3, [r5, #12]
 800959c:	059a      	lsls	r2, r3, #22
 800959e:	d402      	bmi.n	80095a6 <_vfiprintf_r+0x1fe>
 80095a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095a2:	f7ff fe77 	bl	8009294 <__retarget_lock_release_recursive>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	065b      	lsls	r3, r3, #25
 80095aa:	f53f af1f 	bmi.w	80093ec <_vfiprintf_r+0x44>
 80095ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095b0:	e71e      	b.n	80093f0 <_vfiprintf_r+0x48>
 80095b2:	ab03      	add	r3, sp, #12
 80095b4:	462a      	mov	r2, r5
 80095b6:	a904      	add	r1, sp, #16
 80095b8:	4630      	mov	r0, r6
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <_vfiprintf_r+0x228>)
 80095be:	f000 f87d 	bl	80096bc <_printf_i>
 80095c2:	e7e4      	b.n	800958e <_vfiprintf_r+0x1e6>
 80095c4:	0800ad1c 	.word	0x0800ad1c
 80095c8:	0800ad26 	.word	0x0800ad26
 80095cc:	00000000 	.word	0x00000000
 80095d0:	08009383 	.word	0x08009383
 80095d4:	0800ad22 	.word	0x0800ad22

080095d8 <_printf_common>:
 80095d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	4616      	mov	r6, r2
 80095de:	4698      	mov	r8, r3
 80095e0:	688a      	ldr	r2, [r1, #8]
 80095e2:	4607      	mov	r7, r0
 80095e4:	690b      	ldr	r3, [r1, #16]
 80095e6:	460c      	mov	r4, r1
 80095e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095ec:	4293      	cmp	r3, r2
 80095ee:	bfb8      	it	lt
 80095f0:	4613      	movlt	r3, r2
 80095f2:	6033      	str	r3, [r6, #0]
 80095f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095f8:	b10a      	cbz	r2, 80095fe <_printf_common+0x26>
 80095fa:	3301      	adds	r3, #1
 80095fc:	6033      	str	r3, [r6, #0]
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	0699      	lsls	r1, r3, #26
 8009602:	bf42      	ittt	mi
 8009604:	6833      	ldrmi	r3, [r6, #0]
 8009606:	3302      	addmi	r3, #2
 8009608:	6033      	strmi	r3, [r6, #0]
 800960a:	6825      	ldr	r5, [r4, #0]
 800960c:	f015 0506 	ands.w	r5, r5, #6
 8009610:	d106      	bne.n	8009620 <_printf_common+0x48>
 8009612:	f104 0a19 	add.w	sl, r4, #25
 8009616:	68e3      	ldr	r3, [r4, #12]
 8009618:	6832      	ldr	r2, [r6, #0]
 800961a:	1a9b      	subs	r3, r3, r2
 800961c:	42ab      	cmp	r3, r5
 800961e:	dc2b      	bgt.n	8009678 <_printf_common+0xa0>
 8009620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009624:	6822      	ldr	r2, [r4, #0]
 8009626:	3b00      	subs	r3, #0
 8009628:	bf18      	it	ne
 800962a:	2301      	movne	r3, #1
 800962c:	0692      	lsls	r2, r2, #26
 800962e:	d430      	bmi.n	8009692 <_printf_common+0xba>
 8009630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009634:	4641      	mov	r1, r8
 8009636:	4638      	mov	r0, r7
 8009638:	47c8      	blx	r9
 800963a:	3001      	adds	r0, #1
 800963c:	d023      	beq.n	8009686 <_printf_common+0xae>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	341a      	adds	r4, #26
 8009642:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009646:	f003 0306 	and.w	r3, r3, #6
 800964a:	2b04      	cmp	r3, #4
 800964c:	bf0a      	itet	eq
 800964e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009652:	2500      	movne	r5, #0
 8009654:	6833      	ldreq	r3, [r6, #0]
 8009656:	f04f 0600 	mov.w	r6, #0
 800965a:	bf08      	it	eq
 800965c:	1aed      	subeq	r5, r5, r3
 800965e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009662:	bf08      	it	eq
 8009664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009668:	4293      	cmp	r3, r2
 800966a:	bfc4      	itt	gt
 800966c:	1a9b      	subgt	r3, r3, r2
 800966e:	18ed      	addgt	r5, r5, r3
 8009670:	42b5      	cmp	r5, r6
 8009672:	d11a      	bne.n	80096aa <_printf_common+0xd2>
 8009674:	2000      	movs	r0, #0
 8009676:	e008      	b.n	800968a <_printf_common+0xb2>
 8009678:	2301      	movs	r3, #1
 800967a:	4652      	mov	r2, sl
 800967c:	4641      	mov	r1, r8
 800967e:	4638      	mov	r0, r7
 8009680:	47c8      	blx	r9
 8009682:	3001      	adds	r0, #1
 8009684:	d103      	bne.n	800968e <_printf_common+0xb6>
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968e:	3501      	adds	r5, #1
 8009690:	e7c1      	b.n	8009616 <_printf_common+0x3e>
 8009692:	18e1      	adds	r1, r4, r3
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	2030      	movs	r0, #48	@ 0x30
 8009698:	3302      	adds	r3, #2
 800969a:	4422      	add	r2, r4
 800969c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096a8:	e7c2      	b.n	8009630 <_printf_common+0x58>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4622      	mov	r2, r4
 80096ae:	4641      	mov	r1, r8
 80096b0:	4638      	mov	r0, r7
 80096b2:	47c8      	blx	r9
 80096b4:	3001      	adds	r0, #1
 80096b6:	d0e6      	beq.n	8009686 <_printf_common+0xae>
 80096b8:	3601      	adds	r6, #1
 80096ba:	e7d9      	b.n	8009670 <_printf_common+0x98>

080096bc <_printf_i>:
 80096bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	7e0f      	ldrb	r7, [r1, #24]
 80096c2:	4691      	mov	r9, r2
 80096c4:	4680      	mov	r8, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	2f78      	cmp	r7, #120	@ 0x78
 80096ca:	469a      	mov	sl, r3
 80096cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096d2:	d807      	bhi.n	80096e4 <_printf_i+0x28>
 80096d4:	2f62      	cmp	r7, #98	@ 0x62
 80096d6:	d80a      	bhi.n	80096ee <_printf_i+0x32>
 80096d8:	2f00      	cmp	r7, #0
 80096da:	f000 80d1 	beq.w	8009880 <_printf_i+0x1c4>
 80096de:	2f58      	cmp	r7, #88	@ 0x58
 80096e0:	f000 80b8 	beq.w	8009854 <_printf_i+0x198>
 80096e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096ec:	e03a      	b.n	8009764 <_printf_i+0xa8>
 80096ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096f2:	2b15      	cmp	r3, #21
 80096f4:	d8f6      	bhi.n	80096e4 <_printf_i+0x28>
 80096f6:	a101      	add	r1, pc, #4	@ (adr r1, 80096fc <_printf_i+0x40>)
 80096f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096fc:	08009755 	.word	0x08009755
 8009700:	08009769 	.word	0x08009769
 8009704:	080096e5 	.word	0x080096e5
 8009708:	080096e5 	.word	0x080096e5
 800970c:	080096e5 	.word	0x080096e5
 8009710:	080096e5 	.word	0x080096e5
 8009714:	08009769 	.word	0x08009769
 8009718:	080096e5 	.word	0x080096e5
 800971c:	080096e5 	.word	0x080096e5
 8009720:	080096e5 	.word	0x080096e5
 8009724:	080096e5 	.word	0x080096e5
 8009728:	08009867 	.word	0x08009867
 800972c:	08009793 	.word	0x08009793
 8009730:	08009821 	.word	0x08009821
 8009734:	080096e5 	.word	0x080096e5
 8009738:	080096e5 	.word	0x080096e5
 800973c:	08009889 	.word	0x08009889
 8009740:	080096e5 	.word	0x080096e5
 8009744:	08009793 	.word	0x08009793
 8009748:	080096e5 	.word	0x080096e5
 800974c:	080096e5 	.word	0x080096e5
 8009750:	08009829 	.word	0x08009829
 8009754:	6833      	ldr	r3, [r6, #0]
 8009756:	1d1a      	adds	r2, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6032      	str	r2, [r6, #0]
 800975c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009764:	2301      	movs	r3, #1
 8009766:	e09c      	b.n	80098a2 <_printf_i+0x1e6>
 8009768:	6833      	ldr	r3, [r6, #0]
 800976a:	6820      	ldr	r0, [r4, #0]
 800976c:	1d19      	adds	r1, r3, #4
 800976e:	6031      	str	r1, [r6, #0]
 8009770:	0606      	lsls	r6, r0, #24
 8009772:	d501      	bpl.n	8009778 <_printf_i+0xbc>
 8009774:	681d      	ldr	r5, [r3, #0]
 8009776:	e003      	b.n	8009780 <_printf_i+0xc4>
 8009778:	0645      	lsls	r5, r0, #25
 800977a:	d5fb      	bpl.n	8009774 <_printf_i+0xb8>
 800977c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009780:	2d00      	cmp	r5, #0
 8009782:	da03      	bge.n	800978c <_printf_i+0xd0>
 8009784:	232d      	movs	r3, #45	@ 0x2d
 8009786:	426d      	negs	r5, r5
 8009788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800978c:	4858      	ldr	r0, [pc, #352]	@ (80098f0 <_printf_i+0x234>)
 800978e:	230a      	movs	r3, #10
 8009790:	e011      	b.n	80097b6 <_printf_i+0xfa>
 8009792:	6821      	ldr	r1, [r4, #0]
 8009794:	6833      	ldr	r3, [r6, #0]
 8009796:	0608      	lsls	r0, r1, #24
 8009798:	f853 5b04 	ldr.w	r5, [r3], #4
 800979c:	d402      	bmi.n	80097a4 <_printf_i+0xe8>
 800979e:	0649      	lsls	r1, r1, #25
 80097a0:	bf48      	it	mi
 80097a2:	b2ad      	uxthmi	r5, r5
 80097a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80097a6:	6033      	str	r3, [r6, #0]
 80097a8:	4851      	ldr	r0, [pc, #324]	@ (80098f0 <_printf_i+0x234>)
 80097aa:	bf14      	ite	ne
 80097ac:	230a      	movne	r3, #10
 80097ae:	2308      	moveq	r3, #8
 80097b0:	2100      	movs	r1, #0
 80097b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097b6:	6866      	ldr	r6, [r4, #4]
 80097b8:	2e00      	cmp	r6, #0
 80097ba:	60a6      	str	r6, [r4, #8]
 80097bc:	db05      	blt.n	80097ca <_printf_i+0x10e>
 80097be:	6821      	ldr	r1, [r4, #0]
 80097c0:	432e      	orrs	r6, r5
 80097c2:	f021 0104 	bic.w	r1, r1, #4
 80097c6:	6021      	str	r1, [r4, #0]
 80097c8:	d04b      	beq.n	8009862 <_printf_i+0x1a6>
 80097ca:	4616      	mov	r6, r2
 80097cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80097d0:	fb03 5711 	mls	r7, r3, r1, r5
 80097d4:	5dc7      	ldrb	r7, [r0, r7]
 80097d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097da:	462f      	mov	r7, r5
 80097dc:	460d      	mov	r5, r1
 80097de:	42bb      	cmp	r3, r7
 80097e0:	d9f4      	bls.n	80097cc <_printf_i+0x110>
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d10b      	bne.n	80097fe <_printf_i+0x142>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	07df      	lsls	r7, r3, #31
 80097ea:	d508      	bpl.n	80097fe <_printf_i+0x142>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	6861      	ldr	r1, [r4, #4]
 80097f0:	4299      	cmp	r1, r3
 80097f2:	bfde      	ittt	le
 80097f4:	2330      	movle	r3, #48	@ 0x30
 80097f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097fe:	1b92      	subs	r2, r2, r6
 8009800:	6122      	str	r2, [r4, #16]
 8009802:	464b      	mov	r3, r9
 8009804:	aa03      	add	r2, sp, #12
 8009806:	4621      	mov	r1, r4
 8009808:	4640      	mov	r0, r8
 800980a:	f8cd a000 	str.w	sl, [sp]
 800980e:	f7ff fee3 	bl	80095d8 <_printf_common>
 8009812:	3001      	adds	r0, #1
 8009814:	d14a      	bne.n	80098ac <_printf_i+0x1f0>
 8009816:	f04f 30ff 	mov.w	r0, #4294967295
 800981a:	b004      	add	sp, #16
 800981c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	f043 0320 	orr.w	r3, r3, #32
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	2778      	movs	r7, #120	@ 0x78
 800982a:	4832      	ldr	r0, [pc, #200]	@ (80098f4 <_printf_i+0x238>)
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009832:	061f      	lsls	r7, r3, #24
 8009834:	6831      	ldr	r1, [r6, #0]
 8009836:	f851 5b04 	ldr.w	r5, [r1], #4
 800983a:	d402      	bmi.n	8009842 <_printf_i+0x186>
 800983c:	065f      	lsls	r7, r3, #25
 800983e:	bf48      	it	mi
 8009840:	b2ad      	uxthmi	r5, r5
 8009842:	6031      	str	r1, [r6, #0]
 8009844:	07d9      	lsls	r1, r3, #31
 8009846:	bf44      	itt	mi
 8009848:	f043 0320 	orrmi.w	r3, r3, #32
 800984c:	6023      	strmi	r3, [r4, #0]
 800984e:	b11d      	cbz	r5, 8009858 <_printf_i+0x19c>
 8009850:	2310      	movs	r3, #16
 8009852:	e7ad      	b.n	80097b0 <_printf_i+0xf4>
 8009854:	4826      	ldr	r0, [pc, #152]	@ (80098f0 <_printf_i+0x234>)
 8009856:	e7e9      	b.n	800982c <_printf_i+0x170>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	f023 0320 	bic.w	r3, r3, #32
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	e7f6      	b.n	8009850 <_printf_i+0x194>
 8009862:	4616      	mov	r6, r2
 8009864:	e7bd      	b.n	80097e2 <_printf_i+0x126>
 8009866:	6833      	ldr	r3, [r6, #0]
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	1d18      	adds	r0, r3, #4
 800986c:	6961      	ldr	r1, [r4, #20]
 800986e:	6030      	str	r0, [r6, #0]
 8009870:	062e      	lsls	r6, r5, #24
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	d501      	bpl.n	800987a <_printf_i+0x1be>
 8009876:	6019      	str	r1, [r3, #0]
 8009878:	e002      	b.n	8009880 <_printf_i+0x1c4>
 800987a:	0668      	lsls	r0, r5, #25
 800987c:	d5fb      	bpl.n	8009876 <_printf_i+0x1ba>
 800987e:	8019      	strh	r1, [r3, #0]
 8009880:	2300      	movs	r3, #0
 8009882:	4616      	mov	r6, r2
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	e7bc      	b.n	8009802 <_printf_i+0x146>
 8009888:	6833      	ldr	r3, [r6, #0]
 800988a:	2100      	movs	r1, #0
 800988c:	1d1a      	adds	r2, r3, #4
 800988e:	6032      	str	r2, [r6, #0]
 8009890:	681e      	ldr	r6, [r3, #0]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	4630      	mov	r0, r6
 8009896:	f000 f9b3 	bl	8009c00 <memchr>
 800989a:	b108      	cbz	r0, 80098a0 <_printf_i+0x1e4>
 800989c:	1b80      	subs	r0, r0, r6
 800989e:	6060      	str	r0, [r4, #4]
 80098a0:	6863      	ldr	r3, [r4, #4]
 80098a2:	6123      	str	r3, [r4, #16]
 80098a4:	2300      	movs	r3, #0
 80098a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098aa:	e7aa      	b.n	8009802 <_printf_i+0x146>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	4632      	mov	r2, r6
 80098b0:	4649      	mov	r1, r9
 80098b2:	4640      	mov	r0, r8
 80098b4:	47d0      	blx	sl
 80098b6:	3001      	adds	r0, #1
 80098b8:	d0ad      	beq.n	8009816 <_printf_i+0x15a>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	079b      	lsls	r3, r3, #30
 80098be:	d413      	bmi.n	80098e8 <_printf_i+0x22c>
 80098c0:	68e0      	ldr	r0, [r4, #12]
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	4298      	cmp	r0, r3
 80098c6:	bfb8      	it	lt
 80098c8:	4618      	movlt	r0, r3
 80098ca:	e7a6      	b.n	800981a <_printf_i+0x15e>
 80098cc:	2301      	movs	r3, #1
 80098ce:	4632      	mov	r2, r6
 80098d0:	4649      	mov	r1, r9
 80098d2:	4640      	mov	r0, r8
 80098d4:	47d0      	blx	sl
 80098d6:	3001      	adds	r0, #1
 80098d8:	d09d      	beq.n	8009816 <_printf_i+0x15a>
 80098da:	3501      	adds	r5, #1
 80098dc:	68e3      	ldr	r3, [r4, #12]
 80098de:	9903      	ldr	r1, [sp, #12]
 80098e0:	1a5b      	subs	r3, r3, r1
 80098e2:	42ab      	cmp	r3, r5
 80098e4:	dcf2      	bgt.n	80098cc <_printf_i+0x210>
 80098e6:	e7eb      	b.n	80098c0 <_printf_i+0x204>
 80098e8:	2500      	movs	r5, #0
 80098ea:	f104 0619 	add.w	r6, r4, #25
 80098ee:	e7f5      	b.n	80098dc <_printf_i+0x220>
 80098f0:	0800ad2d 	.word	0x0800ad2d
 80098f4:	0800ad3e 	.word	0x0800ad3e

080098f8 <__sflush_r>:
 80098f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	0716      	lsls	r6, r2, #28
 8009902:	4605      	mov	r5, r0
 8009904:	460c      	mov	r4, r1
 8009906:	d454      	bmi.n	80099b2 <__sflush_r+0xba>
 8009908:	684b      	ldr	r3, [r1, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	dc02      	bgt.n	8009914 <__sflush_r+0x1c>
 800990e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	dd48      	ble.n	80099a6 <__sflush_r+0xae>
 8009914:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009916:	2e00      	cmp	r6, #0
 8009918:	d045      	beq.n	80099a6 <__sflush_r+0xae>
 800991a:	2300      	movs	r3, #0
 800991c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009920:	682f      	ldr	r7, [r5, #0]
 8009922:	6a21      	ldr	r1, [r4, #32]
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	d030      	beq.n	800998a <__sflush_r+0x92>
 8009928:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	0759      	lsls	r1, r3, #29
 800992e:	d505      	bpl.n	800993c <__sflush_r+0x44>
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	1ad2      	subs	r2, r2, r3
 8009934:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009936:	b10b      	cbz	r3, 800993c <__sflush_r+0x44>
 8009938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	2300      	movs	r3, #0
 800993e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009940:	6a21      	ldr	r1, [r4, #32]
 8009942:	4628      	mov	r0, r5
 8009944:	47b0      	blx	r6
 8009946:	1c43      	adds	r3, r0, #1
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	d106      	bne.n	800995a <__sflush_r+0x62>
 800994c:	6829      	ldr	r1, [r5, #0]
 800994e:	291d      	cmp	r1, #29
 8009950:	d82b      	bhi.n	80099aa <__sflush_r+0xb2>
 8009952:	4a2a      	ldr	r2, [pc, #168]	@ (80099fc <__sflush_r+0x104>)
 8009954:	40ca      	lsrs	r2, r1
 8009956:	07d6      	lsls	r6, r2, #31
 8009958:	d527      	bpl.n	80099aa <__sflush_r+0xb2>
 800995a:	2200      	movs	r2, #0
 800995c:	04d9      	lsls	r1, r3, #19
 800995e:	6062      	str	r2, [r4, #4]
 8009960:	6922      	ldr	r2, [r4, #16]
 8009962:	6022      	str	r2, [r4, #0]
 8009964:	d504      	bpl.n	8009970 <__sflush_r+0x78>
 8009966:	1c42      	adds	r2, r0, #1
 8009968:	d101      	bne.n	800996e <__sflush_r+0x76>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b903      	cbnz	r3, 8009970 <__sflush_r+0x78>
 800996e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009972:	602f      	str	r7, [r5, #0]
 8009974:	b1b9      	cbz	r1, 80099a6 <__sflush_r+0xae>
 8009976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800997a:	4299      	cmp	r1, r3
 800997c:	d002      	beq.n	8009984 <__sflush_r+0x8c>
 800997e:	4628      	mov	r0, r5
 8009980:	f7ff fc9e 	bl	80092c0 <_free_r>
 8009984:	2300      	movs	r3, #0
 8009986:	6363      	str	r3, [r4, #52]	@ 0x34
 8009988:	e00d      	b.n	80099a6 <__sflush_r+0xae>
 800998a:	2301      	movs	r3, #1
 800998c:	4628      	mov	r0, r5
 800998e:	47b0      	blx	r6
 8009990:	4602      	mov	r2, r0
 8009992:	1c50      	adds	r0, r2, #1
 8009994:	d1c9      	bne.n	800992a <__sflush_r+0x32>
 8009996:	682b      	ldr	r3, [r5, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0c6      	beq.n	800992a <__sflush_r+0x32>
 800999c:	2b1d      	cmp	r3, #29
 800999e:	d001      	beq.n	80099a4 <__sflush_r+0xac>
 80099a0:	2b16      	cmp	r3, #22
 80099a2:	d11d      	bne.n	80099e0 <__sflush_r+0xe8>
 80099a4:	602f      	str	r7, [r5, #0]
 80099a6:	2000      	movs	r0, #0
 80099a8:	e021      	b.n	80099ee <__sflush_r+0xf6>
 80099aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ae:	b21b      	sxth	r3, r3
 80099b0:	e01a      	b.n	80099e8 <__sflush_r+0xf0>
 80099b2:	690f      	ldr	r7, [r1, #16]
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	d0f6      	beq.n	80099a6 <__sflush_r+0xae>
 80099b8:	0793      	lsls	r3, r2, #30
 80099ba:	680e      	ldr	r6, [r1, #0]
 80099bc:	600f      	str	r7, [r1, #0]
 80099be:	bf0c      	ite	eq
 80099c0:	694b      	ldreq	r3, [r1, #20]
 80099c2:	2300      	movne	r3, #0
 80099c4:	eba6 0807 	sub.w	r8, r6, r7
 80099c8:	608b      	str	r3, [r1, #8]
 80099ca:	f1b8 0f00 	cmp.w	r8, #0
 80099ce:	ddea      	ble.n	80099a6 <__sflush_r+0xae>
 80099d0:	4643      	mov	r3, r8
 80099d2:	463a      	mov	r2, r7
 80099d4:	6a21      	ldr	r1, [r4, #32]
 80099d6:	4628      	mov	r0, r5
 80099d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099da:	47b0      	blx	r6
 80099dc:	2800      	cmp	r0, #0
 80099de:	dc08      	bgt.n	80099f2 <__sflush_r+0xfa>
 80099e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f2:	4407      	add	r7, r0
 80099f4:	eba8 0800 	sub.w	r8, r8, r0
 80099f8:	e7e7      	b.n	80099ca <__sflush_r+0xd2>
 80099fa:	bf00      	nop
 80099fc:	20400001 	.word	0x20400001

08009a00 <_fflush_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	690b      	ldr	r3, [r1, #16]
 8009a04:	4605      	mov	r5, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	b913      	cbnz	r3, 8009a10 <_fflush_r+0x10>
 8009a0a:	2500      	movs	r5, #0
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	b118      	cbz	r0, 8009a1a <_fflush_r+0x1a>
 8009a12:	6a03      	ldr	r3, [r0, #32]
 8009a14:	b90b      	cbnz	r3, 8009a1a <_fflush_r+0x1a>
 8009a16:	f7ff fae5 	bl	8008fe4 <__sinit>
 8009a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0f3      	beq.n	8009a0a <_fflush_r+0xa>
 8009a22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a24:	07d0      	lsls	r0, r2, #31
 8009a26:	d404      	bmi.n	8009a32 <_fflush_r+0x32>
 8009a28:	0599      	lsls	r1, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_fflush_r+0x32>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a2e:	f7ff fc30 	bl	8009292 <__retarget_lock_acquire_recursive>
 8009a32:	4628      	mov	r0, r5
 8009a34:	4621      	mov	r1, r4
 8009a36:	f7ff ff5f 	bl	80098f8 <__sflush_r>
 8009a3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	07da      	lsls	r2, r3, #31
 8009a40:	d4e4      	bmi.n	8009a0c <_fflush_r+0xc>
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	059b      	lsls	r3, r3, #22
 8009a46:	d4e1      	bmi.n	8009a0c <_fflush_r+0xc>
 8009a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a4a:	f7ff fc23 	bl	8009294 <__retarget_lock_release_recursive>
 8009a4e:	e7dd      	b.n	8009a0c <_fflush_r+0xc>

08009a50 <__swbuf_r>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	460e      	mov	r6, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	4605      	mov	r5, r0
 8009a58:	b118      	cbz	r0, 8009a62 <__swbuf_r+0x12>
 8009a5a:	6a03      	ldr	r3, [r0, #32]
 8009a5c:	b90b      	cbnz	r3, 8009a62 <__swbuf_r+0x12>
 8009a5e:	f7ff fac1 	bl	8008fe4 <__sinit>
 8009a62:	69a3      	ldr	r3, [r4, #24]
 8009a64:	60a3      	str	r3, [r4, #8]
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	071a      	lsls	r2, r3, #28
 8009a6a:	d501      	bpl.n	8009a70 <__swbuf_r+0x20>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	b943      	cbnz	r3, 8009a82 <__swbuf_r+0x32>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 f82a 	bl	8009acc <__swsetup_r>
 8009a78:	b118      	cbz	r0, 8009a82 <__swbuf_r+0x32>
 8009a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009a7e:	4638      	mov	r0, r7
 8009a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	b2f6      	uxtb	r6, r6
 8009a86:	6922      	ldr	r2, [r4, #16]
 8009a88:	4637      	mov	r7, r6
 8009a8a:	1a98      	subs	r0, r3, r2
 8009a8c:	6963      	ldr	r3, [r4, #20]
 8009a8e:	4283      	cmp	r3, r0
 8009a90:	dc05      	bgt.n	8009a9e <__swbuf_r+0x4e>
 8009a92:	4621      	mov	r1, r4
 8009a94:	4628      	mov	r0, r5
 8009a96:	f7ff ffb3 	bl	8009a00 <_fflush_r>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d1ed      	bne.n	8009a7a <__swbuf_r+0x2a>
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	6022      	str	r2, [r4, #0]
 8009aaa:	701e      	strb	r6, [r3, #0]
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	6962      	ldr	r2, [r4, #20]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d004      	beq.n	8009abe <__swbuf_r+0x6e>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	07db      	lsls	r3, r3, #31
 8009ab8:	d5e1      	bpl.n	8009a7e <__swbuf_r+0x2e>
 8009aba:	2e0a      	cmp	r6, #10
 8009abc:	d1df      	bne.n	8009a7e <__swbuf_r+0x2e>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f7ff ff9d 	bl	8009a00 <_fflush_r>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d0d9      	beq.n	8009a7e <__swbuf_r+0x2e>
 8009aca:	e7d6      	b.n	8009a7a <__swbuf_r+0x2a>

08009acc <__swsetup_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4b29      	ldr	r3, [pc, #164]	@ (8009b74 <__swsetup_r+0xa8>)
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	b118      	cbz	r0, 8009ae0 <__swsetup_r+0x14>
 8009ad8:	6a03      	ldr	r3, [r0, #32]
 8009ada:	b90b      	cbnz	r3, 8009ae0 <__swsetup_r+0x14>
 8009adc:	f7ff fa82 	bl	8008fe4 <__sinit>
 8009ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae4:	0719      	lsls	r1, r3, #28
 8009ae6:	d422      	bmi.n	8009b2e <__swsetup_r+0x62>
 8009ae8:	06da      	lsls	r2, r3, #27
 8009aea:	d407      	bmi.n	8009afc <__swsetup_r+0x30>
 8009aec:	2209      	movs	r2, #9
 8009aee:	602a      	str	r2, [r5, #0]
 8009af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	81a3      	strh	r3, [r4, #12]
 8009afa:	e033      	b.n	8009b64 <__swsetup_r+0x98>
 8009afc:	0758      	lsls	r0, r3, #29
 8009afe:	d512      	bpl.n	8009b26 <__swsetup_r+0x5a>
 8009b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b02:	b141      	cbz	r1, 8009b16 <__swsetup_r+0x4a>
 8009b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	d002      	beq.n	8009b12 <__swsetup_r+0x46>
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f7ff fbd7 	bl	80092c0 <_free_r>
 8009b12:	2300      	movs	r3, #0
 8009b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b1c:	81a3      	strh	r3, [r4, #12]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	f043 0308 	orr.w	r3, r3, #8
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	b94b      	cbnz	r3, 8009b46 <__swsetup_r+0x7a>
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b3c:	d003      	beq.n	8009b46 <__swsetup_r+0x7a>
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4628      	mov	r0, r5
 8009b42:	f000 f890 	bl	8009c66 <__smakebuf_r>
 8009b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4a:	f013 0201 	ands.w	r2, r3, #1
 8009b4e:	d00a      	beq.n	8009b66 <__swsetup_r+0x9a>
 8009b50:	2200      	movs	r2, #0
 8009b52:	60a2      	str	r2, [r4, #8]
 8009b54:	6962      	ldr	r2, [r4, #20]
 8009b56:	4252      	negs	r2, r2
 8009b58:	61a2      	str	r2, [r4, #24]
 8009b5a:	6922      	ldr	r2, [r4, #16]
 8009b5c:	b942      	cbnz	r2, 8009b70 <__swsetup_r+0xa4>
 8009b5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b62:	d1c5      	bne.n	8009af0 <__swsetup_r+0x24>
 8009b64:	bd38      	pop	{r3, r4, r5, pc}
 8009b66:	0799      	lsls	r1, r3, #30
 8009b68:	bf58      	it	pl
 8009b6a:	6962      	ldrpl	r2, [r4, #20]
 8009b6c:	60a2      	str	r2, [r4, #8]
 8009b6e:	e7f4      	b.n	8009b5a <__swsetup_r+0x8e>
 8009b70:	2000      	movs	r0, #0
 8009b72:	e7f7      	b.n	8009b64 <__swsetup_r+0x98>
 8009b74:	20000070 	.word	0x20000070

08009b78 <_raise_r>:
 8009b78:	291f      	cmp	r1, #31
 8009b7a:	b538      	push	{r3, r4, r5, lr}
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	d904      	bls.n	8009b8c <_raise_r+0x14>
 8009b82:	2316      	movs	r3, #22
 8009b84:	6003      	str	r3, [r0, #0]
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b8e:	b112      	cbz	r2, 8009b96 <_raise_r+0x1e>
 8009b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b94:	b94b      	cbnz	r3, 8009baa <_raise_r+0x32>
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f830 	bl	8009bfc <_getpid_r>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba6:	f000 b817 	b.w	8009bd8 <_kill_r>
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d00a      	beq.n	8009bc4 <_raise_r+0x4c>
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	d103      	bne.n	8009bba <_raise_r+0x42>
 8009bb2:	2316      	movs	r3, #22
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	e7e7      	b.n	8009b8a <_raise_r+0x12>
 8009bba:	2100      	movs	r1, #0
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bc2:	4798      	blx	r3
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7e0      	b.n	8009b8a <_raise_r+0x12>

08009bc8 <raise>:
 8009bc8:	4b02      	ldr	r3, [pc, #8]	@ (8009bd4 <raise+0xc>)
 8009bca:	4601      	mov	r1, r0
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	f7ff bfd3 	b.w	8009b78 <_raise_r>
 8009bd2:	bf00      	nop
 8009bd4:	20000070 	.word	0x20000070

08009bd8 <_kill_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4d06      	ldr	r5, [pc, #24]	@ (8009bf8 <_kill_r+0x20>)
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f6 fd4d 	bl	8000684 <_kill>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_kill_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_kill_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000228 	.word	0x20000228

08009bfc <_getpid_r>:
 8009bfc:	f7f6 bd3a 	b.w	8000674 <_getpid>

08009c00 <memchr>:
 8009c00:	b2c9      	uxtb	r1, r1
 8009c02:	4603      	mov	r3, r0
 8009c04:	4402      	add	r2, r0
 8009c06:	b510      	push	{r4, lr}
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	d101      	bne.n	8009c12 <memchr+0x12>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e003      	b.n	8009c1a <memchr+0x1a>
 8009c12:	7804      	ldrb	r4, [r0, #0]
 8009c14:	3301      	adds	r3, #1
 8009c16:	428c      	cmp	r4, r1
 8009c18:	d1f6      	bne.n	8009c08 <memchr+0x8>
 8009c1a:	bd10      	pop	{r4, pc}

08009c1c <__swhatbuf_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	460c      	mov	r4, r1
 8009c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c24:	b096      	sub	sp, #88	@ 0x58
 8009c26:	4615      	mov	r5, r2
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	461e      	mov	r6, r3
 8009c2c:	da0c      	bge.n	8009c48 <__swhatbuf_r+0x2c>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	2100      	movs	r1, #0
 8009c32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c36:	bf14      	ite	ne
 8009c38:	2340      	movne	r3, #64	@ 0x40
 8009c3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c3e:	2000      	movs	r0, #0
 8009c40:	6031      	str	r1, [r6, #0]
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	b016      	add	sp, #88	@ 0x58
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	466a      	mov	r2, sp
 8009c4a:	f000 f849 	bl	8009ce0 <_fstat_r>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	dbed      	blt.n	8009c2e <__swhatbuf_r+0x12>
 8009c52:	9901      	ldr	r1, [sp, #4]
 8009c54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c5c:	4259      	negs	r1, r3
 8009c5e:	4159      	adcs	r1, r3
 8009c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c64:	e7eb      	b.n	8009c3e <__swhatbuf_r+0x22>

08009c66 <__smakebuf_r>:
 8009c66:	898b      	ldrh	r3, [r1, #12]
 8009c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c6a:	079d      	lsls	r5, r3, #30
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	d507      	bpl.n	8009c82 <__smakebuf_r+0x1c>
 8009c72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	6123      	str	r3, [r4, #16]
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	6163      	str	r3, [r4, #20]
 8009c7e:	b003      	add	sp, #12
 8009c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c82:	ab01      	add	r3, sp, #4
 8009c84:	466a      	mov	r2, sp
 8009c86:	f7ff ffc9 	bl	8009c1c <__swhatbuf_r>
 8009c8a:	9f00      	ldr	r7, [sp, #0]
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7ff f88f 	bl	8008db4 <_malloc_r>
 8009c96:	b948      	cbnz	r0, 8009cac <__smakebuf_r+0x46>
 8009c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9c:	059a      	lsls	r2, r3, #22
 8009c9e:	d4ee      	bmi.n	8009c7e <__smakebuf_r+0x18>
 8009ca0:	f023 0303 	bic.w	r3, r3, #3
 8009ca4:	f043 0302 	orr.w	r3, r3, #2
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	e7e2      	b.n	8009c72 <__smakebuf_r+0xc>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	6020      	str	r0, [r4, #0]
 8009cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cbc:	b15b      	cbz	r3, 8009cd6 <__smakebuf_r+0x70>
 8009cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f000 f81e 	bl	8009d04 <_isatty_r>
 8009cc8:	b128      	cbz	r0, 8009cd6 <__smakebuf_r+0x70>
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f023 0303 	bic.w	r3, r3, #3
 8009cd0:	f043 0301 	orr.w	r3, r3, #1
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	431d      	orrs	r5, r3
 8009cda:	81a5      	strh	r5, [r4, #12]
 8009cdc:	e7cf      	b.n	8009c7e <__smakebuf_r+0x18>
	...

08009ce0 <_fstat_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4d06      	ldr	r5, [pc, #24]	@ (8009d00 <_fstat_r+0x20>)
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	4611      	mov	r1, r2
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	f7f6 fd29 	bl	8000744 <_fstat>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	d102      	bne.n	8009cfc <_fstat_r+0x1c>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b103      	cbz	r3, 8009cfc <_fstat_r+0x1c>
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000228 	.word	0x20000228

08009d04 <_isatty_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	2300      	movs	r3, #0
 8009d08:	4d05      	ldr	r5, [pc, #20]	@ (8009d20 <_isatty_r+0x1c>)
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	f7f6 fd28 	bl	8000764 <_isatty>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_isatty_r+0x1a>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_isatty_r+0x1a>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	20000228 	.word	0x20000228

08009d24 <_init>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	bf00      	nop
 8009d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	469e      	mov	lr, r3
 8009d2e:	4770      	bx	lr

08009d30 <_fini>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	bf00      	nop
 8009d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d36:	bc08      	pop	{r3}
 8009d38:	469e      	mov	lr, r3
 8009d3a:	4770      	bx	lr
