
STAB_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010118  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f0  08010364  08010364  00011364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011554  08011554  000130c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011554  08011554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801155c  0801155c  000130c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801155c  0801155c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011560  08011560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08011564  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200000c0  08011624  000130c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08011624  000132c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015aeb  00000000  00000000  000130f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002441  00000000  00000000  00028be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee2  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f68  00000000  00000000  0002d032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bdc  00000000  00000000  0005ff9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ab56  00000000  00000000  00075b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b06cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  001b0710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001b5a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000c0 	.word	0x200000c0
 8000268:	00000000 	.word	0x00000000
 800026c:	0801034c 	.word	0x0801034c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000c4 	.word	0x200000c4
 8000288:	0801034c 	.word	0x0801034c

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b9c4 	b.w	800063c <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f81a 	bl	80002f4 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__popcountsi2>:
 80002cc:	0843      	lsrs	r3, r0, #1
 80002ce:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	0883      	lsrs	r3, r0, #2
 80002d6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002da:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002de:	4418      	add	r0, r3
 80002e0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e4:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002e8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002ec:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f0:	0e00      	lsrs	r0, r0, #24
 80002f2:	4770      	bx	lr

080002f4 <__udivmoddi4>:
 80002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002f8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002fa:	4688      	mov	r8, r1
 80002fc:	4604      	mov	r4, r0
 80002fe:	468e      	mov	lr, r1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d14a      	bne.n	800039a <__udivmoddi4+0xa6>
 8000304:	428a      	cmp	r2, r1
 8000306:	4617      	mov	r7, r2
 8000308:	d95f      	bls.n	80003ca <__udivmoddi4+0xd6>
 800030a:	fab2 f682 	clz	r6, r2
 800030e:	b14e      	cbz	r6, 8000324 <__udivmoddi4+0x30>
 8000310:	f1c6 0320 	rsb	r3, r6, #32
 8000314:	fa01 fe06 	lsl.w	lr, r1, r6
 8000318:	40b7      	lsls	r7, r6
 800031a:	40b4      	lsls	r4, r6
 800031c:	fa20 f303 	lsr.w	r3, r0, r3
 8000320:	ea43 0e0e 	orr.w	lr, r3, lr
 8000324:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fbbe f1f8 	udiv	r1, lr, r8
 8000332:	fb08 ee11 	mls	lr, r8, r1, lr
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x5e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f101 30ff 	add.w	r0, r1, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x5c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 8154 	bhi.w	80005f8 <__udivmoddi4+0x304>
 8000350:	4601      	mov	r1, r0
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	b2a2      	uxth	r2, r4
 8000356:	fbb3 f0f8 	udiv	r0, r3, r8
 800035a:	fb08 3310 	mls	r3, r8, r0, r3
 800035e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000366:	4594      	cmp	ip, r2
 8000368:	d90b      	bls.n	8000382 <__udivmoddi4+0x8e>
 800036a:	18ba      	adds	r2, r7, r2
 800036c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	2401      	movcs	r4, #1
 8000374:	2400      	movcc	r4, #0
 8000376:	4594      	cmp	ip, r2
 8000378:	d902      	bls.n	8000380 <__udivmoddi4+0x8c>
 800037a:	2c00      	cmp	r4, #0
 800037c:	f000 813f 	beq.w	80005fe <__udivmoddi4+0x30a>
 8000380:	4618      	mov	r0, r3
 8000382:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000386:	eba2 020c 	sub.w	r2, r2, ip
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa2>
 800038e:	40f2      	lsrs	r2, r6
 8000390:	2300      	movs	r3, #0
 8000392:	e9c5 2300 	strd	r2, r3, [r5]
 8000396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xb6>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb0>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa2>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d14e      	bne.n	8000450 <__udivmoddi4+0x15c>
 80003b2:	4543      	cmp	r3, r8
 80003b4:	f0c0 8112 	bcc.w	80005dc <__udivmoddi4+0x2e8>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f240 810f 	bls.w	80005dc <__udivmoddi4+0x2e8>
 80003be:	4608      	mov	r0, r1
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d0e8      	beq.n	8000396 <__udivmoddi4+0xa2>
 80003c4:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c8:	e7e5      	b.n	8000396 <__udivmoddi4+0xa2>
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	f000 80ac 	beq.w	8000528 <__udivmoddi4+0x234>
 80003d0:	fab2 f682 	clz	r6, r2
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	f040 80bb 	bne.w	8000550 <__udivmoddi4+0x25c>
 80003da:	1a8b      	subs	r3, r1, r2
 80003dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003e0:	b2bc      	uxth	r4, r7
 80003e2:	2101      	movs	r1, #1
 80003e4:	0c02      	lsrs	r2, r0, #16
 80003e6:	b280      	uxth	r0, r0
 80003e8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80003f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003f4:	fb04 f20c 	mul.w	r2, r4, ip
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x126>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0901 	movcs.w	r9, #1
 8000408:	f04f 0900 	movcc.w	r9, #0
 800040c:	429a      	cmp	r2, r3
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x124>
 8000410:	f1b9 0f00 	cmp.w	r9, #0
 8000414:	f000 80ec 	beq.w	80005f0 <__udivmoddi4+0x2fc>
 8000418:	46c4      	mov	ip, r8
 800041a:	1a9b      	subs	r3, r3, r2
 800041c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000420:	fb0e 3318 	mls	r3, lr, r8, r3
 8000424:	fb04 f408 	mul.w	r4, r4, r8
 8000428:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800042c:	4294      	cmp	r4, r2
 800042e:	d90b      	bls.n	8000448 <__udivmoddi4+0x154>
 8000430:	18ba      	adds	r2, r7, r2
 8000432:	f108 33ff 	add.w	r3, r8, #4294967295
 8000436:	bf2c      	ite	cs
 8000438:	2001      	movcs	r0, #1
 800043a:	2000      	movcc	r0, #0
 800043c:	4294      	cmp	r4, r2
 800043e:	d902      	bls.n	8000446 <__udivmoddi4+0x152>
 8000440:	2800      	cmp	r0, #0
 8000442:	f000 80d1 	beq.w	80005e8 <__udivmoddi4+0x2f4>
 8000446:	4698      	mov	r8, r3
 8000448:	1b12      	subs	r2, r2, r4
 800044a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800044e:	e79d      	b.n	800038c <__udivmoddi4+0x98>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa08 f401 	lsl.w	r4, r8, r1
 800045a:	fa00 f901 	lsl.w	r9, r0, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	fa28 f806 	lsr.w	r8, r8, r6
 8000466:	408a      	lsls	r2, r1
 8000468:	431f      	orrs	r7, r3
 800046a:	fa20 f306 	lsr.w	r3, r0, r6
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa1f fc87 	uxth.w	ip, r7
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fbb8 fef0 	udiv	lr, r8, r0
 800047c:	fb00 881e 	mls	r8, r0, lr, r8
 8000480:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000484:	fb0e f80c 	mul.w	r8, lr, ip
 8000488:	45a0      	cmp	r8, r4
 800048a:	d90e      	bls.n	80004aa <__udivmoddi4+0x1b6>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000492:	bf2c      	ite	cs
 8000494:	f04f 0b01 	movcs.w	fp, #1
 8000498:	f04f 0b00 	movcc.w	fp, #0
 800049c:	45a0      	cmp	r8, r4
 800049e:	d903      	bls.n	80004a8 <__udivmoddi4+0x1b4>
 80004a0:	f1bb 0f00 	cmp.w	fp, #0
 80004a4:	f000 80b8 	beq.w	8000618 <__udivmoddi4+0x324>
 80004a8:	46d6      	mov	lr, sl
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fa1f f883 	uxth.w	r8, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x1f0>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	bf2c      	ite	cs
 80004ce:	f04f 0801 	movcs.w	r8, #1
 80004d2:	f04f 0800 	movcc.w	r8, #0
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d903      	bls.n	80004e2 <__udivmoddi4+0x1ee>
 80004da:	f1b8 0f00 	cmp.w	r8, #0
 80004de:	f000 809f 	beq.w	8000620 <__udivmoddi4+0x32c>
 80004e2:	4603      	mov	r3, r0
 80004e4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e8:	eba4 040c 	sub.w	r4, r4, ip
 80004ec:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f0:	4564      	cmp	r4, ip
 80004f2:	4673      	mov	r3, lr
 80004f4:	46e0      	mov	r8, ip
 80004f6:	d302      	bcc.n	80004fe <__udivmoddi4+0x20a>
 80004f8:	d107      	bne.n	800050a <__udivmoddi4+0x216>
 80004fa:	45f1      	cmp	r9, lr
 80004fc:	d205      	bcs.n	800050a <__udivmoddi4+0x216>
 80004fe:	ebbe 0302 	subs.w	r3, lr, r2
 8000502:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000506:	3801      	subs	r0, #1
 8000508:	46e0      	mov	r8, ip
 800050a:	b15d      	cbz	r5, 8000524 <__udivmoddi4+0x230>
 800050c:	ebb9 0203 	subs.w	r2, r9, r3
 8000510:	eb64 0408 	sbc.w	r4, r4, r8
 8000514:	fa04 f606 	lsl.w	r6, r4, r6
 8000518:	fa22 f301 	lsr.w	r3, r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	431e      	orrs	r6, r3
 8000520:	e9c5 6400 	strd	r6, r4, [r5]
 8000524:	2100      	movs	r1, #0
 8000526:	e736      	b.n	8000396 <__udivmoddi4+0xa2>
 8000528:	fbb1 fcf2 	udiv	ip, r1, r2
 800052c:	0c01      	lsrs	r1, r0, #16
 800052e:	4614      	mov	r4, r2
 8000530:	b280      	uxth	r0, r0
 8000532:	4696      	mov	lr, r2
 8000534:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000538:	2620      	movs	r6, #32
 800053a:	4690      	mov	r8, r2
 800053c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000540:	4610      	mov	r0, r2
 8000542:	fbb1 f1f2 	udiv	r1, r1, r2
 8000546:	eba3 0308 	sub.w	r3, r3, r8
 800054a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054e:	e74b      	b.n	80003e8 <__udivmoddi4+0xf4>
 8000550:	40b7      	lsls	r7, r6
 8000552:	f1c6 0320 	rsb	r3, r6, #32
 8000556:	fa01 f206 	lsl.w	r2, r1, r6
 800055a:	fa21 f803 	lsr.w	r8, r1, r3
 800055e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000562:	fa20 f303 	lsr.w	r3, r0, r3
 8000566:	b2bc      	uxth	r4, r7
 8000568:	40b0      	lsls	r0, r6
 800056a:	4313      	orrs	r3, r2
 800056c:	0c02      	lsrs	r2, r0, #16
 800056e:	0c19      	lsrs	r1, r3, #16
 8000570:	b280      	uxth	r0, r0
 8000572:	fbb8 f9fe 	udiv	r9, r8, lr
 8000576:	fb0e 8819 	mls	r8, lr, r9, r8
 800057a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	4588      	cmp	r8, r1
 8000584:	d951      	bls.n	800062a <__udivmoddi4+0x336>
 8000586:	1879      	adds	r1, r7, r1
 8000588:	f109 3cff 	add.w	ip, r9, #4294967295
 800058c:	bf2c      	ite	cs
 800058e:	f04f 0a01 	movcs.w	sl, #1
 8000592:	f04f 0a00 	movcc.w	sl, #0
 8000596:	4588      	cmp	r8, r1
 8000598:	d902      	bls.n	80005a0 <__udivmoddi4+0x2ac>
 800059a:	f1ba 0f00 	cmp.w	sl, #0
 800059e:	d031      	beq.n	8000604 <__udivmoddi4+0x310>
 80005a0:	eba1 0108 	sub.w	r1, r1, r8
 80005a4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a8:	fb09 f804 	mul.w	r8, r9, r4
 80005ac:	fb0e 1119 	mls	r1, lr, r9, r1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b6:	4543      	cmp	r3, r8
 80005b8:	d235      	bcs.n	8000626 <__udivmoddi4+0x332>
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	f109 31ff 	add.w	r1, r9, #4294967295
 80005c0:	bf2c      	ite	cs
 80005c2:	f04f 0a01 	movcs.w	sl, #1
 80005c6:	f04f 0a00 	movcc.w	sl, #0
 80005ca:	4543      	cmp	r3, r8
 80005cc:	d2bb      	bcs.n	8000546 <__udivmoddi4+0x252>
 80005ce:	f1ba 0f00 	cmp.w	sl, #0
 80005d2:	d1b8      	bne.n	8000546 <__udivmoddi4+0x252>
 80005d4:	f1a9 0102 	sub.w	r1, r9, #2
 80005d8:	443b      	add	r3, r7
 80005da:	e7b4      	b.n	8000546 <__udivmoddi4+0x252>
 80005dc:	1a84      	subs	r4, r0, r2
 80005de:	eb68 0203 	sbc.w	r2, r8, r3
 80005e2:	2001      	movs	r0, #1
 80005e4:	4696      	mov	lr, r2
 80005e6:	e6eb      	b.n	80003c0 <__udivmoddi4+0xcc>
 80005e8:	443a      	add	r2, r7
 80005ea:	f1a8 0802 	sub.w	r8, r8, #2
 80005ee:	e72b      	b.n	8000448 <__udivmoddi4+0x154>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	443b      	add	r3, r7
 80005f6:	e710      	b.n	800041a <__udivmoddi4+0x126>
 80005f8:	3902      	subs	r1, #2
 80005fa:	443b      	add	r3, r7
 80005fc:	e6a9      	b.n	8000352 <__udivmoddi4+0x5e>
 80005fe:	443a      	add	r2, r7
 8000600:	3802      	subs	r0, #2
 8000602:	e6be      	b.n	8000382 <__udivmoddi4+0x8e>
 8000604:	eba7 0808 	sub.w	r8, r7, r8
 8000608:	f1a9 0c02 	sub.w	ip, r9, #2
 800060c:	4441      	add	r1, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c9      	b.n	80005ac <__udivmoddi4+0x2b8>
 8000618:	f1ae 0e02 	sub.w	lr, lr, #2
 800061c:	443c      	add	r4, r7
 800061e:	e744      	b.n	80004aa <__udivmoddi4+0x1b6>
 8000620:	3b02      	subs	r3, #2
 8000622:	443c      	add	r4, r7
 8000624:	e75e      	b.n	80004e4 <__udivmoddi4+0x1f0>
 8000626:	4649      	mov	r1, r9
 8000628:	e78d      	b.n	8000546 <__udivmoddi4+0x252>
 800062a:	eba1 0108 	sub.w	r1, r1, r8
 800062e:	46cc      	mov	ip, r9
 8000630:	fbb1 f9fe 	udiv	r9, r1, lr
 8000634:	fb09 f804 	mul.w	r8, r9, r4
 8000638:	e7b8      	b.n	80005ac <__udivmoddi4+0x2b8>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <user_provided_block_device_read>:
// Lecture de données depuis SRAM3
int user_provided_block_device_read(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    void *buffer,
                                    lfs_size_t size) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
    // Lire les données depuis l'adresse SRAM3
    memcpy(buffer, &sram3_storage[block * c->block_size + offset], size);
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <user_provided_block_device_read+0x38>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	fb03 f101 	mul.w	r1, r3, r1
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	440b      	add	r3, r1
 8000660:	4413      	add	r3, r2
 8000662:	69ba      	ldr	r2, [r7, #24]
 8000664:	4619      	mov	r1, r3
 8000666:	6838      	ldr	r0, [r7, #0]
 8000668:	f00f f929 	bl	800f8be <memcpy>
    return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000

0800067c <user_provided_block_device_prog>:
// Programmation (écriture) de données dans SRAM3
int user_provided_block_device_prog(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    const void *buffer,
                                    lfs_size_t size) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	603b      	str	r3, [r7, #0]
    // Écrire les données dans l'adresse SRAM3
    memcpy(&sram3_storage[block * c->block_size + offset], buffer, size);
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <user_provided_block_device_prog+0x38>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	fb03 f101 	mul.w	r1, r3, r1
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	440b      	add	r3, r1
 800069c:	4413      	add	r3, r2
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	6839      	ldr	r1, [r7, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00f f90b 	bl	800f8be <memcpy>
    return 0;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000

080006b8 <user_provided_block_device_erase>:

// Effacement d'un bloc de SRAM3
int user_provided_block_device_erase(const struct lfs_config *c,
                                     lfs_block_t block) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
    // Effacer le bloc en remplissant de 0xFF
    memset(&sram3_storage[block * c->block_size], 0xFF, c->block_size);
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <user_provided_block_device_erase+0x30>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	6839      	ldr	r1, [r7, #0]
 80006cc:	fb01 f303 	mul.w	r3, r1, r3
 80006d0:	18d0      	adds	r0, r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	461a      	mov	r2, r3
 80006d8:	21ff      	movs	r1, #255	@ 0xff
 80006da:	f00f f844 	bl	800f766 <memset>
    return 0;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000

080006ec <user_provided_block_device_sync>:

// Synchronisation (pas nécessaire ici, mais fourni pour la conformité)
int user_provided_block_device_sync(const struct lfs_config *c) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f008 f974 	bl	80089f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f9ea 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 fa66 	bl	8000be4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000718:	f000 fa58 	bl	8000bcc <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 800071c:	f001 f8a6 	bl	800186c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  extern struct lfs_config cfg;
  lfs_t lfs;
  int err = lfs_mount(&lfs, &cfg);
 8000720:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000724:	49cb      	ldr	r1, [pc, #812]	@ (8000a54 <main+0x350>)
 8000726:	4618      	mov	r0, r3
 8000728:	f007 ffd6 	bl	80086d8 <lfs_mount>
 800072c:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c

  // Test UART : Remplacement de printf() par HAL_UART_Transmit
  uint8_t msg_start[] = "Demarrage du système...\r\n";
 8000730:	4bc9      	ldr	r3, [pc, #804]	@ (8000a58 <main+0x354>)
 8000732:	f507 74cc 	add.w	r4, r7, #408	@ 0x198
 8000736:	461d      	mov	r5, r3
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000740:	c403      	stmia	r4!, {r0, r1}
 8000742:	8022      	strh	r2, [r4, #0]
 8000744:	3402      	adds	r4, #2
 8000746:	0c13      	lsrs	r3, r2, #16
 8000748:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, msg_start, sizeof(msg_start) - 1, HAL_MAX_DELAY);
 800074a:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	221a      	movs	r2, #26
 8000754:	48c1      	ldr	r0, [pc, #772]	@ (8000a5c <main+0x358>)
 8000756:	f000 fae8 	bl	8000d2a <HAL_UART_Transmit>

  if (err) {
 800075a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800075e:	2b00      	cmp	r3, #0
 8000760:	d026      	beq.n	80007b0 <main+0xac>
      uint8_t msg_format[] = "LittleFS non monte, formatage...\r\n";
 8000762:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000766:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800076a:	4abd      	ldr	r2, [pc, #756]	@ (8000a60 <main+0x35c>)
 800076c:	461c      	mov	r4, r3
 800076e:	4615      	mov	r5, r2
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	682b      	ldr	r3, [r5, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	8022      	strh	r2, [r4, #0]
 800077e:	3402      	adds	r4, #2
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, msg_format, sizeof(msg_format) - 1, HAL_MAX_DELAY);
 8000784:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	2222      	movs	r2, #34	@ 0x22
 800078e:	48b3      	ldr	r0, [pc, #716]	@ (8000a5c <main+0x358>)
 8000790:	f000 facb 	bl	8000d2a <HAL_UART_Transmit>

      lfs_format(&lfs, &cfg);
 8000794:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000798:	49ae      	ldr	r1, [pc, #696]	@ (8000a54 <main+0x350>)
 800079a:	4618      	mov	r0, r3
 800079c:	f007 ff86 	bl	80086ac <lfs_format>
      err = lfs_mount(&lfs, &cfg);
 80007a0:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80007a4:	49ab      	ldr	r1, [pc, #684]	@ (8000a54 <main+0x350>)
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 ff96 	bl	80086d8 <lfs_mount>
 80007ac:	f8c7 023c 	str.w	r0, [r7, #572]	@ 0x23c
  }

  if (err == 0) {
 80007b0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f040 8171 	bne.w	8000a9c <main+0x398>
      lfs_file_t file;
      const char *text = "Bonjour SRAM3 !";
 80007ba:	4baa      	ldr	r3, [pc, #680]	@ (8000a64 <main+0x360>)
 80007bc:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
      char buffer[128];

      // Écriture du fichier
      uint8_t msg_write[] = "Ecriture dans monfichier.txt...\r\n";
 80007c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80007c4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80007c8:	4aa7      	ldr	r2, [pc, #668]	@ (8000a68 <main+0x364>)
 80007ca:	461c      	mov	r4, r3
 80007cc:	4615      	mov	r5, r2
 80007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	682b      	ldr	r3, [r5, #0]
 80007d8:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, msg_write, sizeof(msg_write) - 1, HAL_MAX_DELAY);
 80007da:	f107 0120 	add.w	r1, r7, #32
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	2221      	movs	r2, #33	@ 0x21
 80007e4:	489d      	ldr	r0, [pc, #628]	@ (8000a5c <main+0x358>)
 80007e6:	f000 faa0 	bl	8000d2a <HAL_UART_Transmit>

      if (lfs_file_open(&lfs, &file, "monfichier.txt", LFS_O_WRONLY | LFS_O_CREAT) == 0) {
 80007ea:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80007ee:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 80007f2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007f6:	4a9d      	ldr	r2, [pc, #628]	@ (8000a6c <main+0x368>)
 80007f8:	f007 ff84 	bl	8008704 <lfs_file_open>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d129      	bne.n	8000856 <main+0x152>
          lfs_file_write(&lfs, &file, text, strlen(text));
 8000802:	f8d7 0238 	ldr.w	r0, [r7, #568]	@ 0x238
 8000806:	f7ff fd41 	bl	800028c <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000810:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 8000814:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8000818:	f008 f804 	bl	8008824 <lfs_file_write>
          lfs_file_close(&lfs, &file);
 800081c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000820:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f007 ffa0 	bl	800876c <lfs_file_close>

          uint8_t msg_success[] = "Ecriture reussie\r\n";
 800082c:	4b90      	ldr	r3, [pc, #576]	@ (8000a70 <main+0x36c>)
 800082e:	f507 74b2 	add.w	r4, r7, #356	@ 0x164
 8000832:	461d      	mov	r5, r3
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	8022      	strh	r2, [r4, #0]
 800083e:	3402      	adds	r4, #2
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	7023      	strb	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, msg_success, sizeof(msg_success) - 1, HAL_MAX_DELAY);
 8000844:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2212      	movs	r2, #18
 800084e:	4883      	ldr	r0, [pc, #524]	@ (8000a5c <main+0x358>)
 8000850:	f000 fa6b 	bl	8000d2a <HAL_UART_Transmit>
 8000854:	e016      	b.n	8000884 <main+0x180>
      } else {
          uint8_t msg_error_open[] = "Erreur : ouverture du fichier en ecriture\r\n";
 8000856:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800085a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800085e:	4a85      	ldr	r2, [pc, #532]	@ (8000a74 <main+0x370>)
 8000860:	461c      	mov	r4, r3
 8000862:	4615      	mov	r5, r2
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          HAL_UART_Transmit(&huart1, msg_error_open, sizeof(msg_error_open) - 1, HAL_MAX_DELAY);
 8000874:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	222b      	movs	r2, #43	@ 0x2b
 800087e:	4877      	ldr	r0, [pc, #476]	@ (8000a5c <main+0x358>)
 8000880:	f000 fa53 	bl	8000d2a <HAL_UART_Transmit>
      }

      // Lecture du fichier
      uint8_t msg_read[] = "Lecture de monfichier.txt...\r\n";
 8000884:	4b7c      	ldr	r3, [pc, #496]	@ (8000a78 <main+0x374>)
 8000886:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 800088a:	461d      	mov	r5, r3
 800088c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000894:	c407      	stmia	r4!, {r0, r1, r2}
 8000896:	8023      	strh	r3, [r4, #0]
 8000898:	3402      	adds	r4, #2
 800089a:	0c1b      	lsrs	r3, r3, #16
 800089c:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, msg_read, sizeof(msg_read) - 1, HAL_MAX_DELAY);
 800089e:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	221e      	movs	r2, #30
 80008a8:	486c      	ldr	r0, [pc, #432]	@ (8000a5c <main+0x358>)
 80008aa:	f000 fa3e 	bl	8000d2a <HAL_UART_Transmit>

      if (lfs_file_open(&lfs, &file, "monfichier.txt", LFS_O_RDONLY) == 0) {
 80008ae:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80008b2:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 80008b6:	2301      	movs	r3, #1
 80008b8:	4a6c      	ldr	r2, [pc, #432]	@ (8000a6c <main+0x368>)
 80008ba:	f007 ff23 	bl	8008704 <lfs_file_open>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d163      	bne.n	800098c <main+0x288>
          lfs_ssize_t bytes_read = lfs_file_read(&lfs, &file, buffer, sizeof(buffer) - 1);
 80008c4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80008c8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80008cc:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 80008d0:	237f      	movs	r3, #127	@ 0x7f
 80008d2:	f007 ff77 	bl	80087c4 <lfs_file_read>
 80008d6:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234
          if (bytes_read > 0) {
 80008da:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80008de:	2b00      	cmp	r3, #0
 80008e0:	dd36      	ble.n	8000950 <main+0x24c>
              buffer[bytes_read] = '\0'; // Terminaison de chaîne
 80008e2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80008e6:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80008ea:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80008ee:	4413      	add	r3, r2
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
              uint8_t msg_content[] = "Contenu lu : ";
 80008f4:	4b61      	ldr	r3, [pc, #388]	@ (8000a7c <main+0x378>)
 80008f6:	f507 74aa 	add.w	r4, r7, #340	@ 0x154
 80008fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fc:	c407      	stmia	r4!, {r0, r1, r2}
 80008fe:	8023      	strh	r3, [r4, #0]
              HAL_UART_Transmit(&huart1, msg_content, sizeof(msg_content) - 1, HAL_MAX_DELAY);
 8000900:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	220d      	movs	r2, #13
 800090a:	4854      	ldr	r0, [pc, #336]	@ (8000a5c <main+0x358>)
 800090c:	f000 fa0d 	bl	8000d2a <HAL_UART_Transmit>
              HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000910:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fcb9 	bl	800028c <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	484d      	ldr	r0, [pc, #308]	@ (8000a5c <main+0x358>)
 8000928:	f000 f9ff 	bl	8000d2a <HAL_UART_Transmit>
              uint8_t msg_newline[] = "\r\n";
 800092c:	4a54      	ldr	r2, [pc, #336]	@ (8000a80 <main+0x37c>)
 800092e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	8019      	strh	r1, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
              HAL_UART_Transmit(&huart1, msg_newline, sizeof(msg_newline) - 1, HAL_MAX_DELAY);
 800093e:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2202      	movs	r2, #2
 8000948:	4844      	ldr	r0, [pc, #272]	@ (8000a5c <main+0x358>)
 800094a:	f000 f9ee 	bl	8000d2a <HAL_UART_Transmit>
 800094e:	e014      	b.n	800097a <main+0x276>
          } else {
              uint8_t msg_read_error[] = "Erreur : lecture du fichier\r\n";
 8000950:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000954:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000958:	4a4a      	ldr	r2, [pc, #296]	@ (8000a84 <main+0x380>)
 800095a:	461c      	mov	r4, r3
 800095c:	4615      	mov	r5, r2
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000966:	c407      	stmia	r4!, {r0, r1, r2}
 8000968:	8023      	strh	r3, [r4, #0]
              HAL_UART_Transmit(&huart1, msg_read_error, sizeof(msg_read_error) - 1, HAL_MAX_DELAY);
 800096a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	221d      	movs	r2, #29
 8000974:	4839      	ldr	r0, [pc, #228]	@ (8000a5c <main+0x358>)
 8000976:	f000 f9d8 	bl	8000d2a <HAL_UART_Transmit>
          }
          lfs_file_close(&lfs, &file);
 800097a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800097e:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f007 fef1 	bl	800876c <lfs_file_close>
 800098a:	e019      	b.n	80009c0 <main+0x2bc>
      } else {
          uint8_t msg_read_open_error[] = "Erreur : ouverture du fichier en lecture\r\n";
 800098c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000990:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8000994:	4a3c      	ldr	r2, [pc, #240]	@ (8000a88 <main+0x384>)
 8000996:	461c      	mov	r4, r3
 8000998:	4615      	mov	r5, r2
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a6:	c403      	stmia	r4!, {r0, r1}
 80009a8:	8022      	strh	r2, [r4, #0]
 80009aa:	3402      	adds	r4, #2
 80009ac:	0c13      	lsrs	r3, r2, #16
 80009ae:	7023      	strb	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, msg_read_open_error, sizeof(msg_read_open_error) - 1, HAL_MAX_DELAY);
 80009b0:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	222a      	movs	r2, #42	@ 0x2a
 80009ba:	4828      	ldr	r0, [pc, #160]	@ (8000a5c <main+0x358>)
 80009bc:	f000 f9b5 	bl	8000d2a <HAL_UART_Transmit>
      }

      // Boucle LED + message
      uint8_t msg_loop[] = "Demarrage de la boucle LED...\r\n";
 80009c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80009c4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80009c8:	4a30      	ldr	r2, [pc, #192]	@ (8000a8c <main+0x388>)
 80009ca:	461c      	mov	r4, r3
 80009cc:	4615      	mov	r5, r2
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      HAL_UART_Transmit(&huart1, msg_loop, sizeof(msg_loop) - 1, HAL_MAX_DELAY);
 80009da:	4639      	mov	r1, r7
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	221f      	movs	r2, #31
 80009e2:	481e      	ldr	r0, [pc, #120]	@ (8000a5c <main+0x358>)
 80009e4:	f000 f9a1 	bl	8000d2a <HAL_UART_Transmit>

      while (1) {
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009ee:	4828      	ldr	r0, [pc, #160]	@ (8000a90 <main+0x38c>)
 80009f0:	f008 fba6 	bl	8009140 <HAL_GPIO_WritePin>

          uint8_t msg_on[] = "LED ON\r\n";
 80009f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80009f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80009fc:	4a25      	ldr	r2, [pc, #148]	@ (8000a94 <main+0x390>)
 80009fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a00:	c303      	stmia	r3!, {r0, r1}
 8000a02:	701a      	strb	r2, [r3, #0]
          HAL_UART_Transmit(&huart1, msg_on, sizeof(msg_on) - 1, HAL_MAX_DELAY);
 8000a04:	f507 7192 	add.w	r1, r7, #292	@ 0x124
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <main+0x358>)
 8000a10:	f000 f98b 	bl	8000d2a <HAL_UART_Transmit>

          HAL_Delay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a18:	f008 f8ac 	bl	8008b74 <HAL_Delay>

          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a22:	481b      	ldr	r0, [pc, #108]	@ (8000a90 <main+0x38c>)
 8000a24:	f008 fb8c 	bl	8009140 <HAL_GPIO_WritePin>

          uint8_t msg_off[] = "LED OFF\r\n";
 8000a28:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000a2c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000a30:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <main+0x394>)
 8000a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a34:	c303      	stmia	r3!, {r0, r1}
 8000a36:	801a      	strh	r2, [r3, #0]
          HAL_UART_Transmit(&huart1, msg_off, sizeof(msg_off) - 1, HAL_MAX_DELAY);
 8000a38:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	2209      	movs	r2, #9
 8000a42:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <main+0x358>)
 8000a44:	f000 f971 	bl	8000d2a <HAL_UART_Transmit>

          HAL_Delay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4c:	f008 f892 	bl	8008b74 <HAL_Delay>
      while (1) {
 8000a50:	bf00      	nop
 8000a52:	e7c9      	b.n	80009e8 <main+0x2e4>
 8000a54:	20000004 	.word	0x20000004
 8000a58:	08010384 	.word	0x08010384
 8000a5c:	200000e0 	.word	0x200000e0
 8000a60:	080103a0 	.word	0x080103a0
 8000a64:	08010364 	.word	0x08010364
 8000a68:	080103c4 	.word	0x080103c4
 8000a6c:	08010374 	.word	0x08010374
 8000a70:	080103e8 	.word	0x080103e8
 8000a74:	080103fc 	.word	0x080103fc
 8000a78:	08010428 	.word	0x08010428
 8000a7c:	08010448 	.word	0x08010448
 8000a80:	08010458 	.word	0x08010458
 8000a84:	0801045c 	.word	0x0801045c
 8000a88:	0801047c 	.word	0x0801047c
 8000a8c:	080104a8 	.word	0x080104a8
 8000a90:	42022000 	.word	0x42022000
 8000a94:	080104c8 	.word	0x080104c8
 8000a98:	080104d4 	.word	0x080104d4
      }
  } else {
      uint8_t msg_fatal_error[] = "Erreur fatale : impossible de monter LittleFS\r\n";
 8000a9c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8000aa0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <main+0x3d8>)
 8000aa6:	461c      	mov	r4, r3
 8000aa8:	4615      	mov	r5, r2
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      HAL_UART_Transmit(&huart1, msg_fatal_error, sizeof(msg_fatal_error) - 1, HAL_MAX_DELAY);
 8000aba:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	222f      	movs	r2, #47	@ 0x2f
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <main+0x3dc>)
 8000ac6:	f000 f930 	bl	8000d2a <HAL_UART_Transmit>

      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <main+0x3e0>)
 8000ad2:	f008 fb35 	bl	8009140 <HAL_GPIO_WritePin>
      while (1); // Boucle infinie en cas d'erreur
 8000ad6:	bf00      	nop
 8000ad8:	e7fd      	b.n	8000ad6 <main+0x3d2>
 8000ada:	bf00      	nop
 8000adc:	080104e0 	.word	0x080104e0
 8000ae0:	200000e0 	.word	0x200000e0
 8000ae4:	42022000 	.word	0x42022000

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09c      	sub	sp, #112	@ 0x70
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2250      	movs	r2, #80	@ 0x50
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00e fe35 	bl	800f766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <SystemClock_Config+0xdc>)
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc4 <SystemClock_Config+0xdc>)
 8000b14:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000b18:	6113      	str	r3, [r2, #16]
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <SystemClock_Config+0xdc>)
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b26:	bf00      	nop
 8000b28:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <SystemClock_Config+0xdc>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d1f9      	bne.n	8000b28 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000b34:	2310      	movs	r3, #16
 8000b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000b4e:	237d      	movs	r3, #125	@ 0x7d
 8000b50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f008 fb0e 	bl	8009190 <HAL_RCC_OscConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7a:	f000 f879 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	231f      	movs	r3, #31
 8000b80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b82:	2303      	movs	r3, #3
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	2105      	movs	r1, #5
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f008 ff2f 	bl	8009a00 <HAL_RCC_ClockConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ba8:	f000 f862 	bl	8000c70 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemClock_Config+0xe0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bb4:	4a04      	ldr	r2, [pc, #16]	@ (8000bc8 <SystemClock_Config+0xe0>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3770      	adds	r7, #112	@ 0x70
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	44020800 	.word	0x44020800
 8000bc8:	40022000 	.word	0x40022000

08000bcc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
void MX_ICACHE_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000bd0:	f008 face 	bl	8009170 <HAL_ICACHE_Enable>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000bda:	f000 f849 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_GPIO_Init+0x84>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <MX_GPIO_Init+0x84>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_GPIO_Init+0x84>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_GPIO_Init+0x84>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <MX_GPIO_Init+0x84>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_GPIO_Init+0x84>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3c:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <MX_GPIO_Init+0x88>)
 8000c3e:	f008 fa7f 	bl	8009140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_GPIO_Init+0x88>)
 8000c5c:	f008 f912 	bl	8008e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init 2 */

  /* USER CODE END MX_GPIO_Init 2 */
}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	44020c00 	.word	0x44020c00
 8000c6c:	42022000 	.word	0x42022000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e042      	b.n	8000d22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 fe28 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2224      	movs	r2, #36	@ 0x24
 8000cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0201 	bic.w	r2, r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 fab5 	bl	8001244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f8c4 	bl	8000e68 <UART_SetConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d101      	bne.n	8000cea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e01b      	b.n	8000d22 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000d08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f042 0201 	orr.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 fb34 	bl	8001388 <UART_CheckIdleState>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b08a      	sub	sp, #40	@ 0x28
 8000d2e:	af02      	add	r7, sp, #8
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d40:	2b20      	cmp	r3, #32
 8000d42:	f040 808b 	bne.w	8000e5c <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <HAL_UART_Transmit+0x28>
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e083      	b.n	8000e5e <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d60:	2b80      	cmp	r3, #128	@ 0x80
 8000d62:	d107      	bne.n	8000d74 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d72:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2221      	movs	r2, #33	@ 0x21
 8000d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000d84:	f007 feea 	bl	8008b5c <HAL_GetTick>
 8000d88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	88fa      	ldrh	r2, [r7, #6]
 8000d96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000da2:	d108      	bne.n	8000db6 <HAL_UART_Transmit+0x8c>
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d104      	bne.n	8000db6 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	e003      	b.n	8000dbe <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000dbe:	e030      	b.n	8000e22 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f000 fb86 	bl	80014dc <UART_WaitOnFlagUntilTimeout>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e03d      	b.n	8000e5e <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10b      	bne.n	8000e00 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	e007      	b.n	8000e10 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1c8      	bne.n	8000dc0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	@ 0x40
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 fb4f 	bl	80014dc <UART_WaitOnFlagUntilTimeout>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d005      	beq.n	8000e50 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2220      	movs	r2, #32
 8000e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e006      	b.n	8000e5e <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2220      	movs	r2, #32
 8000e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e000      	b.n	8000e5e <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8000e5c:	2302      	movs	r3, #2
  }
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e6c:	b094      	sub	sp, #80	@ 0x50
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8000e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b78      	ldr	r3, [pc, #480]	@ (8001060 <UART_SetConfig+0x1f8>)
 8000e7e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4971      	ldr	r1, [pc, #452]	@ (8001064 <UART_SetConfig+0x1fc>)
 8000ea0:	4019      	ands	r1, r3
 8000ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8000eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb8:	68d9      	ldr	r1, [r3, #12]
 8000eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	ea40 0301 	orr.w	r3, r0, r1
 8000ec2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8000eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b64      	ldr	r3, [pc, #400]	@ (8001060 <UART_SetConfig+0x1f8>)
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d009      	beq.n	8000ee8 <UART_SetConfig+0x80>
 8000ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b63      	ldr	r3, [pc, #396]	@ (8001068 <UART_SetConfig+0x200>)
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d004      	beq.n	8000ee8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8000ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8000ef2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8000f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f06:	f023 000f 	bic.w	r0, r3, #15
 8000f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	ea40 0301 	orr.w	r3, r0, r1
 8000f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b53      	ldr	r3, [pc, #332]	@ (800106c <UART_SetConfig+0x204>)
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d102      	bne.n	8000f28 <UART_SetConfig+0xc0>
 8000f22:	2301      	movs	r3, #1
 8000f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f26:	e066      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b50      	ldr	r3, [pc, #320]	@ (8001070 <UART_SetConfig+0x208>)
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d102      	bne.n	8000f38 <UART_SetConfig+0xd0>
 8000f32:	2302      	movs	r3, #2
 8000f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f36:	e05e      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001074 <UART_SetConfig+0x20c>)
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d102      	bne.n	8000f48 <UART_SetConfig+0xe0>
 8000f42:	2304      	movs	r3, #4
 8000f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f46:	e056      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001078 <UART_SetConfig+0x210>)
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d102      	bne.n	8000f58 <UART_SetConfig+0xf0>
 8000f52:	2308      	movs	r3, #8
 8000f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f56:	e04e      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b47      	ldr	r3, [pc, #284]	@ (800107c <UART_SetConfig+0x214>)
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d102      	bne.n	8000f68 <UART_SetConfig+0x100>
 8000f62:	2310      	movs	r3, #16
 8000f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f66:	e046      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b44      	ldr	r3, [pc, #272]	@ (8001080 <UART_SetConfig+0x218>)
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d102      	bne.n	8000f78 <UART_SetConfig+0x110>
 8000f72:	2320      	movs	r3, #32
 8000f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f76:	e03e      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b41      	ldr	r3, [pc, #260]	@ (8001084 <UART_SetConfig+0x21c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d102      	bne.n	8000f88 <UART_SetConfig+0x120>
 8000f82:	2340      	movs	r3, #64	@ 0x40
 8000f84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f86:	e036      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <UART_SetConfig+0x220>)
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d102      	bne.n	8000f98 <UART_SetConfig+0x130>
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f96:	e02e      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <UART_SetConfig+0x224>)
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d103      	bne.n	8000faa <UART_SetConfig+0x142>
 8000fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fa8:	e025      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <UART_SetConfig+0x228>)
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d103      	bne.n	8000fbc <UART_SetConfig+0x154>
 8000fb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fba:	e01c      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <UART_SetConfig+0x22c>)
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d103      	bne.n	8000fce <UART_SetConfig+0x166>
 8000fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fcc:	e013      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <UART_SetConfig+0x230>)
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d103      	bne.n	8000fe0 <UART_SetConfig+0x178>
 8000fd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000fde:	e00a      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <UART_SetConfig+0x1f8>)
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d103      	bne.n	8000ff2 <UART_SetConfig+0x18a>
 8000fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000ff0:	e001      	b.n	8000ff6 <UART_SetConfig+0x18e>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8000ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <UART_SetConfig+0x1f8>)
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d005      	beq.n	800100c <UART_SetConfig+0x1a4>
 8001000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <UART_SetConfig+0x200>)
 8001006:	429a      	cmp	r2, r3
 8001008:	f040 8094 	bne.w	8001134 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800100c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800100e:	2200      	movs	r2, #0
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	627a      	str	r2, [r7, #36]	@ 0x24
 8001014:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001018:	f00b fc02 	bl	800c820 <HAL_RCCEx_GetPeriphCLKFreq>
 800101c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800101e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80f7 	beq.w	8001214 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <UART_SetConfig+0x234>)
 800102c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001030:	461a      	mov	r2, r3
 8001032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001034:	fbb3 f3f2 	udiv	r3, r3, r2
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800103a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001046:	429a      	cmp	r2, r3
 8001048:	d305      	bcc.n	8001056 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001052:	429a      	cmp	r2, r3
 8001054:	d924      	bls.n	80010a0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800105c:	e069      	b.n	8001132 <UART_SetConfig+0x2ca>
 800105e:	bf00      	nop
 8001060:	44002400 	.word	0x44002400
 8001064:	cfff69f3 	.word	0xcfff69f3
 8001068:	54002400 	.word	0x54002400
 800106c:	40013800 	.word	0x40013800
 8001070:	40004400 	.word	0x40004400
 8001074:	40004800 	.word	0x40004800
 8001078:	40004c00 	.word	0x40004c00
 800107c:	40005000 	.word	0x40005000
 8001080:	40006400 	.word	0x40006400
 8001084:	40007800 	.word	0x40007800
 8001088:	40007c00 	.word	0x40007c00
 800108c:	40008000 	.word	0x40008000
 8001090:	40006800 	.word	0x40006800
 8001094:	40006c00 	.word	0x40006c00
 8001098:	40008400 	.word	0x40008400
 800109c:	08011320 	.word	0x08011320
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80010a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010a2:	2200      	movs	r2, #0
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	61fa      	str	r2, [r7, #28]
 80010a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	4a64      	ldr	r2, [pc, #400]	@ (8001240 <UART_SetConfig+0x3d8>)
 80010ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010c2:	f7ff f8eb 	bl	800029c <__aeabi_uldivmod>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	020b      	lsls	r3, r1, #8
 80010d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80010dc:	0202      	lsls	r2, r0, #8
 80010de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80010e0:	6849      	ldr	r1, [r1, #4]
 80010e2:	0849      	lsrs	r1, r1, #1
 80010e4:	2000      	movs	r0, #0
 80010e6:	460c      	mov	r4, r1
 80010e8:	4605      	mov	r5, r0
 80010ea:	eb12 0804 	adds.w	r8, r2, r4
 80010ee:	eb43 0905 	adc.w	r9, r3, r5
 80010f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	60fa      	str	r2, [r7, #12]
 80010fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001100:	4640      	mov	r0, r8
 8001102:	4649      	mov	r1, r9
 8001104:	f7ff f8ca 	bl	800029c <__aeabi_uldivmod>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4613      	mov	r3, r2
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001116:	d308      	bcc.n	800112a <UART_SetConfig+0x2c2>
 8001118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800111a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800111e:	d204      	bcs.n	800112a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	e003      	b.n	8001132 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8001130:	e070      	b.n	8001214 <UART_SetConfig+0x3ac>
 8001132:	e06f      	b.n	8001214 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800113c:	d13c      	bne.n	80011b8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800113e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001140:	2200      	movs	r2, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800114a:	f00b fb69 	bl	800c820 <HAL_RCCEx_GetPeriphCLKFreq>
 800114e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d05e      	beq.n	8001214 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4a39      	ldr	r2, [pc, #228]	@ (8001240 <UART_SetConfig+0x3d8>)
 800115c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001160:	461a      	mov	r2, r3
 8001162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001164:	fbb3 f3f2 	udiv	r3, r3, r2
 8001168:	005a      	lsls	r2, r3, #1
 800116a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	441a      	add	r2, r3
 8001172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	fbb2 f3f3 	udiv	r3, r2, r3
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800117c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d916      	bls.n	80011b0 <UART_SetConfig+0x348>
 8001182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001188:	d212      	bcs.n	80011b0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800118a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800118c:	b29b      	uxth	r3, r3
 800118e:	f023 030f 	bic.w	r3, r3, #15
 8001192:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	b29a      	uxth	r2, r3
 80011a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80011a2:	4313      	orrs	r3, r2
 80011a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80011a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	e031      	b.n	8001214 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80011b6:	e02d      	b.n	8001214 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80011b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011ba:	2200      	movs	r2, #0
 80011bc:	469a      	mov	sl, r3
 80011be:	4693      	mov	fp, r2
 80011c0:	4650      	mov	r0, sl
 80011c2:	4659      	mov	r1, fp
 80011c4:	f00b fb2c 	bl	800c820 <HAL_RCCEx_GetPeriphCLKFreq>
 80011c8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80011ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80011d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001240 <UART_SetConfig+0x3d8>)
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011da:	461a      	mov	r2, r3
 80011dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011de:	fbb3 f2f2 	udiv	r2, r3, r2
 80011e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	441a      	add	r2, r3
 80011ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80011f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d909      	bls.n	800120e <UART_SetConfig+0x3a6>
 80011fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001200:	d205      	bcs.n	800120e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001204:	b29a      	uxth	r2, r3
 8001206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	e002      	b.n	8001214 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001216:	2201      	movs	r2, #1
 8001218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121e:	2201      	movs	r2, #1
 8001220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	2200      	movs	r2, #0
 8001228:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800122a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122c:	2200      	movs	r2, #0
 800122e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8001234:	4618      	mov	r0, r3
 8001236:	3750      	adds	r7, #80	@ 0x50
 8001238:	46bd      	mov	sp, r7
 800123a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800123e:	bf00      	nop
 8001240:	08011320 	.word	0x08011320

08001244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00a      	beq.n	800126e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00a      	beq.n	8001290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00a      	beq.n	80012b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00a      	beq.n	80012d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00a      	beq.n	80012f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00a      	beq.n	8001318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001320:	2b00      	cmp	r3, #0
 8001322:	d01a      	beq.n	800135a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001342:	d10a      	bne.n	800135a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00a      	beq.n	800137c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
  }
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b098      	sub	sp, #96	@ 0x60
 800138c:	af02      	add	r7, sp, #8
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001398:	f007 fbe0 	bl	8008b5c <HAL_GetTick>
 800139c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d12f      	bne.n	800140c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f88e 	bl	80014dc <UART_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d022      	beq.n	800140c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ce:	e853 3f00 	ldrex	r3, [r3]
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80013d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013da:	653b      	str	r3, [r7, #80]	@ 0x50
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80013e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013ec:	e841 2300 	strex	r3, r2, [r1]
 80013f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80013f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e6      	bne.n	80013c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e063      	b.n	80014d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b04      	cmp	r3, #4
 8001418:	d149      	bne.n	80014ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800141a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f857 	bl	80014dc <UART_WaitOnFlagUntilTimeout>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d03c      	beq.n	80014ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	e853 3f00 	ldrex	r3, [r3]
 8001440:	623b      	str	r3, [r7, #32]
   return(result);
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
 8001454:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800145a:	e841 2300 	strex	r3, r2, [r1]
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1e6      	bne.n	8001434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3308      	adds	r3, #8
 800146c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	e853 3f00 	ldrex	r3, [r3]
 8001474:	60fb      	str	r3, [r7, #12]
   return(result);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3308      	adds	r3, #8
 8001484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001486:	61fa      	str	r2, [r7, #28]
 8001488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	e841 2300 	strex	r3, r2, [r1]
 8001492:	617b      	str	r3, [r7, #20]
   return(result);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e5      	bne.n	8001466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2220      	movs	r2, #32
 800149e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e012      	b.n	80014d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2220      	movs	r2, #32
 80014b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3758      	adds	r7, #88	@ 0x58
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014ec:	e04f      	b.n	800158e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d04b      	beq.n	800158e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014f6:	f007 fb31 	bl	8008b5c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <UART_WaitOnFlagUntilTimeout+0x30>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e04e      	b.n	80015ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d037      	beq.n	800158e <UART_WaitOnFlagUntilTimeout+0xb2>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b80      	cmp	r3, #128	@ 0x80
 8001522:	d034      	beq.n	800158e <UART_WaitOnFlagUntilTimeout+0xb2>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b40      	cmp	r3, #64	@ 0x40
 8001528:	d031      	beq.n	800158e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	2b08      	cmp	r3, #8
 8001536:	d110      	bne.n	800155a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2208      	movs	r2, #8
 800153e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 f838 	bl	80015b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2208      	movs	r2, #8
 800154a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e029      	b.n	80015ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001568:	d111      	bne.n	800158e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f81e 	bl	80015b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2220      	movs	r2, #32
 800157e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e00f      	b.n	80015ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4013      	ands	r3, r2
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	429a      	cmp	r2, r3
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d0a0      	beq.n	80014ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b095      	sub	sp, #84	@ 0x54
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c6:	e853 3f00 	ldrex	r3, [r3]
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80015cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80015d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80015de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80015e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015e4:	e841 2300 	strex	r3, r2, [r1]
 80015e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80015ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e6      	bne.n	80015be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3308      	adds	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	e853 3f00 	ldrex	r3, [r3]
 80015fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3308      	adds	r3, #8
 8001612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001616:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800161a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800161c:	e841 2300 	strex	r3, r2, [r1]
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e3      	bne.n	80015f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800162c:	2b01      	cmp	r3, #1
 800162e:	d118      	bne.n	8001662 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	e853 3f00 	ldrex	r3, [r3]
 800163c:	60bb      	str	r3, [r7, #8]
   return(result);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f023 0310 	bic.w	r3, r3, #16
 8001644:	647b      	str	r3, [r7, #68]	@ 0x44
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	e841 2300 	strex	r3, r2, [r1]
 800165a:	613b      	str	r3, [r7, #16]
   return(result);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1e6      	bne.n	8001630 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8001676:	bf00      	nop
 8001678:	3754      	adds	r7, #84	@ 0x54
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001686:	bf00      	nop
 8001688:	e7fd      	b.n	8001686 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	bf00      	nop
 8001690:	e7fd      	b.n	800168e <HardFault_Handler+0x4>

08001692 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	bf00      	nop
 80016a0:	e7fd      	b.n	800169e <BusFault_Handler+0x4>

080016a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a6:	bf00      	nop
 80016a8:	e7fd      	b.n	80016a6 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f007 fa2c 	bl	8008b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return 1;
 80016e4:	2301      	movs	r3, #1
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_kill>:

int _kill(int pid, int sig)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016fa:	f00e f8b3 	bl	800f864 <__errno>
 80016fe:	4603      	mov	r3, r0
 8001700:	2216      	movs	r2, #22
 8001702:	601a      	str	r2, [r3, #0]
  return -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_exit>:

void _exit (int status)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ffe7 	bl	80016f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001722:	bf00      	nop
 8001724:	e7fd      	b.n	8001722 <_exit+0x12>

08001726 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e00a      	b.n	800174e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001738:	f3af 8000 	nop.w
 800173c:	4601      	mov	r1, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	60ba      	str	r2, [r7, #8]
 8001744:	b2ca      	uxtb	r2, r1
 8001746:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf0      	blt.n	8001738 <_read+0x12>
  }

  return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e009      	b.n	8001786 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	60ba      	str	r2, [r7, #8]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	dbf1      	blt.n	8001772 <_write+0x12>
  }
  return len;
 800178e:	687b      	ldr	r3, [r7, #4]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_close>:

int _close(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017c0:	605a      	str	r2, [r3, #4]
  return 0;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_isatty>:

int _isatty(int file)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017d8:	2301      	movs	r3, #1
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	@ (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f00e f818 	bl	800f864 <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200a0000 	.word	0x200a0000
 8001860:	00000400 	.word	0x00000400
 8001864:	200000dc 	.word	0x200000dc
 8001868:	200002c8 	.word	0x200002c8

0800186c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001870:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 8001872:	4a23      	ldr	r2, [pc, #140]	@ (8001900 <MX_USART1_UART_Init+0x94>)
 8001874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001876:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b4:	4811      	ldr	r0, [pc, #68]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018b6:	f7ff f9e8 	bl	8000c8a <HAL_UART_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80018c0:	f7ff f9d6 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c4:	2100      	movs	r1, #0
 80018c6:	480d      	ldr	r0, [pc, #52]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018c8:	f00d fc6d 	bl	800f1a6 <HAL_UARTEx_SetTxFifoThreshold>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80018d2:	f7ff f9cd 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4808      	ldr	r0, [pc, #32]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018da:	f00d fca2 	bl	800f222 <HAL_UARTEx_SetRxFifoThreshold>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018e4:	f7ff f9c4 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_USART1_UART_Init+0x90>)
 80018ea:	f00d fc23 	bl	800f134 <HAL_UARTEx_DisableFifoMode>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018f4:	f7ff f9bc 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200000e0 	.word	0x200000e0
 8001900:	40013800 	.word	0x40013800

08001904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0cc      	sub	sp, #304	@ 0x130
 8001908:	af00      	add	r7, sp, #0
 800190a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800190e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001912:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001928:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800192c:	4618      	mov	r0, r3
 800192e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001932:	461a      	mov	r2, r3
 8001934:	2100      	movs	r1, #0
 8001936:	f00d ff16 	bl	800f766 <memset>
  if(uartHandle->Instance==USART1)
 800193a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800193e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a33      	ldr	r2, [pc, #204]	@ (8001a14 <HAL_UART_MspInit+0x110>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d15d      	bne.n	8001a08 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800194c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001950:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001954:	f04f 0201 	mov.w	r2, #1
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001960:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001964:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001968:	2200      	movs	r2, #0
 800196a:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4618      	mov	r0, r3
 8001972:	f008 fb87 	bl	800a084 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800197c:	f7ff f978 	bl	8000c70 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <HAL_UART_MspInit+0x114>)
 8001982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001986:	4a24      	ldr	r2, [pc, #144]	@ (8001a18 <HAL_UART_MspInit+0x114>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_UART_MspInit+0x114>)
 8001992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001996:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800199a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800199e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019ac:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <HAL_UART_MspInit+0x114>)
 80019b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b4:	4a18      	ldr	r2, [pc, #96]	@ (8001a18 <HAL_UART_MspInit+0x114>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_UART_MspInit+0x114>)
 80019c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c4:	f003 0201 	and.w	r2, r3, #1
 80019c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019da:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80019dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f6:	2307      	movs	r3, #7
 80019f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	@ (8001a1c <HAL_UART_MspInit+0x118>)
 8001a04:	f007 fa3e 	bl	8008e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a08:	bf00      	nop
 8001a0a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40013800 	.word	0x40013800
 8001a18:	44020c00 	.word	0x44020c00
 8001a1c:	42020000 	.word	0x42020000

08001a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a20:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a24:	f006 ff6c 	bl	8008900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <LoopForever+0xe>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <LoopForever+0x16>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a4e:	f00d ff0f 	bl	800f870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7fe fe57 	bl	8000704 <main>

08001a56 <LoopForever>:

LoopForever:
    b LoopForever
 8001a56:	e7fe      	b.n	8001a56 <LoopForever>
  ldr   r0, =_estack
 8001a58:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001a64:	08011564 	.word	0x08011564
  ldr r2, =_sbss
 8001a68:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001a6c:	200002c4 	.word	0x200002c4

08001a70 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_IRQHandler>

08001a72 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf38      	it	cc
 8001a84:	4613      	movcc	r3, r2
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf28      	it	cs
 8001aa4:	4613      	movcs	r3, r2
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ac4:	6839      	ldr	r1, [r7, #0]
 8001ac6:	fb01 f202 	mul.w	r2, r1, r2
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	1ad3      	subs	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	3b01      	subs	r3, #1
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ffde 	bl	8001ab2 <lfs_aligndown>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	fab3 f383 	clz	r3, r3
 8001b10:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fbc0 	bl	80002cc <__popcountsi2>
 8001b4c:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	1ad3      	subs	r3, r2, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8001b7a:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffee 	bl	8001b72 <lfs_fromle32>
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffed 	bl	8001ba0 <lfs_frombe32>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f00d fbcd 	bl	800f378 <malloc>
 8001bde:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f00d fbc9 	bl	800f388 <free>
#else
    (void)p;
#endif
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68d8      	ldr	r0, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	461a      	mov	r2, r3
 8001c32:	21ff      	movs	r1, #255	@ 0xff
 8001c34:	f00d fd97 	bl	800f766 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c58:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8001c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c5e:	441a      	add	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d80a      	bhi.n	8001c80 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8124 	beq.w	8001ebc <lfs_bd_read+0x274>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	f0c0 811e 	bcc.w	8001ebc <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8001c80:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8001c84:	e11f      	b.n	8001ec6 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c88:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03f      	beq.n	8001d10 <lfs_bd_read+0xc8>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d13a      	bne.n	8001d10 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8001ca4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d232      	bcs.n	8001d10 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d324      	bcc.n	8001cfe <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	1acb      	subs	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	69b8      	ldr	r0, [r7, #24]
 8001cc6:	f7ff fee4 	bl	8001a92 <lfs_min>
 8001cca:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001cd6:	1acb      	subs	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	69f8      	ldr	r0, [r7, #28]
 8001ce0:	f00d fded 	bl	800f8be <memcpy>

                data += diff;
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4413      	add	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001cfc:	e0de      	b.n	8001ebc <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	69b8      	ldr	r0, [r7, #24]
 8001d0a:	f7ff fec2 	bl	8001a92 <lfs_min>
 8001d0e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d13a      	bne.n	8001d90 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4413      	add	r3, r2
        if (block == rcache->block &&
 8001d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d232      	bcs.n	8001d90 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d324      	bcc.n	8001d7e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	69b8      	ldr	r0, [r7, #24]
 8001d46:	f7ff fea4 	bl	8001a92 <lfs_min>
 8001d4a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d56:	1acb      	subs	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	69f8      	ldr	r0, [r7, #28]
 8001d60:	f00d fdad 	bl	800f8be <memcpy>

                data += diff;
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4413      	add	r3, r2
 8001d6a:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4413      	add	r3, r2
 8001d72:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8001d74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8001d7c:	e09e      	b.n	8001ebc <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	69b8      	ldr	r0, [r7, #24]
 8001d8a:	f7ff fe82 	bl	8001a92 <lfs_min>
 8001d8e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001d90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d336      	bcc.n	8001e06 <lfs_bd_read+0x1be>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001da4:	fb01 f202 	mul.w	r2, r1, r2
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12b      	bne.n	8001e06 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001db2:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8001db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d325      	bcc.n	8001e06 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	69b8      	ldr	r0, [r7, #24]
 8001dc4:	f7ff fe75 	bl	8001ab2 <lfs_aligndown>
 8001dc8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dce:	685c      	ldr	r4, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ddc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dde:	47a0      	blx	r4
 8001de0:	6178      	str	r0, [r7, #20]
            if (err) {
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <lfs_bd_read+0x1a4>
                return err;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	e06c      	b.n	8001ec6 <lfs_bd_read+0x27e>
            }

            data += diff;
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4413      	add	r3, r2
 8001df2:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4413      	add	r3, r2
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8001dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8001e04:	e05a      	b.n	8001ebc <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <lfs_bd_read+0x1dc>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d305      	bcc.n	8001e24 <lfs_bd_read+0x1dc>
 8001e18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <lfs_bd_read+0x288>)
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed4 <lfs_bd_read+0x28c>)
 8001e1c:	216b      	movs	r1, #107	@ 0x6b
 8001e1e:	482e      	ldr	r0, [pc, #184]	@ (8001ed8 <lfs_bd_read+0x290>)
 8001e20:	f00d fa8c 	bl	800f33c <__assert_func>
        rcache->block = block;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e28:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e34:	f7ff fe3d 	bl	8001ab2 <lfs_aligndown>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8001e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e48:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7ff fe45 	bl	8001adc <lfs_alignup>
 8001e52:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e58:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f7ff fe18 	bl	8001a92 <lfs_min>
 8001e62:	4602      	mov	r2, r0
                - rcache->off,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8001e68:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f7ff fe0d 	bl	8001a92 <lfs_min>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e82:	685c      	ldr	r4, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	462b      	mov	r3, r5
 8001e9c:	47a0      	blx	r4
 8001e9e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	dd05      	ble.n	8001eb2 <lfs_bd_read+0x26a>
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <lfs_bd_read+0x294>)
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <lfs_bd_read+0x28c>)
 8001eaa:	2176      	movs	r1, #118	@ 0x76
 8001eac:	480a      	ldr	r0, [pc, #40]	@ (8001ed8 <lfs_bd_read+0x290>)
 8001eae:	f00d fa45 	bl	800f33c <__assert_func>
        if (err) {
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <lfs_bd_read+0x274>
            return err;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	e004      	b.n	8001ec6 <lfs_bd_read+0x27e>
    while (size > 0) {
 8001ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f aee1 	bne.w	8001c86 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3720      	adds	r7, #32
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	08010510 	.word	0x08010510
 8001ed4:	08011338 	.word	0x08011338
 8001ed8:	08010540 	.word	0x08010540
 8001edc:	0801058c 	.word	0x0801058c

08001ee0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b090      	sub	sp, #64	@ 0x40
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8001eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001efa:	e039      	b.n	8001f70 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8001efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2108      	movs	r1, #8
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fdc4 	bl	8001a92 <lfs_min>
 8001f0a:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f10:	1ad1      	subs	r1, r2, r3
 8001f12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f16:	4413      	add	r3, r2
 8001f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1a:	9203      	str	r2, [sp, #12]
 8001f1c:	f107 0214 	add.w	r2, r7, #20
 8001f20:	9202      	str	r2, [sp, #8]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff fe8a 	bl	8001c48 <lfs_bd_read>
 8001f34:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <lfs_bd_cmp+0x60>
            return err;
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	e01c      	b.n	8001f7a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8001f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f44:	18d1      	adds	r1, r2, r3
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f00d fbfa 	bl	800f746 <memcmp>
 8001f52:	61f8      	str	r0, [r7, #28]
        if (res) {
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da01      	bge.n	8001f64 <lfs_bd_cmp+0x84>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e00a      	b.n	8001f7a <lfs_bd_cmp+0x9a>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e008      	b.n	8001f7a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	4413      	add	r3, r2
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3c1      	bcc.n	8001efc <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3730      	adds	r7, #48	@ 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b08e      	sub	sp, #56	@ 0x38
 8001f86:	af04      	add	r7, sp, #16
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f98:	e030      	b.n	8001ffc <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8001f9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fd75 	bl	8001a92 <lfs_min>
 8001fa8:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	1ad1      	subs	r1, r2, r3
 8001fb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	4413      	add	r3, r2
 8001fb6:	6a3a      	ldr	r2, [r7, #32]
 8001fb8:	9203      	str	r2, [sp, #12]
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	9202      	str	r2, [sp, #8]
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fe3b 	bl	8001c48 <lfs_bd_read>
 8001fd2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <lfs_bd_crc+0x5c>
            return err;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	e013      	b.n	8002006 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8001fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f107 0114 	add.w	r1, r7, #20
 8001fe6:	6a3a      	ldr	r2, [r7, #32]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 fc4b 	bl	8008884 <lfs_crc>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002000:	429a      	cmp	r2, r3
 8002002:	d3ca      	bcc.n	8001f9a <lfs_bd_crc+0x18>
    }

    return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b08c      	sub	sp, #48	@ 0x30
 8002014:	af04      	add	r7, sp, #16
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d060      	beq.n	80020ea <lfs_bd_flush+0xda>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f113 0f02 	cmn.w	r3, #2
 8002030:	d05b      	beq.n	80020ea <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203a:	429a      	cmp	r2, r3
 800203c:	d305      	bcc.n	800204a <lfs_bd_flush+0x3a>
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <lfs_bd_flush+0xe4>)
 8002040:	4a2d      	ldr	r2, [pc, #180]	@ (80020f8 <lfs_bd_flush+0xe8>)
 8002042:	21b3      	movs	r1, #179	@ 0xb3
 8002044:	482d      	ldr	r0, [pc, #180]	@ (80020fc <lfs_bd_flush+0xec>)
 8002046:	f00d f979 	bl	800f33c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7ff fd40 	bl	8001adc <lfs_alignup>
 800205c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002062:	689c      	ldr	r4, [r3, #8]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	462b      	mov	r3, r5
 800207a:	47a0      	blx	r4
 800207c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	dd05      	ble.n	8002090 <lfs_bd_flush+0x80>
 8002084:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <lfs_bd_flush+0xf0>)
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <lfs_bd_flush+0xe8>)
 8002088:	21b7      	movs	r1, #183	@ 0xb7
 800208a:	481c      	ldr	r0, [pc, #112]	@ (80020fc <lfs_bd_flush+0xec>)
 800208c:	f00d f956 	bl	800f33c <__assert_func>
        if (err) {
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <lfs_bd_flush+0x8a>
            return err;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	e028      	b.n	80020ec <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff fdab 	bl	8001bfe <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80020b4:	69f8      	ldr	r0, [r7, #28]
 80020b6:	9003      	str	r0, [sp, #12]
 80020b8:	9102      	str	r1, [sp, #8]
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	2100      	movs	r1, #0
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff ff0b 	bl	8001ee0 <lfs_bd_cmp>
 80020ca:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da01      	bge.n	80020d6 <lfs_bd_flush+0xc6>
                return res;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e00a      	b.n	80020ec <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 80020dc:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80020e0:	e004      	b.n	80020ec <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fd99 	bl	8001c1c <lfs_cache_zero>
    }

    return 0;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bdb0      	pop	{r4, r5, r7, pc}
 80020f4:	08010598 	.word	0x08010598
 80020f8:	08011344 	.word	0x08011344
 80020fc:	08010540 	.word	0x08010540
 8002100:	0801058c 	.word	0x0801058c

08002104 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fd72 	bl	8001bfe <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff ff75 	bl	8002010 <lfs_bd_flush>
 8002126:	6178      	str	r0, [r7, #20]
    if (err) {
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <lfs_bd_sync+0x2e>
        return err;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	e011      	b.n	8002156 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800213c:	4610      	mov	r0, r2
 800213e:	4798      	blx	r3
 8002140:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	dd05      	ble.n	8002154 <lfs_bd_sync+0x50>
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <lfs_bd_sync+0x5c>)
 800214a:	4a06      	ldr	r2, [pc, #24]	@ (8002164 <lfs_bd_sync+0x60>)
 800214c:	21dd      	movs	r1, #221	@ 0xdd
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <lfs_bd_sync+0x64>)
 8002150:	f00d f8f4 	bl	800f33c <__assert_func>
    return err;
 8002154:	697b      	ldr	r3, [r7, #20]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	0801058c 	.word	0x0801058c
 8002164:	08011354 	.word	0x08011354
 8002168:	08010540 	.word	0x08010540

0800216c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800217a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	f113 0f02 	cmn.w	r3, #2
 8002184:	d00a      	beq.n	800219c <lfs_bd_prog+0x30>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800218c:	429a      	cmp	r2, r3
 800218e:	d305      	bcc.n	800219c <lfs_bd_prog+0x30>
 8002190:	4b48      	ldr	r3, [pc, #288]	@ (80022b4 <lfs_bd_prog+0x148>)
 8002192:	4a49      	ldr	r2, [pc, #292]	@ (80022b8 <lfs_bd_prog+0x14c>)
 8002194:	21e8      	movs	r1, #232	@ 0xe8
 8002196:	4849      	ldr	r0, [pc, #292]	@ (80022bc <lfs_bd_prog+0x150>)
 8002198:	f00d f8d0 	bl	800f33c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800219c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a0:	441a      	add	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d97a      	bls.n	80022a2 <lfs_bd_prog+0x136>
 80021ac:	4b44      	ldr	r3, [pc, #272]	@ (80022c0 <lfs_bd_prog+0x154>)
 80021ae:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <lfs_bd_prog+0x14c>)
 80021b0:	21e9      	movs	r1, #233	@ 0xe9
 80021b2:	4842      	ldr	r0, [pc, #264]	@ (80022bc <lfs_bd_prog+0x150>)
 80021b4:	f00d f8c2 	bl	800f33c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021be:	429a      	cmp	r2, r3
 80021c0:	d151      	bne.n	8002266 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80021c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d34c      	bcc.n	8002266 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	4413      	add	r3, r2
                off >= pcache->off &&
 80021d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d243      	bcs.n	8002266 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80021ec:	4413      	add	r3, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021f2:	f7ff fc4e 	bl	8001a92 <lfs_min>
 80021f6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002202:	1acb      	subs	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	69f9      	ldr	r1, [r7, #28]
 800220a:	4618      	mov	r0, r3
 800220c:	f00d fb57 	bl	800f8be <memcpy>

            data += diff;
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4413      	add	r3, r2
 800221e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8002220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6898      	ldr	r0, [r3, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	4619      	mov	r1, r3
 8002236:	f7ff fc1c 	bl	8001a72 <lfs_max>
 800223a:	4602      	mov	r2, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	429a      	cmp	r2, r3
 800224c:	d128      	bne.n	80022a0 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fedb 	bl	8002010 <lfs_bd_flush>
 800225a:	6178      	str	r0, [r7, #20]
                if (err) {
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01e      	beq.n	80022a0 <lfs_bd_prog+0x134>
                    return err;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	e021      	b.n	80022aa <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d006      	beq.n	800227e <lfs_bd_prog+0x112>
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <lfs_bd_prog+0x158>)
 8002272:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <lfs_bd_prog+0x14c>)
 8002274:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8002278:	4810      	ldr	r0, [pc, #64]	@ (80022bc <lfs_bd_prog+0x150>)
 800227a:	f00d f85f 	bl	800f33c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002282:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4619      	mov	r1, r3
 800228c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800228e:	f7ff fc10 	bl	8001ab2 <lfs_aligndown>
 8002292:	4602      	mov	r2, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	e000      	b.n	80022a2 <lfs_bd_prog+0x136>
            continue;
 80022a0:	bf00      	nop
    while (size > 0) {
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d187      	bne.n	80021b8 <lfs_bd_prog+0x4c>
    }

    return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	080105bc 	.word	0x080105bc
 80022b8:	08011360 	.word	0x08011360
 80022bc:	08010540 	.word	0x08010540
 80022c0:	080105f4 	.word	0x080105f4
 80022c4:	08010618 	.word	0x08010618

080022c8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d306      	bcc.n	80022ea <lfs_bd_erase+0x22>
 80022dc:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <lfs_bd_erase+0x54>)
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <lfs_bd_erase+0x58>)
 80022e0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80022e4:	480f      	ldr	r0, [pc, #60]	@ (8002324 <lfs_bd_erase+0x5c>)
 80022e6:	f00d f829 	bl	800f33c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4610      	mov	r0, r2
 80022f8:	4798      	blx	r3
 80022fa:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	dd06      	ble.n	8002310 <lfs_bd_erase+0x48>
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <lfs_bd_erase+0x60>)
 8002304:	4a06      	ldr	r2, [pc, #24]	@ (8002320 <lfs_bd_erase+0x58>)
 8002306:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800230a:	4806      	ldr	r0, [pc, #24]	@ (8002324 <lfs_bd_erase+0x5c>)
 800230c:	f00d f816 	bl	800f33c <__assert_func>
    return err;
 8002310:	68fb      	ldr	r3, [r7, #12]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	0801063c 	.word	0x0801063c
 8002320:	0801136c 	.word	0x0801136c
 8002324:	08010540 	.word	0x08010540
 8002328:	0801058c 	.word	0x0801058c

0800232c <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 8002334:	4904      	ldr	r1, [pc, #16]	@ (8002348 <lfs_path_namelen+0x1c>)
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f00d fa1d 	bl	800f776 <strcspn>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	08010658 	.word	0x08010658

0800234c <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffe9 	bl	800232c <lfs_path_namelen>
 800235a:	60f8      	str	r0, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	4909      	ldr	r1, [pc, #36]	@ (8002388 <lfs_path_islast+0x3c>)
 8002364:	4618      	mov	r0, r3
 8002366:	f00d fa17 	bl	800f798 <strspn>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	08010658 	.word	0x08010658

0800238c <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffc9 	bl	800232c <lfs_path_namelen>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d005      	beq.n	80023fc <lfs_pair_isnull+0x1e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d101      	bne.n	8002400 <lfs_pair_isnull+0x22>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <lfs_pair_isnull+0x24>
 8002400:	2300      	movs	r3, #0
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d017      	beq.n	800245a <lfs_pair_cmp+0x46>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d00f      	beq.n	800245a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3304      	adds	r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d008      	beq.n	800245a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <lfs_pair_cmp+0x46>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <lfs_pair_cmp+0x48>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d107      	bne.n	800248e <lfs_pair_issync+0x26>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d00d      	beq.n	80024aa <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3304      	adds	r3, #4
 8002496:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d108      	bne.n	80024ae <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d101      	bne.n	80024ae <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <lfs_pair_issync+0x48>
 80024ae:	2300      	movs	r3, #0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80024c2:	b590      	push	{r4, r7, lr}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fb4f 	bl	8001b72 <lfs_fromle32>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1d1c      	adds	r4, r3, #4
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7ff fb44 	bl	8001b72 <lfs_fromle32>
 80024ea:	4603      	mov	r3, r0
 80024ec:	6023      	str	r3, [r4, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}

080024f6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80024f6:	b590      	push	{r4, r7, lr}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fb40 	bl	8001b88 <lfs_tole32>
 8002508:	4602      	mov	r2, r0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	1d1c      	adds	r4, r3, #4
 8002518:	4610      	mov	r0, r2
 800251a:	f7ff fb35 	bl	8001b88 <lfs_tole32>
 800251e:	4603      	mov	r3, r0
 8002520:	6023      	str	r3, [r4, #0]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}

0800252a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	43db      	mvns	r3, r3
 8002536:	0fdb      	lsrs	r3, r3, #31
 8002538:	b2db      	uxtb	r3, r3
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	059b      	lsls	r3, r3, #22
 8002552:	159b      	asrs	r3, r3, #22
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	0d1b      	lsrs	r3, r3, #20
 8002578:	b29b      	uxth	r3, r3
 800257a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800257e:	b29b      	uxth	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0d1b      	lsrs	r3, r3, #20
 8002598:	b29b      	uxth	r3, r3
 800259a:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800259e:	b29b      	uxth	r3, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	0d1b      	lsrs	r3, r3, #20
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025be:	b29b      	uxth	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0d1b      	lsrs	r3, r3, #20
 80025d8:	b2db      	uxtb	r3, r3
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffec 	bl	80025cc <lfs_tag_chunk>
 80025f4:	4603      	mov	r3, r0
 80025f6:	b25b      	sxtb	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	b29b      	uxth	r3, r3
 800260e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002612:	b29b      	uxth	r3, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff7f 	bl	8002546 <lfs_tag_isdelete>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ffe5 	bl	8002620 <lfs_tag_size>
 8002656:	4603      	mov	r3, r0
 8002658:	3304      	adds	r3, #4
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	405a      	eors	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	405a      	eors	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	405a      	eors	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <lfs_gstate_iszero+0x24>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <lfs_gstate_iszero+0x26>
 80026c6:	2300      	movs	r3, #0
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff9a 	bl	8002620 <lfs_tag_size>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff87 	bl	8002620 <lfs_tag_size>
 8002712:	4603      	mov	r3, r0
 8002714:	b2db      	uxtb	r3, r3
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff1e 	bl	800256c <lfs_tag_type1>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff65 	bl	8002620 <lfs_tag_size>
 8002756:	4603      	mov	r3, r0
 8002758:	0a5b      	lsrs	r3, r3, #9
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf14      	ite	ne
 800275e:	2301      	movne	r3, #1
 8002760:	2300      	moveq	r3, #0
 8002762:	b2db      	uxtb	r3, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fef6 	bl	800256c <lfs_tag_type1>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <lfs_gstate_hasmovehere+0x30>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	6839      	ldr	r1, [r7, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fe41 	bl	8002414 <lfs_pair_cmp>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <lfs_gstate_hasmovehere+0x30>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <lfs_gstate_hasmovehere+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f9da 	bl	8001b72 <lfs_fromle32>
 80027be:	4602      	mov	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f9d2 	bl	8001b72 <lfs_fromle32>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f9ca 	bl	8001b72 <lfs_fromle32>
 80027de:	4602      	mov	r2, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f9c5 	bl	8001b88 <lfs_tole32>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f9bd 	bl	8001b88 <lfs_tole32>
 800280e:	4602      	mov	r2, r0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f9b5 	bl	8001b88 <lfs_tole32>
 800281e:	4602      	mov	r2, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f99a 	bl	8001b72 <lfs_fromle32>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f992 	bl	8001b72 <lfs_fromle32>
 800284e:	4602      	mov	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff f98d 	bl	8001b88 <lfs_tole32>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f985 	bl	8001b88 <lfs_tole32>
 800287e:	4602      	mov	r2, r0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f96a 	bl	8001b72 <lfs_fromle32>
 800289e:	4602      	mov	r2, r0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f962 	bl	8001b72 <lfs_fromle32>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	605a      	str	r2, [r3, #4]
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f95d 	bl	8001b88 <lfs_tole32>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f955 	bl	8001b88 <lfs_tole32>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	605a      	str	r2, [r3, #4]
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f93a 	bl	8001b72 <lfs_fromle32>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f932 	bl	8001b72 <lfs_fromle32>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f92a 	bl	8001b72 <lfs_fromle32>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f922 	bl	8001b72 <lfs_fromle32>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff f91a 	bl	8001b72 <lfs_fromle32>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f912 	bl	8001b72 <lfs_fromle32>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	615a      	str	r2, [r3, #20]
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f90d 	bl	8001b88 <lfs_tole32>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f905 	bl	8001b88 <lfs_tole32>
 800297e:	4602      	mov	r2, r0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f8fd 	bl	8001b88 <lfs_tole32>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f8f5 	bl	8001b88 <lfs_tole32>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff f8ed 	bl	8001b88 <lfs_tole32>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f8e5 	bl	8001b88 <lfs_tole32>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	615a      	str	r2, [r3, #20]
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e009      	b.n	80029f0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d101      	bne.n	80029ea <lfs_mlist_isopen+0x1e>
            return true;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e007      	b.n	80029fa <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f1      	bne.n	80029dc <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3328      	adds	r3, #40	@ 0x28
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e00d      	b.n	8002a34 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d105      	bne.n	8002a2e <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	601a      	str	r2, [r3, #0]
            break;
 8002a2c:	e007      	b.n	8002a3e <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ed      	bne.n	8002a18 <lfs_mlist_remove+0x12>
        }
    }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <lfs_fs_disk_version+0x18>)
    }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	00020001 	.word	0x00020001

08002a8c <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffeb 	bl	8002a70 <lfs_fs_disk_version>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	b29b      	uxth	r3, r3

}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffdd 	bl	8002a70 <lfs_fs_disk_version>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29b      	uxth	r3, r3
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ffe5 	bl	8002ac2 <lfs_alloc_ckpoint>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8002b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b24:	fb01 f202 	mul.w	r2, r1, r2
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d212      	bcs.n	8002b5c <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	441a      	add	r2, r3
 8002b40:	7811      	ldrb	r1, [r2, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	f002 0207 	and.w	r2, r2, #7
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8002b54:	4403      	add	r3, r0
 8002b56:	430a      	orrs	r2, r1
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	4413      	add	r3, r2
            % lfs->block_count;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b86:	fb01 f202 	mul.w	r2, r1, r2
 8002b8a:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    lfs->lookahead.size = lfs_min(
 8002b9c:	00da      	lsls	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7fe ff74 	bl	8001a92 <lfs_min>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f00c fdd2 	bl	800f766 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4909      	ldr	r1, [pc, #36]	@ (8002bec <lfs_alloc_scan+0x80>)
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f004 ffc7 	bl	8007b5c <lfs_fs_traverse_>
 8002bce:	60f8      	str	r0, [r7, #12]
    if (err) {
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ff81 	bl	8002ade <lfs_alloc_drop>
        return err;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	e000      	b.n	8002be2 <lfs_alloc_scan+0x76>
    }

    return 0;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	08002b01 	.word	0x08002b01

08002bf0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8002bfa:	e04d      	b.n	8002c98 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d131      	bne.n	8002c84 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	4413      	add	r3, r2
                        % lfs->block_count;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002c2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c32:	fb01 f202 	mul.w	r2, r1, r2
 8002c36:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d211      	bcs.n	8002c80 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1dd      	bne.n	8002c3c <lfs_alloc+0x4c>
                        return 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e032      	b.n	8002cea <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ab      	bcc.n	8002bfc <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d116      	bne.n	8002cda <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	4413      	add	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002cba:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cbe:	fb01 f202 	mul.w	r2, r1, r2
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf4 <lfs_alloc+0x104>)
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	f240 22bd 	movw	r2, #701	@ 0x2bd
 8002ccc:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <lfs_alloc+0x108>)
 8002cce:	480b      	ldr	r0, [pc, #44]	@ (8002cfc <lfs_alloc+0x10c>)
 8002cd0:	f00c fce4 	bl	800f69c <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8002cd4:	f06f 031b 	mvn.w	r3, #27
 8002cd8:	e007      	b.n	8002cea <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff46 	bl	8002b6c <lfs_alloc_scan>
 8002ce0:	60f8      	str	r0, [r7, #12]
        if(err) {
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d088      	beq.n	8002bfa <lfs_alloc+0xa>
            return err;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08010688 	.word	0x08010688
 8002cf8:	08010540 	.word	0x08010540
 8002cfc:	0801065c 	.word	0x0801065c

08002d00 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08f      	sub	sp, #60	@ 0x3c
 8002d04:	af04      	add	r7, sp, #16
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	333c      	adds	r3, #60	@ 0x3c
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fd20 	bl	800276c <lfs_gstate_hasmovehere>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80ca 	beq.w	8002ec8 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fc63 	bl	8002600 <lfs_tag_id>
 8002d3a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80c3 	beq.w	8002ec8 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fc5a 	bl	8002600 <lfs_tag_id>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461c      	mov	r4, r3
 8002d50:	6838      	ldr	r0, [r7, #0]
 8002d52:	f7ff fc55 	bl	8002600 <lfs_tag_id>
 8002d56:	4603      	mov	r3, r0
 8002d58:	429c      	cmp	r4, r3
 8002d5a:	d102      	bne.n	8002d62 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8002d5c:	f06f 0301 	mvn.w	r3, #1
 8002d60:	e0be      	b.n	8002ee0 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fc4a 	bl	8002600 <lfs_tag_id>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461c      	mov	r4, r3
 8002d70:	6838      	ldr	r0, [r7, #0]
 8002d72:	f7ff fc45 	bl	8002600 <lfs_tag_id>
 8002d76:	4603      	mov	r3, r0
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	f080 80a5 	bcs.w	8002ec8 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002d84:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002d86:	e09f      	b.n	8002ec8 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fc55 	bl	800263a <lfs_tag_dsize>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8002d9c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8002da2:	2204      	movs	r2, #4
 8002da4:	9203      	str	r2, [sp, #12]
 8002da6:	f107 0210 	add.w	r2, r7, #16
 8002daa:	9202      	str	r2, [sp, #8]
 8002dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dae:	9201      	str	r2, [sp, #4]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2304      	movs	r3, #4
 8002db4:	460a      	mov	r2, r1
 8002db6:	2100      	movs	r1, #0
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7fe ff45 	bl	8001c48 <lfs_bd_read>
 8002dbe:	61b8      	str	r0, [r7, #24]
        if (err) {
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <lfs_dir_getslice+0xca>
            return err;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	e08a      	b.n	8002ee0 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fee7 	bl	8001ba0 <lfs_frombe32>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4053      	eors	r3, r2
 8002dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ddc:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fc0e 	bl	8002600 <lfs_tag_id>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02b      	beq.n	8002e42 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002dea:	69f8      	ldr	r0, [r7, #28]
 8002dec:	f7ff fbbe 	bl	800256c <lfs_tag_type1>
 8002df0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8002df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df6:	d124      	bne.n	8002e42 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8002df8:	69f8      	ldr	r0, [r7, #28]
 8002dfa:	f7ff fc01 	bl	8002600 <lfs_tag_id>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461c      	mov	r4, r3
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fbf9 	bl	8002600 <lfs_tag_id>
 8002e0e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8002e10:	429c      	cmp	r4, r3
 8002e12:	d816      	bhi.n	8002e42 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	1ad2      	subs	r2, r2, r3
 8002e1a:	4b33      	ldr	r3, [pc, #204]	@ (8002ee8 <lfs_dir_getslice+0x1e8>)
 8002e1c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8002e1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d102      	bne.n	8002e32 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8002e2c:	f06f 0301 	mvn.w	r3, #1
 8002e30:	e056      	b.n	8002ee0 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002e32:	69f8      	ldr	r0, [r7, #28]
 8002e34:	f7ff fbd7 	bl	80025e6 <lfs_tag_splice>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	029a      	lsls	r2, r3, #10
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	4413      	add	r3, r2
 8002e40:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	401a      	ands	r2, r3
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	1ac9      	subs	r1, r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	400b      	ands	r3, r1
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d138      	bne.n	8002ec8 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 8002e56:	69f8      	ldr	r0, [r7, #28]
 8002e58:	f7ff fb75 	bl	8002546 <lfs_tag_isdelete>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 8002e62:	f06f 0301 	mvn.w	r3, #1
 8002e66:	e03b      	b.n	8002ee0 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8002e68:	69f8      	ldr	r0, [r7, #28]
 8002e6a:	f7ff fbd9 	bl	8002620 <lfs_tag_size>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fe0d 	bl	8001a92 <lfs_min>
 8002e78:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8002e7a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e84:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8002e86:	3204      	adds	r2, #4
 8002e88:	6979      	ldr	r1, [r7, #20]
 8002e8a:	9103      	str	r1, [sp, #12]
 8002e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e8e:	9102      	str	r1, [sp, #8]
 8002e90:	9201      	str	r2, [sp, #4]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	4602      	mov	r2, r0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7fe fed4 	bl	8001c48 <lfs_bd_read>
 8002ea0:	61b8      	str	r0, [r7, #24]
            if (err) {
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <lfs_dir_getslice+0x1ac>
                return err;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	e019      	b.n	8002ee0 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8002eac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	18d0      	adds	r0, r2, r3
 8002eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f00c fc53 	bl	800f766 <memset>

            return tag + gdiff;
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	e00b      	b.n	8002ee0 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fbb5 	bl	800263a <lfs_tag_dsize>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f4bf af56 	bcs.w	8002d88 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8002edc:	f06f 0301 	mvn.w	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	372c      	adds	r7, #44	@ 0x2c
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	000ffc00 	.word	0x000ffc00

08002eec <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af04      	add	r7, sp, #16
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8002efa:	6838      	ldr	r0, [r7, #0]
 8002efc:	f7ff fb90 	bl	8002620 <lfs_tag_size>
 8002f00:	4603      	mov	r3, r0
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff fef4 	bl	8002d00 <lfs_dir_getslice>
 8002f18:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b08c      	sub	sp, #48	@ 0x30
 8002f26:	af04      	add	r7, sp, #16
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8002f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f32:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8002f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f38:	441a      	add	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f240 80c0 	bls.w	80030c6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8002f46:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8002f4a:	e0c1      	b.n	80030d0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f4e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d03f      	beq.n	8002fd6 <lfs_dir_getread+0xb4>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f113 0f02 	cmn.w	r3, #2
 8002f5e:	d13a      	bne.n	8002fd6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8002f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d232      	bcs.n	8002fd6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d324      	bcc.n	8002fc4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f84:	1acb      	subs	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	69b8      	ldr	r0, [r7, #24]
 8002f8c:	f7fe fd81 	bl	8001a92 <lfs_min>
 8002f90:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f9c:	1acb      	subs	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	69f8      	ldr	r0, [r7, #28]
 8002fa6:	f00c fc8a 	bl	800f8be <memcpy>

                data += diff;
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4413      	add	r3, r2
 8002fb0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8002fba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8002fc2:	e080      	b.n	80030c6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	69b8      	ldr	r0, [r7, #24]
 8002fd0:	f7fe fd5f 	bl	8001a92 <lfs_min>
 8002fd4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f113 0f02 	cmn.w	r3, #2
 8002fde:	d13a      	bne.n	8003056 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8002fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d232      	bcs.n	8003056 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d324      	bcc.n	8003044 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003004:	1acb      	subs	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	4619      	mov	r1, r3
 800300a:	69b8      	ldr	r0, [r7, #24]
 800300c:	f7fe fd41 	bl	8001a92 <lfs_min>
 8003010:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800301c:	1acb      	subs	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4619      	mov	r1, r3
 8003024:	69f8      	ldr	r0, [r7, #28]
 8003026:	f00c fc4a 	bl	800f8be <memcpy>

                data += diff;
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	4413      	add	r3, r2
 8003030:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003032:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800303a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8003042:	e040      	b.n	80030c6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	4619      	mov	r1, r3
 800304e:	69b8      	ldr	r0, [r7, #24]
 8003050:	f7fe fd1f 	bl	8001a92 <lfs_min>
 8003054:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4619      	mov	r1, r3
 8003066:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003068:	f7fe fd23 	bl	8001ab2 <lfs_aligndown>
 800306c:	4602      	mov	r2, r0
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	441a      	add	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f7fe fd2b 	bl	8001adc <lfs_alignup>
 8003086:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f7fe fcfe 	bl	8001a92 <lfs_min>
 8003096:	4602      	mov	r2, r0
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	6889      	ldr	r1, [r1, #8]
 80030a8:	9102      	str	r1, [sp, #8]
 80030aa:	9201      	str	r2, [sp, #4]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fe23 	bl	8002d00 <lfs_dir_getslice>
 80030ba:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da01      	bge.n	80030c6 <lfs_dir_getread+0x1a4>
            return err;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	e004      	b.n	80030d0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80030c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f47f af3f 	bne.w	8002f4c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <lfs_dir_traverse_filter+0x1e>
 80030f2:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <lfs_dir_traverse_filter+0xac>)
 80030f4:	e000      	b.n	80030f8 <lfs_dir_traverse_filter+0x20>
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80030f8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	405a      	eors	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d014      	beq.n	8003134 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fa19 	bl	8002546 <lfs_tag_isdelete>
 8003114:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <lfs_dir_traverse_filter+0xac>)
 800311e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <lfs_dir_traverse_filter+0xb4>)
 8003126:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003128:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800312c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d104      	bne.n	800313e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
        return true;
 800313a:	2301      	movs	r3, #1
 800313c:	e01e      	b.n	800317c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	f7ff fa14 	bl	800256c <lfs_tag_type1>
 8003144:	4603      	mov	r3, r0
 8003146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314a:	d116      	bne.n	800317a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800314c:	68b8      	ldr	r0, [r7, #8]
 800314e:	f7ff fa57 	bl	8002600 <lfs_tag_id>
 8003152:	4603      	mov	r3, r0
 8003154:	461c      	mov	r4, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fa50 	bl	8002600 <lfs_tag_id>
 8003160:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003162:	429c      	cmp	r4, r3
 8003164:	d809      	bhi.n	800317a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003166:	68b8      	ldr	r0, [r7, #8]
 8003168:	f7ff fa3d 	bl	80025e6 <lfs_tag_splice>
 800316c:	4603      	mov	r3, r0
 800316e:	029a      	lsls	r2, r3, #10
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	441a      	add	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	601a      	str	r2, [r3, #0]
    }

    return false;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	7ffffc00 	.word	0x7ffffc00
 8003188:	700ffc00 	.word	0x700ffc00
 800318c:	000ffc00 	.word	0x000ffc00

08003190 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b0c1      	sub	sp, #260	@ 0x104
 8003194:	af04      	add	r7, sp, #16
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80031a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80031ae:	6838      	ldr	r0, [r7, #0]
 80031b0:	f7ff fa43 	bl	800263a <lfs_tag_dsize>
 80031b4:	4602      	mov	r2, r0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	441a      	add	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d237      	bcs.n	8003232 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 80031c2:	6838      	ldr	r0, [r7, #0]
 80031c4:	f7ff fa39 	bl	800263a <lfs_tag_dsize>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80031d0:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 80031d6:	2204      	movs	r2, #4
 80031d8:	9203      	str	r2, [sp, #12]
 80031da:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80031de:	9202      	str	r2, [sp, #8]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	9201      	str	r2, [sp, #4]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2304      	movs	r3, #4
 80031e8:	460a      	mov	r2, r1
 80031ea:	2100      	movs	r1, #0
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7fe fd2b 	bl	8001c48 <lfs_bd_read>
 80031f2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 80031f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <lfs_dir_traverse+0x74>
                    return err;
 80031fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003202:	e3a5      	b.n	8003950 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe fcca 	bl	8001ba0 <lfs_frombe32>
 800320c:	4602      	mov	r2, r0
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4053      	eors	r3, r2
 8003212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003216:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8003224:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003228:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	e01b      	b.n	800326a <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003236:	2b00      	cmp	r3, #0
 8003238:	dd13      	ble.n	8003262 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800323a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8003242:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800324c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003250:	3308      	adds	r3, #8
 8003252:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8003256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325a:	3b01      	subs	r3, #1
 800325c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003260:	e003      	b.n	800326a <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8003268:	e2a1      	b.n	80037ae <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800326a:	4b7e      	ldr	r3, [pc, #504]	@ (8003464 <lfs_dir_traverse+0x2d4>)
 800326c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003270:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003276:	405a      	eors	r2, r3
 8003278:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800327c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003280:	400b      	ands	r3, r1
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	f040 8284 	bne.w	8003792 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800328a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800328e:	f7ff f9b7 	bl	8002600 <lfs_tag_id>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80ef 	beq.w	8003478 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800329a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d906      	bls.n	80032b0 <lfs_dir_traverse+0x120>
 80032a2:	4b71      	ldr	r3, [pc, #452]	@ (8003468 <lfs_dir_traverse+0x2d8>)
 80032a4:	4a71      	ldr	r2, [pc, #452]	@ (800346c <lfs_dir_traverse+0x2dc>)
 80032a6:	f240 31c2 	movw	r1, #962	@ 0x3c2
 80032aa:	4871      	ldr	r0, [pc, #452]	@ (8003470 <lfs_dir_traverse+0x2e0>)
 80032ac:	f00c f846 	bl	800f33c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80032b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	33f0      	adds	r3, #240	@ 0xf0
 80032c0:	443b      	add	r3, r7
 80032c2:	3b98      	subs	r3, #152	@ 0x98
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	33f0      	adds	r3, #240	@ 0xf0
 80032d6:	443b      	add	r3, r7
 80032d8:	3b94      	subs	r3, #148	@ 0x94
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	33f0      	adds	r3, #240	@ 0xf0
 80032ec:	443b      	add	r3, r7
 80032ee:	3b90      	subs	r3, #144	@ 0x90
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	33f0      	adds	r3, #240	@ 0xf0
 8003302:	443b      	add	r3, r7
 8003304:	3b8c      	subs	r3, #140	@ 0x8c
 8003306:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	33f0      	adds	r3, #240	@ 0xf0
 800331a:	443b      	add	r3, r7
 800331c:	3b88      	subs	r3, #136	@ 0x88
 800331e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	33f0      	adds	r3, #240	@ 0xf0
 8003332:	443b      	add	r3, r7
 8003334:	3b84      	subs	r3, #132	@ 0x84
 8003336:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	33f0      	adds	r3, #240	@ 0xf0
 800334a:	443b      	add	r3, r7
 800334c:	3b80      	subs	r3, #128	@ 0x80
 800334e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	33f0      	adds	r3, #240	@ 0xf0
 8003362:	443b      	add	r3, r7
 8003364:	3b7c      	subs	r3, #124	@ 0x7c
 8003366:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	33f0      	adds	r3, #240	@ 0xf0
 800337a:	443b      	add	r3, r7
 800337c:	3b7a      	subs	r3, #122	@ 0x7a
 800337e:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	33f0      	adds	r3, #240	@ 0xf0
 8003392:	443b      	add	r3, r7
 8003394:	3b78      	subs	r3, #120	@ 0x78
 8003396:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	33f0      	adds	r3, #240	@ 0xf0
 80033aa:	443b      	add	r3, r7
 80033ac:	3b74      	subs	r3, #116	@ 0x74
 80033ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	33f0      	adds	r3, #240	@ 0xf0
 80033c2:	443b      	add	r3, r7
 80033c4:	3b70      	subs	r3, #112	@ 0x70
 80033c6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	33f0      	adds	r3, #240	@ 0xf0
 80033da:	443b      	add	r3, r7
 80033dc:	3b6c      	subs	r3, #108	@ 0x6c
 80033de:	6019      	str	r1, [r3, #0]
 80033e0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	33f0      	adds	r3, #240	@ 0xf0
 80033ee:	443b      	add	r3, r7
 80033f0:	3b68      	subs	r3, #104	@ 0x68
 80033f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	33f0      	adds	r3, #240	@ 0xf0
 8003406:	443b      	add	r3, r7
 8003408:	3b68      	subs	r3, #104	@ 0x68
 800340a:	3304      	adds	r3, #4
 800340c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003414:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8003418:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800341c:	3301      	adds	r3, #1
 800341e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <lfs_dir_traverse+0x2e4>)
 8003442:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8003446:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	440b      	add	r3, r1
 800345c:	3304      	adds	r3, #4
 800345e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8003462:	e19d      	b.n	80037a0 <lfs_dir_traverse+0x610>
 8003464:	7ff00000 	.word	0x7ff00000
 8003468:	0801068c 	.word	0x0801068c
 800346c:	0801137c 	.word	0x0801137c
 8003470:	08010540 	.word	0x08010540
 8003474:	080030d9 	.word	0x080030d9
            }
        }

popped:
 8003478:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800347a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800347e:	f7ff f8bf 	bl	8002600 <lfs_tag_id>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f8b8 	bl	8002600 <lfs_tag_id>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003494:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8003498:	4293      	cmp	r3, r2
 800349a:	f200 817c 	bhi.w	8003796 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f8ad 	bl	8002600 <lfs_tag_id>
 80034a6:	4603      	mov	r3, r0
 80034a8:	461a      	mov	r2, r3
 80034aa:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80034ae:	4293      	cmp	r3, r2
 80034b0:	f240 8171 	bls.w	8003796 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80034b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f878 	bl	80025ac <lfs_tag_type3>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f43f ae75 	beq.w	80031ae <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f870 	bl	80025ac <lfs_tag_type3>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	f240 1301 	movw	r3, #257	@ 0x101
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 80e0 	bne.w	800369a <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80034da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034de:	4ab1      	ldr	r2, [pc, #708]	@ (80037a4 <lfs_dir_traverse+0x614>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	f000 815a 	beq.w	800379a <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80034e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	33f0      	adds	r3, #240	@ 0xf0
 80034f4:	443b      	add	r3, r7
 80034f6:	3b98      	subs	r3, #152	@ 0x98
 80034f8:	4618      	mov	r0, r3
 80034fa:	233c      	movs	r3, #60	@ 0x3c
 80034fc:	461a      	mov	r2, r3
 80034fe:	2100      	movs	r1, #0
 8003500:	f00c f931 	bl	800f766 <memset>
 8003504:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	33f0      	adds	r3, #240	@ 0xf0
 8003512:	443b      	add	r3, r7
 8003514:	3b98      	subs	r3, #152	@ 0x98
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	33f0      	adds	r3, #240	@ 0xf0
 8003528:	443b      	add	r3, r7
 800352a:	3b94      	subs	r3, #148	@ 0x94
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	33f0      	adds	r3, #240	@ 0xf0
 800353e:	443b      	add	r3, r7
 8003540:	3b90      	subs	r3, #144	@ 0x90
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	33f0      	adds	r3, #240	@ 0xf0
 8003554:	443b      	add	r3, r7
 8003556:	3b8c      	subs	r3, #140	@ 0x8c
 8003558:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	33f0      	adds	r3, #240	@ 0xf0
 800356c:	443b      	add	r3, r7
 800356e:	3b88      	subs	r3, #136	@ 0x88
 8003570:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	33f0      	adds	r3, #240	@ 0xf0
 8003584:	443b      	add	r3, r7
 8003586:	3b84      	subs	r3, #132	@ 0x84
 8003588:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	33f0      	adds	r3, #240	@ 0xf0
 800359c:	443b      	add	r3, r7
 800359e:	3b80      	subs	r3, #128	@ 0x80
 80035a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	33f0      	adds	r3, #240	@ 0xf0
 80035b4:	443b      	add	r3, r7
 80035b6:	3b7c      	subs	r3, #124	@ 0x7c
 80035b8:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	33f0      	adds	r3, #240	@ 0xf0
 80035cc:	443b      	add	r3, r7
 80035ce:	3b7a      	subs	r3, #122	@ 0x7a
 80035d0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	33f0      	adds	r3, #240	@ 0xf0
 80035e4:	443b      	add	r3, r7
 80035e6:	3b78      	subs	r3, #120	@ 0x78
 80035e8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	33f0      	adds	r3, #240	@ 0xf0
 80035fc:	443b      	add	r3, r7
 80035fe:	3b74      	subs	r3, #116	@ 0x74
 8003600:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	33f0      	adds	r3, #240	@ 0xf0
 8003614:	443b      	add	r3, r7
 8003616:	3b70      	subs	r3, #112	@ 0x70
 8003618:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800361c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800361e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003622:	3301      	adds	r3, #1
 8003624:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8003628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fff8 	bl	8002620 <lfs_tag_size>
 8003630:	4603      	mov	r3, r0
 8003632:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8003636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe ffe1 	bl	8002600 <lfs_tag_id>
 800363e:	4603      	mov	r3, r0
 8003640:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003648:	60bb      	str	r3, [r7, #8]
            off = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8003660:	4b51      	ldr	r3, [pc, #324]	@ (80037a8 <lfs_dir_traverse+0x618>)
 8003662:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8003666:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800366a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800366e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003672:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8003676:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800367a:	3301      	adds	r3, #1
 800367c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8003680:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 8003684:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	b29a      	uxth	r2, r3
 800368c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8003690:	4413      	add	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8003698:	e589      	b.n	80031ae <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800369a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe ff85 	bl	80025ac <lfs_tag_type3>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80036a8:	d159      	bne.n	800375e <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036b0:	e04b      	b.n	800374a <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80036ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	461a      	mov	r2, r3
 80036c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80036d4:	051c      	lsls	r4, r3, #20
 80036d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe ff91 	bl	8002600 <lfs_tag_id>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80036e6:	4413      	add	r3, r2
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	ea44 0103 	orr.w	r1, r4, r3
 80036ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	461a      	mov	r2, r3
 80036fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003700:	4413      	add	r3, r2
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8003706:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003718:	4413      	add	r3, r2
 800371a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800371c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003720:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003724:	4798      	blx	r3
 8003726:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800372a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800372e:	2b00      	cmp	r3, #0
 8003730:	da02      	bge.n	8003738 <lfs_dir_traverse+0x5a8>
                    return res;
 8003732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003736:	e10b      	b.n	8003950 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8003738:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d12e      	bne.n	800379e <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003744:	3301      	adds	r3, #1
 8003746:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe ff67 	bl	8002620 <lfs_tag_size>
 8003752:	4602      	mov	r2, r0
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003758:	4293      	cmp	r3, r2
 800375a:	d3aa      	bcc.n	80036b2 <lfs_dir_traverse+0x522>
 800375c:	e527      	b.n	80031ae <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800375e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003762:	029a      	lsls	r2, r3, #10
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	18d1      	adds	r1, r2, r3
 8003768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003770:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003774:	4798      	blx	r3
 8003776:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800377a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800377e:	2b00      	cmp	r3, #0
 8003780:	da02      	bge.n	8003788 <lfs_dir_traverse+0x5f8>
                return res;
 8003782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003786:	e0e3      	b.n	8003950 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8003788:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <lfs_dir_traverse+0x61c>
 8003790:	e50d      	b.n	80031ae <lfs_dir_traverse+0x1e>
                continue;
 8003792:	bf00      	nop
 8003794:	e50b      	b.n	80031ae <lfs_dir_traverse+0x1e>
            continue;
 8003796:	bf00      	nop
 8003798:	e509      	b.n	80031ae <lfs_dir_traverse+0x1e>
                continue;
 800379a:	bf00      	nop
 800379c:	e507      	b.n	80031ae <lfs_dir_traverse+0x1e>
                    break;
 800379e:	bf00      	nop
        {
 80037a0:	e505      	b.n	80031ae <lfs_dir_traverse+0x1e>
 80037a2:	bf00      	nop
 80037a4:	080030d9 	.word	0x080030d9
 80037a8:	600ffc00 	.word	0x600ffc00
                break;
 80037ac:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80037ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80ca 	beq.w	800394c <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80037b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	33f0      	adds	r3, #240	@ 0xf0
 80037c8:	443b      	add	r3, r7
 80037ca:	3b98      	subs	r3, #152	@ 0x98
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80037d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	33f0      	adds	r3, #240	@ 0xf0
 80037e0:	443b      	add	r3, r7
 80037e2:	3b94      	subs	r3, #148	@ 0x94
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80037e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	33f0      	adds	r3, #240	@ 0xf0
 80037f8:	443b      	add	r3, r7
 80037fa:	3b90      	subs	r3, #144	@ 0x90
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8003800:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	33f0      	adds	r3, #240	@ 0xf0
 8003810:	443b      	add	r3, r7
 8003812:	3b8c      	subs	r3, #140	@ 0x8c
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800381a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800381e:	1e5a      	subs	r2, r3, #1
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	33f0      	adds	r3, #240	@ 0xf0
 800382a:	443b      	add	r3, r7
 800382c:	3b88      	subs	r3, #136	@ 0x88
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8003834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003838:	1e5a      	subs	r2, r3, #1
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	33f0      	adds	r3, #240	@ 0xf0
 8003844:	443b      	add	r3, r7
 8003846:	3b84      	subs	r3, #132	@ 0x84
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800384e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	33f0      	adds	r3, #240	@ 0xf0
 800385e:	443b      	add	r3, r7
 8003860:	3b80      	subs	r3, #128	@ 0x80
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8003868:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	33f0      	adds	r3, #240	@ 0xf0
 8003878:	443b      	add	r3, r7
 800387a:	3b7c      	subs	r3, #124	@ 0x7c
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8003882:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003886:	1e5a      	subs	r2, r3, #1
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	33f0      	adds	r3, #240	@ 0xf0
 8003892:	443b      	add	r3, r7
 8003894:	3b7a      	subs	r3, #122	@ 0x7a
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800389c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	33f0      	adds	r3, #240	@ 0xf0
 80038ac:	443b      	add	r3, r7
 80038ae:	3b78      	subs	r3, #120	@ 0x78
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 80038b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80038ba:	1e5a      	subs	r2, r3, #1
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	33f0      	adds	r3, #240	@ 0xf0
 80038c6:	443b      	add	r3, r7
 80038c8:	3b74      	subs	r3, #116	@ 0x74
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 80038d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	33f0      	adds	r3, #240	@ 0xf0
 80038e0:	443b      	add	r3, r7
 80038e2:	3b70      	subs	r3, #112	@ 0x70
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 80038ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	33f0      	adds	r3, #240	@ 0xf0
 80038fa:	443b      	add	r3, r7
 80038fc:	3b6c      	subs	r3, #108	@ 0x6c
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8003902:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003906:	1e5a      	subs	r2, r3, #1
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	33f0      	adds	r3, #240	@ 0xf0
 8003912:	443b      	add	r3, r7
 8003914:	3b68      	subs	r3, #104	@ 0x68
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800391c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	33f0      	adds	r3, #240	@ 0xf0
 800392c:	443b      	add	r3, r7
 800392e:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8003932:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003936:	3204      	adds	r2, #4
 8003938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800393c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8003940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003944:	3b01      	subs	r3, #1
 8003946:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800394a:	e596      	b.n	800347a <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800394c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8003950:	4618      	mov	r0, r3
 8003952:	37f4      	adds	r7, #244	@ 0xf4
 8003954:	46bd      	mov	sp, r7
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395a:	b0a5      	sub	sp, #148	@ 0x94
 800395c:	af04      	add	r7, sp, #16
 800395e:	6178      	str	r0, [r7, #20]
 8003960:	6139      	str	r1, [r7, #16]
 8003962:	60fa      	str	r2, [r7, #12]
 8003964:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00f      	beq.n	8003994 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	429a      	cmp	r2, r3
 800397e:	d206      	bcs.n	800398e <lfs_dir_fetchmatch+0x36>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3304      	adds	r3, #4
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800398e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003992:	e3a4      	b.n	80040de <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8003994:	2300      	movs	r3, #0
 8003996:	647b      	str	r3, [r7, #68]	@ 0x44
 8003998:	2300      	movs	r3, #0
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 80039a0:	2300      	movs	r3, #0
 80039a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80039a4:	e05a      	b.n	8003a5c <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 80039a6:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80039a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80039b0:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80039b2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80039b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80039bc:	2104      	movs	r1, #4
 80039be:	9103      	str	r1, [sp, #12]
 80039c0:	9202      	str	r2, [sp, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	9201      	str	r2, [sp, #4]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2304      	movs	r3, #4
 80039ca:	4602      	mov	r2, r0
 80039cc:	2100      	movs	r1, #0
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7fe f93a 	bl	8001c48 <lfs_bd_read>
 80039d4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80039d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	3378      	adds	r3, #120	@ 0x78
 80039dc:	f107 0208 	add.w	r2, r7, #8
 80039e0:	4413      	add	r3, r2
 80039e2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe f8c3 	bl	8001b72 <lfs_fromle32>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3378      	adds	r3, #120	@ 0x78
 80039f4:	f107 0108 	add.w	r1, r7, #8
 80039f8:	440b      	add	r3, r1
 80039fa:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80039fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <lfs_dir_fetchmatch+0xb8>
 8003a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a06:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003a0a:	d001      	beq.n	8003a10 <lfs_dir_fetchmatch+0xb8>
            return err;
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a0e:	e366      	b.n	80040de <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 8003a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a12:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003a16:	d01e      	beq.n	8003a56 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8003a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	3378      	adds	r3, #120	@ 0x78
 8003a1e:	f107 0208 	add.w	r2, r7, #8
 8003a22:	4413      	add	r3, r2
 8003a24:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003a28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	bfb8      	it	lt
 8003a34:	425b      	neglt	r3, r3
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3378      	adds	r3, #120	@ 0x78
 8003a3a:	f107 0108 	add.w	r1, r7, #8
 8003a3e:	440b      	add	r3, r1
 8003a40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f7fe f885 	bl	8001b56 <lfs_scmp>
 8003a4c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	dd01      	ble.n	8003a56 <lfs_dir_fetchmatch+0xfe>
            r = i;
 8003a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a54:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8003a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a58:	3301      	adds	r3, #1
 8003a5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	dda1      	ble.n	80039a6 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8003a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	bfb8      	it	lt
 8003a6c:	425b      	neglt	r3, r3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8003a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	bfb8      	it	lt
 8003a86:	425b      	neglt	r3, r3
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8003a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	bfb8      	it	lt
 8003a9e:	425b      	neglt	r3, r3
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	3378      	adds	r3, #120	@ 0x78
 8003aa4:	f107 0208 	add.w	r2, r7, #8
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8003ab8:	2300      	movs	r3, #0
 8003aba:	673b      	str	r3, [r7, #112]	@ 0x70
 8003abc:	e2fb      	b.n	80040b6 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8003ace:	4aa9      	ldr	r2, [pc, #676]	@ (8003d74 <lfs_dir_fetchmatch+0x41c>)
 8003ad0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ad8:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 8003ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ae4:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe f846 	bl	8001b88 <lfs_tole32>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3308      	adds	r3, #8
 8003b06:	2204      	movs	r2, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0e:	f004 feb9 	bl	8008884 <lfs_crc>
 8003b12:	4603      	mov	r3, r0
 8003b14:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe f829 	bl	8001b72 <lfs_fromle32>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8003b26:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003b28:	f7fe fd87 	bl	800263a <lfs_tag_dsize>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b30:	4413      	add	r3, r2
 8003b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8003b34:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3a:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2204      	movs	r2, #4
 8003b42:	9203      	str	r2, [sp, #12]
 8003b44:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003b48:	9202      	str	r2, [sp, #8]
 8003b4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b4c:	9201      	str	r2, [sp, #4]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4603      	mov	r3, r0
 8003b52:	460a      	mov	r2, r1
 8003b54:	2100      	movs	r1, #0
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7fe f876 	bl	8001c48 <lfs_bd_read>
 8003b5c:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d006      	beq.n	8003b72 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8003b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b66:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003b6a:	f000 81d6 	beq.w	8003f1a <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 8003b6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b70:	e2b5      	b.n	80040de <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fe82 	bl	8008884 <lfs_crc>
 8003b80:	4603      	mov	r3, r0
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe f80a 	bl	8001ba0 <lfs_frombe32>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b90:	4053      	eors	r3, r2
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8003b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe fcc7 	bl	800252a <lfs_tag_isvalid>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8003ba8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003baa:	f7fe fcef 	bl	800258c <lfs_tag_type2>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 8003bbe:	e1bb      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8003bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fd39 	bl	800263a <lfs_tag_dsize>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bcc:	441a      	add	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	f200 81a2 	bhi.w	8003f1e <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 8003bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bdc:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fcd3 	bl	800258c <lfs_tag_type2>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003bec:	d15e      	bne.n	8003cac <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8003bee:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bf4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bfc:	3204      	adds	r2, #4
 8003bfe:	2104      	movs	r1, #4
 8003c00:	9103      	str	r1, [sp, #12]
 8003c02:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003c06:	9102      	str	r1, [sp, #8]
 8003c08:	9201      	str	r2, [sp, #4]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	4602      	mov	r2, r0
 8003c10:	2100      	movs	r1, #0
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7fe f818 	bl	8001c48 <lfs_bd_read>
 8003c18:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8003c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 8003c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c22:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003c26:	f000 817c 	beq.w	8003f22 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8003c2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8003c2c:	e257      	b.n	80040de <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fd ff9e 	bl	8001b72 <lfs_fromle32>
 8003c36:	4603      	mov	r3, r0
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	f040 8171 	bne.w	8003f26 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fcc0 	bl	80025cc <lfs_tag_chunk>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	07db      	lsls	r3, r3, #31
 8003c50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c52:	4053      	eors	r3, r2
 8003c54:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8003c5e:	2204      	movs	r2, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 fe0f 	bl	8008884 <lfs_crc>
 8003c66:	4602      	mov	r2, r0
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8003c6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fce1 	bl	800263a <lfs_tag_dsize>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c7c:	441a      	add	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c86:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8003c8e:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8003c90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8003c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8003ca2:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003caa:	e73c      	b.n	8003b26 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8003cac:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbc:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fcba 	bl	800263a <lfs_tag_dsize>
 8003cc6:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8003cc8:	3b04      	subs	r3, #4
 8003cca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003cce:	9203      	str	r2, [sp, #12]
 8003cd0:	9302      	str	r3, [sp, #8]
 8003cd2:	9501      	str	r5, [sp, #4]
 8003cd4:	9400      	str	r4, [sp, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4632      	mov	r2, r6
 8003cda:	2100      	movs	r1, #0
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f7fe f950 	bl	8001f82 <lfs_bd_crc>
 8003ce2:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8003ce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8003cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cec:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003cf0:	f000 811b 	beq.w	8003f2a <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf6:	e1f2      	b.n	80040de <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fc36 	bl	800256c <lfs_tag_type1>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d113      	bne.n	8003d2e <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8003d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe fc79 	bl	8002600 <lfs_tag_id>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003d16:	4293      	cmp	r3, r2
 8003d18:	f200 80b6 	bhi.w	8003e88 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fc6e 	bl	8002600 <lfs_tag_id>
 8003d24:	4603      	mov	r3, r0
 8003d26:	3301      	adds	r3, #1
 8003d28:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003d2c:	e0ac      	b.n	8003e88 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fc1b 	bl	800256c <lfs_tag_type1>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3c:	d13a      	bne.n	8003db4 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fc50 	bl	80025e6 <lfs_tag_splice>
 8003d46:	4603      	mov	r3, r0
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003d4e:	4413      	add	r3, r2
 8003d50:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003d54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d56:	4b08      	ldr	r3, [pc, #32]	@ (8003d78 <lfs_dir_fetchmatch+0x420>)
 8003d58:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003d5a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8003d5e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8003d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d109      	bne.n	8003d7c <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8003d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d70:	e08a      	b.n	8003e88 <lfs_dir_fetchmatch+0x530>
 8003d72:	bf00      	nop
 8003d74:	080106cc 	.word	0x080106cc
 8003d78:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8003d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	f000 8081 	beq.w	8003e88 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fc39 	bl	8002600 <lfs_tag_id>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461c      	mov	r4, r3
 8003d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fc33 	bl	8002600 <lfs_tag_id>
 8003d9a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8003d9c:	429c      	cmp	r4, r3
 8003d9e:	d873      	bhi.n	8003e88 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fc1f 	bl	80025e6 <lfs_tag_splice>
 8003da8:	4603      	mov	r3, r0
 8003daa:	029a      	lsls	r2, r3, #10
 8003dac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dae:	4413      	add	r3, r2
 8003db0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003db2:	e069      	b.n	8003e88 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fbd8 	bl	800256c <lfs_tag_type1>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dc2:	d132      	bne.n	8003e2a <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fc00 	bl	80025cc <lfs_tag_chunk>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 8003dde:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003de4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dec:	3204      	adds	r2, #4
 8003dee:	2108      	movs	r1, #8
 8003df0:	9103      	str	r1, [sp, #12]
 8003df2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003df6:	9102      	str	r1, [sp, #8]
 8003df8:	9201      	str	r2, [sp, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	4602      	mov	r2, r0
 8003e00:	2100      	movs	r1, #0
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f7fd ff20 	bl	8001c48 <lfs_bd_read>
 8003e08:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8003e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d006      	beq.n	8003e1e <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8003e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e12:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003e16:	f000 808a 	beq.w	8003f2e <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8003e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e1c:	e15f      	b.n	80040de <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8003e1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fb4d 	bl	80024c2 <lfs_pair_fromle32>
 8003e28:	e02e      	b.n	8003e88 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fbbd 	bl	80025ac <lfs_tag_type3>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d124      	bne.n	8003e88 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8003e3e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e44:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e4c:	3204      	adds	r2, #4
 8003e4e:	2108      	movs	r1, #8
 8003e50:	9103      	str	r1, [sp, #12]
 8003e52:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003e56:	9102      	str	r1, [sp, #8]
 8003e58:	9201      	str	r2, [sp, #4]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4623      	mov	r3, r4
 8003e5e:	4602      	mov	r2, r0
 8003e60:	2100      	movs	r1, #0
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7fd fef0 	bl	8001c48 <lfs_bd_read>
 8003e68:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8003e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8003e70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e72:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003e76:	d05c      	beq.n	8003f32 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8003e78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fcd5 	bl	800282c <lfs_fcrc_fromle32>
                hasfcrc = true;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8003e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e8e:	405a      	eors	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f ae46 	bne.w	8003b26 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003ea0:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8003ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea4:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea8:	f107 0220 	add.w	r2, r7, #32
 8003eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003eb0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003eb4:	4798      	blx	r3
 8003eb6:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da05      	bge.n	8003eca <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003ec4:	d037      	beq.n	8003f36 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 8003ec8:	e109      	b.n	80040de <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8003eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ed4:	e627      	b.n	8003b26 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eda:	405a      	eors	r2, r3
 8003edc:	4b82      	ldr	r3, [pc, #520]	@ (80040e8 <lfs_dir_fetchmatch+0x790>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eea:	e61c      	b.n	8003b26 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f47f ae19 	bne.w	8003b26 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8003ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fb82 	bl	8002600 <lfs_tag_id>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461c      	mov	r4, r3
 8003f00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fb7c 	bl	8002600 <lfs_tag_id>
 8003f08:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8003f0a:	429c      	cmp	r4, r3
 8003f0c:	f63f ae0b 	bhi.w	8003b26 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8003f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f18:	e605      	b.n	8003b26 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8003f1a:	bf00      	nop
 8003f1c:	e00c      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                break;
 8003f1e:	bf00      	nop
 8003f20:	e00a      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003f22:	bf00      	nop
 8003f24:	e008      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003f26:	bf00      	nop
 8003f28:	e006      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8003f2a:	bf00      	nop
 8003f2c:	e004      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8003f36:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d000      	beq.n	8003f42 <lfs_dir_fetchmatch+0x5ea>
 8003f40:	e017      	b.n	8003f72 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fa35 	bl	80023b4 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8003f4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	bfb8      	it	lt
 8003f56:	425b      	neglt	r3, r3
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	3378      	adds	r3, #120	@ 0x78
 8003f5c:	f107 0208 	add.w	r2, r7, #8
 8003f60:	4413      	add	r3, r2
 8003f62:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8003f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f70:	e0a1      	b.n	80040b6 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2200      	movs	r2, #0
 8003f76:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8003f78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03a      	beq.n	8003ff6 <lfs_dir_fetchmatch+0x69e>
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f88:	6992      	ldr	r2, [r2, #24]
 8003f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f8e:	fb01 f202 	mul.w	r2, r1, r2
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d12e      	bne.n	8003ff6 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8003f98:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02a      	beq.n	8003ff6 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8003fa6:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fac:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fb8:	f107 001c 	add.w	r0, r7, #28
 8003fbc:	9003      	str	r0, [sp, #12]
 8003fbe:	9102      	str	r1, [sp, #8]
 8003fc0:	9201      	str	r2, [sp, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	2100      	movs	r1, #0
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f7fd ffd9 	bl	8001f82 <lfs_bd_crc>
 8003fd0:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <lfs_dir_fetchmatch+0x68c>
 8003fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fda:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8003fde:	d001      	beq.n	8003fe4 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8003fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe2:	e07c      	b.n	80040de <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8003fe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	333c      	adds	r3, #60	@ 0x3c
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fbb4 	bl	800276c <lfs_gstate_hasmovehere>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d028      	beq.n	800405c <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe faf6 	bl	8002600 <lfs_tag_id>
 8004014:	4603      	mov	r3, r0
 8004016:	461c      	mov	r4, r3
 8004018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe faf0 	bl	8002600 <lfs_tag_id>
 8004020:	4603      	mov	r3, r0
 8004022:	429c      	cmp	r4, r3
 8004024:	d104      	bne.n	8004030 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8004026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004028:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800402c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800402e:	e015      	b.n	800405c <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8004030:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d011      	beq.n	800405c <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fadf 	bl	8002600 <lfs_tag_id>
 8004042:	4603      	mov	r3, r0
 8004044:	461c      	mov	r4, r3
 8004046:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fad9 	bl	8002600 <lfs_tag_id>
 800404e:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8004050:	429c      	cmp	r4, r3
 8004052:	d203      	bcs.n	800405c <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8004054:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004056:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800405a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800405c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8004064:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe faca 	bl	8002600 <lfs_tag_id>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	8a9b      	ldrh	r3, [r3, #20]
 8004074:	4619      	mov	r1, r3
 8004076:	4610      	mov	r0, r2
 8004078:	f7fd fd0b 	bl	8001a92 <lfs_min>
 800407c:	4603      	mov	r3, r0
 800407e:	b29a      	uxth	r2, r3
 8004080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004084:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8004086:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fa4e 	bl	800252a <lfs_tag_isvalid>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8004094:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004096:	e022      	b.n	80040de <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8004098:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fab0 	bl	8002600 <lfs_tag_id>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	8a9b      	ldrh	r3, [r3, #20]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d202      	bcs.n	80040b2 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 80040ac:	f06f 0301 	mvn.w	r3, #1
 80040b0:	e015      	b.n	80040de <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e013      	b.n	80040de <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 80040b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f77f ad00 	ble.w	8003abe <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4909      	ldr	r1, [pc, #36]	@ (80040ec <lfs_dir_fetchmatch+0x794>)
 80040c8:	9101      	str	r1, [sp, #4]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	f240 5265 	movw	r2, #1381	@ 0x565
 80040d2:	4907      	ldr	r1, [pc, #28]	@ (80040f0 <lfs_dir_fetchmatch+0x798>)
 80040d4:	4807      	ldr	r0, [pc, #28]	@ (80040f4 <lfs_dir_fetchmatch+0x79c>)
 80040d6:	f00b fae1 	bl	800f69c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80040da:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3784      	adds	r7, #132	@ 0x84
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	7ffffc00 	.word	0x7ffffc00
 80040ec:	08010688 	.word	0x08010688
 80040f0:	08010540 	.word	0x08010540
 80040f4:	08010694 	.word	0x08010694

080040f8 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af04      	add	r7, sp, #16
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004104:	2300      	movs	r3, #0
 8004106:	9303      	str	r3, [sp, #12]
 8004108:	2300      	movs	r3, #0
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	2300      	movs	r3, #0
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fc1a 	bl	8003958 <lfs_dir_fetchmatch>
 8004124:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	@ 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	4b12      	ldr	r3, [pc, #72]	@ (800418c <lfs_dir_getgstate+0x5c>)
 8004144:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <lfs_dir_getgstate+0x60>)
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7fe fecf 	bl	8002eec <lfs_dir_get>
 800414e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	da05      	bge.n	8004162 <lfs_dir_getgstate+0x32>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f113 0f02 	cmn.w	r3, #2
 800415c:	d001      	beq.n	8004162 <lfs_dir_getgstate+0x32>
        return res;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	e00f      	b.n	8004182 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f113 0f02 	cmn.w	r3, #2
 8004168:	d00a      	beq.n	8004180 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800416a:	f107 0310 	add.w	r3, r7, #16
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fb1c 	bl	80027ac <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8004174:	f107 0310 	add.w	r3, r7, #16
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fe fa71 	bl	8002662 <lfs_gstate_xor>
    }

    return 0;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	7ff0000c 	.word	0x7ff0000c
 8004190:	7ff00000 	.word	0x7ff00000

08004194 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b08f      	sub	sp, #60	@ 0x3c
 8004198:	af04      	add	r7, sp, #16
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	689c      	ldr	r4, [r3, #8]
 80041b2:	68b8      	ldr	r0, [r7, #8]
 80041b4:	f7fe fa34 	bl	8002620 <lfs_tag_size>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4619      	mov	r1, r3
 80041bc:	4620      	mov	r0, r4
 80041be:	f7fd fc68 	bl	8001a92 <lfs_min>
 80041c2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80041c4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80041ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d0:	6849      	ldr	r1, [r1, #4]
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	9003      	str	r0, [sp, #12]
 80041d6:	9102      	str	r1, [sp, #8]
 80041d8:	9201      	str	r2, [sp, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4622      	mov	r2, r4
 80041e0:	2100      	movs	r1, #0
 80041e2:	6a38      	ldr	r0, [r7, #32]
 80041e4:	f7fd fe7c 	bl	8001ee0 <lfs_bd_cmp>
 80041e8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <lfs_dir_find_match+0x60>
        return res;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	e014      	b.n	800421e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	689c      	ldr	r4, [r3, #8]
 80041f8:	68b8      	ldr	r0, [r7, #8]
 80041fa:	f7fe fa11 	bl	8002620 <lfs_tag_size>
 80041fe:	4603      	mov	r3, r0
 8004200:	429c      	cmp	r4, r3
 8004202:	d00b      	beq.n	800421c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	689c      	ldr	r4, [r3, #8]
 8004208:	68b8      	ldr	r0, [r7, #8]
 800420a:	f7fe fa09 	bl	8002620 <lfs_tag_size>
 800420e:	4603      	mov	r3, r0
 8004210:	429c      	cmp	r4, r3
 8004212:	d201      	bcs.n	8004218 <lfs_dir_find_match+0x84>
 8004214:	2301      	movs	r3, #1
 8004216:	e002      	b.n	800421e <lfs_dir_find_match+0x8a>
 8004218:	2302      	movs	r3, #2
 800421a:	e000      	b.n	800421e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	372c      	adds	r7, #44	@ 0x2c
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}
	...

08004228 <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b092      	sub	sp, #72	@ 0x48
 800422c:	af04      	add	r7, sp, #16
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	637b      	str	r3, [r7, #52]	@ 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800423c:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <lfs_dir_find+0x1f0>)
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1a      	ldr	r2, [r3, #32]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <lfs_dir_find+0x34>
        return LFS_ERR_INVAL;
    }

    while (true) {
nextname:
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <lfs_dir_find+0x3a>
        return LFS_ERR_INVAL;
 800425c:	f06f 0315 	mvn.w	r3, #21
 8004260:	e0d6      	b.n	8004410 <lfs_dir_find+0x1e8>
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe f9a1 	bl	80025ac <lfs_tag_type3>
 800426a:	4603      	mov	r3, r0
 800426c:	2b02      	cmp	r3, #2
 800426e:	d107      	bne.n	8004280 <lfs_dir_find+0x58>
            name += strspn(name, "/");
 8004270:	496a      	ldr	r1, [pc, #424]	@ (800441c <lfs_dir_find+0x1f4>)
 8004272:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004274:	f00b fa90 	bl	800f798 <strspn>
 8004278:	4602      	mov	r2, r0
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427c:	4413      	add	r3, r2
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 8004280:	4966      	ldr	r1, [pc, #408]	@ (800441c <lfs_dir_find+0x1f4>)
 8004282:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004284:	f00b fa77 	bl	800f776 <strcspn>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10a      	bne.n	80042a6 <lfs_dir_find+0x7e>
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	4b62      	ldr	r3, [pc, #392]	@ (8004420 <lfs_dir_find+0x1f8>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d104      	bne.n	80042a6 <lfs_dir_find+0x7e>
            name += namelen;
 800429c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	4413      	add	r3, r2
 80042a2:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 80042a4:	e7dd      	b.n	8004262 <lfs_dir_find+0x3a>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d10a      	bne.n	80042c2 <lfs_dir_find+0x9a>
 80042ac:	2202      	movs	r2, #2
 80042ae:	495d      	ldr	r1, [pc, #372]	@ (8004424 <lfs_dir_find+0x1fc>)
 80042b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80042b2:	f00b fa48 	bl	800f746 <memcmp>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <lfs_dir_find+0x9a>
            return LFS_ERR_INVAL;
 80042bc:	f06f 0315 	mvn.w	r3, #21
 80042c0:	e0a6      	b.n	8004410 <lfs_dir_find+0x1e8>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80042c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	4413      	add	r3, r2
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80042ce:	4953      	ldr	r1, [pc, #332]	@ (800441c <lfs_dir_find+0x1f4>)
 80042d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042d2:	f00b fa61 	bl	800f798 <strspn>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042da:	4413      	add	r3, r2
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 80042de:	494f      	ldr	r1, [pc, #316]	@ (800441c <lfs_dir_find+0x1f4>)
 80042e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042e2:	f00b fa48 	bl	800f776 <strcspn>
 80042e6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d026      	beq.n	800433c <lfs_dir_find+0x114>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <lfs_dir_find+0xd8>
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	4b49      	ldr	r3, [pc, #292]	@ (8004420 <lfs_dir_find+0x1f8>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d018      	beq.n	8004332 <lfs_dir_find+0x10a>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d112      	bne.n	800432c <lfs_dir_find+0x104>
 8004306:	2202      	movs	r2, #2
 8004308:	4946      	ldr	r1, [pc, #280]	@ (8004424 <lfs_dir_find+0x1fc>)
 800430a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800430c:	f00b fa1b 	bl	800f746 <memcmp>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <lfs_dir_find+0x104>
                depth -= 1;
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <lfs_dir_find+0x10a>
                    name = suffix + sufflen;
 8004322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	4413      	add	r3, r2
 8004328:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800432a:	e79a      	b.n	8004262 <lfs_dir_find+0x3a>
                }
            } else {
                depth += 1;
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	3301      	adds	r3, #1
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8004332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	4413      	add	r3, r2
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800433a:	e7c8      	b.n	80042ce <lfs_dir_find+0xa6>
                break;
 800433c:	bf00      	nop
        }

        // found path
        if (*name == '\0') {
 800433e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <lfs_dir_find+0x122>
            return tag;
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	e062      	b.n	8004410 <lfs_dir_find+0x1e8>
        }

        // update what we've found so far
        *path = name;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800434e:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe f92a 	bl	80025ac <lfs_tag_type3>
 8004358:	4603      	mov	r3, r0
 800435a:	2b02      	cmp	r3, #2
 800435c:	d002      	beq.n	8004364 <lfs_dir_find+0x13c>
            return LFS_ERR_NOTDIR;
 800435e:	f06f 0313 	mvn.w	r3, #19
 8004362:	e055      	b.n	8004410 <lfs_dir_find+0x1e8>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe f94a 	bl	8002600 <lfs_tag_id>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8004374:	429a      	cmp	r2, r3
 8004376:	d01c      	beq.n	80043b2 <lfs_dir_find+0x18a>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe f940 	bl	8002600 <lfs_tag_id>
 8004380:	4603      	mov	r3, r0
 8004382:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004388:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <lfs_dir_find+0x200>)
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7fe fda8 	bl	8002eec <lfs_dir_get>
 800439c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da01      	bge.n	80043a8 <lfs_dir_find+0x180>
                return res;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	e033      	b.n	8004410 <lfs_dir_find+0x1e8>
            }
            lfs_pair_fromle32(dir->tail);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3318      	adds	r3, #24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe f888 	bl	80024c2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f103 0218 	add.w	r2, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	61bb      	str	r3, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80043c4:	f107 0310 	add.w	r3, r7, #16
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	4b18      	ldr	r3, [pc, #96]	@ (800442c <lfs_dir_find+0x204>)
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff fabb 	bl	8003958 <lfs_dir_fetchmatch>
 80043e2:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	da01      	bge.n	80043ee <lfs_dir_find+0x1c6>
                return tag;
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	e010      	b.n	8004410 <lfs_dir_find+0x1e8>
            }

            if (tag) {
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <lfs_dir_find+0x1d6>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80043f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	4413      	add	r3, r2
 80043fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80043fc:	e731      	b.n	8004262 <lfs_dir_find+0x3a>
            if (!dir->split) {
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	7ddb      	ldrb	r3, [r3, #23]
 8004402:	f083 0301 	eor.w	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0d2      	beq.n	80043b2 <lfs_dir_find+0x18a>
                return LFS_ERR_NOENT;
 800440c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3738      	adds	r7, #56	@ 0x38
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	002ffc00 	.word	0x002ffc00
 800441c:	08010658 	.word	0x08010658
 8004420:	080106d4 	.word	0x080106d4
 8004424:	080106d8 	.word	0x080106d8
 8004428:	700ffc00 	.word	0x700ffc00
 800442c:	08004195 	.word	0x08004195

08004430 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b08b      	sub	sp, #44	@ 0x2c
 8004434:	af04      	add	r7, sp, #16
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f103 0010 	add.w	r0, r3, #16
 8004444:	68fc      	ldr	r4, [r7, #12]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	6852      	ldr	r2, [r2, #4]
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	9103      	str	r1, [sp, #12]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	9102      	str	r1, [sp, #8]
 8004456:	9201      	str	r2, [sp, #4]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	4622      	mov	r2, r4
 800445e:	4601      	mov	r1, r0
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7fd fe83 	bl	800216c <lfs_bd_prog>
 8004466:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <lfs_dir_commitprog+0x42>
        return err;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	e010      	b.n	8004494 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4618      	mov	r0, r3
 800447c:	f004 fa02 	bl	8008884 <lfs_crc>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	441a      	add	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	605a      	str	r2, [r3, #4]
    return 0;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd90      	pop	{r4, r7, pc}

0800449c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b08f      	sub	sp, #60	@ 0x3c
 80044a0:	af04      	add	r7, sp, #16
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe f8c5 	bl	800263a <lfs_tag_dsize>
 80044b0:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	441a      	add	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d902      	bls.n	80044c8 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80044c2:	f06f 031b 	mvn.w	r3, #27
 80044c6:	e065      	b.n	8004594 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4053      	eors	r3, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd fb6f 	bl	8001bb8 <lfs_tobe32>
 80044da:	4603      	mov	r3, r0
 80044dc:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80044de:	f107 0214 	add.w	r2, r7, #20
 80044e2:	2304      	movs	r3, #4
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff ffa2 	bl	8004430 <lfs_dir_commitprog>
 80044ec:	61f8      	str	r0, [r7, #28]
    if (err) {
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <lfs_dir_commitattr+0x5c>
        return err;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	e04d      	b.n	8004594 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0c      	blt.n	8004518 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	3b04      	subs	r3, #4
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff92 	bl	8004430 <lfs_dir_commitprog>
 800450c:	61f8      	str	r0, [r7, #28]
        if (err) {
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d039      	beq.n	8004588 <lfs_dir_commitattr+0xec>
            return err;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	e03d      	b.n	8004594 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800451c:	2300      	movs	r3, #0
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004520:	e02d      	b.n	800457e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004522:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800452a:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	440a      	add	r2, r1
 8004538:	2101      	movs	r1, #1
 800453a:	9103      	str	r1, [sp, #12]
 800453c:	f107 0113 	add.w	r1, r7, #19
 8004540:	9102      	str	r1, [sp, #8]
 8004542:	9201      	str	r2, [sp, #4]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	4623      	mov	r3, r4
 8004548:	4602      	mov	r2, r0
 800454a:	2100      	movs	r1, #0
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7fd fb7b 	bl	8001c48 <lfs_bd_read>
 8004552:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <lfs_dir_commitattr+0xc2>
                return err;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	e01a      	b.n	8004594 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800455e:	f107 0213 	add.w	r2, r7, #19
 8004562:	2301      	movs	r3, #1
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff ff62 	bl	8004430 <lfs_dir_commitprog>
 800456c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <lfs_dir_commitattr+0xdc>
                return err;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	e00d      	b.n	8004594 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	3301      	adds	r3, #1
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	3b04      	subs	r3, #4
 8004582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004584:	429a      	cmp	r2, r3
 8004586:	d3cc      	bcc.n	8004522 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	609a      	str	r2, [r3, #8]
    return 0;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	372c      	adds	r7, #44	@ 0x2c
 8004598:	46bd      	mov	sp, r7
 800459a:	bd90      	pop	{r4, r7, pc}

0800459c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b097      	sub	sp, #92	@ 0x5c
 80045a0:	af04      	add	r7, sp, #16
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 80045aa:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b2:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fd fa6b 	bl	8001a92 <lfs_min>
 80045bc:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c2:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fd fa88 	bl	8001adc <lfs_alignup>
 80045cc:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80045d6:	e0fe      	b.n	80047d6 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	3b04      	subs	r3, #4
 80045e2:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd fa53 	bl	8001a92 <lfs_min>
 80045ec:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4413      	add	r3, r2
        lfs_off_t noff = (
 80045f4:	3304      	adds	r3, #4
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80045f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d206      	bcs.n	800460e <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	3b14      	subs	r3, #20
 8004604:	4619      	mov	r1, r3
 8004606:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004608:	f7fd fa43 	bl	8001a92 <lfs_min>
 800460c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800460e:	23ff      	movs	r3, #255	@ 0xff
 8004610:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8004612:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	429a      	cmp	r2, r3
 8004618:	d35f      	bcc.n	80046da <lfs_dir_commitcrc+0x13e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800462a:	429a      	cmp	r2, r3
 800462c:	d855      	bhi.n	80046da <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800462e:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004634:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2201      	movs	r2, #1
 800463c:	9203      	str	r2, [sp, #12]
 800463e:	f107 021b 	add.w	r2, r7, #27
 8004642:	9202      	str	r2, [sp, #8]
 8004644:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004646:	9201      	str	r2, [sp, #4]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	460a      	mov	r2, r1
 800464e:	2100      	movs	r1, #0
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fd faf9 	bl	8001c48 <lfs_bd_read>
 8004656:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <lfs_dir_commitcrc+0xce>
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004664:	d001      	beq.n	800466a <lfs_dir_commitcrc+0xce>
                return err;
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	e101      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800466e:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8004678:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467e:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	f107 0108 	add.w	r1, r7, #8
 800468a:	3104      	adds	r1, #4
 800468c:	9103      	str	r1, [sp, #12]
 800468e:	9202      	str	r2, [sp, #8]
 8004690:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004692:	9201      	str	r2, [sp, #4]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	4623      	mov	r3, r4
 8004698:	4602      	mov	r2, r0
 800469a:	2100      	movs	r1, #0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fd fc70 	bl	8001f82 <lfs_bd_crc>
 80046a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <lfs_dir_commitcrc+0x11a>
 80046aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ac:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80046b0:	d001      	beq.n	80046b6 <lfs_dir_commitcrc+0x11a>
                    return err;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	e010      	b.n	80046d8 <lfs_dir_commitcrc+0x13c>
                }

                lfs_fcrc_tole32(&fcrc);
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe f8ce 	bl	800285c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004878 <lfs_dir_commitcrc+0x2dc>)
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fee7 	bl	800449c <lfs_dir_commitattr>
 80046ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80046d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <lfs_dir_commitcrc+0x13e>
                    return err;
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80046d8:	e0c9      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80046da:	7efb      	ldrb	r3, [r7, #27]
 80046dc:	43db      	mvns	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	09db      	lsrs	r3, r3, #7
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e8:	051a      	lsls	r2, r3, #20
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046f0:	1acb      	subs	r3, r1, r3
 80046f2:	3b04      	subs	r3, #4
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 80046fa:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80046fe:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	4053      	eors	r3, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd fa55 	bl	8001bb8 <lfs_tobe32>
 800470e:	4603      	mov	r3, r0
 8004710:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f107 0110 	add.w	r1, r7, #16
 800471a:	2204      	movs	r2, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f004 f8b1 	bl	8008884 <lfs_crc>
 8004722:	4602      	mov	r2, r0
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd fa2b 	bl	8001b88 <lfs_tole32>
 8004732:	4603      	mov	r3, r0
 8004734:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f103 0010 	add.w	r0, r3, #16
 800473c:	687c      	ldr	r4, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	6852      	ldr	r2, [r2, #4]
 8004746:	2108      	movs	r1, #8
 8004748:	9103      	str	r1, [sp, #12]
 800474a:	f107 0110 	add.w	r1, r7, #16
 800474e:	9102      	str	r1, [sp, #8]
 8004750:	9201      	str	r2, [sp, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	4622      	mov	r2, r4
 8004758:	4601      	mov	r1, r0
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fd fd06 	bl	800216c <lfs_bd_prog>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <lfs_dir_commitcrc+0x1d0>
            return err;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	e080      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800476c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004784:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8004786:	7efb      	ldrb	r3, [r7, #27]
 8004788:	43db      	mvns	r3, r3
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	405a      	eors	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f04f 32ff 	mov.w	r2, #4294967295
 800479e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80047a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d208      	bcs.n	80047ba <lfs_dir_commitcrc+0x21e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	4413      	add	r3, r2
 80047b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d30d      	bcc.n	80047d6 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0110 	add.w	r1, r3, #16
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	2300      	movs	r3, #0
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fd fc9d 	bl	8002104 <lfs_bd_sync>
 80047ca:	6238      	str	r0, [r7, #32]
            if (err) {
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <lfs_dir_commitcrc+0x23a>
                return err;
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	e04b      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047dc:	429a      	cmp	r2, r3
 80047de:	f63f aefb 	bhi.w	80045d8 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ec:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f2:	1d1c      	adds	r4, r3, #4
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047fc:	1a8a      	subs	r2, r1, r2
 80047fe:	f107 011c 	add.w	r1, r7, #28
 8004802:	9103      	str	r1, [sp, #12]
 8004804:	9202      	str	r2, [sp, #8]
 8004806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004808:	9201      	str	r2, [sp, #4]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4623      	mov	r3, r4
 800480e:	4602      	mov	r2, r0
 8004810:	2100      	movs	r1, #0
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd fbb5 	bl	8001f82 <lfs_bd_crc>
 8004818:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <lfs_dir_commitcrc+0x288>
        return err;
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	e024      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004828:	429a      	cmp	r2, r3
 800482a:	d002      	beq.n	8004832 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800482c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8004830:	e01d      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f107 021c 	add.w	r2, r7, #28
 800483c:	9203      	str	r2, [sp, #12]
 800483e:	2204      	movs	r2, #4
 8004840:	9202      	str	r2, [sp, #8]
 8004842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004844:	9201      	str	r2, [sp, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2304      	movs	r3, #4
 800484a:	460a      	mov	r2, r1
 800484c:	2100      	movs	r1, #0
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fb97 	bl	8001f82 <lfs_bd_crc>
 8004854:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <lfs_dir_commitcrc+0x2c4>
        return err;
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	e006      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8004866:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800486a:	e000      	b.n	800486e <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	374c      	adds	r7, #76	@ 0x4c
 8004872:	46bd      	mov	sp, r7
 8004874:	bd90      	pop	{r4, r7, pc}
 8004876:	bf00      	nop
 8004878:	5ffffc08 	.word	0x5ffffc08

0800487c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	@ 0x28
 8004880:	af04      	add	r7, sp, #16
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e016      	b.n	80048ba <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	bfb8      	it	lt
 8004898:	425b      	neglt	r3, r3
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe f9a4 	bl	8002bf0 <lfs_alloc>
 80048a8:	60f8      	str	r0, [r7, #12]
        if (err) {
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <lfs_dir_alloc+0x38>
            return err;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	e058      	b.n	8004966 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3301      	adds	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	dde5      	ble.n	800488c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80048d0:	2004      	movs	r0, #4
 80048d2:	9003      	str	r0, [sp, #12]
 80048d4:	9202      	str	r2, [sp, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	9201      	str	r2, [sp, #4]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2304      	movs	r3, #4
 80048de:	460a      	mov	r2, r1
 80048e0:	2100      	movs	r1, #0
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd f9b0 	bl	8001c48 <lfs_bd_read>
 80048e8:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd f93f 	bl	8001b72 <lfs_fromle32>
 80048f4:	4602      	mov	r2, r0
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <lfs_dir_alloc+0x90>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004906:	d001      	beq.n	800490c <lfs_dir_alloc+0x90>
        return err;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	e02c      	b.n	8004966 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	dd0e      	ble.n	8004934 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	3301      	adds	r3, #1
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fd f8d7 	bl	8001adc <lfs_alignup>
 800492e:	4602      	mov	r2, r0
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2204      	movs	r2, #4
 8004938:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f04f 32ff 	mov.w	r2, #4294967295
 800494e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f04f 32ff 	mov.w	r2, #4294967295
 8004956:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2200      	movs	r2, #0
 8004962:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800496e:	b580      	push	{r7, lr}
 8004970:	b092      	sub	sp, #72	@ 0x48
 8004972:	af04      	add	r7, sp, #16
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	4619      	mov	r1, r3
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff ff7a 	bl	800487c <lfs_dir_alloc>
 8004988:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800498a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <lfs_dir_split+0x26>
        return err;
 8004990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004992:	e03c      	b.n	8004a0e <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	7ddb      	ldrb	r3, [r3, #23]
 8004998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80049a8:	f107 0110 	add.w	r1, r7, #16
 80049ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80049b0:	9302      	str	r3, [sp, #8]
 80049b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f879 	bl	8004ab8 <lfs_dir_compact>
 80049c6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da01      	bge.n	80049d2 <lfs_dir_split+0x64>
        return res;
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	e01d      	b.n	8004a0e <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2201      	movs	r2, #1
 80049e2:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3320      	adds	r3, #32
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7fd fd11 	bl	8002414 <lfs_pair_cmp>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <lfs_dir_split+0x9e>
 80049f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3738      	adds	r7, #56	@ 0x38
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b086      	sub	sp, #24
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f7fd fe07 	bl	800263a <lfs_tag_dsize>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	441a      	add	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	601a      	str	r2, [r3, #0]
    return 0;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6859      	ldr	r1, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	f7ff fd1d 	bl	800449c <lfs_dir_commitattr>
 8004a62:	4603      	mov	r3, r0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dd11      	ble.n	8004aa4 <lfs_dir_needsrelocation+0x38>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	3301      	adds	r3, #1
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a8c:	3201      	adds	r2, #1
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a96:	fb01 f202 	mul.w	r2, r1, r2
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <lfs_dir_needsrelocation+0x38>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <lfs_dir_needsrelocation+0x3a>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b0a4      	sub	sp, #144	@ 0x90
 8004abc:	af0a      	add	r7, sp, #40	@ 0x28
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ffcc 	bl	8004a6c <lfs_dir_needsrelocation>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8004ae4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <lfs_dir_compact+0x52>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	657a      	str	r2, [r7, #84]	@ 0x54
 8004af2:	2201      	movs	r2, #1
 8004af4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004af6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd fc89 	bl	8002414 <lfs_pair_cmp>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 8155 	bne.w	8004db4 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8004b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b10:	2300      	movs	r3, #0
 8004b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
 8004b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b20:	2300      	movs	r3, #0
 8004b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <lfs_dir_compact+0x80>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b34:	3b08      	subs	r3, #8
 8004b36:	e003      	b.n	8004b40 <lfs_dir_compact+0x88>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8004b40:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fd fbbd 	bl	80022c8 <lfs_bd_erase>
 8004b4e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8004b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8004b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b58:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004b5c:	f000 812c 	beq.w	8004db8 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8004b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b62:	e188      	b.n	8004e76 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fd f80d 	bl	8001b88 <lfs_tole32>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8004b7a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004b7e:	2304      	movs	r3, #4
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fc55 	bl	8004430 <lfs_dir_commitprog>
 8004b86:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fc fff0 	bl	8001b72 <lfs_fromle32>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]
            if (err) {
 8004b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004ba4:	f000 810a 	beq.w	8004dbc <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8004ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004baa:	e164      	b.n	8004e76 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8004bac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	637a      	str	r2, [r7, #52]	@ 0x34
 8004bba:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004bbe:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8004bc0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004bc4:	9208      	str	r2, [sp, #32]
 8004bc6:	4aae      	ldr	r2, [pc, #696]	@ (8004e80 <lfs_dir_compact+0x3c8>)
 8004bc8:	9207      	str	r2, [sp, #28]
 8004bca:	9306      	str	r3, [sp, #24]
 8004bcc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9303      	str	r3, [sp, #12]
 8004bdc:	4ba9      	ldr	r3, [pc, #676]	@ (8004e84 <lfs_dir_compact+0x3cc>)
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	2200      	movs	r2, #0
 8004bee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7fe facd 	bl	8003190 <lfs_dir_traverse>
 8004bf6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8004bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8004bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c00:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004c04:	f000 80dc 	beq.w	8004dc0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8004c08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c0a:	e134      	b.n	8004e76 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd fbe4 	bl	80023de <lfs_pair_isnull>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f083 0301 	eor.w	r3, r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d022      	beq.n	8004c68 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3318      	adds	r3, #24
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fc65 	bl	80024f6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	7ddb      	ldrb	r3, [r3, #23]
 8004c30:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004c34:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8004c36:	4a94      	ldr	r2, [pc, #592]	@ (8004e88 <lfs_dir_compact+0x3d0>)
 8004c38:	431a      	orrs	r2, r3
                        dir->tail);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8004c3e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff fc2a 	bl	800449c <lfs_dir_commitattr>
 8004c48:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3318      	adds	r3, #24
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fc37 	bl	80024c2 <lfs_pair_fromle32>
                if (err) {
 8004c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8004c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c5c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004c60:	f000 80b0 	beq.w	8004dc4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8004c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c66:	e106      	b.n	8004e76 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8004c68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004c74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004c78:	f083 0301 	eor.w	r3, r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd fce7 	bl	8002662 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fcde 	bl	8002662 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004cac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fcd5 	bl	8002662 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004cc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fa2f 	bl	8004130 <lfs_dir_getgstate>
 8004cd2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8004cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <lfs_dir_compact+0x226>
                return err;
 8004cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cdc:	e0cb      	b.n	8004e76 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8004cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd fcdd 	bl	80026a2 <lfs_gstate_iszero>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	f083 0301 	eor.w	r3, r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d016      	beq.n	8004d22 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8004cf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fd fd77 	bl	80027ec <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8004cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d02:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8004d06:	4a61      	ldr	r2, [pc, #388]	@ (8004e8c <lfs_dir_compact+0x3d4>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fbc7 	bl	800449c <lfs_dir_commitattr>
 8004d0e:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8004d10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8004d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d18:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004d1c:	d054      	beq.n	8004dc8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8004d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d20:	e0a9      	b.n	8004e76 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8004d22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff fc37 	bl	800459c <lfs_dir_commitcrc>
 8004d2e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8004d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8004d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d38:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8004d3c:	d046      	beq.n	8004dcc <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8004d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d40:	e099      	b.n	8004e76 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d48:	6992      	ldr	r2, [r2, #24]
 8004d4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d4e:	fb01 f202 	mul.w	r2, r1, r2
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d006      	beq.n	8004d66 <lfs_dir_compact+0x2ae>
 8004d58:	4b4d      	ldr	r3, [pc, #308]	@ (8004e90 <lfs_dir_compact+0x3d8>)
 8004d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e94 <lfs_dir_compact+0x3dc>)
 8004d5c:	f640 0121 	movw	r1, #2081	@ 0x821
 8004d60:	484d      	ldr	r0, [pc, #308]	@ (8004e98 <lfs_dir_compact+0x3e0>)
 8004d62:	f00a faeb 	bl	800f33c <__assert_func>
            lfs_pair_swap(dir->pair);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd fb23 	bl	80023b4 <lfs_pair_swap>
            dir->count = end - begin;
 8004d6e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8004d72:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8004d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3348      	adds	r3, #72	@ 0x48
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8004d96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004d9a:	f083 0301 	eor.w	r3, r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d065      	beq.n	8004e70 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	333c      	adds	r3, #60	@ 0x3c
 8004daa:	3230      	adds	r2, #48	@ 0x30
 8004dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8004db2:	e05d      	b.n	8004e70 <lfs_dir_compact+0x3b8>
        goto relocate;
 8004db4:	bf00      	nop
 8004db6:	e00a      	b.n	8004dce <lfs_dir_compact+0x316>
                    goto relocate;
 8004db8:	bf00      	nop
 8004dba:	e008      	b.n	8004dce <lfs_dir_compact+0x316>
                    goto relocate;
 8004dbc:	bf00      	nop
 8004dbe:	e006      	b.n	8004dce <lfs_dir_compact+0x316>
                    goto relocate;
 8004dc0:	bf00      	nop
 8004dc2:	e004      	b.n	8004dce <lfs_dir_compact+0x316>
                        goto relocate;
 8004dc4:	bf00      	nop
 8004dc6:	e002      	b.n	8004dce <lfs_dir_compact+0x316>
                        goto relocate;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <lfs_dir_compact+0x316>
                    goto relocate;
 8004dcc:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3310      	adds	r3, #16
 8004dd8:	4619      	mov	r1, r3
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7fc ff0f 	bl	8001bfe <lfs_cache_drop>
        if (!tired) {
 8004de0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004de4:	f083 0301 	eor.w	r3, r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <lfs_dir_compact+0x3e4>)
 8004df4:	9200      	str	r2, [sp, #0]
 8004df6:	f640 0233 	movw	r2, #2099	@ 0x833
 8004dfa:	4927      	ldr	r1, [pc, #156]	@ (8004e98 <lfs_dir_compact+0x3e0>)
 8004dfc:	4828      	ldr	r0, [pc, #160]	@ (8004ea0 <lfs_dir_compact+0x3e8>)
 8004dfe:	f00a fc4d 	bl	800f69c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	617a      	str	r2, [r7, #20]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	61ba      	str	r2, [r7, #24]
 8004e0c:	f107 0214 	add.w	r2, r7, #20
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd fafe 	bl	8002414 <lfs_pair_cmp>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <lfs_dir_compact+0x3e4>)
 8004e24:	9200      	str	r2, [sp, #0]
 8004e26:	f640 0238 	movw	r2, #2104	@ 0x838
 8004e2a:	491b      	ldr	r1, [pc, #108]	@ (8004e98 <lfs_dir_compact+0x3e0>)
 8004e2c:	481d      	ldr	r0, [pc, #116]	@ (8004ea4 <lfs_dir_compact+0x3ec>)
 8004e2e:	f00a fc35 	bl	800f69c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8004e32:	f06f 031b 	mvn.w	r3, #27
 8004e36:	e01e      	b.n	8004e76 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7fd fed6 	bl	8002bf0 <lfs_alloc>
 8004e44:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8004e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <lfs_dir_compact+0x3ae>
 8004e4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e4e:	f113 0f1c 	cmn.w	r3, #28
 8004e52:	d106      	bne.n	8004e62 <lfs_dir_compact+0x3aa>
 8004e54:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004e58:	f083 0301 	eor.w	r3, r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <lfs_dir_compact+0x3ae>
            return err;
 8004e62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e64:	e007      	b.n	8004e76 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8004e6c:	bf00      	nop
    while (true) {
 8004e6e:	e64c      	b.n	8004b0a <lfs_dir_compact+0x52>
        break;
 8004e70:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8004e72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3768      	adds	r7, #104	@ 0x68
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	08004a43 	.word	0x08004a43
 8004e84:	400ffc00 	.word	0x400ffc00
 8004e88:	000ffc08 	.word	0x000ffc08
 8004e8c:	7ffffc0c 	.word	0x7ffffc0c
 8004e90:	080106dc 	.word	0x080106dc
 8004e94:	08011390 	.word	0x08011390
 8004e98:	08010540 	.word	0x08010540
 8004e9c:	08010688 	.word	0x08010688
 8004ea0:	08010704 	.word	0x08010704
 8004ea4:	08010728 	.word	0x08010728

08004ea8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b099      	sub	sp, #100	@ 0x64
 8004eac:	af0a      	add	r7, sp, #40	@ 0x28
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8004eb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 8004ebc:	e057      	b.n	8004f6e <lfs_dir_splittingcompact+0xc6>
            lfs_size_t size = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	4252      	negs	r2, r2
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	b212      	sxth	r2, r2
 8004ed0:	f107 011c 	add.w	r1, r7, #28
 8004ed4:	9108      	str	r1, [sp, #32]
 8004ed6:	4979      	ldr	r1, [pc, #484]	@ (80050bc <lfs_dir_splittingcompact+0x214>)
 8004ed8:	9107      	str	r1, [sp, #28]
 8004eda:	9206      	str	r2, [sp, #24]
 8004edc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004ee0:	9205      	str	r2, [sp, #20]
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	4b75      	ldr	r3, [pc, #468]	@ (80050c0 <lfs_dir_splittingcompact+0x218>)
 8004eea:	9302      	str	r3, [sp, #8]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7fe f947 	bl	8003190 <lfs_dir_traverse>
 8004f02:	6338      	str	r0, [r7, #48]	@ 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <lfs_dir_splittingcompact+0x66>
                return err;
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	e0d1      	b.n	80050b2 <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <lfs_dir_splittingcompact+0x78>
                    ? lfs->cfg->metadata_max
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                    : lfs->cfg->block_size;
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	e002      	b.n	8004f26 <lfs_dir_splittingcompact+0x7e>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f24:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8004f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (end - split < 0xff
 8004f28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2bfe      	cmp	r3, #254	@ 0xfe
 8004f32:	d814      	bhi.n	8004f5e <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 8004f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f36:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f42:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fc fdc8 	bl	8001adc <lfs_alignup>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7fc fd9e 	bl	8001a92 <lfs_min>
 8004f56:	4602      	mov	r2, r0
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20e      	bcs.n	8004f7c <lfs_dir_splittingcompact+0xd4>
                break;
            }

            split = split + ((end - split) / 2);
 8004f5e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f6a:	4413      	add	r3, r2
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        while (end - split > 1) {
 8004f6e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d8a1      	bhi.n	8004ebe <lfs_dir_splittingcompact+0x16>
 8004f7a:	e000      	b.n	8004f7e <lfs_dir_splittingcompact+0xd6>
                break;
 8004f7c:	bf00      	nop
        }

        if (split == begin) {
 8004f7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d02d      	beq.n	8004fe4 <lfs_dir_splittingcompact+0x13c>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8004f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f90:	9202      	str	r2, [sp, #8]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff fce5 	bl	800496e <lfs_dir_split>
 8004fa4:	62b8      	str	r0, [r7, #40]	@ 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <lfs_dir_splittingcompact+0x110>
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	f113 0f1c 	cmn.w	r3, #28
 8004fb2:	d001      	beq.n	8004fb8 <lfs_dir_splittingcompact+0x110>
            return err;
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	e07c      	b.n	80050b2 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <lfs_dir_splittingcompact+0x134>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	493f      	ldr	r1, [pc, #252]	@ (80050c4 <lfs_dir_splittingcompact+0x21c>)
 8004fc8:	9101      	str	r1, [sp, #4]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	f640 028c 	movw	r2, #2188	@ 0x88c
 8004fd2:	493d      	ldr	r1, [pc, #244]	@ (80050c8 <lfs_dir_splittingcompact+0x220>)
 8004fd4:	483d      	ldr	r0, [pc, #244]	@ (80050cc <lfs_dir_splittingcompact+0x224>)
 8004fd6:	f00a fb61 	bl	800f69c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8004fda:	e004      	b.n	8004fe6 <lfs_dir_splittingcompact+0x13e>
        } else {
            end = split;
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fde:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    while (true) {
 8004fe2:	e768      	b.n	8004eb6 <lfs_dir_splittingcompact+0xe>
            break;
 8004fe4:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fd3f 	bl	8004a6c <lfs_dir_needsrelocation>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d04f      	beq.n	8005094 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	617a      	str	r2, [r7, #20]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	f107 0214 	add.w	r2, r7, #20
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fa05 	bl	8002414 <lfs_pair_cmp>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d141      	bne.n	8005094 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f003 fb31 	bl	8008678 <lfs_fs_size_>
 8005016:	6278      	str	r0, [r7, #36]	@ 0x24
        if (size < 0) {
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	da01      	bge.n	8005022 <lfs_dir_splittingcompact+0x17a>
            return size;
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	e047      	b.n	80050b2 <lfs_dir_splittingcompact+0x20a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502e:	08db      	lsrs	r3, r3, #3
 8005030:	429a      	cmp	r2, r3
 8005032:	d92f      	bls.n	8005094 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4a22      	ldr	r2, [pc, #136]	@ (80050c4 <lfs_dir_splittingcompact+0x21c>)
 800503a:	9200      	str	r2, [sp, #0]
 800503c:	f640 02a2 	movw	r2, #2210	@ 0x8a2
 8005040:	4921      	ldr	r1, [pc, #132]	@ (80050c8 <lfs_dir_splittingcompact+0x220>)
 8005042:	4823      	ldr	r0, [pc, #140]	@ (80050d0 <lfs_dir_splittingcompact+0x228>)
 8005044:	f00a fb2a 	bl	800f69c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005048:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fc85 	bl	800496e <lfs_dir_split>
 8005064:	6238      	str	r0, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <lfs_dir_splittingcompact+0x1d0>
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f113 0f1c 	cmn.w	r3, #28
 8005072:	d001      	beq.n	8005078 <lfs_dir_splittingcompact+0x1d0>
                return err;
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	e01c      	b.n	80050b2 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800507e:	4b11      	ldr	r3, [pc, #68]	@ (80050c4 <lfs_dir_splittingcompact+0x21c>)
 8005080:	f640 02ac 	movw	r2, #2220	@ 0x8ac
 8005084:	4910      	ldr	r1, [pc, #64]	@ (80050c8 <lfs_dir_splittingcompact+0x220>)
 8005086:	4813      	ldr	r0, [pc, #76]	@ (80050d4 <lfs_dir_splittingcompact+0x22c>)
 8005088:	f00a fb08 	bl	800f69c <iprintf>
 800508c:	e002      	b.n	8005094 <lfs_dir_splittingcompact+0x1ec>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8005094:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005098:	9302      	str	r3, [sp, #8]
 800509a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fd04 	bl	8004ab8 <lfs_dir_compact>
 80050b0:	4603      	mov	r3, r0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	373c      	adds	r7, #60	@ 0x3c
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	08004a17 	.word	0x08004a17
 80050c0:	400ffc00 	.word	0x400ffc00
 80050c4:	08010688 	.word	0x08010688
 80050c8:	08010540 	.word	0x08010540
 80050cc:	08010760 	.word	0x08010760
 80050d0:	08010790 	.word	0x08010790
 80050d4:	080107c0 	.word	0x080107c0

080050d8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80050d8:	b5b0      	push	{r4, r5, r7, lr}
 80050da:	b0a6      	sub	sp, #152	@ 0x98
 80050dc:	af0a      	add	r7, sp, #40	@ 0x28
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 80050f0:	2300      	movs	r3, #0
 80050f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80050f4:	e06d      	b.n	80051d2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80050f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	4413      	add	r3, r2
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd fa53 	bl	80025ac <lfs_tag_type3>
 8005106:	4603      	mov	r3, r0
 8005108:	461a      	mov	r2, r3
 800510a:	f240 4301 	movw	r3, #1025	@ 0x401
 800510e:	429a      	cmp	r2, r3
 8005110:	d106      	bne.n	8005120 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	8a9b      	ldrh	r3, [r3, #20]
 8005116:	3301      	adds	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	829a      	strh	r2, [r3, #20]
 800511e:	e055      	b.n	80051cc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8005120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	4413      	add	r3, r2
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd fa3e 	bl	80025ac <lfs_tag_type3>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8005138:	429a      	cmp	r2, r3
 800513a:	d114      	bne.n	8005166 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	8a9b      	ldrh	r3, [r3, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <lfs_dir_relocatingcommit+0x7a>
 8005144:	4ba4      	ldr	r3, [pc, #656]	@ (80053d8 <lfs_dir_relocatingcommit+0x300>)
 8005146:	4aa5      	ldr	r2, [pc, #660]	@ (80053dc <lfs_dir_relocatingcommit+0x304>)
 8005148:	f640 01c5 	movw	r1, #2245	@ 0x8c5
 800514c:	48a4      	ldr	r0, [pc, #656]	@ (80053e0 <lfs_dir_relocatingcommit+0x308>)
 800514e:	f00a f8f5 	bl	800f33c <__assert_func>
            dir->count -= 1;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	8a9b      	ldrh	r3, [r3, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8005164:	e032      	b.n	80051cc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8005166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4413      	add	r3, r2
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fd f9fb 	bl	800256c <lfs_tag_type1>
 8005176:	4603      	mov	r3, r0
 8005178:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800517c:	d126      	bne.n	80051cc <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800517e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	4413      	add	r3, r2
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800518e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	4413      	add	r3, r2
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800519e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	4413      	add	r3, r2
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fd fa0f 	bl	80025cc <lfs_tag_chunk>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	3318      	adds	r3, #24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fd f97b 	bl	80024c2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80051cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ce:	3301      	adds	r3, #1
 80051d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80051d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051d8:	429a      	cmp	r2, r3
 80051da:	db8c      	blt.n	80050f6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80051dc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02b      	beq.n	800523c <lfs_dir_relocatingcommit+0x164>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	8a9b      	ldrh	r3, [r3, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d127      	bne.n	800523c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <lfs_dir_relocatingcommit+0x12a>
 80051f4:	4b7b      	ldr	r3, [pc, #492]	@ (80053e4 <lfs_dir_relocatingcommit+0x30c>)
 80051f6:	4a79      	ldr	r2, [pc, #484]	@ (80053dc <lfs_dir_relocatingcommit+0x304>)
 80051f8:	f640 01d2 	movw	r1, #2258	@ 0x8d2
 80051fc:	4878      	ldr	r0, [pc, #480]	@ (80053e0 <lfs_dir_relocatingcommit+0x308>)
 80051fe:	f00a f89d 	bl	800f33c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005208:	4619      	mov	r1, r3
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f002 fdd6 	bl	8007dbc <lfs_fs_pred>
 8005210:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8005212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <lfs_dir_relocatingcommit+0x14c>
 8005218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521a:	f113 0f02 	cmn.w	r3, #2
 800521e:	d001      	beq.n	8005224 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8005220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005222:	e214      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8005224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005226:	f113 0f02 	cmn.w	r3, #2
 800522a:	d007      	beq.n	800523c <lfs_dir_relocatingcommit+0x164>
 800522c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005230:	7ddb      	ldrb	r3, [r3, #23]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005236:	2302      	movs	r3, #2
 8005238:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 800523a:	e121      	b.n	8005480 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	7d9b      	ldrb	r3, [r3, #22]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80fb 	beq.w	800543c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800524a:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005262:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <lfs_dir_relocatingcommit+0x1a0>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005274:	3b08      	subs	r3, #8
 8005276:	e003      	b.n	8005280 <lfs_dir_relocatingcommit+0x1a8>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3318      	adds	r3, #24
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd f935 	bl	80024f6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005298:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 800529e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80052a2:	9308      	str	r3, [sp, #32]
 80052a4:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <lfs_dir_relocatingcommit+0x310>)
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	2300      	movs	r3, #0
 80052aa:	9306      	str	r3, [sp, #24]
 80052ac:	2300      	movs	r3, #0
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9304      	str	r3, [sp, #16]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9303      	str	r3, [sp, #12]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9302      	str	r3, [sp, #8]
 80052bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	460b      	mov	r3, r1
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7fd ff60 	bl	8003190 <lfs_dir_traverse>
 80052d0:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3318      	adds	r3, #24
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd f8f3 	bl	80024c2 <lfs_pair_fromle32>
        if (err) {
 80052dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80052e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e4:	f113 0f1c 	cmn.w	r3, #28
 80052e8:	f000 80aa 	beq.w	8005440 <lfs_dir_relocatingcommit+0x368>
 80052ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ee:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80052f2:	f000 80a5 	beq.w	8005440 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80052f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f8:	e1a9      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80052fa:	f107 031c 	add.w	r3, r7, #28
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800530c:	f107 031c 	add.w	r3, r7, #28
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f7fd f9a5 	bl	8002662 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800531e:	f107 031c 	add.w	r3, r7, #28
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd f99c 	bl	8002662 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005330:	f107 031c 	add.w	r3, r7, #28
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f7fd f993 	bl	8002662 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd f9a8 	bl	80026a2 <lfs_gstate_iszero>
 8005352:	4603      	mov	r3, r0
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d027      	beq.n	80053ae <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	461a      	mov	r2, r3
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7fe fee2 	bl	8004130 <lfs_dir_getgstate>
 800536c:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 800536e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005376:	e16a      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
            }

            lfs_gstate_tole32(&delta);
 8005378:	f107 031c 	add.w	r3, r7, #28
 800537c:	4618      	mov	r0, r3
 800537e:	f7fd fa35 	bl	80027ec <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005382:	f107 031c 	add.w	r3, r7, #28
 8005386:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800538a:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <lfs_dir_relocatingcommit+0x314>)
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff f885 	bl	800449c <lfs_dir_commitattr>
 8005392:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800539a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539c:	f113 0f1c 	cmn.w	r3, #28
 80053a0:	d050      	beq.n	8005444 <lfs_dir_relocatingcommit+0x36c>
 80053a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80053a8:	d04c      	beq.n	8005444 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80053aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ac:	e14f      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80053ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80053b2:	4619      	mov	r1, r3
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff f8f1 	bl	800459c <lfs_dir_commitcrc>
 80053ba:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 80053bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80053c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c4:	f113 0f1c 	cmn.w	r3, #28
 80053c8:	d03e      	beq.n	8005448 <lfs_dir_relocatingcommit+0x370>
 80053ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053cc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80053d0:	d03a      	beq.n	8005448 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80053d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d4:	e13b      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
 80053d6:	bf00      	nop
 80053d8:	080107ec 	.word	0x080107ec
 80053dc:	080113a0 	.word	0x080113a0
 80053e0:	08010540 	.word	0x08010540
 80053e4:	080107fc 	.word	0x080107fc
 80053e8:	08004a43 	.word	0x08004a43
 80053ec:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053f6:	6992      	ldr	r2, [r2, #24]
 80053f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80053fc:	fb01 f202 	mul.w	r2, r1, r2
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d006      	beq.n	8005414 <lfs_dir_relocatingcommit+0x33c>
 8005406:	4b94      	ldr	r3, [pc, #592]	@ (8005658 <lfs_dir_relocatingcommit+0x580>)
 8005408:	4a94      	ldr	r2, [pc, #592]	@ (800565c <lfs_dir_relocatingcommit+0x584>)
 800540a:	f640 111c 	movw	r1, #2332	@ 0x91c
 800540e:	4894      	ldr	r0, [pc, #592]	@ (8005660 <lfs_dir_relocatingcommit+0x588>)
 8005410:	f009 ff94 	bl	800f33c <__assert_func>
        dir->off = commit.off;
 8005414:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800541a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	333c      	adds	r3, #60	@ 0x3c
 8005426:	3230      	adds	r2, #48	@ 0x30
 8005428:	ca07      	ldmia	r2, {r0, r1, r2}
 800542a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3348      	adds	r3, #72	@ 0x48
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	e021      	b.n	8005480 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800543c:	bf00      	nop
 800543e:	e004      	b.n	800544a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005440:	bf00      	nop
 8005442:	e002      	b.n	800544a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005444:	bf00      	nop
 8005446:	e000      	b.n	800544a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005448:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3310      	adds	r3, #16
 800544e:	4619      	mov	r1, r3
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7fc fbd4 	bl	8001bfe <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	8a9b      	ldrh	r3, [r3, #20]
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	2300      	movs	r3, #0
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fd1b 	bl	8004ea8 <lfs_dir_splittingcompact>
 8005472:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005476:	2b00      	cmp	r3, #0
 8005478:	da01      	bge.n	800547e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800547a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800547c:	e0e7      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
    }

    goto fixmlist;
 800547e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	663b      	str	r3, [r7, #96]	@ 0x60
 8005494:	e0d6      	b.n	8005644 <lfs_dir_relocatingcommit+0x56c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005498:	3308      	adds	r3, #8
 800549a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fc ffb7 	bl	8002414 <lfs_pair_cmp>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f040 80c8 	bne.w	800563e <lfs_dir_relocatingcommit+0x566>
            d->m = *dir;
 80054ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	f103 0408 	add.w	r4, r3, #8
 80054b6:	4615      	mov	r5, r2
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80054c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80054c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054c6:	3308      	adds	r3, #8
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	f000 80ad 	beq.w	800562a <lfs_dir_relocatingcommit+0x552>
                for (int i = 0; i < attrcount; i++) {
 80054d0:	2300      	movs	r3, #0
 80054d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054d4:	e07f      	b.n	80055d6 <lfs_dir_relocatingcommit+0x4fe>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80054d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fd f863 	bl	80025ac <lfs_tag_type3>
 80054e6:	4603      	mov	r3, r0
 80054e8:	461a      	mov	r2, r3
 80054ea:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d119      	bne.n	8005526 <lfs_dir_relocatingcommit+0x44e>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 80054f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054f4:	889c      	ldrh	r4, [r3, #4]
 80054f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	4413      	add	r3, r2
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fd f87d 	bl	8002600 <lfs_tag_id>
 8005506:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005508:	429c      	cmp	r4, r3
 800550a:	d10c      	bne.n	8005526 <lfs_dir_relocatingcommit+0x44e>
                            d->type != LFS_TYPE_DIR) {
 800550c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800550e:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 8005510:	2b02      	cmp	r3, #2
 8005512:	d008      	beq.n	8005526 <lfs_dir_relocatingcommit+0x44e>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005516:	f04f 32ff 	mov.w	r2, #4294967295
 800551a:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800551c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e054      	b.n	80055d0 <lfs_dir_relocatingcommit+0x4f8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	4413      	add	r3, r2
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fd f83b 	bl	80025ac <lfs_tag_type3>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800553e:	429a      	cmp	r2, r3
 8005540:	d11c      	bne.n	800557c <lfs_dir_relocatingcommit+0x4a4>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005544:	889c      	ldrh	r4, [r3, #4]
 8005546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	4413      	add	r3, r2
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd f855 	bl	8002600 <lfs_tag_id>
 8005556:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005558:	429c      	cmp	r4, r3
 800555a:	d90f      	bls.n	800557c <lfs_dir_relocatingcommit+0x4a4>
                        d->id -= 1;
 800555c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800555e:	889b      	ldrh	r3, [r3, #4]
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005566:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800556a:	799b      	ldrb	r3, [r3, #6]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d12f      	bne.n	80055d0 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	1e5a      	subs	r2, r3, #1
 8005576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800557a:	e029      	b.n	80055d0 <lfs_dir_relocatingcommit+0x4f8>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800557c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4413      	add	r3, r2
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd f810 	bl	80025ac <lfs_tag_type3>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	f240 4301 	movw	r3, #1025	@ 0x401
 8005594:	429a      	cmp	r2, r3
 8005596:	d11b      	bne.n	80055d0 <lfs_dir_relocatingcommit+0x4f8>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005598:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559a:	889c      	ldrh	r4, [r3, #4]
 800559c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	4413      	add	r3, r2
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd f82a 	bl	8002600 <lfs_tag_id>
 80055ac:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80055ae:	429c      	cmp	r4, r3
 80055b0:	d30e      	bcc.n	80055d0 <lfs_dir_relocatingcommit+0x4f8>
                        d->id += 1;
 80055b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055b4:	889b      	ldrh	r3, [r3, #4]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055bc:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80055be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c0:	799b      	ldrb	r3, [r3, #6]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d104      	bne.n	80055d0 <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos += 1;
 80055c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 80055d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055d2:	3301      	adds	r3, #1
 80055d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055dc:	429a      	cmp	r2, r3
 80055de:	f6ff af7a 	blt.w	80054d6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80055e2:	e022      	b.n	800562a <lfs_dir_relocatingcommit+0x552>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80055e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055e6:	f103 0220 	add.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3320      	adds	r3, #32
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f7fc ff0f 	bl	8002414 <lfs_pair_cmp>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <lfs_dir_relocatingcommit+0x534>
                    d->id -= d->m.count;
 80055fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055fe:	889a      	ldrh	r2, [r3, #4]
 8005600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005602:	8b9b      	ldrh	r3, [r3, #28]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	b29a      	uxth	r2, r3
 8005608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560a:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800560c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560e:	f103 0108 	add.w	r1, r3, #8
 8005612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005614:	3320      	adds	r3, #32
 8005616:	461a      	mov	r2, r3
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7fe fd6d 	bl	80040f8 <lfs_dir_fetch>
 800561e:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8005620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <lfs_dir_relocatingcommit+0x552>
                    return err;
 8005626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005628:	e011      	b.n	800564e <lfs_dir_relocatingcommit+0x576>
            while (d->id >= d->m.count && d->m.split) {
 800562a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800562c:	889a      	ldrh	r2, [r3, #4]
 800562e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005630:	8b9b      	ldrh	r3, [r3, #28]
 8005632:	429a      	cmp	r2, r3
 8005634:	d303      	bcc.n	800563e <lfs_dir_relocatingcommit+0x566>
 8005636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005638:	7fdb      	ldrb	r3, [r3, #31]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1d2      	bne.n	80055e4 <lfs_dir_relocatingcommit+0x50c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800563e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	663b      	str	r3, [r7, #96]	@ 0x60
 8005644:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005646:	2b00      	cmp	r3, #0
 8005648:	f47f af25 	bne.w	8005496 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800564c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800564e:	4618      	mov	r0, r3
 8005650:	3770      	adds	r7, #112	@ 0x70
 8005652:	46bd      	mov	sp, r7
 8005654:	bdb0      	pop	{r4, r5, r7, pc}
 8005656:	bf00      	nop
 8005658:	080106dc 	.word	0x080106dc
 800565c:	080113a0 	.word	0x080113a0
 8005660:	08010540 	.word	0x08010540

08005664 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005664:	b5b0      	push	{r4, r5, r7, lr}
 8005666:	b0bc      	sub	sp, #240	@ 0xf0
 8005668:	af04      	add	r7, sp, #16
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800567a:	e045      	b.n	8005708 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800567c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005680:	3308      	adds	r3, #8
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	429a      	cmp	r2, r3
 8005686:	d03a      	beq.n	80056fe <lfs_dir_orphaningcommit+0x9a>
 8005688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800568c:	3308      	adds	r3, #8
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4611      	mov	r1, r2
 8005692:	4618      	mov	r0, r3
 8005694:	f7fc febe 	bl	8002414 <lfs_pair_cmp>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d12f      	bne.n	80056fe <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800569e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12a      	bne.n	80056fe <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80056a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d023      	beq.n	80056fe <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80056b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d91b      	bls.n	80056fe <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80056c6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f001 f802 	bl	80066d4 <lfs_file_outline>
 80056d0:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80056d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80056dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056e0:	e2ad      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80056e2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f001 f816 	bl	8006718 <lfs_file_flush>
 80056ec:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80056f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <lfs_dir_orphaningcommit+0x9a>
                return err;
 80056f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056fc:	e29f      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80056fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1b5      	bne.n	800567c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005726:	461d      	mov	r5, r3
 8005728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800572a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800572c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800573a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fcc6 	bl	80050d8 <lfs_dir_relocatingcommit>
 800574c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8005750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005754:	2b00      	cmp	r3, #0
 8005756:	da02      	bge.n	800575e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8005758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800575c:	e26f      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f7fc fe54 	bl	8002414 <lfs_pair_cmp>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	461d      	mov	r5, r3
 8005776:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800577a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800577c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800577e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005782:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8005786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800578a:	2b02      	cmp	r3, #2
 800578c:	d14a      	bne.n	8005824 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3348      	adds	r3, #72	@ 0x48
 8005792:	461a      	mov	r2, r3
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7fe fcca 	bl	8004130 <lfs_dir_getgstate>
 800579c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 80057a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <lfs_dir_orphaningcommit+0x14a>
            return err;
 80057a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057ac:	e247      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80057ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 80057b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	3318      	adds	r3, #24
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fc fe99 	bl	80024f6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	7ddb      	ldrb	r3, [r3, #23]
 80057c8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80057cc:	051a      	lsls	r2, r3, #20
 80057ce:	4bc2      	ldr	r3, [pc, #776]	@ (8005ad8 <lfs_dir_orphaningcommit+0x474>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	3318      	adds	r3, #24
 80057d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80057de:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80057e2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80057e6:	2000      	movs	r0, #0
 80057e8:	9001      	str	r0, [sp, #4]
 80057ea:	2001      	movs	r0, #1
 80057ec:	9000      	str	r0, [sp, #0]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fc72 	bl	80050d8 <lfs_dir_relocatingcommit>
 80057f4:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	3318      	adds	r3, #24
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fc fe60 	bl	80024c2 <lfs_pair_fromle32>
        if (state < 0) {
 8005802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005806:	2b00      	cmp	r3, #0
 8005808:	da02      	bge.n	8005810 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800580a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800580e:	e216      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8005810:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005814:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8005818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800581a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800581c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8005824:	2300      	movs	r3, #0
 8005826:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 800582a:	e1fc      	b.n	8005c26 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800582c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8005830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005834:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005838:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800583c:	4ca7      	ldr	r4, [pc, #668]	@ (8005adc <lfs_dir_orphaningcommit+0x478>)
 800583e:	9403      	str	r4, [sp, #12]
 8005840:	9102      	str	r1, [sp, #8]
 8005842:	9201      	str	r2, [sp, #4]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	4603      	mov	r3, r0
 8005848:	f640 12a9 	movw	r2, #2473	@ 0x9a9
 800584c:	49a4      	ldr	r1, [pc, #656]	@ (8005ae0 <lfs_dir_orphaningcommit+0x47c>)
 800584e:	48a5      	ldr	r0, [pc, #660]	@ (8005ae4 <lfs_dir_orphaningcommit+0x480>)
 8005850:	f009 ff24 	bl	800f69c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f103 0220 	add.w	r2, r3, #32
 8005860:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc fdd4 	bl	8002414 <lfs_pair_cmp>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8005872:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800587a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800588a:	e037      	b.n	80058fc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800588c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005890:	f103 0208 	add.w	r2, r3, #8
 8005894:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fc fdba 	bl	8002414 <lfs_pair_cmp>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80058a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80058aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058ae:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80058b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80058b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058b8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80058ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058be:	799b      	ldrb	r3, [r3, #6]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d116      	bne.n	80058f2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80058c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058c8:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80058cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80058d0:	4611      	mov	r1, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fc fd9e 	bl	8002414 <lfs_pair_cmp>
 80058d8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80058de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80058e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058e6:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80058e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80058ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058f0:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80058f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1c3      	bne.n	800588c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8005904:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005908:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800590c:	4619      	mov	r1, r3
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f002 fae4 	bl	8007edc <lfs_fs_parent>
 8005914:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800591c:	2b00      	cmp	r3, #0
 800591e:	da07      	bge.n	8005930 <lfs_dir_orphaningcommit+0x2cc>
 8005920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005924:	f113 0f02 	cmn.w	r3, #2
 8005928:	d002      	beq.n	8005930 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800592a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800592e:	e186      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8005930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005934:	f113 0f02 	cmn.w	r3, #2
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8005942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005946:	f113 0f02 	cmn.w	r3, #2
 800594a:	f000 809e 	beq.w	8005a8a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800594e:	2101      	movs	r1, #1
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f002 fb37 	bl	8007fc4 <lfs_fs_preporphans>
 8005956:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 800595a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <lfs_dir_orphaningcommit+0x304>
                return err;
 8005962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005966:	e16a      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8005968:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800596c:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3330      	adds	r3, #48	@ 0x30
 8005974:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fc fef6 	bl	800276c <lfs_gstate_hasmovehere>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02d      	beq.n	80059e2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	4618      	mov	r0, r3
 800598c:	f7fc fe38 	bl	8002600 <lfs_tag_id>
 8005990:	4603      	mov	r3, r0
 8005992:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8005996:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005998:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800599a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 800599e:	484f      	ldr	r0, [pc, #316]	@ (8005adc <lfs_dir_orphaningcommit+0x478>)
 80059a0:	9002      	str	r0, [sp, #8]
 80059a2:	9201      	str	r2, [sp, #4]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	460b      	mov	r3, r1
 80059a8:	f640 12d6 	movw	r2, #2518	@ 0x9d6
 80059ac:	494c      	ldr	r1, [pc, #304]	@ (8005ae0 <lfs_dir_orphaningcommit+0x47c>)
 80059ae:	484e      	ldr	r0, [pc, #312]	@ (8005ae8 <lfs_dir_orphaningcommit+0x484>)
 80059b0:	f009 fe74 	bl	800f69c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80059b4:	2200      	movs	r2, #0
 80059b6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f002 fb52 	bl	8008064 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80059c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fc fe1b 	bl	8002600 <lfs_tag_id>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d205      	bcs.n	80059e2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80059d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059da:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80059de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80059e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059e8:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 80059ea:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fd81 	bl	80024f6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80059f4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80059f8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <lfs_dir_orphaningcommit+0x3ac>
 8005a00:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005a0a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8005a0e:	e000      	b.n	8005a12 <lfs_dir_orphaningcommit+0x3ae>
 8005a10:	2300      	movs	r3, #0
 8005a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a14:	2300      	movs	r3, #0
 8005a16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a1e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a24:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005a28:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8005a2c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8005a30:	2000      	movs	r0, #0
 8005a32:	9001      	str	r0, [sp, #4]
 8005a34:	2002      	movs	r0, #2
 8005a36:	9000      	str	r0, [sp, #0]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fb4d 	bl	80050d8 <lfs_dir_relocatingcommit>
 8005a3e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8005a42:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fc fd3b 	bl	80024c2 <lfs_pair_fromle32>
            if (state < 0) {
 8005a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da02      	bge.n	8005a5a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8005a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a58:	e0f1      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8005a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d113      	bne.n	8005a8a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8005a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8005a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8005a6e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005a72:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8005a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a88:	e0cd      	b.n	8005c26 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8005a8a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005a8e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f002 f991 	bl	8007dbc <lfs_fs_pred>
 8005a9a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8005a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <lfs_dir_orphaningcommit+0x452>
 8005aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aaa:	f113 0f02 	cmn.w	r3, #2
 8005aae:	d002      	beq.n	8005ab6 <lfs_dir_orphaningcommit+0x452>
            return err;
 8005ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ab4:	e0c3      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8005ab6:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d01a      	beq.n	8005af4 <lfs_dir_orphaningcommit+0x490>
 8005abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ac2:	f113 0f02 	cmn.w	r3, #2
 8005ac6:	d115      	bne.n	8005af4 <lfs_dir_orphaningcommit+0x490>
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <lfs_dir_orphaningcommit+0x488>)
 8005aca:	4a09      	ldr	r2, [pc, #36]	@ (8005af0 <lfs_dir_orphaningcommit+0x48c>)
 8005acc:	f640 11f9 	movw	r1, #2553	@ 0x9f9
 8005ad0:	4803      	ldr	r0, [pc, #12]	@ (8005ae0 <lfs_dir_orphaningcommit+0x47c>)
 8005ad2:	f009 fc33 	bl	800f33c <__assert_func>
 8005ad6:	bf00      	nop
 8005ad8:	000ffc08 	.word	0x000ffc08
 8005adc:	08010688 	.word	0x08010688
 8005ae0:	08010540 	.word	0x08010540
 8005ae4:	08010804 	.word	0x08010804
 8005ae8:	08010840 	.word	0x08010840
 8005aec:	08010884 	.word	0x08010884
 8005af0:	080113bc 	.word	0x080113bc

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8005af4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005af8:	f113 0f02 	cmn.w	r3, #2
 8005afc:	f000 8093 	beq.w	8005c26 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3330      	adds	r3, #48	@ 0x30
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fc fde8 	bl	80026da <lfs_gstate_hasorphans>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d011      	beq.n	8005b34 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 8005b10:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8005b14:	425b      	negs	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f002 fa51 	bl	8007fc4 <lfs_fs_preporphans>
 8005b22:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8005b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8005b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b32:	e084      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8005b34:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8005b38:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3330      	adds	r3, #48	@ 0x30
 8005b40:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8005b44:	4611      	mov	r1, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fc fe10 	bl	800276c <lfs_gstate_hasmovehere>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01c      	beq.n	8005b8c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fc fd52 	bl	8002600 <lfs_tag_id>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8005b62:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b66:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8005b6a:	4837      	ldr	r0, [pc, #220]	@ (8005c48 <lfs_dir_orphaningcommit+0x5e4>)
 8005b6c:	9002      	str	r0, [sp, #8]
 8005b6e:	9201      	str	r2, [sp, #4]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	460b      	mov	r3, r1
 8005b74:	f640 220a 	movw	r2, #2570	@ 0xa0a
 8005b78:	4934      	ldr	r1, [pc, #208]	@ (8005c4c <lfs_dir_orphaningcommit+0x5e8>)
 8005b7a:	4835      	ldr	r0, [pc, #212]	@ (8005c50 <lfs_dir_orphaningcommit+0x5ec>)
 8005b7c:	f009 fd8e 	bl	800f69c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005b80:	2200      	movs	r2, #0
 8005b82:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f002 fa6c 	bl	8008064 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8005b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8005b92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8005b98:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fc fcaa 	bl	80024f6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005ba2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8005ba6:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <lfs_dir_orphaningcommit+0x55a>
 8005bae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005bb8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8005bbc:	e000      	b.n	8005bc0 <lfs_dir_orphaningcommit+0x55c>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8005bca:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8005bce:	051a      	lsls	r2, r3, #20
 8005bd0:	4b20      	ldr	r3, [pc, #128]	@ (8005c54 <lfs_dir_orphaningcommit+0x5f0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005be0:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8005be4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8005be8:	2000      	movs	r0, #0
 8005bea:	9001      	str	r0, [sp, #4]
 8005bec:	2002      	movs	r0, #2
 8005bee:	9000      	str	r0, [sp, #0]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fa71 	bl	80050d8 <lfs_dir_relocatingcommit>
 8005bf6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8005bfa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fc fc5f 	bl	80024c2 <lfs_pair_fromle32>
            if (state < 0) {
 8005c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da02      	bge.n	8005c12 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8005c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c10:	e015      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8005c12:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8005c16:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8005c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8005c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	f43f adfe 	beq.w	800582c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8005c30:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <lfs_dir_orphaningcommit+0x5d8>
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e000      	b.n	8005c3e <lfs_dir_orphaningcommit+0x5da>
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	37e0      	adds	r7, #224	@ 0xe0
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bdb0      	pop	{r4, r5, r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08010688 	.word	0x08010688
 8005c4c:	08010540 	.word	0x08010540
 8005c50:	08010840 	.word	0x08010840
 8005c54:	000ffc08 	.word	0x000ffc08

08005c58 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff fcf9 	bl	8005664 <lfs_dir_orphaningcommit>
 8005c72:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	da01      	bge.n	8005c7e <lfs_dir_commit+0x26>
        return orphans;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	e00d      	b.n	8005c9a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8005c84:	2100      	movs	r1, #0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f002 fb0e 	bl	80082a8 <lfs_fs_deorphan>
 8005c8c:	6138      	str	r0, [r7, #16]
        if (err) {
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <lfs_dir_commit+0x40>
            return err;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	e000      	b.n	8005c9a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8005ca2:	b590      	push	{r4, r7, lr}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	3b08      	subs	r3, #8
 8005cba:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <lfs_ctz_index+0x2e>
        return 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e01c      	b.n	8005d0a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fb ff32 	bl	8001b3e <lfs_popc>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	3302      	adds	r3, #2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	1ad4      	subs	r4, r2, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7fb ff20 	bl	8001b3e <lfs_popc>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	1ae2      	subs	r2, r4, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	601a      	str	r2, [r3, #0]
    return i;
 8005d08:	68fb      	ldr	r3, [r7, #12]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}

08005d12 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8005d12:	b590      	push	{r4, r7, lr}
 8005d14:	b08f      	sub	sp, #60	@ 0x3c
 8005d16:	af04      	add	r7, sp, #16
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8005d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8005d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	601a      	str	r2, [r3, #0]
        *off = 0;
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
        return 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e053      	b.n	8005de0 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8005d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	f107 0314 	add.w	r3, r7, #20
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff ffac 	bl	8005ca2 <lfs_ctz_index>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8005d4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005d52:	4619      	mov	r1, r3
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff ffa4 	bl	8005ca2 <lfs_ctz_index>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8005d5e:	e034      	b.n	8005dca <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8005d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fb fec9 	bl	8001b00 <lfs_npw2>
 8005d6e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8005d70:	1e5c      	subs	r4, r3, #1
 8005d72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d74:	f7fb fed4 	bl	8001b20 <lfs_ctz>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f7fb fe88 	bl	8001a92 <lfs_min>
 8005d82:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	9103      	str	r1, [sp, #12]
 8005d8e:	4639      	mov	r1, r7
 8005d90:	9102      	str	r1, [sp, #8]
 8005d92:	9201      	str	r2, [sp, #4]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	2304      	movs	r3, #4
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7fb ff53 	bl	8001c48 <lfs_bd_read>
 8005da2:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fb fee3 	bl	8001b72 <lfs_fromle32>
 8005dac:	4603      	mov	r3, r0
 8005dae:	603b      	str	r3, [r7, #0]
        if (err) {
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <lfs_ctz_find+0xa8>
            return err;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	e012      	b.n	8005de0 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8005dba:	2201      	movs	r2, #1
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8005dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d8c6      	bhi.n	8005d60 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd6:	601a      	str	r2, [r3, #0]
    *off = pos;
 8005dd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ddc:	601a      	str	r2, [r3, #0]
    return 0;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	372c      	adds	r7, #44	@ 0x2c
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd90      	pop	{r4, r7, pc}

08005de8 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	@ 0x48
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005df6:	f107 0320 	add.w	r3, r7, #32
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7fc fef7 	bl	8002bf0 <lfs_alloc>
 8005e02:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <lfs_ctz_extend+0x26>
            return err;
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	e0eb      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	4619      	mov	r1, r3
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7fc fa58 	bl	80022c8 <lfs_bd_erase>
 8005e18:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005e26:	f000 80cd 	beq.w	8005fc4 <lfs_ctz_extend+0x1dc>
                    goto relocate;
                }
                return err;
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	e0db      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
            }

            if (size == 0) {
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e38:	601a      	str	r2, [r3, #0]
                *off = 0;
 8005e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
                return 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e0d0      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
            }

            lfs_size_t noff = size - 1;
 8005e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e46:	3b01      	subs	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8005e4a:	f107 031c 	add.w	r3, r7, #28
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff ff26 	bl	8005ca2 <lfs_ctz_index>
 8005e56:	4603      	mov	r3, r0
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d046      	beq.n	8005efa <lfs_ctz_extend+0x112>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e70:	e037      	b.n	8005ee2 <lfs_ctz_extend+0xfa>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	2301      	movs	r3, #1
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	f107 0317 	add.w	r3, r7, #23
 8005e80:	9302      	str	r3, [sp, #8]
 8005e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7fb fed9 	bl	8001c48 <lfs_bd_read>
 8005e96:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8005e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <lfs_ctz_extend+0xba>
                        return err;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	e01e      	b.n	8005ee0 <lfs_ctz_extend+0xf8>
                    }

                    err = lfs_bd_prog(lfs,
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	9203      	str	r2, [sp, #12]
 8005ea8:	f107 0217 	add.w	r2, r7, #23
 8005eac:	9202      	str	r2, [sp, #8]
 8005eae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005eb0:	9201      	str	r2, [sp, #4]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7fc f956 	bl	800216c <lfs_bd_prog>
 8005ec0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8005ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005ece:	d101      	bne.n	8005ed4 <lfs_ctz_extend+0xec>
                            goto relocate;
 8005ed0:	bf00      	nop
                    goto relocate;
 8005ed2:	e07a      	b.n	8005fca <lfs_ctz_extend+0x1e2>
                        }
                        return err;
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	e003      	b.n	8005ee0 <lfs_ctz_extend+0xf8>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eda:	3301      	adds	r3, #1
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ede:	e000      	b.n	8005ee2 <lfs_ctz_extend+0xfa>
                return err;
 8005ee0:	e081      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
                for (lfs_off_t i = 0; i < noff; i++) {
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d3c3      	bcc.n	8005e72 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8005eea:	6a3a      	ldr	r2, [r7, #32]
 8005eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eee:	601a      	str	r2, [r3, #0]
                *off = noff;
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef4:	601a      	str	r2, [r3, #0]
                return 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e075      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
            }

            // append block
            index += 1;
 8005efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efc:	3301      	adds	r3, #1
 8005efe:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8005f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f02:	f7fb fe0d 	bl	8001b20 <lfs_ctz>
 8005f06:	4603      	mov	r3, r0
 8005f08:	3301      	adds	r3, #1
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8005f10:	2300      	movs	r3, #0
 8005f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f14:	e049      	b.n	8005faa <lfs_ctz_extend+0x1c2>
                nhead = lfs_tole32(nhead);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fb fe35 	bl	8001b88 <lfs_tole32>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f26:	0092      	lsls	r2, r2, #2
 8005f28:	2104      	movs	r1, #4
 8005f2a:	9103      	str	r1, [sp, #12]
 8005f2c:	f107 0118 	add.w	r1, r7, #24
 8005f30:	9102      	str	r1, [sp, #8]
 8005f32:	9201      	str	r2, [sp, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2301      	movs	r3, #1
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7fc f915 	bl	800216c <lfs_bd_prog>
 8005f42:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fb fe13 	bl	8001b72 <lfs_fromle32>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	61bb      	str	r3, [r7, #24]
                if (err) {
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <lfs_ctz_extend+0x17a>
                    if (err == LFS_ERR_CORRUPT) {
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005f5c:	d034      	beq.n	8005fc8 <lfs_ctz_extend+0x1e0>
                        goto relocate;
                    }
                    return err;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	e041      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
                }

                if (i != skips-1) {
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	3b01      	subs	r3, #1
 8005f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d01b      	beq.n	8005fa4 <lfs_ctz_extend+0x1bc>
                    err = lfs_bd_read(lfs,
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f70:	0092      	lsls	r2, r2, #2
 8005f72:	2104      	movs	r1, #4
 8005f74:	9103      	str	r1, [sp, #12]
 8005f76:	f107 0118 	add.w	r1, r7, #24
 8005f7a:	9102      	str	r1, [sp, #8]
 8005f7c:	9201      	str	r2, [sp, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2304      	movs	r3, #4
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	2100      	movs	r1, #0
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7fb fe5e 	bl	8001c48 <lfs_bd_read>
 8005f8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fb fdee 	bl	8001b72 <lfs_fromle32>
 8005f96:	4603      	mov	r3, r0
 8005f98:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <lfs_ctz_extend+0x1bc>
                        return err;
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	e020      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
            for (lfs_off_t i = 0; i < skips; i++) {
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d3b1      	bcc.n	8005f16 <lfs_ctz_extend+0x12e>
                    }
                }
            }

            *block = nblock;
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb6:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	009a      	lsls	r2, r3, #2
 8005fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fbe:	601a      	str	r2, [r3, #0]
            return 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e010      	b.n	8005fe6 <lfs_ctz_extend+0x1fe>
                    goto relocate;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <lfs_ctz_extend+0x1e2>
                        goto relocate;
 8005fc8:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	4a08      	ldr	r2, [pc, #32]	@ (8005ff0 <lfs_ctz_extend+0x208>)
 8005fce:	9200      	str	r2, [sp, #0]
 8005fd0:	f640 32c3 	movw	r2, #3011	@ 0xbc3
 8005fd4:	4907      	ldr	r1, [pc, #28]	@ (8005ff4 <lfs_ctz_extend+0x20c>)
 8005fd6:	4808      	ldr	r0, [pc, #32]	@ (8005ff8 <lfs_ctz_extend+0x210>)
 8005fd8:	f009 fb60 	bl	800f69c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7fb fe0d 	bl	8001bfe <lfs_cache_drop>
    while (true) {
 8005fe4:	e707      	b.n	8005df6 <lfs_ctz_extend+0xe>
    }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3738      	adds	r7, #56	@ 0x38
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	08010688 	.word	0x08010688
 8005ff4:	08010540 	.word	0x08010540
 8005ff8:	08010704 	.word	0x08010704

08005ffc <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b090      	sub	sp, #64	@ 0x40
 8006000:	af04      	add	r7, sp, #16
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <lfs_ctz_traverse+0x18>
        return 0;
 8006010:	2300      	movs	r3, #0
 8006012:	e06b      	b.n	80060ec <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	3b01      	subs	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	f107 031c 	add.w	r3, r7, #28
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fe3e 	bl	8005ca2 <lfs_ctz_index>
 8006026:	4603      	mov	r3, r0
 8006028:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 800602a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006030:	4798      	blx	r3
 8006032:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <lfs_ctz_traverse+0x42>
            return err;
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	e056      	b.n	80060ec <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <lfs_ctz_traverse+0x4c>
            return 0;
 8006044:	2300      	movs	r3, #0
 8006046:	e051      	b.n	80060ec <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8006048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	f1c3 0302 	rsb	r3, r3, #2
 8006052:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8006054:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8006056:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8006058:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800605a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800605c:	9303      	str	r3, [sp, #12]
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	9302      	str	r3, [sp, #8]
 8006064:	2300      	movs	r3, #0
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4613      	mov	r3, r2
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7fb fde8 	bl	8001c48 <lfs_bd_read>
 8006078:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4618      	mov	r0, r3
 800607e:	f7fb fd78 	bl	8001b72 <lfs_fromle32>
 8006082:	4603      	mov	r3, r0
 8006084:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	4618      	mov	r0, r3
 800608a:	f7fb fd72 	bl	8001b72 <lfs_fromle32>
 800608e:	4603      	mov	r3, r0
 8006090:	61bb      	str	r3, [r7, #24]
        if (err) {
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <lfs_ctz_traverse+0xa0>
            return err;
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	e027      	b.n	80060ec <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800609c:	2300      	movs	r3, #0
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a0:	e012      	b.n	80060c8 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	3330      	adds	r3, #48	@ 0x30
 80060a8:	443b      	add	r3, r7
 80060aa:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80060ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b0:	4611      	mov	r1, r2
 80060b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80060b4:	4798      	blx	r3
 80060b6:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <lfs_ctz_traverse+0xc6>
                return err;
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	e014      	b.n	80060ec <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	3301      	adds	r3, #1
 80060c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ce:	429a      	cmp	r2, r3
 80060d0:	dbe7      	blt.n	80060a2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	3330      	adds	r3, #48	@ 0x30
 80060da:	443b      	add	r3, r7
 80060dc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80060e0:	603b      	str	r3, [r7, #0]
        index -= count;
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 80060ea:	e79e      	b.n	800602a <lfs_ctz_traverse+0x2e>
    }
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3730      	adds	r7, #48	@ 0x30
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80060f4:	b5b0      	push	{r4, r5, r7, lr}
 80060f6:	b09a      	sub	sp, #104	@ 0x68
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f002 fa7b 	bl	8008608 <lfs_fs_forceconsistency>
 8006112:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8006114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <lfs_file_opencfg_+0x2a>
            return err;
 800611a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800611c:	e1bf      	b.n	800649e <lfs_file_opencfg_+0x3aa>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006122:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f103 0108 	add.w	r1, r3, #8
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3304      	adds	r3, #4
 8006146:	1d3a      	adds	r2, r7, #4
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7fe f86d 	bl	8004228 <lfs_dir_find>
 800614e:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 8006150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006152:	2b00      	cmp	r3, #0
 8006154:	da10      	bge.n	8006178 <lfs_file_opencfg_+0x84>
 8006156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006158:	f113 0f02 	cmn.w	r3, #2
 800615c:	d109      	bne.n	8006172 <lfs_file_opencfg_+0x7e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fc f8f3 	bl	800234c <lfs_path_islast>
 8006166:	4603      	mov	r3, r0
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <lfs_file_opencfg_+0x84>
        err = tag;
 8006172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006174:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8006176:	e187      	b.n	8006488 <lfs_file_opencfg_+0x394>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2201      	movs	r2, #1
 800617c:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7fc fc62 	bl	8002a4a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8006186:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006188:	f113 0f02 	cmn.w	r3, #2
 800618c:	d159      	bne.n	8006242 <lfs_file_opencfg_+0x14e>
        if (!(flags & LFS_O_CREAT)) {
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d103      	bne.n	80061a0 <lfs_file_opencfg_+0xac>
            err = LFS_ERR_NOENT;
 8006198:	f06f 0301 	mvn.w	r3, #1
 800619c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800619e:	e173      	b.n	8006488 <lfs_file_opencfg_+0x394>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fc f8f2 	bl	800238c <lfs_path_isdir>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <lfs_file_opencfg_+0xc2>
            err = LFS_ERR_NOTDIR;
 80061ae:	f06f 0313 	mvn.w	r3, #19
 80061b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80061b4:	e168      	b.n	8006488 <lfs_file_opencfg_+0x394>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fc f8b7 	bl	800232c <lfs_path_namelen>
 80061be:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d903      	bls.n	80061d2 <lfs_file_opencfg_+0xde>
            err = LFS_ERR_NAMETOOLONG;
 80061ca:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80061ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80061d0:	e15a      	b.n	8006488 <lfs_file_opencfg_+0x394>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f103 0108 	add.w	r1, r3, #8
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	889b      	ldrh	r3, [r3, #4]
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061e8:	2300      	movs	r3, #0
 80061ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	889b      	ldrh	r3, [r3, #4]
 80061f0:	029a      	lsls	r2, r3, #10
 80061f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	889b      	ldrh	r3, [r3, #4]
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800620a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	@ 0x40
 8006214:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006218:	2303      	movs	r3, #3
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff fd1c 	bl	8005c58 <lfs_dir_commit>
 8006220:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8006222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006224:	f113 0f1c 	cmn.w	r3, #28
 8006228:	d001      	beq.n	800622e <lfs_file_opencfg_+0x13a>
 800622a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800622c:	e001      	b.n	8006232 <lfs_file_opencfg_+0x13e>
 800622e:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8006232:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8006234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8125 	bne.w	8006486 <lfs_file_opencfg_+0x392>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800623c:	4b9a      	ldr	r3, [pc, #616]	@ (80064a8 <lfs_file_opencfg_+0x3b4>)
 800623e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006240:	e044      	b.n	80062cc <lfs_file_opencfg_+0x1d8>
    } else if (flags & LFS_O_EXCL) {
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <lfs_file_opencfg_+0x160>
        err = LFS_ERR_EXIST;
 800624c:	f06f 0310 	mvn.w	r3, #16
 8006250:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8006252:	e119      	b.n	8006488 <lfs_file_opencfg_+0x394>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8006254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006256:	4618      	mov	r0, r3
 8006258:	f7fc f9a8 	bl	80025ac <lfs_tag_type3>
 800625c:	4603      	mov	r3, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	d003      	beq.n	800626a <lfs_file_opencfg_+0x176>
        err = LFS_ERR_ISDIR;
 8006262:	f06f 0314 	mvn.w	r3, #20
 8006266:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8006268:	e10e      	b.n	8006488 <lfs_file_opencfg_+0x394>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00e      	beq.n	8006292 <lfs_file_opencfg_+0x19e>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	889b      	ldrh	r3, [r3, #4]
 8006278:	029b      	lsls	r3, r3, #10
 800627a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800627e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006282:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006290:	e01c      	b.n	80062cc <lfs_file_opencfg_+0x1d8>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	889b      	ldrh	r3, [r3, #4]
 800629c:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800629e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062a2:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80062aa:	9200      	str	r2, [sp, #0]
 80062ac:	4a7f      	ldr	r2, [pc, #508]	@ (80064ac <lfs_file_opencfg_+0x3b8>)
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7fc fe1c 	bl	8002eec <lfs_dir_get>
 80062b4:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80062b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	da02      	bge.n	80062c2 <lfs_file_opencfg_+0x1ce>
            err = tag;
 80062bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062be:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80062c0:	e0e2      	b.n	8006488 <lfs_file_opencfg_+0x394>
        }
        lfs_ctz_fromle32(&file->ctz);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	3328      	adds	r3, #40	@ 0x28
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc fae0 	bl	800288c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80062cc:	2300      	movs	r3, #0
 80062ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80062d0:	e063      	b.n	800639a <lfs_file_opencfg_+0x2a6>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d03c      	beq.n	8006358 <lfs_file_opencfg_+0x264>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062ec:	4613      	mov	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80062fc:	051a      	lsls	r2, r3, #20
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	889b      	ldrh	r3, [r3, #4]
 8006302:	029b      	lsls	r3, r3, #10
 8006304:	ea42 0103 	orr.w	r1, r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630c:	6858      	ldr	r0, [r3, #4]
 800630e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4403      	add	r3, r0
 800631a:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800631c:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006328:	4613      	mov	r3, r2
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	4603      	mov	r3, r0
 8006338:	4a5d      	ldr	r2, [pc, #372]	@ (80064b0 <lfs_file_opencfg_+0x3bc>)
 800633a:	4621      	mov	r1, r4
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fc fdd5 	bl	8002eec <lfs_dir_get>
 8006342:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006346:	2b00      	cmp	r3, #0
 8006348:	da06      	bge.n	8006358 <lfs_file_opencfg_+0x264>
 800634a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800634c:	f113 0f02 	cmn.w	r3, #2
 8006350:	d002      	beq.n	8006358 <lfs_file_opencfg_+0x264>
                err = res;
 8006352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006354:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006356:	e097      	b.n	8006488 <lfs_file_opencfg_+0x394>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d017      	beq.n	8006394 <lfs_file_opencfg_+0x2a0>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800636c:	4613      	mov	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800637c:	429a      	cmp	r2, r3
 800637e:	d903      	bls.n	8006388 <lfs_file_opencfg_+0x294>
                err = LFS_ERR_NOSPC;
 8006380:	f06f 031b 	mvn.w	r3, #27
 8006384:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006386:	e07f      	b.n	8006488 <lfs_file_opencfg_+0x394>
            }

            file->flags |= LFS_F_DIRTY;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006396:	3301      	adds	r3, #1
 8006398:	657b      	str	r3, [r7, #84]	@ 0x54
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d395      	bcc.n	80062d2 <lfs_file_opencfg_+0x1de>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <lfs_file_opencfg_+0x2c8>
        file->cache.buffer = file->cfg->buffer;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80063ba:	e010      	b.n	80063de <lfs_file_opencfg_+0x2ea>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fb fc04 	bl	8001bd0 <lfs_malloc>
 80063c8:	4602      	mov	r2, r0
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <lfs_file_opencfg_+0x2ea>
            err = LFS_ERR_NOMEM;
 80063d6:	f06f 030b 	mvn.w	r3, #11
 80063da:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80063dc:	e054      	b.n	8006488 <lfs_file_opencfg_+0x394>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	3340      	adds	r3, #64	@ 0x40
 80063e2:	4619      	mov	r1, r3
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7fb fc19 	bl	8001c1c <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80063ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fc f8dd 	bl	80025ac <lfs_tag_type3>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	f240 2301 	movw	r3, #513	@ 0x201
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d141      	bne.n	8006482 <lfs_file_opencfg_+0x38e>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f06f 0201 	mvn.w	r2, #1
 8006404:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006408:	4618      	mov	r0, r3
 800640a:	f7fc f909 	bl	8002620 <lfs_tag_size>
 800640e:	4602      	mov	r2, r0
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006418:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d020      	beq.n	8006482 <lfs_file_opencfg_+0x38e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	889b      	ldrh	r3, [r3, #4]
 800644a:	029c      	lsls	r4, r3, #10
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006450:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8006454:	4618      	mov	r0, r3
 8006456:	f7fb fb1c 	bl	8001a92 <lfs_min>
 800645a:	4603      	mov	r3, r0
 800645c:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800645e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	4a10      	ldr	r2, [pc, #64]	@ (80064ac <lfs_file_opencfg_+0x3b8>)
 800646c:	4629      	mov	r1, r5
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7fc fd3c 	bl	8002eec <lfs_dir_get>
 8006474:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8006476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006478:	2b00      	cmp	r3, #0
 800647a:	da02      	bge.n	8006482 <lfs_file_opencfg_+0x38e>
                err = res;
 800647c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800647e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8006480:	e002      	b.n	8006488 <lfs_file_opencfg_+0x394>
            }
        }
    }

    return 0;
 8006482:	2300      	movs	r3, #0
 8006484:	e00b      	b.n	800649e <lfs_file_opencfg_+0x3aa>
            goto cleanup;
 8006486:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f824 	bl	80064e4 <lfs_file_close_>
    return err;
 800649c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3760      	adds	r7, #96	@ 0x60
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bdb0      	pop	{r4, r5, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20100000 	.word	0x20100000
 80064ac:	700ffc00 	.word	0x700ffc00
 80064b0:	7ffffc00 	.word	0x7ffffc00

080064b4 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80064c2:	4b07      	ldr	r3, [pc, #28]	@ (80064e0 <lfs_file_open_+0x2c>)
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fe11 	bl	80060f4 <lfs_file_opencfg_>
 80064d2:	6178      	str	r0, [r7, #20]
    return err;
 80064d4:	697b      	ldr	r3, [r7, #20]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	080113d4 	.word	0x080113d4

080064e4 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f9e5 	bl	80068c0 <lfs_file_sync_>
 80064f6:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fa83 	bl	8002a06 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650e:	4618      	mov	r0, r3
 8006510:	f7fb fb6a 	bl	8001be8 <lfs_free>
    }

    return err;
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b08d      	sub	sp, #52	@ 0x34
 8006524:	af06      	add	r7, sp, #24
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800652a:	f107 030c 	add.w	r3, r7, #12
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fc fb5d 	bl	8002bf0 <lfs_alloc>
 8006536:	6138      	str	r0, [r7, #16]
        if (err) {
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <lfs_file_relocate+0x22>
            return err;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	e0bb      	b.n	80066ba <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb febe 	bl	80022c8 <lfs_bd_erase>
 800654c:	6138      	str	r0, [r7, #16]
        if (err) {
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d006      	beq.n	8006562 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800655a:	f000 809b 	beq.w	8006694 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	e0ab      	b.n	80066ba <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e069      	b.n	800663c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d027      	beq.n	80065c4 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	f103 0008 	add.w	r0, r3, #8
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	889b      	ldrh	r3, [r3, #4]
 800658c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800658e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006596:	2101      	movs	r1, #1
 8006598:	9105      	str	r1, [sp, #20]
 800659a:	f107 010b 	add.w	r1, r7, #11
 800659e:	9104      	str	r1, [sp, #16]
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	9103      	str	r1, [sp, #12]
 80065a4:	9302      	str	r3, [sp, #8]
 80065a6:	4b47      	ldr	r3, [pc, #284]	@ (80066c4 <lfs_file_relocate+0x1a4>)
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	9200      	str	r2, [sp, #0]
 80065ac:	4623      	mov	r3, r4
 80065ae:	2200      	movs	r2, #0
 80065b0:	4601      	mov	r1, r0
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fc fcb5 	bl	8002f22 <lfs_dir_getread>
 80065b8:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01e      	beq.n	80065fe <lfs_file_relocate+0xde>
                    return err;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	e07a      	b.n	80066ba <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 80065ca:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	1ad4      	subs	r4, r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	2201      	movs	r2, #1
 80065da:	9203      	str	r2, [sp, #12]
 80065dc:	f107 020b 	add.w	r2, r7, #11
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	9201      	str	r2, [sp, #4]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4623      	mov	r3, r4
 80065ea:	4602      	mov	r2, r0
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fb fb2b 	bl	8001c48 <lfs_bd_read>
 80065f2:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <lfs_file_relocate+0xde>
                    return err;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	e05d      	b.n	80066ba <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f103 0110 	add.w	r1, r3, #16
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	9203      	str	r2, [sp, #12]
 800660c:	f107 020b 	add.w	r2, r7, #11
 8006610:	9202      	str	r2, [sp, #8]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	9201      	str	r2, [sp, #4]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2301      	movs	r3, #1
 800661a:	4602      	mov	r2, r0
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fb fda5 	bl	800216c <lfs_bd_prog>
 8006622:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006630:	d032      	beq.n	8006698 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	e041      	b.n	80066ba <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	3301      	adds	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	429a      	cmp	r2, r3
 8006644:	d390      	bcc.n	8006568 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69d9      	ldr	r1, [r3, #28]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	461a      	mov	r2, r3
 8006656:	f009 f932 	bl	800f8be <memcpy>
        file->cache.block = lfs->pcache.block;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3310      	adds	r3, #16
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fb facf 	bl	8001c1c <lfs_cache_zero>

        file->block = nblock;
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8006690:	2300      	movs	r3, #0
 8006692:	e012      	b.n	80066ba <lfs_file_relocate+0x19a>
                goto relocate;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <lfs_file_relocate+0x17a>
                    goto relocate;
 8006698:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a0a      	ldr	r2, [pc, #40]	@ (80066c8 <lfs_file_relocate+0x1a8>)
 800669e:	9200      	str	r2, [sp, #0]
 80066a0:	f640 42ff 	movw	r2, #3327	@ 0xcff
 80066a4:	4909      	ldr	r1, [pc, #36]	@ (80066cc <lfs_file_relocate+0x1ac>)
 80066a6:	480a      	ldr	r0, [pc, #40]	@ (80066d0 <lfs_file_relocate+0x1b0>)
 80066a8:	f008 fff8 	bl	800f69c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3310      	adds	r3, #16
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb faa3 	bl	8001bfe <lfs_cache_drop>
    while (true) {
 80066b8:	e737      	b.n	800652a <lfs_file_relocate+0xa>
    }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd90      	pop	{r4, r7, pc}
 80066c2:	bf00      	nop
 80066c4:	fff7fc00 	.word	0xfff7fc00
 80066c8:	08010688 	.word	0x08010688
 80066cc:	08010540 	.word	0x08010540
 80066d0:	08010704 	.word	0x08010704

080066d4 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc f9eb 	bl	8002ac2 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff ff16 	bl	8006520 <lfs_file_relocate>
 80066f4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <lfs_file_outline+0x2c>
        return err;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	e006      	b.n	800670e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b09f      	sub	sp, #124	@ 0x7c
 800671c:	af02      	add	r7, sp, #8
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d011      	beq.n	8006752 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	3340      	adds	r3, #64	@ 0x40
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fb fa5c 	bl	8001bfe <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a4 	beq.w	80068a8 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006764:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d176      	bne.n	8006860 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8006772:	f107 030c 	add.w	r3, r7, #12
 8006776:	2254      	movs	r2, #84	@ 0x54
 8006778:	2100      	movs	r1, #0
 800677a:	4618      	mov	r0, r3
 800677c:	f008 fff3 	bl	800f766 <memset>
                .ctz.head = file->ctz.head,
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8006784:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 800678a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800678c:	2301      	movs	r3, #1
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8006794:	643b      	str	r3, [r7, #64]	@ 0x40
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800679c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800679e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb fa29 	bl	8001bfe <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80067ac:	e02b      	b.n	8006806 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80067ae:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80067b2:	f107 010c 	add.w	r1, r7, #12
 80067b6:	2301      	movs	r3, #1
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f921 	bl	8006a00 <lfs_file_flushedread>
 80067be:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80067c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da01      	bge.n	80067ca <lfs_file_flush+0xb2>
                    return res;
 80067c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067c8:	e06f      	b.n	80068aa <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80067ca:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80067ce:	2301      	movs	r3, #1
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa1c 	bl	8006c10 <lfs_file_flushedwrite>
 80067d8:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80067da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067dc:	2b00      	cmp	r3, #0
 80067de:	da01      	bge.n	80067e4 <lfs_file_flush+0xcc>
                    return res;
 80067e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067e2:	e062      	b.n	80068aa <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d00b      	beq.n	8006806 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80067ee:	f107 030c 	add.w	r3, r7, #12
 80067f2:	3340      	adds	r3, #64	@ 0x40
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fa01 	bl	8001bfe <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb f9fc 	bl	8001bfe <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	429a      	cmp	r2, r3
 8006810:	d3cd      	bcc.n	80067ae <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	2301      	movs	r3, #1
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fb fbf7 	bl	8002010 <lfs_bd_flush>
 8006822:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8006824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006826:	2b00      	cmp	r3, #0
 8006828:	d026      	beq.n	8006878 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800682a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800682c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006830:	d001      	beq.n	8006836 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8006832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006834:	e039      	b.n	80068aa <lfs_file_flush+0x192>
                        goto relocate;
 8006836:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <lfs_file_flush+0x19c>)
 800683e:	9200      	str	r2, [sp, #0]
 8006840:	f640 524e 	movw	r2, #3406	@ 0xd4e
 8006844:	491c      	ldr	r1, [pc, #112]	@ (80068b8 <lfs_file_flush+0x1a0>)
 8006846:	481d      	ldr	r0, [pc, #116]	@ (80068bc <lfs_file_flush+0x1a4>)
 8006848:	f008 ff28 	bl	800f69c <iprintf>
                err = lfs_file_relocate(lfs, file);
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fe66 	bl	8006520 <lfs_file_relocate>
 8006854:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8006856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0da      	beq.n	8006812 <lfs_file_flush+0xfa>
                    return err;
 800685c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800685e:	e024      	b.n	80068aa <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f7fb f901 	bl	8001a72 <lfs_max>
 8006870:	4602      	mov	r2, r0
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	635a      	str	r2, [r3, #52]	@ 0x34
 8006876:	e000      	b.n	800687a <lfs_file_flush+0x162>
                break;
 8006878:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068a6:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3774      	adds	r7, #116	@ 0x74
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	08010688 	.word	0x08010688
 80068b8:	08010540 	.word	0x08010540
 80068bc:	08010704 	.word	0x08010704

080068c0 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b090      	sub	sp, #64	@ 0x40
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e08e      	b.n	80069f8 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ff1b 	bl	8006718 <lfs_file_flush>
 80068e2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	e07e      	b.n	80069f8 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d077      	beq.n	80069f6 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	4618      	mov	r0, r3
 800690c:	f7fb fd67 	bl	80023de <lfs_pair_isnull>
 8006910:	4603      	mov	r3, r0
 8006912:	f083 0301 	eor.w	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8006918:	2b00      	cmp	r3, #0
 800691a:	d06c      	beq.n	80069f6 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10d      	bne.n	8006944 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0110 	add.w	r1, r3, #16
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	2300      	movs	r3, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fb fbe6 	bl	8002104 <lfs_bd_sync>
 8006938:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <lfs_file_sync_+0x84>
                return err;
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	e059      	b.n	80069f8 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8006950:	f240 2301 	movw	r3, #513	@ 0x201
 8006954:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006960:	637b      	str	r3, [r7, #52]	@ 0x34
 8006962:	e014      	b.n	800698e <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8006964:	f240 2302 	movw	r3, #514	@ 0x202
 8006968:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006970:	3228      	adds	r2, #40	@ 0x28
 8006972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006976:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800697a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800697e:	4618      	mov	r0, r3
 8006980:	f7fb ff9c 	bl	80028bc <lfs_ctz_tole32>
            buffer = &ctz;
 8006984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006988:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 800698a:	2308      	movs	r3, #8
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f103 0108 	add.w	r1, r3, #8
 8006994:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006996:	051a      	lsls	r2, r3, #20
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	889b      	ldrh	r3, [r3, #4]
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	431a      	orrs	r2, r3
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	889b      	ldrh	r3, [r3, #4]
 80069ae:	029a      	lsls	r2, r3, #10
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069c6:	f107 0218 	add.w	r2, r7, #24
 80069ca:	2302      	movs	r3, #2
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff f943 	bl	8005c58 <lfs_dir_commit>
 80069d2:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	e006      	b.n	80069f8 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3740      	adds	r7, #64	@ 0x40
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006a00:	b5b0      	push	{r4, r5, r7, lr}
 8006a02:	b090      	sub	sp, #64	@ 0x40
 8006a04:	af06      	add	r7, sp, #24
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d301      	bcc.n	8006a26 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e0b7      	b.n	8006b96 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	6838      	ldr	r0, [r7, #0]
 8006a34:	f7fb f82d 	bl	8001a92 <lfs_min>
 8006a38:	6038      	str	r0, [r7, #0]
    nsize = size;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8006a3e:	e0a5      	b.n	8006b8c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d006      	beq.n	8006a5a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a54:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d130      	bne.n	8006abc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11c      	bne.n	8006aa0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	3138      	adds	r1, #56	@ 0x38
 8006a7c:	68b8      	ldr	r0, [r7, #8]
 8006a7e:	303c      	adds	r0, #60	@ 0x3c
 8006a80:	9003      	str	r0, [sp, #12]
 8006a82:	9102      	str	r1, [sp, #8]
 8006a84:	9201      	str	r2, [sp, #4]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	462b      	mov	r3, r5
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff f93f 	bl	8005d12 <lfs_ctz_find>
 8006a94:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d009      	beq.n	8006ab0 <lfs_file_flushedread+0xb0>
                    return err;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	e07a      	b.n	8006b96 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f06f 0201 	mvn.w	r2, #1
 8006aa6:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ac0:	69da      	ldr	r2, [r3, #28]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6a38      	ldr	r0, [r7, #32]
 8006acc:	f7fa ffe1 	bl	8001a92 <lfs_min>
 8006ad0:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d026      	beq.n	8006b2c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f103 0408 	add.w	r4, r3, #8
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aee:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	889b      	ldrh	r3, [r3, #4]
 8006af4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8006af6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8006b02:	69b8      	ldr	r0, [r7, #24]
 8006b04:	9005      	str	r0, [sp, #20]
 8006b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b08:	9004      	str	r0, [sp, #16]
 8006b0a:	9103      	str	r1, [sp, #12]
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ba0 <lfs_file_flushedread+0x1a0>)
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	9200      	str	r2, [sp, #0]
 8006b14:	462b      	mov	r3, r5
 8006b16:	2200      	movs	r2, #0
 8006b18:	4621      	mov	r1, r4
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7fc fa01 	bl	8002f22 <lfs_dir_getread>
 8006b20:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01d      	beq.n	8006b64 <lfs_file_flushedread+0x164>
                return err;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	e034      	b.n	8006b96 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b36:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b40:	69b9      	ldr	r1, [r7, #24]
 8006b42:	9103      	str	r1, [sp, #12]
 8006b44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b46:	9102      	str	r1, [sp, #8]
 8006b48:	9201      	str	r2, [sp, #4]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	4602      	mov	r2, r0
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7fb f878 	bl	8001c48 <lfs_bd_read>
 8006b58:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <lfs_file_flushedread+0x164>
                return err;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	e018      	b.n	8006b96 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	441a      	add	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	4413      	add	r3, r2
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f47f af56 	bne.w	8006a40 <lfs_file_flushedread+0x40>
    }

    return size;
 8006b94:	683b      	ldr	r3, [r7, #0]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3728      	adds	r7, #40	@ 0x28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	fff7fc00 	.word	0xfff7fc00

08006ba4 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <lfs_file_read_+0x28>
 8006bbe:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <lfs_file_read_+0x60>)
 8006bc0:	4a11      	ldr	r2, [pc, #68]	@ (8006c08 <lfs_file_read_+0x64>)
 8006bc2:	f640 51e2 	movw	r1, #3554	@ 0xde2
 8006bc6:	4811      	ldr	r0, [pc, #68]	@ (8006c0c <lfs_file_read_+0x68>)
 8006bc8:	f008 fbb8 	bl	800f33c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f7ff fd9c 	bl	8006718 <lfs_file_flush>
 8006be0:	6178      	str	r0, [r7, #20]
        if (err) {
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <lfs_file_read_+0x48>
            return err;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	e006      	b.n	8006bfa <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff ff04 	bl	8006a00 <lfs_file_flushedread>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	080108ac 	.word	0x080108ac
 8006c08:	080113e0 	.word	0x080113e0
 8006c0c:	08010540 	.word	0x08010540

08006c10 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006c10:	b5b0      	push	{r4, r5, r7, lr}
 8006c12:	b090      	sub	sp, #64	@ 0x40
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80f4 	beq.w	8006e1c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	441a      	add	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fa ff15 	bl	8001a72 <lfs_max>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	f240 80e4 	bls.w	8006e1c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff fd3c 	bl	80066d4 <lfs_file_outline>
 8006c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80db 	beq.w	8006e1c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	e0d7      	b.n	8006e26 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d006      	beq.n	8006c90 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c8a:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d16d      	bne.n	8006d6c <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d159      	bne.n	8006d50 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d12f      	bne.n	8006d08 <lfs_file_flushedwrite+0xf8>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02b      	beq.n	8006d08 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006cc2:	3a01      	subs	r2, #1
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8006cc8:	2000      	movs	r0, #0
 8006cca:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8006ccc:	f107 0010 	add.w	r0, r7, #16
 8006cd0:	9003      	str	r0, [sp, #12]
 8006cd2:	9102      	str	r1, [sp, #8]
 8006cd4:	9201      	str	r2, [sp, #4]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	462b      	mov	r3, r5
 8006cda:	4622      	mov	r2, r4
 8006cdc:	2100      	movs	r1, #0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff f817 	bl	8005d12 <lfs_ctz_find>
 8006ce4:	6238      	str	r0, [r7, #32]
                    if (err) {
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	e094      	b.n	8006e26 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3340      	adds	r3, #64	@ 0x40
 8006d00:	4619      	mov	r1, r3
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7fa ff8a 	bl	8001c1c <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7fb feda 	bl	8002ac2 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006d14:	68fc      	ldr	r4, [r7, #12]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	3238      	adds	r2, #56	@ 0x38
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	313c      	adds	r1, #60	@ 0x3c
 8006d26:	9102      	str	r1, [sp, #8]
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	4622      	mov	r2, r4
 8006d30:	4601      	mov	r1, r0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff f858 	bl	8005de8 <lfs_ctz_extend>
 8006d38:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d44:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	e06a      	b.n	8006e26 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f06f 0201 	mvn.w	r2, #1
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d70:	69da      	ldr	r2, [r3, #28]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d7c:	f7fa fe89 	bl	8001a92 <lfs_min>
 8006d80:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8006d88:	68fc      	ldr	r4, [r7, #12]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d92:	69b9      	ldr	r1, [r7, #24]
 8006d94:	9103      	str	r1, [sp, #12]
 8006d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d98:	9102      	str	r1, [sp, #8]
 8006d9a:	9201      	str	r2, [sp, #4]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4622      	mov	r2, r4
 8006da2:	4601      	mov	r1, r0
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7fb f9e1 	bl	800216c <lfs_bd_prog>
 8006daa:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01c      	beq.n	8006dec <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006db8:	d007      	beq.n	8006dca <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	e02d      	b.n	8006e26 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8006dca:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff fba6 	bl	8006520 <lfs_file_relocate>
 8006dd4:	6178      	str	r0, [r7, #20]
            if (err) {
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0d2      	beq.n	8006d82 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	e01c      	b.n	8006e26 <lfs_file_flushedwrite+0x216>
            break;
 8006dec:	bf00      	nop
            }
        }

        file->pos += diff;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	441a      	add	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	441a      	add	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8006e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8006e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7fb fe53 	bl	8002ac2 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f47f af29 	bne.w	8006c76 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8006e24:	683b      	ldr	r3, [r7, #0]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3730      	adds	r7, #48	@ 0x30
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e30 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08a      	sub	sp, #40	@ 0x28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <lfs_file_write_+0x28>
 8006e4a:	4b38      	ldr	r3, [pc, #224]	@ (8006f2c <lfs_file_write_+0xfc>)
 8006e4c:	4a38      	ldr	r2, [pc, #224]	@ (8006f30 <lfs_file_write_+0x100>)
 8006e4e:	f640 6149 	movw	r1, #3657	@ 0xe49
 8006e52:	4838      	ldr	r0, [pc, #224]	@ (8006f34 <lfs_file_write_+0x104>)
 8006e54:	f008 fa72 	bl	800f33c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fc56 	bl	8006718 <lfs_file_flush>
 8006e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <lfs_file_write_+0x48>
            return err;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	e055      	b.n	8006f24 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <lfs_file_write_+0x68>
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d203      	bcs.n	8006e98 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	441a      	add	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d902      	bls.n	8006eae <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8006ea8:	f06f 031a 	mvn.w	r3, #26
 8006eac:	e03a      	b.n	8006f24 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d121      	bne.n	8006efe <lfs_file_write_+0xce>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d91b      	bls.n	8006efe <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eca:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8006ed4:	e00e      	b.n	8006ef4 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	75fb      	strb	r3, [r7, #23]
 8006eda:	f107 0217 	add.w	r2, r7, #23
 8006ede:	2301      	movs	r3, #1
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fe94 	bl	8006c10 <lfs_file_flushedwrite>
 8006ee8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	da01      	bge.n	8006ef4 <lfs_file_write_+0xc4>
                return res;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	e017      	b.n	8006f24 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef8:	6a3a      	ldr	r2, [r7, #32]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d8eb      	bhi.n	8006ed6 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fe83 	bl	8006c10 <lfs_file_flushedwrite>
 8006f0a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	da01      	bge.n	8006f16 <lfs_file_write_+0xe6>
        return nsize;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	e006      	b.n	8006f24 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8006f22:	69bb      	ldr	r3, [r7, #24]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3728      	adds	r7, #40	@ 0x28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	080108dc 	.word	0x080108dc
 8006f30:	080113f0 	.word	0x080113f0
 8006f34:	08010540 	.word	0x08010540

08006f38 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006f38:	b590      	push	{r4, r7, lr}
 8006f3a:	b08d      	sub	sp, #52	@ 0x34
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <lfs_init+0x34>
 8006f5e:	4b98      	ldr	r3, [pc, #608]	@ (80071c0 <lfs_init+0x288>)
 8006f60:	4a98      	ldr	r2, [pc, #608]	@ (80071c4 <lfs_init+0x28c>)
 8006f62:	f241 0176 	movw	r1, #4214	@ 0x1076
 8006f66:	4898      	ldr	r0, [pc, #608]	@ (80071c8 <lfs_init+0x290>)
 8006f68:	f008 f9e8 	bl	800f33c <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <lfs_init+0x4c>
 8006f76:	4b95      	ldr	r3, [pc, #596]	@ (80071cc <lfs_init+0x294>)
 8006f78:	4a92      	ldr	r2, [pc, #584]	@ (80071c4 <lfs_init+0x28c>)
 8006f7a:	f241 0178 	movw	r1, #4216	@ 0x1078
 8006f7e:	4892      	ldr	r0, [pc, #584]	@ (80071c8 <lfs_init+0x290>)
 8006f80:	f008 f9dc 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <lfs_init+0x64>
 8006f8e:	4b90      	ldr	r3, [pc, #576]	@ (80071d0 <lfs_init+0x298>)
 8006f90:	4a8c      	ldr	r2, [pc, #560]	@ (80071c4 <lfs_init+0x28c>)
 8006f92:	f241 0179 	movw	r1, #4217	@ 0x1079
 8006f96:	488c      	ldr	r0, [pc, #560]	@ (80071c8 <lfs_init+0x290>)
 8006f98:	f008 f9d0 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d106      	bne.n	8006fb4 <lfs_init+0x7c>
 8006fa6:	4b8b      	ldr	r3, [pc, #556]	@ (80071d4 <lfs_init+0x29c>)
 8006fa8:	4a86      	ldr	r2, [pc, #536]	@ (80071c4 <lfs_init+0x28c>)
 8006faa:	f241 017a 	movw	r1, #4218	@ 0x107a
 8006fae:	4886      	ldr	r0, [pc, #536]	@ (80071c8 <lfs_init+0x290>)
 8006fb0:	f008 f9c4 	bl	800f33c <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d106      	bne.n	8006fcc <lfs_init+0x94>
 8006fbe:	4b86      	ldr	r3, [pc, #536]	@ (80071d8 <lfs_init+0x2a0>)
 8006fc0:	4a80      	ldr	r2, [pc, #512]	@ (80071c4 <lfs_init+0x28c>)
 8006fc2:	f241 017f 	movw	r1, #4223	@ 0x107f
 8006fc6:	4880      	ldr	r0, [pc, #512]	@ (80071c8 <lfs_init+0x290>)
 8006fc8:	f008 f9b8 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <lfs_init+0xac>
 8006fd6:	4b81      	ldr	r3, [pc, #516]	@ (80071dc <lfs_init+0x2a4>)
 8006fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80071c4 <lfs_init+0x28c>)
 8006fda:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8006fde:	487a      	ldr	r0, [pc, #488]	@ (80071c8 <lfs_init+0x290>)
 8006fe0:	f008 f9ac 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <lfs_init+0xc4>
 8006fee:	4b7c      	ldr	r3, [pc, #496]	@ (80071e0 <lfs_init+0x2a8>)
 8006ff0:	4a74      	ldr	r2, [pc, #464]	@ (80071c4 <lfs_init+0x28c>)
 8006ff2:	f241 0181 	movw	r1, #4225	@ 0x1081
 8006ff6:	4874      	ldr	r0, [pc, #464]	@ (80071c8 <lfs_init+0x290>)
 8006ff8:	f008 f9a0 	bl	800f33c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007006:	6952      	ldr	r2, [r2, #20]
 8007008:	fbb3 f1f2 	udiv	r1, r3, r2
 800700c:	fb01 f202 	mul.w	r2, r1, r2
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <lfs_init+0xec>
 8007016:	4b73      	ldr	r3, [pc, #460]	@ (80071e4 <lfs_init+0x2ac>)
 8007018:	4a6a      	ldr	r2, [pc, #424]	@ (80071c4 <lfs_init+0x28c>)
 800701a:	f241 0185 	movw	r1, #4229	@ 0x1085
 800701e:	486a      	ldr	r0, [pc, #424]	@ (80071c8 <lfs_init+0x290>)
 8007020:	f008 f98c 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800702e:	6992      	ldr	r2, [r2, #24]
 8007030:	fbb3 f1f2 	udiv	r1, r3, r2
 8007034:	fb01 f202 	mul.w	r2, r1, r2
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d006      	beq.n	800704c <lfs_init+0x114>
 800703e:	4b6a      	ldr	r3, [pc, #424]	@ (80071e8 <lfs_init+0x2b0>)
 8007040:	4a60      	ldr	r2, [pc, #384]	@ (80071c4 <lfs_init+0x28c>)
 8007042:	f241 0186 	movw	r1, #4230	@ 0x1086
 8007046:	4860      	ldr	r0, [pc, #384]	@ (80071c8 <lfs_init+0x290>)
 8007048:	f008 f978 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007056:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007058:	fbb3 f1f2 	udiv	r1, r3, r2
 800705c:	fb01 f202 	mul.w	r2, r1, r2
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d006      	beq.n	8007074 <lfs_init+0x13c>
 8007066:	4b61      	ldr	r3, [pc, #388]	@ (80071ec <lfs_init+0x2b4>)
 8007068:	4a56      	ldr	r2, [pc, #344]	@ (80071c4 <lfs_init+0x28c>)
 800706a:	f241 0187 	movw	r1, #4231	@ 0x1087
 800706e:	4856      	ldr	r0, [pc, #344]	@ (80071c8 <lfs_init+0x290>)
 8007070:	f008 f964 	bl	800f33c <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2b7f      	cmp	r3, #127	@ 0x7f
 800707c:	d806      	bhi.n	800708c <lfs_init+0x154>
 800707e:	4b5c      	ldr	r3, [pc, #368]	@ (80071f0 <lfs_init+0x2b8>)
 8007080:	4a50      	ldr	r2, [pc, #320]	@ (80071c4 <lfs_init+0x28c>)
 8007082:	f241 018a 	movw	r1, #4234	@ 0x108a
 8007086:	4850      	ldr	r0, [pc, #320]	@ (80071c8 <lfs_init+0x290>)
 8007088:	f008 f958 	bl	800f33c <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	3b08      	subs	r3, #8
 8007094:	f04f 32ff 	mov.w	r2, #4294967295
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	4618      	mov	r0, r3
 800709e:	f7fa fd2f 	bl	8001b00 <lfs_npw2>
 80070a2:	4603      	mov	r3, r0
 80070a4:	009a      	lsls	r2, r3, #2
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d906      	bls.n	80070be <lfs_init+0x186>
 80070b0:	4b50      	ldr	r3, [pc, #320]	@ (80071f4 <lfs_init+0x2bc>)
 80070b2:	4a44      	ldr	r2, [pc, #272]	@ (80071c4 <lfs_init+0x28c>)
 80070b4:	f241 018d 	movw	r1, #4237	@ 0x108d
 80070b8:	4843      	ldr	r0, [pc, #268]	@ (80071c8 <lfs_init+0x290>)
 80070ba:	f008 f93f 	bl	800f33c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <lfs_init+0x19e>
 80070c8:	4b4b      	ldr	r3, [pc, #300]	@ (80071f8 <lfs_init+0x2c0>)
 80070ca:	4a3e      	ldr	r2, [pc, #248]	@ (80071c4 <lfs_init+0x28c>)
 80070cc:	f241 0196 	movw	r1, #4246	@ 0x1096
 80070d0:	483d      	ldr	r0, [pc, #244]	@ (80071c8 <lfs_init+0x290>)
 80070d2:	f008 f933 	bl	800f33c <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00f      	beq.n	8007100 <lfs_init+0x1c8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d206      	bcs.n	8007100 <lfs_init+0x1c8>
 80070f2:	4b42      	ldr	r3, [pc, #264]	@ (80071fc <lfs_init+0x2c4>)
 80070f4:	4a33      	ldr	r2, [pc, #204]	@ (80071c4 <lfs_init+0x28c>)
 80070f6:	f241 019c 	movw	r1, #4252	@ 0x109c
 80070fa:	4833      	ldr	r0, [pc, #204]	@ (80071c8 <lfs_init+0x290>)
 80070fc:	f008 f91e 	bl	800f33c <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d00e      	beq.n	800712a <lfs_init+0x1f2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007110:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	429a      	cmp	r2, r3
 800711a:	d906      	bls.n	800712a <lfs_init+0x1f2>
 800711c:	4b38      	ldr	r3, [pc, #224]	@ (8007200 <lfs_init+0x2c8>)
 800711e:	4a29      	ldr	r2, [pc, #164]	@ (80071c4 <lfs_init+0x28c>)
 8007120:	f241 019e 	movw	r1, #4254	@ 0x109e
 8007124:	4828      	ldr	r0, [pc, #160]	@ (80071c8 <lfs_init+0x290>)
 8007126:	f008 f909 	bl	800f33c <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800712e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d013      	beq.n	800715c <lfs_init+0x224>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800713e:	6952      	ldr	r2, [r2, #20]
 8007140:	fbb3 f1f2 	udiv	r1, r3, r2
 8007144:	fb01 f202 	mul.w	r2, r1, r2
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d006      	beq.n	800715c <lfs_init+0x224>
 800714e:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <lfs_init+0x2cc>)
 8007150:	4a1c      	ldr	r2, [pc, #112]	@ (80071c4 <lfs_init+0x28c>)
 8007152:	f241 01a3 	movw	r1, #4259	@ 0x10a3
 8007156:	481c      	ldr	r0, [pc, #112]	@ (80071c8 <lfs_init+0x290>)
 8007158:	f008 f8f0 	bl	800f33c <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d013      	beq.n	800718e <lfs_init+0x256>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800716a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007170:	6992      	ldr	r2, [r2, #24]
 8007172:	fbb3 f1f2 	udiv	r1, r3, r2
 8007176:	fb01 f202 	mul.w	r2, r1, r2
 800717a:	1a9b      	subs	r3, r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d006      	beq.n	800718e <lfs_init+0x256>
 8007180:	4b21      	ldr	r3, [pc, #132]	@ (8007208 <lfs_init+0x2d0>)
 8007182:	4a10      	ldr	r2, [pc, #64]	@ (80071c4 <lfs_init+0x28c>)
 8007184:	f241 01a5 	movw	r1, #4261	@ 0x10a5
 8007188:	480f      	ldr	r0, [pc, #60]	@ (80071c8 <lfs_init+0x290>)
 800718a:	f008 f8d7 	bl	800f33c <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d03b      	beq.n	8007210 <lfs_init+0x2d8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80071a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80071a8:	fb01 f202 	mul.w	r2, r1, r2
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d02e      	beq.n	8007210 <lfs_init+0x2d8>
 80071b2:	4b16      	ldr	r3, [pc, #88]	@ (800720c <lfs_init+0x2d4>)
 80071b4:	4a03      	ldr	r2, [pc, #12]	@ (80071c4 <lfs_init+0x28c>)
 80071b6:	f241 01a7 	movw	r1, #4263	@ 0x10a7
 80071ba:	4803      	ldr	r0, [pc, #12]	@ (80071c8 <lfs_init+0x290>)
 80071bc:	f008 f8be 	bl	800f33c <__assert_func>
 80071c0:	0801090c 	.word	0x0801090c
 80071c4:	08011400 	.word	0x08011400
 80071c8:	08010540 	.word	0x08010540
 80071cc:	0801092c 	.word	0x0801092c
 80071d0:	0801094c 	.word	0x0801094c
 80071d4:	0801096c 	.word	0x0801096c
 80071d8:	0801098c 	.word	0x0801098c
 80071dc:	080109a8 	.word	0x080109a8
 80071e0:	080109c4 	.word	0x080109c4
 80071e4:	080109e0 	.word	0x080109e0
 80071e8:	08010a10 	.word	0x08010a10
 80071ec:	08010a40 	.word	0x08010a40
 80071f0:	08010a74 	.word	0x08010a74
 80071f4:	08010a90 	.word	0x08010a90
 80071f8:	08010adc 	.word	0x08010adc
 80071fc:	08010af8 	.word	0x08010af8
 8007200:	08010b4c 	.word	0x08010b4c
 8007204:	08010bac 	.word	0x08010bac
 8007208:	08010bfc 	.word	0x08010bfc
 800720c:	08010c4c 	.word	0x08010c4c
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <lfs_init+0x2ee>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800721e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	60da      	str	r2, [r3, #12]
 8007224:	e010      	b.n	8007248 <lfs_init+0x310>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800722a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722c:	4618      	mov	r0, r3
 800722e:	f7fa fccf 	bl	8001bd0 <lfs_malloc>
 8007232:	4602      	mov	r2, r0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <lfs_init+0x310>
            err = LFS_ERR_NOMEM;
 8007240:	f06f 030b 	mvn.w	r3, #11
 8007244:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8007246:	e145      	b.n	80074d4 <lfs_init+0x59c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <lfs_init+0x326>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	61da      	str	r2, [r3, #28]
 800725c:	e010      	b.n	8007280 <lfs_init+0x348>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	4618      	mov	r0, r3
 8007266:	f7fa fcb3 	bl	8001bd0 <lfs_malloc>
 800726a:	4602      	mov	r2, r0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d103      	bne.n	8007280 <lfs_init+0x348>
            err = LFS_ERR_NOMEM;
 8007278:	f06f 030b 	mvn.w	r3, #11
 800727c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 800727e:	e129      	b.n	80074d4 <lfs_init+0x59c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fa fcc9 	bl	8001c1c <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3310      	adds	r3, #16
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fa fcc3 	bl	8001c1c <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <lfs_init+0x376>
 80072a0:	4b90      	ldr	r3, [pc, #576]	@ (80074e4 <lfs_init+0x5ac>)
 80072a2:	4a91      	ldr	r2, [pc, #580]	@ (80074e8 <lfs_init+0x5b0>)
 80072a4:	f241 01c6 	movw	r1, #4294	@ 0x10c6
 80072a8:	4890      	ldr	r0, [pc, #576]	@ (80074ec <lfs_init+0x5b4>)
 80072aa:	f008 f847 	bl	800f33c <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <lfs_init+0x38c>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	665a      	str	r2, [r3, #100]	@ 0x64
 80072c2:	e010      	b.n	80072e6 <lfs_init+0x3ae>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fa fc80 	bl	8001bd0 <lfs_malloc>
 80072d0:	4602      	mov	r2, r0
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <lfs_init+0x3ae>
            err = LFS_ERR_NOMEM;
 80072de:	f06f 030b 	mvn.w	r3, #11
 80072e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80072e4:	e0f6      	b.n	80074d4 <lfs_init+0x59c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ec:	2bff      	cmp	r3, #255	@ 0xff
 80072ee:	d906      	bls.n	80072fe <lfs_init+0x3c6>
 80072f0:	4b7f      	ldr	r3, [pc, #508]	@ (80074f0 <lfs_init+0x5b8>)
 80072f2:	4a7d      	ldr	r2, [pc, #500]	@ (80074e8 <lfs_init+0x5b0>)
 80072f4:	f241 01d2 	movw	r1, #4306	@ 0x10d2
 80072f8:	487c      	ldr	r0, [pc, #496]	@ (80074ec <lfs_init+0x5b4>)
 80072fa:	f008 f81f 	bl	800f33c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <lfs_init+0x3de>
        lfs->name_max = LFS_NAME_MAX;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	22ff      	movs	r2, #255	@ 0xff
 8007314:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800731a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731c:	2b00      	cmp	r3, #0
 800731e:	da06      	bge.n	800732e <lfs_init+0x3f6>
 8007320:	4b74      	ldr	r3, [pc, #464]	@ (80074f4 <lfs_init+0x5bc>)
 8007322:	4a71      	ldr	r2, [pc, #452]	@ (80074e8 <lfs_init+0x5b0>)
 8007324:	f241 01d8 	movw	r1, #4312	@ 0x10d8
 8007328:	4870      	ldr	r0, [pc, #448]	@ (80074ec <lfs_init+0x5b4>)
 800732a:	f008 f807 	bl	800f33c <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <lfs_init+0x410>
        lfs->file_max = LFS_FILE_MAX;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007346:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800734c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734e:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8007352:	4293      	cmp	r3, r2
 8007354:	d906      	bls.n	8007364 <lfs_init+0x42c>
 8007356:	4b68      	ldr	r3, [pc, #416]	@ (80074f8 <lfs_init+0x5c0>)
 8007358:	4a63      	ldr	r2, [pc, #396]	@ (80074e8 <lfs_init+0x5b0>)
 800735a:	f241 01de 	movw	r1, #4318	@ 0x10de
 800735e:	4863      	ldr	r0, [pc, #396]	@ (80074ec <lfs_init+0x5b4>)
 8007360:	f007 ffec 	bl	800f33c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007368:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <lfs_init+0x446>
        lfs->attr_max = LFS_ATTR_MAX;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800737c:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	429a      	cmp	r2, r3
 800738c:	d906      	bls.n	800739c <lfs_init+0x464>
 800738e:	4b5b      	ldr	r3, [pc, #364]	@ (80074fc <lfs_init+0x5c4>)
 8007390:	4a55      	ldr	r2, [pc, #340]	@ (80074e8 <lfs_init+0x5b0>)
 8007392:	f241 01e4 	movw	r1, #4324	@ 0x10e4
 8007396:	4855      	ldr	r0, [pc, #340]	@ (80074ec <lfs_init+0x5b4>)
 8007398:	f007 ffd0 	bl	800f33c <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d00e      	beq.n	80073c6 <lfs_init+0x48e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d906      	bls.n	80073c6 <lfs_init+0x48e>
 80073b8:	4b51      	ldr	r3, [pc, #324]	@ (8007500 <lfs_init+0x5c8>)
 80073ba:	4a4b      	ldr	r2, [pc, #300]	@ (80074e8 <lfs_init+0x5b0>)
 80073bc:	f241 01e6 	movw	r1, #4326	@ 0x10e6
 80073c0:	484a      	ldr	r0, [pc, #296]	@ (80074ec <lfs_init+0x5b4>)
 80073c2:	f007 ffbb 	bl	800f33c <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d00d      	beq.n	80073ee <lfs_init+0x4b6>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073dc:	429a      	cmp	r2, r3
 80073de:	d906      	bls.n	80073ee <lfs_init+0x4b6>
 80073e0:	4b48      	ldr	r3, [pc, #288]	@ (8007504 <lfs_init+0x5cc>)
 80073e2:	4a41      	ldr	r2, [pc, #260]	@ (80074e8 <lfs_init+0x5b0>)
 80073e4:	f241 01e8 	movw	r1, #4328	@ 0x10e8
 80073e8:	4840      	ldr	r0, [pc, #256]	@ (80074ec <lfs_init+0x5b4>)
 80073ea:	f007 ffa7 	bl	800f33c <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d019      	beq.n	800742e <lfs_init+0x4f6>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <lfs_init+0x4dc>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800740e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	e003      	b.n	800741c <lfs_init+0x4e4>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	08db      	lsrs	r3, r3, #3
 800741c:	4293      	cmp	r3, r2
 800741e:	d206      	bcs.n	800742e <lfs_init+0x4f6>
 8007420:	4b39      	ldr	r3, [pc, #228]	@ (8007508 <lfs_init+0x5d0>)
 8007422:	4a31      	ldr	r2, [pc, #196]	@ (80074e8 <lfs_init+0x5b0>)
 8007424:	f241 01ea 	movw	r1, #4330	@ 0x10ea
 8007428:	4830      	ldr	r0, [pc, #192]	@ (80074ec <lfs_init+0x5b4>)
 800742a:	f007 ff87 	bl	800f33c <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d103      	bne.n	800744a <lfs_init+0x512>
        lfs->inline_max = 0;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	67da      	str	r2, [r3, #124]	@ 0x7c
 8007448:	e022      	b.n	8007490 <lfs_init+0x558>
    } else if (lfs->inline_max == 0) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11e      	bne.n	8007490 <lfs_init+0x558>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007456:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
        lfs->inline_max = lfs_min(
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <lfs_init+0x538>
                        ? lfs->cfg->metadata_max
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800746a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
        lfs->inline_max = lfs_min(
 800746c:	08db      	lsrs	r3, r3, #3
 800746e:	e003      	b.n	8007478 <lfs_init+0x540>
                        : lfs->cfg->block_size)/8));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007474:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8007476:	08db      	lsrs	r3, r3, #3
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f7fa fb09 	bl	8001a92 <lfs_min>
 8007480:	4603      	mov	r3, r0
 8007482:	4619      	mov	r1, r3
 8007484:	4620      	mov	r0, r4
 8007486:	f7fa fb04 	bl	8001a92 <lfs_min>
 800748a:	4602      	mov	r2, r0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f04f 32ff 	mov.w	r2, #4294967295
 800749e:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	333c      	adds	r3, #60	@ 0x3c
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	605a      	str	r2, [r3, #4]
 80074b6:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3330      	adds	r3, #48	@ 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3348      	adds	r3, #72	@ 0x48
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	e003      	b.n	80074dc <lfs_init+0x5a4>

cleanup:
    lfs_deinit(lfs);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f819 	bl	800750c <lfs_deinit>
    return err;
 80074da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3734      	adds	r7, #52	@ 0x34
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd90      	pop	{r4, r7, pc}
 80074e4:	08010c9c 	.word	0x08010c9c
 80074e8:	08011400 	.word	0x08011400
 80074ec:	08010540 	.word	0x08010540
 80074f0:	08010cbc 	.word	0x08010cbc
 80074f4:	08010cd8 	.word	0x08010cd8
 80074f8:	08010cfc 	.word	0x08010cfc
 80074fc:	08010d18 	.word	0x08010d18
 8007500:	08010d48 	.word	0x08010d48
 8007504:	08010da0 	.word	0x08010da0
 8007508:	08010df0 	.word	0x08010df0

0800750c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	4618      	mov	r0, r3
 8007524:	f7fa fb60 	bl	8001be8 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800752c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	4618      	mov	r0, r3
 8007538:	f7fa fb56 	bl	8001be8 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800754a:	4618      	mov	r0, r3
 800754c:	f7fa fb4c 	bl	8001be8 <lfs_free>
    }

    return 0;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b0a0      	sub	sp, #128	@ 0x80
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff fce3 	bl	8006f38 <lfs_init>
 8007572:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8007574:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <lfs_format_+0x22>
            return err;
 800757a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800757c:	e08d      	b.n	800769a <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <lfs_format_+0x38>
 8007586:	4b47      	ldr	r3, [pc, #284]	@ (80076a4 <lfs_format_+0x148>)
 8007588:	4a47      	ldr	r2, [pc, #284]	@ (80076a8 <lfs_format_+0x14c>)
 800758a:	f241 112a 	movw	r1, #4394	@ 0x112a
 800758e:	4847      	ldr	r0, [pc, #284]	@ (80076ac <lfs_format_+0x150>)
 8007590:	f007 fed4 	bl	800f33c <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	461a      	mov	r2, r3
 80075a0:	2100      	movs	r1, #0
 80075a2:	f008 f8e0 	bl	800f766 <memset>
        lfs->lookahead.start = 0;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	00da      	lsls	r2, r3, #3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fa fa69 	bl	8001a92 <lfs_min>
 80075c0:	4602      	mov	r2, r0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fb fa78 	bl	8002ac2 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80075d2:	f107 030c 	add.w	r3, r7, #12
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fd f94f 	bl	800487c <lfs_dir_alloc>
 80075de:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80075e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d150      	bne.n	8007688 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fb fa42 	bl	8002a70 <lfs_fs_disk_version>
 80075ec:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80075ee:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075f4:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80075f6:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 80075fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8007602:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8007608:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 800760e:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007610:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007614:	4618      	mov	r0, r3
 8007616:	f7fb f9a1 	bl	800295c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800761a:	4b25      	ldr	r3, [pc, #148]	@ (80076b0 <lfs_format_+0x154>)
 800761c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800761e:	2300      	movs	r3, #0
 8007620:	653b      	str	r3, [r7, #80]	@ 0x50
 8007622:	4b24      	ldr	r3, [pc, #144]	@ (80076b4 <lfs_format_+0x158>)
 8007624:	657b      	str	r3, [r7, #84]	@ 0x54
 8007626:	4b24      	ldr	r3, [pc, #144]	@ (80076b8 <lfs_format_+0x15c>)
 8007628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800762a:	4b24      	ldr	r3, [pc, #144]	@ (80076bc <lfs_format_+0x160>)
 800762c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800762e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007632:	663b      	str	r3, [r7, #96]	@ 0x60
 8007634:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8007638:	f107 010c 	add.w	r1, r7, #12
 800763c:	2303      	movs	r3, #3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fe fb0a 	bl	8005c58 <lfs_dir_commit>
 8007644:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d11f      	bne.n	800768c <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800764c:	2300      	movs	r3, #0
 800764e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007652:	f107 010c 	add.w	r1, r7, #12
 8007656:	2300      	movs	r3, #0
 8007658:	2200      	movs	r2, #0
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fe fafc 	bl	8005c58 <lfs_dir_commit>
 8007660:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8007662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d113      	bne.n	8007690 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007668:	2300      	movs	r3, #0
 800766a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800766c:	2301      	movs	r3, #1
 800766e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007670:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fc fd3c 	bl	80040f8 <lfs_dir_fetch>
 8007680:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8007682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007684:	2b00      	cmp	r3, #0
 8007686:	e004      	b.n	8007692 <lfs_format_+0x136>
            goto cleanup;
 8007688:	bf00      	nop
 800768a:	e002      	b.n	8007692 <lfs_format_+0x136>
            goto cleanup;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <lfs_format_+0x136>
            goto cleanup;
 8007690:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ff3a 	bl	800750c <lfs_deinit>
    return err;
 8007698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 800769a:	4618      	mov	r0, r3
 800769c:	3780      	adds	r7, #128	@ 0x80
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	08010e80 	.word	0x08010e80
 80076a8:	0801140c 	.word	0x0801140c
 80076ac:	08010540 	.word	0x08010540
 80076b0:	40100000 	.word	0x40100000
 80076b4:	0ff00008 	.word	0x0ff00008
 80076b8:	08010e98 	.word	0x08010e98
 80076bc:	20100018 	.word	0x20100018

080076c0 <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3318      	adds	r3, #24
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fa fec8 	bl	8002468 <lfs_pair_issync>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <lfs_tortoise_detectcycles+0x32>
        LFS_WARN("Cycle detected in tail list");
 80076de:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <lfs_tortoise_detectcycles+0x74>)
 80076e0:	f241 126f 	movw	r2, #4463	@ 0x116f
 80076e4:	4914      	ldr	r1, [pc, #80]	@ (8007738 <lfs_tortoise_detectcycles+0x78>)
 80076e6:	4815      	ldr	r0, [pc, #84]	@ (800773c <lfs_tortoise_detectcycles+0x7c>)
 80076e8:	f007 ffd8 	bl	800f69c <iprintf>
        return LFS_ERR_CORRUPT;
 80076ec:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80076f0:	e01b      	b.n	800772a <lfs_tortoise_detectcycles+0x6a>
    }
    if (tortoise->i == tortoise->period) {
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d10f      	bne.n	800771e <lfs_tortoise_detectcycles+0x5e>
        tortoise->pair[0] = dir->tail[0];
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69da      	ldr	r2, [r3, #28]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	005a      	lsls	r2, r3, #1
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	08010688 	.word	0x08010688
 8007738:	08010540 	.word	0x08010540
 800773c:	08010ea4 	.word	0x08010ea4

08007740 <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	b0a1      	sub	sp, #132	@ 0x84
 8007744:	af04      	add	r7, sp, #16
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fbf3 	bl	8006f38 <lfs_init>
 8007752:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8007754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <lfs_mount_+0x1e>
        return err;
 800775a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800775c:	e1e5      	b.n	8007b2a <lfs_mount_+0x3ea>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800775e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007762:	2220      	movs	r2, #32
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f007 fffd 	bl	800f766 <memset>
 800776c:	2301      	movs	r3, #1
 800776e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    struct lfs_tortoise_t tortoise = {
 8007770:	4ba0      	ldr	r3, [pc, #640]	@ (80079f4 <lfs_mount_+0x2b4>)
 8007772:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8007776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 800777c:	e17f      	b.n	8007a7e <lfs_mount_+0x33e>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 800777e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007782:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007786:	4611      	mov	r1, r2
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff ff99 	bl	80076c0 <lfs_tortoise_detectcycles>
 800778e:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err < 0) {
 8007790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007792:	2b00      	cmp	r3, #0
 8007794:	f2c0 81c2 	blt.w	8007b1c <lfs_mount_+0x3dc>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
 800779c:	4b96      	ldr	r3, [pc, #600]	@ (80079f8 <lfs_mount_+0x2b8>)
 800779e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a0:	2308      	movs	r3, #8
 80077a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80077a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80077a8:	f103 0218 	add.w	r2, r3, #24
 80077ac:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80077b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	4b91      	ldr	r3, [pc, #580]	@ (80079fc <lfs_mount_+0x2bc>)
 80077b8:	9302      	str	r3, [sp, #8]
 80077ba:	2300      	movs	r3, #0
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	4b90      	ldr	r3, [pc, #576]	@ (8007a00 <lfs_mount_+0x2c0>)
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4b90      	ldr	r3, [pc, #576]	@ (8007a04 <lfs_mount_+0x2c4>)
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fc f8c7 	bl	8003958 <lfs_dir_fetchmatch>
 80077ca:	6678      	str	r0, [r7, #100]	@ 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80077cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	da02      	bge.n	80077d8 <lfs_mount_+0x98>
            err = tag;
 80077d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80077d6:	e1a4      	b.n	8007b22 <lfs_mount_+0x3e2>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80077d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 8142 	beq.w	8007a64 <lfs_mount_+0x324>
 80077e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fa feaf 	bl	8002546 <lfs_tag_isdelete>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f083 0301 	eor.w	r3, r3, #1
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8137 	beq.w	8007a64 <lfs_mount_+0x324>
            // update root
            lfs->root[0] = dir.pair[0];
 80077f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80077fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007802:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a08 <lfs_mount_+0x2c8>)
 800780e:	4a7d      	ldr	r2, [pc, #500]	@ (8007a04 <lfs_mount_+0x2c4>)
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fb fb6b 	bl	8002eec <lfs_dir_get>
 8007816:	6678      	str	r0, [r7, #100]	@ 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800781a:	2b00      	cmp	r3, #0
 800781c:	da02      	bge.n	8007824 <lfs_mount_+0xe4>
                err = tag;
 800781e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007820:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8007822:	e11e      	b.n	8007a62 <lfs_mount_+0x322>
            }
            lfs_superblock_fromle32(&superblock);
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f7fb f85f 	bl	80028ec <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	0c1b      	lsrs	r3, r3, #16
 8007832:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
            if (major_version != lfs_fs_disk_version_major(lfs)
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7fb f925 	bl	8002a8c <lfs_fs_disk_version_major>
 8007842:	4603      	mov	r3, r0
 8007844:	461a      	mov	r2, r3
 8007846:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800784a:	4293      	cmp	r3, r2
 800784c:	d108      	bne.n	8007860 <lfs_mount_+0x120>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fb f92a 	bl	8002aa8 <lfs_fs_disk_version_minor>
 8007854:	4603      	mov	r3, r0
 8007856:	461a      	mov	r2, r3
 8007858:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800785c:	4293      	cmp	r3, r2
 800785e:	d91d      	bls.n	800789c <lfs_mount_+0x15c>
                LFS_ERROR("Invalid version "
 8007860:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 8007864:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fb f90f 	bl	8002a8c <lfs_fs_disk_version_major>
 800786e:	4603      	mov	r3, r0
 8007870:	461e      	mov	r6, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fb f918 	bl	8002aa8 <lfs_fs_disk_version_minor>
 8007878:	4603      	mov	r3, r0
 800787a:	461a      	mov	r2, r3
 800787c:	4b63      	ldr	r3, [pc, #396]	@ (8007a0c <lfs_mount_+0x2cc>)
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	9202      	str	r2, [sp, #8]
 8007882:	9601      	str	r6, [sp, #4]
 8007884:	9400      	str	r4, [sp, #0]
 8007886:	462b      	mov	r3, r5
 8007888:	f241 12b2 	movw	r2, #4530	@ 0x11b2
 800788c:	4960      	ldr	r1, [pc, #384]	@ (8007a10 <lfs_mount_+0x2d0>)
 800788e:	4861      	ldr	r0, [pc, #388]	@ (8007a14 <lfs_mount_+0x2d4>)
 8007890:	f007 ff04 	bl	800f69c <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8007894:	f06f 0315 	mvn.w	r3, #21
 8007898:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 800789a:	e0e2      	b.n	8007a62 <lfs_mount_+0x322>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 800789c:	2300      	movs	r3, #0
 800789e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fb f900 	bl	8002aa8 <lfs_fs_disk_version_minor>
 80078a8:	4603      	mov	r3, r0
 80078aa:	461a      	mov	r2, r3
 80078ac:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d21c      	bcs.n	80078ee <lfs_mount_+0x1ae>
                LFS_DEBUG("Found older minor version "
 80078b4:	f8b7 5062 	ldrh.w	r5, [r7, #98]	@ 0x62
 80078b8:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fb f8e5 	bl	8002a8c <lfs_fs_disk_version_major>
 80078c2:	4603      	mov	r3, r0
 80078c4:	461e      	mov	r6, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fb f8ee 	bl	8002aa8 <lfs_fs_disk_version_minor>
 80078cc:	4603      	mov	r3, r0
 80078ce:	461a      	mov	r2, r3
 80078d0:	4b4e      	ldr	r3, [pc, #312]	@ (8007a0c <lfs_mount_+0x2cc>)
 80078d2:	9303      	str	r3, [sp, #12]
 80078d4:	9202      	str	r2, [sp, #8]
 80078d6:	9601      	str	r6, [sp, #4]
 80078d8:	9400      	str	r4, [sp, #0]
 80078da:	462b      	mov	r3, r5
 80078dc:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 80078e0:	494b      	ldr	r1, [pc, #300]	@ (8007a10 <lfs_mount_+0x2d0>)
 80078e2:	484d      	ldr	r0, [pc, #308]	@ (8007a18 <lfs_mount_+0x2d8>)
 80078e4:	f007 feda 	bl	800f69c <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80078e8:	2301      	movs	r3, #1
 80078ea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80078ee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fb4f 	bl	8007f98 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d018      	beq.n	8007932 <lfs_mount_+0x1f2>
                if (superblock.name_max > lfs->name_max) {
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007906:	429a      	cmp	r2, r3
 8007908:	d910      	bls.n	800792c <lfs_mount_+0x1ec>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007910:	493e      	ldr	r1, [pc, #248]	@ (8007a0c <lfs_mount_+0x2cc>)
 8007912:	9101      	str	r1, [sp, #4]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	f241 12d0 	movw	r2, #4560	@ 0x11d0
 800791c:	493c      	ldr	r1, [pc, #240]	@ (8007a10 <lfs_mount_+0x2d0>)
 800791e:	483f      	ldr	r0, [pc, #252]	@ (8007a1c <lfs_mount_+0x2dc>)
 8007920:	f007 febc 	bl	800f69c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8007924:	f06f 0315 	mvn.w	r3, #21
 8007928:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800792a:	e09a      	b.n	8007a62 <lfs_mount_+0x322>
                }

                lfs->name_max = superblock.name_max;
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d018      	beq.n	800796a <lfs_mount_+0x22a>
                if (superblock.file_max > lfs->file_max) {
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793e:	429a      	cmp	r2, r3
 8007940:	d910      	bls.n	8007964 <lfs_mount_+0x224>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007948:	4930      	ldr	r1, [pc, #192]	@ (8007a0c <lfs_mount_+0x2cc>)
 800794a:	9101      	str	r1, [sp, #4]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	f241 12db 	movw	r2, #4571	@ 0x11db
 8007954:	492e      	ldr	r1, [pc, #184]	@ (8007a10 <lfs_mount_+0x2d0>)
 8007956:	4832      	ldr	r0, [pc, #200]	@ (8007a20 <lfs_mount_+0x2e0>)
 8007958:	f007 fea0 	bl	800f69c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800795c:	f06f 0315 	mvn.w	r3, #21
 8007960:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8007962:	e07e      	b.n	8007a62 <lfs_mount_+0x322>
                }

                lfs->file_max = superblock.file_max;
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d023      	beq.n	80079b8 <lfs_mount_+0x278>
                if (superblock.attr_max > lfs->attr_max) {
 8007970:	6a3a      	ldr	r2, [r7, #32]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007976:	429a      	cmp	r2, r3
 8007978:	d910      	bls.n	800799c <lfs_mount_+0x25c>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800797a:	6a3a      	ldr	r2, [r7, #32]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007980:	4922      	ldr	r1, [pc, #136]	@ (8007a0c <lfs_mount_+0x2cc>)
 8007982:	9101      	str	r1, [sp, #4]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	f241 12e6 	movw	r2, #4582	@ 0x11e6
 800798c:	4920      	ldr	r1, [pc, #128]	@ (8007a10 <lfs_mount_+0x2d0>)
 800798e:	4825      	ldr	r0, [pc, #148]	@ (8007a24 <lfs_mount_+0x2e4>)
 8007990:	f007 fe84 	bl	800f69c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8007994:	f06f 0315 	mvn.w	r3, #21
 8007998:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 800799a:	e062      	b.n	8007a62 <lfs_mount_+0x322>
                }

                lfs->attr_max = superblock.attr_max;
 800799c:	6a3a      	ldr	r2, [r7, #32]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fa f870 	bl	8001a92 <lfs_min>
 80079b2:	4602      	mov	r2, r0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d034      	beq.n	8007a2c <lfs_mount_+0x2ec>
                    && superblock.block_count != lfs->cfg->block_count) {
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d02e      	beq.n	8007a2c <lfs_mount_+0x2ec>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	490d      	ldr	r1, [pc, #52]	@ (8007a0c <lfs_mount_+0x2cc>)
 80079d8:	9101      	str	r1, [sp, #4]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4613      	mov	r3, r2
 80079de:	f241 12f5 	movw	r2, #4597	@ 0x11f5
 80079e2:	490b      	ldr	r1, [pc, #44]	@ (8007a10 <lfs_mount_+0x2d0>)
 80079e4:	4810      	ldr	r0, [pc, #64]	@ (8007a28 <lfs_mount_+0x2e8>)
 80079e6:	f007 fe59 	bl	800f69c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80079ea:	f06f 0315 	mvn.w	r3, #21
 80079ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80079f0:	e037      	b.n	8007a62 <lfs_mount_+0x322>
 80079f2:	bf00      	nop
 80079f4:	08011080 	.word	0x08011080
 80079f8:	08010e98 	.word	0x08010e98
 80079fc:	08004195 	.word	0x08004195
 8007a00:	0ff00008 	.word	0x0ff00008
 8007a04:	7ffffc00 	.word	0x7ffffc00
 8007a08:	20100018 	.word	0x20100018
 8007a0c:	08010688 	.word	0x08010688
 8007a10:	08010540 	.word	0x08010540
 8007a14:	08010ed0 	.word	0x08010ed0
 8007a18:	08010f08 	.word	0x08010f08
 8007a1c:	08010f48 	.word	0x08010f48
 8007a20:	08010f7c 	.word	0x08010f7c
 8007a24:	08010fb0 	.word	0x08010fb0
 8007a28:	08010fe4 	.word	0x08010fe4
            }

            lfs->block_count = superblock.block_count;
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d012      	beq.n	8007a64 <lfs_mount_+0x324>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	493b      	ldr	r1, [pc, #236]	@ (8007b34 <lfs_mount_+0x3f4>)
 8007a48:	9101      	str	r1, [sp, #4]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	f241 12fe 	movw	r2, #4606	@ 0x11fe
 8007a52:	4939      	ldr	r1, [pc, #228]	@ (8007b38 <lfs_mount_+0x3f8>)
 8007a54:	4839      	ldr	r0, [pc, #228]	@ (8007b3c <lfs_mount_+0x3fc>)
 8007a56:	f007 fe21 	bl	800f69c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8007a5a:	f06f 0315 	mvn.w	r3, #21
 8007a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8007a60:	bf00      	nop
            goto cleanup;
 8007a62:	e05e      	b.n	8007b22 <lfs_mount_+0x3e2>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7fc fb5d 	bl	8004130 <lfs_dir_getgstate>
 8007a76:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8007a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d150      	bne.n	8007b20 <lfs_mount_+0x3e0>
    while (!lfs_pair_isnull(dir.tail)) {
 8007a7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007a82:	3318      	adds	r3, #24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fa fcaa 	bl	80023de <lfs_pair_isnull>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f083 0301 	eor.w	r3, r3, #1
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f47f ae73 	bne.w	800777e <lfs_mount_+0x3e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3330      	adds	r3, #48	@ 0x30
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fa fe00 	bl	80026a2 <lfs_gstate_iszero>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f083 0301 	eor.w	r3, r3, #1
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d010      	beq.n	8007ad0 <lfs_mount_+0x390>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007aba:	481e      	ldr	r0, [pc, #120]	@ (8007b34 <lfs_mount_+0x3f4>)
 8007abc:	9002      	str	r0, [sp, #8]
 8007abe:	9201      	str	r2, [sp, #4]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	f241 220e 	movw	r2, #4622	@ 0x120e
 8007ac8:	491b      	ldr	r1, [pc, #108]	@ (8007b38 <lfs_mount_+0x3f8>)
 8007aca:	481d      	ldr	r0, [pc, #116]	@ (8007b40 <lfs_mount_+0x400>)
 8007acc:	f007 fde6 	bl	800f69c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fa fd28 	bl	800252a <lfs_tag_isvalid>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f083 0301 	eor.w	r3, r3, #1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae8:	441a      	add	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	333c      	adds	r3, #60	@ 0x3c
 8007af4:	3230      	adds	r2, #48	@ 0x30
 8007af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b08:	fb01 f202 	mul.w	r2, r1, r2
 8007b0c:	1a9a      	subs	r2, r3, r2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa ffe3 	bl	8002ade <lfs_alloc_drop>

    return 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e006      	b.n	8007b2a <lfs_mount_+0x3ea>
            goto cleanup;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <lfs_mount_+0x3e2>
            goto cleanup;
 8007b20:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f80e 	bl	8007b44 <lfs_unmount_>
    return err;
 8007b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3774      	adds	r7, #116	@ 0x74
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	08010688 	.word	0x08010688
 8007b38:	08010540 	.word	0x08010540
 8007b3c:	08011018 	.word	0x08011018
 8007b40:	08011048 	.word	0x08011048

08007b44 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff fcdd 	bl	800750c <lfs_deinit>
 8007b52:	4603      	mov	r3, r0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8007b5c:	b590      	push	{r4, r7, lr}
 8007b5e:	b0a1      	sub	sp, #132	@ 0x84
 8007b60:	af04      	add	r7, sp, #16
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b6e:	2220      	movs	r2, #32
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f007 fdf7 	bl	800f766 <memset>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	647b      	str	r3, [r7, #68]	@ 0x44
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 8007b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8007db4 <lfs_fs_traverse_+0x258>)
 8007b7e:	f107 0418 	add.w	r4, r7, #24
 8007b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8007b8c:	e0a9      	b.n	8007ce2 <lfs_fs_traverse_+0x186>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 8007b8e:	f107 0218 	add.w	r2, r7, #24
 8007b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fd91 	bl	80076c0 <lfs_tortoise_detectcycles>
 8007b9e:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err < 0) {
 8007ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da02      	bge.n	8007bac <lfs_fs_traverse_+0x50>
            return LFS_ERR_CORRUPT;
 8007ba6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007baa:	e0ff      	b.n	8007dac <lfs_fs_traverse_+0x250>
        }

        for (int i = 0; i < 2; i++) {
 8007bac:	2300      	movs	r3, #0
 8007bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bb0:	e013      	b.n	8007bda <lfs_fs_traverse_+0x7e>
            int err = cb(data, dir.tail[i]);
 8007bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bb4:	3306      	adds	r3, #6
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	3370      	adds	r3, #112	@ 0x70
 8007bba:	443b      	add	r3, r7
 8007bbc:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (err) {
 8007bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <lfs_fs_traverse_+0x78>
                return err;
 8007bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd2:	e0eb      	b.n	8007dac <lfs_fs_traverse_+0x250>
        for (int i = 0; i < 2; i++) {
 8007bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	dde8      	ble.n	8007bb2 <lfs_fs_traverse_+0x56>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8007be0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007be4:	f103 0218 	add.w	r2, r3, #24
 8007be8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007bec:	4619      	mov	r1, r3
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7fc fa82 	bl	80040f8 <lfs_dir_fetch>
 8007bf4:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8007bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <lfs_fs_traverse_+0xa4>
            return err;
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bfe:	e0d5      	b.n	8007dac <lfs_fs_traverse_+0x250>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8007c00:	2300      	movs	r3, #0
 8007c02:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007c06:	e067      	b.n	8007cd8 <lfs_fs_traverse_+0x17c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8007c08:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007c0c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8007c0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c12:	f043 0308 	orr.w	r3, r3, #8
 8007c16:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007c1a:	f107 0210 	add.w	r2, r7, #16
 8007c1e:	9200      	str	r2, [sp, #0]
 8007c20:	4a65      	ldr	r2, [pc, #404]	@ (8007db8 <lfs_fs_traverse_+0x25c>)
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7fb f962 	bl	8002eec <lfs_dir_get>
 8007c28:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (tag < 0) {
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da05      	bge.n	8007c3c <lfs_fs_traverse_+0xe0>
                if (tag == LFS_ERR_NOENT) {
 8007c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c32:	f113 0f02 	cmn.w	r3, #2
 8007c36:	d049      	beq.n	8007ccc <lfs_fs_traverse_+0x170>
                    continue;
                }
                return tag;
 8007c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c3a:	e0b7      	b.n	8007dac <lfs_fs_traverse_+0x250>
            }
            lfs_ctz_fromle32(&ctz);
 8007c3c:	f107 0310 	add.w	r3, r7, #16
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fa fe23 	bl	800288c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fa fcaf 	bl	80025ac <lfs_tag_type3>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	461a      	mov	r2, r3
 8007c52:	f240 2302 	movw	r3, #514	@ 0x202
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d113      	bne.n	8007c82 <lfs_fs_traverse_+0x126>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	6938      	ldr	r0, [r7, #16]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	9202      	str	r2, [sp, #8]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	460a      	mov	r2, r1
 8007c6e:	2100      	movs	r1, #0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7fe f9c3 	bl	8005ffc <lfs_ctz_traverse>
 8007c76:	6538      	str	r0, [r7, #80]	@ 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8007c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d027      	beq.n	8007cce <lfs_fs_traverse_+0x172>
                    return err;
 8007c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c80:	e094      	b.n	8007dac <lfs_fs_traverse_+0x250>
                }
            } else if (includeorphans &&
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d022      	beq.n	8007cce <lfs_fs_traverse_+0x172>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8007c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fa fc8e 	bl	80025ac <lfs_tag_type3>
 8007c90:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8007c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c96:	d11a      	bne.n	8007cce <lfs_fs_traverse_+0x172>
                for (int i = 0; i < 2; i++) {
 8007c98:	2300      	movs	r3, #0
 8007c9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c9c:	e012      	b.n	8007cc4 <lfs_fs_traverse_+0x168>
                    err = cb(data, (&ctz.head)[i]);
 8007c9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	f107 0210 	add.w	r2, r7, #16
 8007ca6:	4413      	add	r3, r2
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	4611      	mov	r1, r2
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
 8007cb2:	6538      	str	r0, [r7, #80]	@ 0x50
                    if (err) {
 8007cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <lfs_fs_traverse_+0x162>
                        return err;
 8007cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cbc:	e076      	b.n	8007dac <lfs_fs_traverse_+0x250>
                for (int i = 0; i < 2; i++) {
 8007cbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	dde9      	ble.n	8007c9e <lfs_fs_traverse_+0x142>
 8007cca:	e000      	b.n	8007cce <lfs_fs_traverse_+0x172>
                    continue;
 8007ccc:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8007cce:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007cd8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007cda:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d392      	bcc.n	8007c08 <lfs_fs_traverse_+0xac>
    while (!lfs_pair_isnull(dir.tail)) {
 8007ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fa fb78 	bl	80023de <lfs_pair_isnull>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f083 0301 	eor.w	r3, r3, #1
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f47f af49 	bne.w	8007b8e <lfs_fs_traverse_+0x32>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d02:	e04f      	b.n	8007da4 <lfs_fs_traverse_+0x248>
        if (f->type != LFS_TYPE_REG) {
 8007d04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d06:	799b      	ldrb	r3, [r3, #6]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d147      	bne.n	8007d9c <lfs_fs_traverse_+0x240>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8007d0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01d      	beq.n	8007d54 <lfs_fs_traverse_+0x1f8>
 8007d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d117      	bne.n	8007d54 <lfs_fs_traverse_+0x1f8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d26:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d2e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	9202      	str	r2, [sp, #8]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	9201      	str	r2, [sp, #4]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4623      	mov	r3, r4
 8007d40:	4602      	mov	r2, r0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7fe f95a 	bl	8005ffc <lfs_ctz_traverse>
 8007d48:	65b8      	str	r0, [r7, #88]	@ 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8007d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <lfs_fs_traverse_+0x1f8>
                return err;
 8007d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d52:	e02b      	b.n	8007dac <lfs_fs_traverse_+0x250>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8007d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01e      	beq.n	8007d9e <lfs_fs_traverse_+0x242>
 8007d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d118      	bne.n	8007d9e <lfs_fs_traverse_+0x242>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8007d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d6e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d76:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8007d78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	9202      	str	r2, [sp, #8]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	9201      	str	r2, [sp, #4]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4623      	mov	r3, r4
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7fe f936 	bl	8005ffc <lfs_ctz_traverse>
 8007d90:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 8007d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <lfs_fs_traverse_+0x242>
                return err;
 8007d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d9a:	e007      	b.n	8007dac <lfs_fs_traverse_+0x250>
            continue;
 8007d9c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1ac      	bne.n	8007d04 <lfs_fs_traverse_+0x1a8>
            }
        }
    }
#endif

    return 0;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3774      	adds	r7, #116	@ 0x74
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd90      	pop	{r4, r7, pc}
 8007db4:	08011080 	.word	0x08011080
 8007db8:	700ffc00 	.word	0x700ffc00

08007dbc <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b08b      	sub	sp, #44	@ 0x2c
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8007dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e54 <lfs_fs_pred+0x98>)
 8007dd6:	f107 0410 	add.w	r4, r7, #16
 8007dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8007de4:	e024      	b.n	8007e30 <lfs_fs_pred+0x74>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8007de6:	f107 0310 	add.w	r3, r7, #16
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff fc67 	bl	80076c0 <lfs_tortoise_detectcycles>
 8007df2:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err < 0) {
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da02      	bge.n	8007e00 <lfs_fs_pred+0x44>
            return LFS_ERR_CORRUPT;
 8007dfa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8007dfe:	e024      	b.n	8007e4a <lfs_fs_pred+0x8e>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3318      	adds	r3, #24
 8007e04:	68b9      	ldr	r1, [r7, #8]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fa fb04 	bl	8002414 <lfs_pair_cmp>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <lfs_fs_pred+0x5a>
            return 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e019      	b.n	8007e4a <lfs_fs_pred+0x8e>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3318      	adds	r3, #24
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7fc f96a 	bl	80040f8 <lfs_dir_fetch>
 8007e24:	6238      	str	r0, [r7, #32]
        if (err) {
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <lfs_fs_pred+0x74>
            return err;
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	e00c      	b.n	8007e4a <lfs_fs_pred+0x8e>
    while (!lfs_pair_isnull(pdir->tail)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fa fad2 	bl	80023de <lfs_pair_isnull>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f083 0301 	eor.w	r3, r3, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1cf      	bne.n	8007de6 <lfs_fs_pred+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8007e46:	f06f 0301 	mvn.w	r3, #1
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	372c      	adds	r7, #44	@ 0x2c
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	08011080 	.word	0x08011080

08007e58 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8007e58:	b5b0      	push	{r4, r5, r7, lr}
 8007e5a:	b08e      	sub	sp, #56	@ 0x38
 8007e5c:	af04      	add	r7, sp, #16
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8007e78:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e7e:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8007e88:	2108      	movs	r1, #8
 8007e8a:	9103      	str	r1, [sp, #12]
 8007e8c:	f107 0110 	add.w	r1, r7, #16
 8007e90:	9102      	str	r1, [sp, #8]
 8007e92:	9201      	str	r2, [sp, #4]
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	462b      	mov	r3, r5
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	6a38      	ldr	r0, [r7, #32]
 8007e9e:	f7f9 fed3 	bl	8001c48 <lfs_bd_read>
 8007ea2:	61b8      	str	r0, [r7, #24]
    if (err) {
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <lfs_fs_parent_match+0x56>
        return err;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	e012      	b.n	8007ed4 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8007eae:	f107 0310 	add.w	r3, r7, #16
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fa fb05 	bl	80024c2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	1d1a      	adds	r2, r3, #4
 8007ebc:	f107 0310 	add.w	r3, r7, #16
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fa faa6 	bl	8002414 <lfs_pair_cmp>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bf14      	ite	ne
 8007ece:	2301      	movne	r3, #1
 8007ed0:	2300      	moveq	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3728      	adds	r7, #40	@ 0x28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bdb0      	pop	{r4, r5, r7, pc}

08007edc <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8007edc:	b590      	push	{r4, r7, lr}
 8007ede:	b093      	sub	sp, #76	@ 0x4c
 8007ee0:	af04      	add	r7, sp, #16
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8007ef4:	4b24      	ldr	r3, [pc, #144]	@ (8007f88 <lfs_fs_parent+0xac>)
 8007ef6:	f107 0420 	add.w	r4, r7, #32
 8007efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 8007f04:	e02f      	b.n	8007f66 <lfs_fs_parent+0x8a>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 8007f06:	f107 0320 	add.w	r3, r7, #32
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fbd7 	bl	80076c0 <lfs_tortoise_detectcycles>
 8007f12:	6378      	str	r0, [r7, #52]	@ 0x34
        if (err < 0) {
 8007f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da01      	bge.n	8007f1e <lfs_fs_parent+0x42>
            return err;
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	e030      	b.n	8007f80 <lfs_fs_parent+0xa4>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007f2c:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	3304      	adds	r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8007f34:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8007f36:	f107 0314 	add.w	r3, r7, #20
 8007f3a:	9303      	str	r3, [sp, #12]
 8007f3c:	4b13      	ldr	r3, [pc, #76]	@ (8007f8c <lfs_fs_parent+0xb0>)
 8007f3e:	9302      	str	r3, [sp, #8]
 8007f40:	2300      	movs	r3, #0
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	4b12      	ldr	r3, [pc, #72]	@ (8007f90 <lfs_fs_parent+0xb4>)
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4b12      	ldr	r3, [pc, #72]	@ (8007f94 <lfs_fs_parent+0xb8>)
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7fb fd03 	bl	8003958 <lfs_dir_fetchmatch>
 8007f52:	6338      	str	r0, [r7, #48]	@ 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <lfs_fs_parent+0x8a>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f113 0f02 	cmn.w	r3, #2
 8007f60:	d001      	beq.n	8007f66 <lfs_fs_parent+0x8a>
            return tag;
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	e00c      	b.n	8007f80 <lfs_fs_parent+0xa4>
    while (!lfs_pair_isnull(parent->tail)) {
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3318      	adds	r3, #24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fa fa37 	bl	80023de <lfs_pair_isnull>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f083 0301 	eor.w	r3, r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1c4      	bne.n	8007f06 <lfs_fs_parent+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8007f7c:	f06f 0301 	mvn.w	r3, #1
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	373c      	adds	r7, #60	@ 0x3c
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd90      	pop	{r4, r7, pc}
 8007f88:	08011080 	.word	0x08011080
 8007f8c:	08007e59 	.word	0x08007e59
 8007f90:	20000008 	.word	0x20000008
 8007f94:	7ff003ff 	.word	0x7ff003ff

08007f98 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	025b      	lsls	r3, r3, #9
 8007fb0:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fa fb23 	bl	8002620 <lfs_tag_size>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <lfs_fs_preporphans+0x32>
 8007fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da06      	bge.n	8007ff6 <lfs_fs_preporphans+0x32>
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8008054 <lfs_fs_preporphans+0x90>)
 8007fea:	4a1b      	ldr	r2, [pc, #108]	@ (8008058 <lfs_fs_preporphans+0x94>)
 8007fec:	f241 311a 	movw	r1, #4890	@ 0x131a
 8007ff0:	481a      	ldr	r0, [pc, #104]	@ (800805c <lfs_fs_preporphans+0x98>)
 8007ff2:	f007 f9a3 	bl	800f33c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fa fb10 	bl	8002620 <lfs_tag_size>
 8008000:	4603      	mov	r3, r0
 8008002:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8008006:	d90a      	bls.n	800801e <lfs_fs_preporphans+0x5a>
 8008008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd06      	ble.n	800801e <lfs_fs_preporphans+0x5a>
 8008010:	4b13      	ldr	r3, [pc, #76]	@ (8008060 <lfs_fs_preporphans+0x9c>)
 8008012:	4a11      	ldr	r2, [pc, #68]	@ (8008058 <lfs_fs_preporphans+0x94>)
 8008014:	f241 311b 	movw	r1, #4891	@ 0x131b
 8008018:	4810      	ldr	r0, [pc, #64]	@ (800805c <lfs_fs_preporphans+0x98>)
 800801a:	f007 f98f 	bl	800f33c <__assert_func>
    lfs->gstate.tag += orphans;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008026:	441a      	add	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008030:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3330      	adds	r3, #48	@ 0x30
 8008038:	4618      	mov	r0, r3
 800803a:	f7fa fb4e 	bl	80026da <lfs_gstate_hasorphans>
 800803e:	4603      	mov	r3, r0
 8008040:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8008042:	ea44 0203 	orr.w	r2, r4, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bd90      	pop	{r4, r7, pc}
 8008054:	08011090 	.word	0x08011090
 8008058:	08011418 	.word	0x08011418
 800805c:	08010540 	.word	0x08010540
 8008060:	080110c8 	.word	0x080110c8

08008064 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	460b      	mov	r3, r1
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008076:	4a17      	ldr	r2, [pc, #92]	@ (80080d4 <lfs_fs_prepmove+0x70>)
 8008078:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800807a:	897b      	ldrh	r3, [r7, #10]
 800807c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008080:	428b      	cmp	r3, r1
 8008082:	d006      	beq.n	8008092 <lfs_fs_prepmove+0x2e>
 8008084:	897b      	ldrh	r3, [r7, #10]
 8008086:	029b      	lsls	r3, r3, #10
 8008088:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800808c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8008090:	e000      	b.n	8008094 <lfs_fs_prepmove+0x30>
 8008092:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8008094:	431a      	orrs	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d002      	beq.n	80080aa <lfs_fs_prepmove+0x46>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	e000      	b.n	80080ac <lfs_fs_prepmove+0x48>
 80080aa:	2300      	movs	r3, #0
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80080b0:	897b      	ldrh	r3, [r7, #10]
 80080b2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <lfs_fs_prepmove+0x5e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3304      	adds	r3, #4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	e000      	b.n	80080c4 <lfs_fs_prepmove+0x60>
 80080c2:	2300      	movs	r3, #0
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80080c8:	bf00      	nop
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	800003ff 	.word	0x800003ff

080080d8 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b098      	sub	sp, #96	@ 0x60
 80080dc:	af02      	add	r7, sp, #8
 80080de:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3330      	adds	r3, #48	@ 0x30
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fa fb2d 	bl	8002744 <lfs_gstate_needssuperblock>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f083 0301 	eor.w	r3, r3, #1
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <lfs_fs_desuperblock+0x22>
        return 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e04e      	b.n	8008198 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1a      	ldr	r2, [r3, #32]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	4927      	ldr	r1, [pc, #156]	@ (80081a0 <lfs_fs_desuperblock+0xc8>)
 8008104:	9101      	str	r1, [sp, #4]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4613      	mov	r3, r2
 800810a:	f241 3234 	movw	r2, #4916	@ 0x1334
 800810e:	4925      	ldr	r1, [pc, #148]	@ (80081a4 <lfs_fs_desuperblock+0xcc>)
 8008110:	4825      	ldr	r0, [pc, #148]	@ (80081a8 <lfs_fs_desuperblock+0xd0>)
 8008112:	f007 fac3 	bl	800f69c <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f103 0220 	add.w	r2, r3, #32
 800811c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fb ffe8 	bl	80040f8 <lfs_dir_fetch>
 8008128:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 800812a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <lfs_fs_desuperblock+0x5c>
        return err;
 8008130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008132:	e031      	b.n	8008198 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7fa fc9b 	bl	8002a70 <lfs_fs_disk_version>
 800813a:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800813c:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008142:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8008144:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 800814a:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8008150:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 8008156:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 800815c:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 800815e:	f107 031c 	add.w	r3, r7, #28
 8008162:	4618      	mov	r0, r3
 8008164:	f7fa fbfa 	bl	800295c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8008168:	4b10      	ldr	r3, [pc, #64]	@ (80081ac <lfs_fs_desuperblock+0xd4>)
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	f107 031c 	add.w	r3, r7, #28
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	f107 0214 	add.w	r2, r7, #20
 8008176:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800817a:	2301      	movs	r3, #1
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7fd fd6b 	bl	8005c58 <lfs_dir_commit>
 8008182:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8008184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <lfs_fs_desuperblock+0xb6>
        return err;
 800818a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800818c:	e004      	b.n	8008198 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff ff01 	bl	8007f98 <lfs_fs_prepsuperblock>
    return 0;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3758      	adds	r7, #88	@ 0x58
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	08010688 	.word	0x08010688
 80081a4:	08010540 	.word	0x08010540
 80081a8:	08011100 	.word	0x08011100
 80081ac:	20100018 	.word	0x20100018

080081b0 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	b094      	sub	sp, #80	@ 0x50
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	333c      	adds	r3, #60	@ 0x3c
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fa faae 	bl	800271e <lfs_gstate_hasmove>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f083 0301 	eor.w	r3, r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <lfs_fs_demove+0x22>
        return 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	e05b      	b.n	800828a <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fa fa0e 	bl	8002600 <lfs_tag_id>
 80081e4:	4603      	mov	r3, r0
 80081e6:	461a      	mov	r2, r3
 80081e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008294 <lfs_fs_demove+0xe4>)
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	9201      	str	r2, [sp, #4]
 80081ee:	9400      	str	r4, [sp, #0]
 80081f0:	462b      	mov	r3, r5
 80081f2:	f241 325c 	movw	r2, #4956	@ 0x135c
 80081f6:	4928      	ldr	r1, [pc, #160]	@ (8008298 <lfs_fs_demove+0xe8>)
 80081f8:	4828      	ldr	r0, [pc, #160]	@ (800829c <lfs_fs_demove+0xec>)
 80081fa:	f007 fa4f 	bl	800f69c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008202:	4618      	mov	r0, r3
 8008204:	f7fa f9d2 	bl	80025ac <lfs_tag_type3>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8008210:	429a      	cmp	r2, r3
 8008212:	d006      	beq.n	8008222 <lfs_fs_demove+0x72>
 8008214:	4b22      	ldr	r3, [pc, #136]	@ (80082a0 <lfs_fs_demove+0xf0>)
 8008216:	4a23      	ldr	r2, [pc, #140]	@ (80082a4 <lfs_fs_demove+0xf4>)
 8008218:	f241 3163 	movw	r1, #4963	@ 0x1363
 800821c:	481e      	ldr	r0, [pc, #120]	@ (8008298 <lfs_fs_demove+0xe8>)
 800821e:	f007 f88d 	bl	800f33c <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8008228:	f107 0318 	add.w	r3, r7, #24
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fb ff62 	bl	80040f8 <lfs_dir_fetch>
 8008234:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 8008236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <lfs_fs_demove+0x90>
        return err;
 800823c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800823e:	e024      	b.n	800828a <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008244:	4618      	mov	r0, r3
 8008246:	f7fa f9db 	bl	8002600 <lfs_tag_id>
 800824a:	4603      	mov	r3, r0
 800824c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800824e:	2200      	movs	r2, #0
 8008250:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff ff05 	bl	8008064 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800825a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800825c:	029b      	lsls	r3, r3, #10
 800825e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8008262:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	f107 0210 	add.w	r2, r7, #16
 8008270:	f107 0118 	add.w	r1, r7, #24
 8008274:	2301      	movs	r3, #1
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7fd fcee 	bl	8005c58 <lfs_dir_commit>
 800827c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800827e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <lfs_fs_demove+0xd8>
        return err;
 8008284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008286:	e000      	b.n	800828a <lfs_fs_demove+0xda>
    }

    return 0;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3740      	adds	r7, #64	@ 0x40
 800828e:	46bd      	mov	sp, r7
 8008290:	bdb0      	pop	{r4, r5, r7, pc}
 8008292:	bf00      	nop
 8008294:	08010688 	.word	0x08010688
 8008298:	08010540 	.word	0x08010540
 800829c:	08011134 	.word	0x08011134
 80082a0:	08011168 	.word	0x08011168
 80082a4:	0801142c 	.word	0x0801142c

080082a8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80082a8:	b5b0      	push	{r4, r5, r7, lr}
 80082aa:	b0b2      	sub	sp, #200	@ 0xc8
 80082ac:	af04      	add	r7, sp, #16
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3330      	adds	r3, #48	@ 0x30
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fa fa0e 	bl	80026da <lfs_gstate_hasorphans>
 80082be:	4603      	mov	r3, r0
 80082c0:	f083 0301 	eor.w	r3, r3, #1
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <lfs_fs_deorphan+0x26>
        return 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e188      	b.n	80085e0 <lfs_fs_deorphan+0x338>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80082d4:	e171      	b.n	80085ba <lfs_fs_deorphan+0x312>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	2220      	movs	r2, #32
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f007 fa41 	bl	800f766 <memset>
 80082e4:	2301      	movs	r3, #1
 80082e6:	77fb      	strb	r3, [r7, #31]
 80082e8:	2301      	movs	r3, #1
 80082ea:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80082f2:	e14a      	b.n	800858a <lfs_fs_deorphan+0x2e2>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80082f4:	f107 0308 	add.w	r3, r7, #8
 80082f8:	f103 0218 	add.w	r2, r3, #24
 80082fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fb fef8 	bl	80040f8 <lfs_dir_fetch>
 8008308:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 800830c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <lfs_fs_deorphan+0x72>
                return err;
 8008314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008318:	e162      	b.n	80085e0 <lfs_fs_deorphan+0x338>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800831a:	7ffb      	ldrb	r3, [r7, #31]
 800831c:	f083 0301 	eor.w	r3, r3, #1
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 8125 	beq.w	8008572 <lfs_fs_deorphan+0x2ca>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8008328:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800832c:	f107 0308 	add.w	r3, r7, #8
 8008330:	3318      	adds	r3, #24
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff fdd1 	bl	8007edc <lfs_fs_parent>
 800833a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800833e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008342:	2b00      	cmp	r3, #0
 8008344:	da07      	bge.n	8008356 <lfs_fs_deorphan+0xae>
 8008346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800834a:	f113 0f02 	cmn.w	r3, #2
 800834e:	d002      	beq.n	8008356 <lfs_fs_deorphan+0xae>
                    return tag;
 8008350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008354:	e10c      	b.n	8008570 <lfs_fs_deorphan+0x2c8>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8008356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800835a:	2b00      	cmp	r3, #0
 800835c:	f040 80ac 	bne.w	80084b8 <lfs_fs_deorphan+0x210>
 8008360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008364:	f113 0f02 	cmn.w	r3, #2
 8008368:	f000 80a6 	beq.w	80084b8 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800836c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008370:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8008374:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	4613      	mov	r3, r2
 800837c:	4a9a      	ldr	r2, [pc, #616]	@ (80085e8 <lfs_fs_deorphan+0x340>)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fa fdb4 	bl	8002eec <lfs_dir_get>
 8008384:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8008388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800838c:	2b00      	cmp	r3, #0
 800838e:	da02      	bge.n	8008396 <lfs_fs_deorphan+0xee>
                        return state;
 8008390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                    return tag;
 8008394:	e124      	b.n	80085e0 <lfs_fs_deorphan+0x338>
                    }
                    lfs_pair_fromle32(pair);
 8008396:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800839a:	4618      	mov	r0, r3
 800839c:	f7fa f891 	bl	80024c2 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80083a0:	f107 0308 	add.w	r3, r7, #8
 80083a4:	f103 0218 	add.w	r2, r3, #24
 80083a8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fa f85a 	bl	8002468 <lfs_pair_issync>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f083 0301 	eor.w	r3, r3, #1
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d07b      	beq.n	80084b8 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80083c0:	6a38      	ldr	r0, [r7, #32]
 80083c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80083c8:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80083cc:	4c87      	ldr	r4, [pc, #540]	@ (80085ec <lfs_fs_deorphan+0x344>)
 80083ce:	9403      	str	r4, [sp, #12]
 80083d0:	9102      	str	r1, [sp, #8]
 80083d2:	9201      	str	r2, [sp, #4]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	4603      	mov	r3, r0
 80083d8:	f241 32a9 	movw	r2, #5033	@ 0x13a9
 80083dc:	4984      	ldr	r1, [pc, #528]	@ (80085f0 <lfs_fs_deorphan+0x348>)
 80083de:	4885      	ldr	r0, [pc, #532]	@ (80085f4 <lfs_fs_deorphan+0x34c>)
 80083e0:	f007 f95c 	bl	800f69c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80083e4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80083e8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3330      	adds	r3, #48	@ 0x30
 80083f0:	f107 0208 	add.w	r2, r7, #8
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fa f9b8 	bl	800276c <lfs_gstate_hasmovehere>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01c      	beq.n	800843c <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	4618      	mov	r0, r3
 8008408:	f7fa f8fa 	bl	8002600 <lfs_tag_id>
 800840c:	4603      	mov	r3, r0
 800840e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800841a:	4874      	ldr	r0, [pc, #464]	@ (80085ec <lfs_fs_deorphan+0x344>)
 800841c:	9002      	str	r0, [sp, #8]
 800841e:	9201      	str	r2, [sp, #4]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	460b      	mov	r3, r1
 8008424:	f241 32b4 	movw	r2, #5044	@ 0x13b4
 8008428:	4971      	ldr	r1, [pc, #452]	@ (80085f0 <lfs_fs_deorphan+0x348>)
 800842a:	4873      	ldr	r0, [pc, #460]	@ (80085f8 <lfs_fs_deorphan+0x350>)
 800842c:	f007 f936 	bl	800f69c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008430:	2200      	movs	r2, #0
 8008432:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff fe14 	bl	8008064 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800843c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008440:	4618      	mov	r0, r3
 8008442:	f7fa f858 	bl	80024f6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008446:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800844a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800844e:	4293      	cmp	r3, r2
 8008450:	d007      	beq.n	8008462 <lfs_fs_deorphan+0x1ba>
 8008452:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800845c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8008460:	e000      	b.n	8008464 <lfs_fs_deorphan+0x1bc>
 8008462:	2300      	movs	r3, #0
 8008464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800846e:	4b63      	ldr	r3, [pc, #396]	@ (80085fc <lfs_fs_deorphan+0x354>)
 8008470:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008474:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800847c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	2302      	movs	r3, #2
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7fd f8ec 	bl	8005664 <lfs_dir_orphaningcommit>
 800848c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8008490:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008494:	4618      	mov	r0, r3
 8008496:	f7fa f814 	bl	80024c2 <lfs_pair_fromle32>
                        if (state < 0) {
 800849a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da02      	bge.n	80084a8 <lfs_fs_deorphan+0x200>
                            return state;
 80084a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80084a6:	e063      	b.n	8008570 <lfs_fs_deorphan+0x2c8>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80084a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d16c      	bne.n	800858a <lfs_fs_deorphan+0x2e2>
                            moreorphans = true;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80084b6:	e068      	b.n	800858a <lfs_fs_deorphan+0x2e2>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80084b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d158      	bne.n	8008572 <lfs_fs_deorphan+0x2ca>
 80084c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084c4:	f113 0f02 	cmn.w	r3, #2
 80084c8:	d153      	bne.n	8008572 <lfs_fs_deorphan+0x2ca>
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d050      	beq.n	8008572 <lfs_fs_deorphan+0x2ca>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	4945      	ldr	r1, [pc, #276]	@ (80085ec <lfs_fs_deorphan+0x344>)
 80084d6:	9101      	str	r1, [sp, #4]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4613      	mov	r3, r2
 80084dc:	f241 32d4 	movw	r2, #5076	@ 0x13d4
 80084e0:	4943      	ldr	r1, [pc, #268]	@ (80085f0 <lfs_fs_deorphan+0x348>)
 80084e2:	4847      	ldr	r0, [pc, #284]	@ (8008600 <lfs_fs_deorphan+0x358>)
 80084e4:	f007 f8da 	bl	800f69c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80084ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fb fe1b 	bl	8004130 <lfs_dir_getgstate>
 80084fa:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 80084fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <lfs_fs_deorphan+0x264>
                        return err;
 8008506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800850a:	e030      	b.n	800856e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800850c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008510:	3318      	adds	r3, #24
 8008512:	4618      	mov	r0, r3
 8008514:	f7f9 ffef 	bl	80024f6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008518:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800851c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8008520:	051a      	lsls	r2, r3, #20
 8008522:	4b38      	ldr	r3, [pc, #224]	@ (8008604 <lfs_fs_deorphan+0x35c>)
 8008524:	4313      	orrs	r3, r2
 8008526:	673b      	str	r3, [r7, #112]	@ 0x70
 8008528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800852c:	3318      	adds	r3, #24
 800852e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008530:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	2301      	movs	r3, #1
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7fd f892 	bl	8005664 <lfs_dir_orphaningcommit>
 8008540:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8008544:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008548:	3318      	adds	r3, #24
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 ffb9 	bl	80024c2 <lfs_pair_fromle32>
                    if (state < 0) {
 8008550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008554:	2b00      	cmp	r3, #0
 8008556:	da02      	bge.n	800855e <lfs_fs_deorphan+0x2b6>
                        return state;
 8008558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800855c:	e007      	b.n	800856e <lfs_fs_deorphan+0x2c6>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800855e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008562:	2b03      	cmp	r3, #3
 8008564:	d110      	bne.n	8008588 <lfs_fs_deorphan+0x2e0>
                        moreorphans = true;
 8008566:	2301      	movs	r3, #1
 8008568:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800856c:	e00d      	b.n	800858a <lfs_fs_deorphan+0x2e2>
                    return tag;
 800856e:	e037      	b.n	80085e0 <lfs_fs_deorphan+0x338>
                return err;
 8008570:	e036      	b.n	80085e0 <lfs_fs_deorphan+0x338>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8008572:	f107 0408 	add.w	r4, r7, #8
 8008576:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800857a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800857c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008586:	e000      	b.n	800858a <lfs_fs_deorphan+0x2e2>
                    continue;
 8008588:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	3318      	adds	r3, #24
 8008590:	4618      	mov	r0, r3
 8008592:	f7f9 ff24 	bl	80023de <lfs_pair_isnull>
 8008596:	4603      	mov	r3, r0
 8008598:	f083 0301 	eor.w	r3, r3, #1
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f47f aea8 	bne.w	80082f4 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80085a4:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <lfs_fs_deorphan+0x308>
 80085ac:	2300      	movs	r3, #0
 80085ae:	e002      	b.n	80085b6 <lfs_fs_deorphan+0x30e>
 80085b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b4:	3301      	adds	r3, #1
 80085b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80085ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085be:	2b01      	cmp	r3, #1
 80085c0:	f77f ae89 	ble.w	80082d6 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3330      	adds	r3, #48	@ 0x30
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fa f899 	bl	8002700 <lfs_gstate_getorphans>
 80085ce:	4603      	mov	r3, r0
 80085d0:	425b      	negs	r3, r3
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	b25b      	sxtb	r3, r3
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff fcf3 	bl	8007fc4 <lfs_fs_preporphans>
 80085de:	4603      	mov	r3, r0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	37b8      	adds	r7, #184	@ 0xb8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bdb0      	pop	{r4, r5, r7, pc}
 80085e8:	7ffffc00 	.word	0x7ffffc00
 80085ec:	08010688 	.word	0x08010688
 80085f0:	08010540 	.word	0x08010540
 80085f4:	0801119c 	.word	0x0801119c
 80085f8:	080111e0 	.word	0x080111e0
 80085fc:	600ffc08 	.word	0x600ffc08
 8008600:	08011228 	.word	0x08011228
 8008604:	000ffc08 	.word	0x000ffc08

08008608 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fd61 	bl	80080d8 <lfs_fs_desuperblock>
 8008616:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <lfs_fs_forceconsistency+0x1a>
        return err;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	e013      	b.n	800864a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff fdc4 	bl	80081b0 <lfs_fs_demove>
 8008628:	60f8      	str	r0, [r7, #12]
    if (err) {
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <lfs_fs_forceconsistency+0x2c>
        return err;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	e00a      	b.n	800864a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008634:	2101      	movs	r1, #1
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff fe36 	bl	80082a8 <lfs_fs_deorphan>
 800863c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <lfs_fs_forceconsistency+0x40>
        return err;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	e000      	b.n	800864a <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	601a      	str	r2, [r3, #0]
    return 0;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8008684:	f107 0208 	add.w	r2, r7, #8
 8008688:	2300      	movs	r3, #0
 800868a:	4907      	ldr	r1, [pc, #28]	@ (80086a8 <lfs_fs_size_+0x30>)
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff fa65 	bl	8007b5c <lfs_fs_traverse_>
 8008692:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <lfs_fs_size_+0x26>
        return err;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	e000      	b.n	80086a0 <lfs_fs_size_+0x28>
    }

    return size;
 800869e:	68bb      	ldr	r3, [r7, #8]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	08008653 	.word	0x08008653

080086ac <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <lfs_format+0x18>
        return err;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	e005      	b.n	80086d0 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7fe ff48 	bl	800755c <lfs_format_>
 80086cc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80086ce:	68fb      	ldr	r3, [r7, #12]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <lfs_mount+0x18>
        return err;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	e005      	b.n	80086fc <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff f824 	bl	8007740 <lfs_mount_>
 80086f8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80086fa:	68fb      	ldr	r3, [r7, #12]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
    if (err) {
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <lfs_file_open+0x1c>
        return err;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	e01a      	b.n	8008756 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	4618      	mov	r0, r3
 8008728:	f7fa f950 	bl	80029cc <lfs_mlist_isopen>
 800872c:	4603      	mov	r3, r0
 800872e:	f083 0301 	eor.w	r3, r3, #1
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <lfs_file_open+0x42>
 8008738:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <lfs_file_open+0x5c>)
 800873a:	4a0a      	ldr	r2, [pc, #40]	@ (8008764 <lfs_file_open+0x60>)
 800873c:	f241 71e5 	movw	r1, #6117	@ 0x17e5
 8008740:	4809      	ldr	r0, [pc, #36]	@ (8008768 <lfs_file_open+0x64>)
 8008742:	f006 fdfb 	bl	800f33c <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7fd feb1 	bl	80064b4 <lfs_file_open_>
 8008752:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008754:	697b      	ldr	r3, [r7, #20]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08011278 	.word	0x08011278
 8008764:	0801143c 	.word	0x0801143c
 8008768:	08010540 	.word	0x08010540

0800876c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
    if (err) {
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <lfs_file_close+0x18>
        return err;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	e015      	b.n	80087b0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	4618      	mov	r0, r3
 800878c:	f7fa f91e 	bl	80029cc <lfs_mlist_isopen>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <lfs_file_close+0x38>
 8008796:	4b08      	ldr	r3, [pc, #32]	@ (80087b8 <lfs_file_close+0x4c>)
 8008798:	4a08      	ldr	r2, [pc, #32]	@ (80087bc <lfs_file_close+0x50>)
 800879a:	f641 0109 	movw	r1, #6153	@ 0x1809
 800879e:	4808      	ldr	r0, [pc, #32]	@ (80087c0 <lfs_file_close+0x54>)
 80087a0:	f006 fdcc 	bl	800f33c <__assert_func>

    err = lfs_file_close_(lfs, file);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fd fe9c 	bl	80064e4 <lfs_file_close_>
 80087ac:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80087ae:	68fb      	ldr	r3, [r7, #12]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	080112b0 	.word	0x080112b0
 80087bc:	0801144c 	.word	0x0801144c
 80087c0:	08010540 	.word	0x08010540

080087c4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
    if (err) {
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <lfs_file_read+0x1c>
        return err;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	e017      	b.n	8008810 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fa f8f0 	bl	80029cc <lfs_mlist_isopen>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <lfs_file_read+0x3c>
 80087f2:	4b09      	ldr	r3, [pc, #36]	@ (8008818 <lfs_file_read+0x54>)
 80087f4:	4a09      	ldr	r2, [pc, #36]	@ (800881c <lfs_file_read+0x58>)
 80087f6:	f641 012b 	movw	r1, #6187	@ 0x182b
 80087fa:	4809      	ldr	r0, [pc, #36]	@ (8008820 <lfs_file_read+0x5c>)
 80087fc:	f006 fd9e 	bl	800f33c <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7fe f9cc 	bl	8006ba4 <lfs_file_read_>
 800880c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800880e:	693b      	ldr	r3, [r7, #16]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	080112b0 	.word	0x080112b0
 800881c:	0801145c 	.word	0x0801145c
 8008820:	08010540 	.word	0x08010540

08008824 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
    if (err) {
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <lfs_file_write+0x1c>
        return err;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	e017      	b.n	8008870 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fa f8c0 	bl	80029cc <lfs_mlist_isopen>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <lfs_file_write+0x3c>
 8008852:	4b09      	ldr	r3, [pc, #36]	@ (8008878 <lfs_file_write+0x54>)
 8008854:	4a09      	ldr	r2, [pc, #36]	@ (800887c <lfs_file_write+0x58>)
 8008856:	f641 013d 	movw	r1, #6205	@ 0x183d
 800885a:	4809      	ldr	r0, [pc, #36]	@ (8008880 <lfs_file_write+0x5c>)
 800885c:	f006 fd6e 	bl	800f33c <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7fe fae2 	bl	8006e30 <lfs_file_write_>
 800886c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800886e:	693b      	ldr	r3, [r7, #16]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	080112b0 	.word	0x080112b0
 800887c:	0801146c 	.word	0x0801146c
 8008880:	08010540 	.word	0x08010540

08008884 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e024      	b.n	80088e4 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	091a      	lsrs	r2, r3, #4
 800889e:	6939      	ldr	r1, [r7, #16]
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	440b      	add	r3, r1
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	4619      	mov	r1, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	404b      	eors	r3, r1
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	4912      	ldr	r1, [pc, #72]	@ (80088fc <lfs_crc+0x78>)
 80088b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088b6:	4053      	eors	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	091a      	lsrs	r2, r3, #4
 80088be:	6939      	ldr	r1, [r7, #16]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	440b      	add	r3, r1
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	091b      	lsrs	r3, r3, #4
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	4619      	mov	r1, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	404b      	eors	r3, r1
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	4909      	ldr	r1, [pc, #36]	@ (80088fc <lfs_crc+0x78>)
 80088d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088da:	4053      	eors	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	3301      	adds	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d3d6      	bcc.n	800889a <lfs_crc+0x16>
    }

    return crc;
 80088ec:	68fb      	ldr	r3, [r7, #12]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	0801147c 	.word	0x0801147c

08008900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008906:	4b35      	ldr	r3, [pc, #212]	@ (80089dc <SystemInit+0xdc>)
 8008908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890c:	4a33      	ldr	r2, [pc, #204]	@ (80089dc <SystemInit+0xdc>)
 800890e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008912:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8008916:	4b32      	ldr	r3, [pc, #200]	@ (80089e0 <SystemInit+0xe0>)
 8008918:	2201      	movs	r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800891c:	4b30      	ldr	r3, [pc, #192]	@ (80089e0 <SystemInit+0xe0>)
 800891e:	2200      	movs	r2, #0
 8008920:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8008922:	4b2f      	ldr	r3, [pc, #188]	@ (80089e0 <SystemInit+0xe0>)
 8008924:	2200      	movs	r2, #0
 8008926:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8008928:	4b2d      	ldr	r3, [pc, #180]	@ (80089e0 <SystemInit+0xe0>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	492c      	ldr	r1, [pc, #176]	@ (80089e0 <SystemInit+0xe0>)
 800892e:	4b2d      	ldr	r3, [pc, #180]	@ (80089e4 <SystemInit+0xe4>)
 8008930:	4013      	ands	r3, r2
 8008932:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8008934:	4b2a      	ldr	r3, [pc, #168]	@ (80089e0 <SystemInit+0xe0>)
 8008936:	2200      	movs	r2, #0
 8008938:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800893a:	4b29      	ldr	r3, [pc, #164]	@ (80089e0 <SystemInit+0xe0>)
 800893c:	2200      	movs	r2, #0
 800893e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8008940:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <SystemInit+0xe0>)
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8008946:	4b26      	ldr	r3, [pc, #152]	@ (80089e0 <SystemInit+0xe0>)
 8008948:	4a27      	ldr	r2, [pc, #156]	@ (80089e8 <SystemInit+0xe8>)
 800894a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800894c:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <SystemInit+0xe0>)
 800894e:	2200      	movs	r2, #0
 8008950:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8008952:	4b23      	ldr	r3, [pc, #140]	@ (80089e0 <SystemInit+0xe0>)
 8008954:	4a24      	ldr	r2, [pc, #144]	@ (80089e8 <SystemInit+0xe8>)
 8008956:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8008958:	4b21      	ldr	r3, [pc, #132]	@ (80089e0 <SystemInit+0xe0>)
 800895a:	2200      	movs	r2, #0
 800895c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800895e:	4b20      	ldr	r3, [pc, #128]	@ (80089e0 <SystemInit+0xe0>)
 8008960:	4a21      	ldr	r2, [pc, #132]	@ (80089e8 <SystemInit+0xe8>)
 8008962:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8008964:	4b1e      	ldr	r3, [pc, #120]	@ (80089e0 <SystemInit+0xe0>)
 8008966:	2200      	movs	r2, #0
 8008968:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800896a:	4b1d      	ldr	r3, [pc, #116]	@ (80089e0 <SystemInit+0xe0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1c      	ldr	r2, [pc, #112]	@ (80089e0 <SystemInit+0xe0>)
 8008970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008974:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8008976:	4b1a      	ldr	r3, [pc, #104]	@ (80089e0 <SystemInit+0xe0>)
 8008978:	2200      	movs	r2, #0
 800897a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800897c:	4b17      	ldr	r3, [pc, #92]	@ (80089dc <SystemInit+0xdc>)
 800897e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008982:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8008984:	4b19      	ldr	r3, [pc, #100]	@ (80089ec <SystemInit+0xec>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800898c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8008994:	d003      	beq.n	800899e <SystemInit+0x9e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800899c:	d117      	bne.n	80089ce <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800899e:	4b13      	ldr	r3, [pc, #76]	@ (80089ec <SystemInit+0xec>)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80089aa:	4b10      	ldr	r3, [pc, #64]	@ (80089ec <SystemInit+0xec>)
 80089ac:	4a10      	ldr	r2, [pc, #64]	@ (80089f0 <SystemInit+0xf0>)
 80089ae:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80089b0:	4b0e      	ldr	r3, [pc, #56]	@ (80089ec <SystemInit+0xec>)
 80089b2:	4a10      	ldr	r2, [pc, #64]	@ (80089f4 <SystemInit+0xf4>)
 80089b4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <SystemInit+0xec>)
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	4a0c      	ldr	r2, [pc, #48]	@ (80089ec <SystemInit+0xec>)
 80089bc:	f043 0302 	orr.w	r3, r3, #2
 80089c0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80089c2:	4b0a      	ldr	r3, [pc, #40]	@ (80089ec <SystemInit+0xec>)
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	4a09      	ldr	r2, [pc, #36]	@ (80089ec <SystemInit+0xec>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	61d3      	str	r3, [r2, #28]
  }
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	e000ed00 	.word	0xe000ed00
 80089e0:	44020c00 	.word	0x44020c00
 80089e4:	eae2eae3 	.word	0xeae2eae3
 80089e8:	01010280 	.word	0x01010280
 80089ec:	40022000 	.word	0x40022000
 80089f0:	08192a3b 	.word	0x08192a3b
 80089f4:	4c5d6e7f 	.word	0x4c5d6e7f

080089f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089fc:	2003      	movs	r0, #3
 80089fe:	f000 f96c 	bl	8008cda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a02:	f001 f9b5 	bl	8009d70 <HAL_RCC_GetSysClockFreq>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <HAL_Init+0x44>)
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	490b      	ldr	r1, [pc, #44]	@ (8008a40 <HAL_Init+0x48>)
 8008a12:	5ccb      	ldrb	r3, [r1, r3]
 8008a14:	fa22 f303 	lsr.w	r3, r2, r3
 8008a18:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <HAL_Init+0x4c>)
 8008a1a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008a1c:	2004      	movs	r0, #4
 8008a1e:	f000 f9a3 	bl	8008d68 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008a22:	200f      	movs	r0, #15
 8008a24:	f000 f810 	bl	8008a48 <HAL_InitTick>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e002      	b.n	8008a38 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008a32:	f7f8 f923 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	44020c00 	.word	0x44020c00
 8008a40:	080114bc 	.word	0x080114bc
 8008a44:	20000058 	.word	0x20000058

08008a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8008a54:	4b33      	ldr	r3, [pc, #204]	@ (8008b24 <HAL_InitTick+0xdc>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e05c      	b.n	8008b1a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8008a60:	4b31      	ldr	r3, [pc, #196]	@ (8008b28 <HAL_InitTick+0xe0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d10c      	bne.n	8008a86 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8008a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b2c <HAL_InitTick+0xe4>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4b2c      	ldr	r3, [pc, #176]	@ (8008b24 <HAL_InitTick+0xdc>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e037      	b.n	8008af6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8008a86:	f000 f9c7 	bl	8008e18 <HAL_SYSTICK_GetCLKSourceConfig>
 8008a8a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d023      	beq.n	8008ada <HAL_InitTick+0x92>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d82d      	bhi.n	8008af4 <HAL_InitTick+0xac>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_InitTick+0x5e>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d00d      	beq.n	8008ac0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8008aa4:	e026      	b.n	8008af4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8008aa6:	4b21      	ldr	r3, [pc, #132]	@ (8008b2c <HAL_InitTick+0xe4>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8008b24 <HAL_InitTick+0xdc>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8008ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	60fb      	str	r3, [r7, #12]
        break;
 8008abe:	e01a      	b.n	8008af6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8008ac0:	4b18      	ldr	r3, [pc, #96]	@ (8008b24 <HAL_InitTick+0xdc>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ace:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8008ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad6:	60fb      	str	r3, [r7, #12]
        break;
 8008ad8:	e00d      	b.n	8008af6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8008ada:	4b12      	ldr	r3, [pc, #72]	@ (8008b24 <HAL_InitTick+0xdc>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af0:	60fb      	str	r3, [r7, #12]
        break;
 8008af2:	e000      	b.n	8008af6 <HAL_InitTick+0xae>
        break;
 8008af4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f914 	bl	8008d24 <HAL_SYSTICK_Config>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e009      	b.n	8008b1a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b06:	2200      	movs	r2, #0
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0e:	f000 f8ef 	bl	8008cf0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8008b12:	4a07      	ldr	r2, [pc, #28]	@ (8008b30 <HAL_InitTick+0xe8>)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000060 	.word	0x20000060
 8008b28:	e000e010 	.word	0xe000e010
 8008b2c:	20000058 	.word	0x20000058
 8008b30:	2000005c 	.word	0x2000005c

08008b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b38:	4b06      	ldr	r3, [pc, #24]	@ (8008b54 <HAL_IncTick+0x20>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4b06      	ldr	r3, [pc, #24]	@ (8008b58 <HAL_IncTick+0x24>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4413      	add	r3, r2
 8008b44:	4a04      	ldr	r2, [pc, #16]	@ (8008b58 <HAL_IncTick+0x24>)
 8008b46:	6013      	str	r3, [r2, #0]
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000060 	.word	0x20000060
 8008b58:	20000174 	.word	0x20000174

08008b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8008b60:	4b03      	ldr	r3, [pc, #12]	@ (8008b70 <HAL_GetTick+0x14>)
 8008b62:	681b      	ldr	r3, [r3, #0]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000174 	.word	0x20000174

08008b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b7c:	f7ff ffee 	bl	8008b5c <HAL_GetTick>
 8008b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8c:	d005      	beq.n	8008b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <HAL_Delay+0x44>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008b9a:	bf00      	nop
 8008b9c:	f7ff ffde 	bl	8008b5c <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d8f7      	bhi.n	8008b9c <HAL_Delay+0x28>
  {
  }
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000060 	.word	0x20000060

08008bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c00 <__NVIC_SetPriorityGrouping+0x44>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008bd8:	4013      	ands	r3, r2
 8008bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bee:	4a04      	ldr	r2, [pc, #16]	@ (8008c00 <__NVIC_SetPriorityGrouping+0x44>)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	60d3      	str	r3, [r2, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c08:	4b04      	ldr	r3, [pc, #16]	@ (8008c1c <__NVIC_GetPriorityGrouping+0x18>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	f003 0307 	and.w	r3, r3, #7
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	e000ed00 	.word	0xe000ed00

08008c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	db0a      	blt.n	8008c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	490c      	ldr	r1, [pc, #48]	@ (8008c6c <__NVIC_SetPriority+0x4c>)
 8008c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c3e:	0112      	lsls	r2, r2, #4
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	440b      	add	r3, r1
 8008c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c48:	e00a      	b.n	8008c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4908      	ldr	r1, [pc, #32]	@ (8008c70 <__NVIC_SetPriority+0x50>)
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	3b04      	subs	r3, #4
 8008c58:	0112      	lsls	r2, r2, #4
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	761a      	strb	r2, [r3, #24]
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	e000e100 	.word	0xe000e100
 8008c70:	e000ed00 	.word	0xe000ed00

08008c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b089      	sub	sp, #36	@ 0x24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f1c3 0307 	rsb	r3, r3, #7
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	bf28      	it	cs
 8008c92:	2304      	movcs	r3, #4
 8008c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	2b06      	cmp	r3, #6
 8008c9c:	d902      	bls.n	8008ca4 <NVIC_EncodePriority+0x30>
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	3b03      	subs	r3, #3
 8008ca2:	e000      	b.n	8008ca6 <NVIC_EncodePriority+0x32>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	43da      	mvns	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	401a      	ands	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc6:	43d9      	mvns	r1, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ccc:	4313      	orrs	r3, r2
         );
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3724      	adds	r7, #36	@ 0x24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff ff6a 	bl	8008bbc <__NVIC_SetPriorityGrouping>
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008cfe:	f7ff ff81 	bl	8008c04 <__NVIC_GetPriorityGrouping>
 8008d02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	6978      	ldr	r0, [r7, #20]
 8008d0a:	f7ff ffb3 	bl	8008c74 <NVIC_EncodePriority>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff ff82 	bl	8008c20 <__NVIC_SetPriority>
}
 8008d1c:	bf00      	nop
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d34:	d301      	bcc.n	8008d3a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8008d36:	2301      	movs	r3, #1
 8008d38:	e00d      	b.n	8008d56 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d64 <HAL_SYSTICK_Config+0x40>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8008d42:	4b08      	ldr	r3, [pc, #32]	@ (8008d64 <HAL_SYSTICK_Config+0x40>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8008d48:	4b06      	ldr	r3, [pc, #24]	@ (8008d64 <HAL_SYSTICK_Config+0x40>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a05      	ldr	r2, [pc, #20]	@ (8008d64 <HAL_SYSTICK_Config+0x40>)
 8008d4e:	f043 0303 	orr.w	r3, r3, #3
 8008d52:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	e000e010 	.word	0xe000e010

08008d68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d844      	bhi.n	8008e00 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8008d76:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d9f 	.word	0x08008d9f
 8008d80:	08008dbd 	.word	0x08008dbd
 8008d84:	08008ddf 	.word	0x08008ddf
 8008d88:	08008e01 	.word	0x08008e01
 8008d8c:	08008d91 	.word	0x08008d91
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008d90:	4b1f      	ldr	r3, [pc, #124]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1e      	ldr	r2, [pc, #120]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008d96:	f043 0304 	orr.w	r3, r3, #4
 8008d9a:	6013      	str	r3, [r2, #0]
      break;
 8008d9c:	e031      	b.n	8008e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a1b      	ldr	r2, [pc, #108]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008da4:	f023 0304 	bic.w	r3, r3, #4
 8008da8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8008daa:	4b1a      	ldr	r3, [pc, #104]	@ (8008e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008dac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008db0:	4a18      	ldr	r2, [pc, #96]	@ (8008e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008db2:	f023 030c 	bic.w	r3, r3, #12
 8008db6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8008dba:	e022      	b.n	8008e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008dbc:	4b14      	ldr	r3, [pc, #80]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a13      	ldr	r2, [pc, #76]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008dc2:	f023 0304 	bic.w	r3, r3, #4
 8008dc6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8008dc8:	4b12      	ldr	r3, [pc, #72]	@ (8008e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008dca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008dce:	f023 030c 	bic.w	r3, r3, #12
 8008dd2:	4a10      	ldr	r2, [pc, #64]	@ (8008e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008dd4:	f043 0304 	orr.w	r3, r3, #4
 8008dd8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8008ddc:	e011      	b.n	8008e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8008dde:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a0b      	ldr	r2, [pc, #44]	@ (8008e10 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8008de4:	f023 0304 	bic.w	r3, r3, #4
 8008de8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8008dea:	4b0a      	ldr	r3, [pc, #40]	@ (8008e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008dec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008df0:	f023 030c 	bic.w	r3, r3, #12
 8008df4:	4a07      	ldr	r2, [pc, #28]	@ (8008e14 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8008df6:	f043 0308 	orr.w	r3, r3, #8
 8008dfa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8008dfe:	e000      	b.n	8008e02 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8008e00:	bf00      	nop
  }
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e010 	.word	0xe000e010
 8008e14:	44020c00 	.word	0x44020c00

08008e18 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8008e1e:	4b17      	ldr	r3, [pc, #92]	@ (8008e7c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8008e2a:	2304      	movs	r3, #4
 8008e2c:	607b      	str	r3, [r7, #4]
 8008e2e:	e01e      	b.n	8008e6e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8008e30:	4b13      	ldr	r3, [pc, #76]	@ (8008e80 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8008e32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e36:	f003 030c 	and.w	r3, r3, #12
 8008e3a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d00f      	beq.n	8008e62 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d80f      	bhi.n	8008e68 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d003      	beq.n	8008e5c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8008e54:	e008      	b.n	8008e68 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8008e56:	2300      	movs	r3, #0
 8008e58:	607b      	str	r3, [r7, #4]
        break;
 8008e5a:	e008      	b.n	8008e6e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	607b      	str	r3, [r7, #4]
        break;
 8008e60:	e005      	b.n	8008e6e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8008e62:	2302      	movs	r3, #2
 8008e64:	607b      	str	r3, [r7, #4]
        break;
 8008e66:	e002      	b.n	8008e6e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	607b      	str	r3, [r7, #4]
        break;
 8008e6c:	bf00      	nop
    }
  }
  return systick_source;
 8008e6e:	687b      	ldr	r3, [r7, #4]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	e000e010 	.word	0xe000e010
 8008e80:	44020c00 	.word	0x44020c00

08008e84 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008e92:	e142      	b.n	800911a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	2101      	movs	r1, #1
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 8134 	beq.w	8009114 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d003      	beq.n	8008ebc <HAL_GPIO_Init+0x38>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b12      	cmp	r3, #18
 8008eba:	d125      	bne.n	8008f08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	08da      	lsrs	r2, r3, #3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3208      	adds	r2, #8
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	220f      	movs	r2, #15
 8008ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4013      	ands	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f003 020f 	and.w	r2, r3, #15
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	08da      	lsrs	r2, r3, #3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3208      	adds	r2, #8
 8008f02:	6979      	ldr	r1, [r7, #20]
 8008f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	2203      	movs	r2, #3
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f003 0203 	and.w	r2, r3, #3
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d00b      	beq.n	8008f5c <HAL_GPIO_Init+0xd8>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d007      	beq.n	8008f5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f50:	2b11      	cmp	r3, #17
 8008f52:	d003      	beq.n	8008f5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2b12      	cmp	r3, #18
 8008f5a:	d130      	bne.n	8008fbe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	2203      	movs	r2, #3
 8008f68:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4013      	ands	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f92:	2201      	movs	r2, #1
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9a:	43db      	mvns	r3, r3
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	f003 0201 	and.w	r2, r3, #1
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d109      	bne.n	8008fde <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d11b      	bne.n	800900e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d017      	beq.n	800900e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	2203      	movs	r2, #3
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d07c      	beq.n	8009114 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800901a:	4a47      	ldr	r2, [pc, #284]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	089b      	lsrs	r3, r3, #2
 8009020:	3318      	adds	r3, #24
 8009022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009026:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	220f      	movs	r2, #15
 8009032:	fa02 f303 	lsl.w	r3, r2, r3
 8009036:	43db      	mvns	r3, r3
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	4013      	ands	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	0a9a      	lsrs	r2, r3, #10
 8009042:	4b3e      	ldr	r3, [pc, #248]	@ (800913c <HAL_GPIO_Init+0x2b8>)
 8009044:	4013      	ands	r3, r2
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	f002 0203 	and.w	r2, r2, #3
 800904c:	00d2      	lsls	r2, r2, #3
 800904e:	4093      	lsls	r3, r2
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	4313      	orrs	r3, r2
 8009054:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8009056:	4938      	ldr	r1, [pc, #224]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	089b      	lsrs	r3, r3, #2
 800905c:	3318      	adds	r3, #24
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8009064:	4b34      	ldr	r3, [pc, #208]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	43db      	mvns	r3, r3
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	4013      	ands	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8009088:	4a2b      	ldr	r2, [pc, #172]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800908e:	4b2a      	ldr	r3, [pc, #168]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	43db      	mvns	r3, r3
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4013      	ands	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80090b2:	4a21      	ldr	r2, [pc, #132]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80090b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 80090ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	43db      	mvns	r3, r3
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	4013      	ands	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80090de:	4a16      	ldr	r2, [pc, #88]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80090e6:	4b14      	ldr	r3, [pc, #80]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 80090e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	43db      	mvns	r3, r3
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4013      	ands	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800910c:	4a0a      	ldr	r2, [pc, #40]	@ (8009138 <HAL_GPIO_Init+0x2b4>)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	3301      	adds	r3, #1
 8009118:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	2b00      	cmp	r3, #0
 8009126:	f47f aeb5 	bne.w	8008e94 <HAL_GPIO_Init+0x10>
  }
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	44022000 	.word	0x44022000
 800913c:	002f7f7f 	.word	0x002f7f7f

08009140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	807b      	strh	r3, [r7, #2]
 800914c:	4613      	mov	r3, r2
 800914e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009150:	787b      	ldrb	r3, [r7, #1]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009156:	887a      	ldrh	r2, [r7, #2]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800915c:	e002      	b.n	8009164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800915e:	887a      	ldrh	r2, [r7, #2]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009174:	4b05      	ldr	r3, [pc, #20]	@ (800918c <HAL_ICACHE_Enable+0x1c>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a04      	ldr	r2, [pc, #16]	@ (800918c <HAL_ICACHE_Enable+0x1c>)
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	40030400 	.word	0x40030400

08009190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f000 bc28 	b.w	80099f4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091a4:	4b94      	ldr	r3, [pc, #592]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	f003 0318 	and.w	r3, r3, #24
 80091ac:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80091ae:	4b92      	ldr	r3, [pc, #584]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80091b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d05b      	beq.n	800927c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	2b08      	cmp	r3, #8
 80091c8:	d005      	beq.n	80091d6 <HAL_RCC_OscConfig+0x46>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2b18      	cmp	r3, #24
 80091ce:	d114      	bne.n	80091fa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d111      	bne.n	80091fa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f000 bc08 	b.w	80099f4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80091e4:	4b84      	ldr	r3, [pc, #528]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	041b      	lsls	r3, r3, #16
 80091f2:	4981      	ldr	r1, [pc, #516]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80091f8:	e040      	b.n	800927c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d023      	beq.n	800924a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009202:	4b7d      	ldr	r3, [pc, #500]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a7c      	ldr	r2, [pc, #496]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800920c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800920e:	f7ff fca5 	bl	8008b5c <HAL_GetTick>
 8009212:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8009214:	e008      	b.n	8009228 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8009216:	f7ff fca1 	bl	8008b5c <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d901      	bls.n	8009228 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e3e5      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8009228:	4b73      	ldr	r3, [pc, #460]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009230:	2b00      	cmp	r3, #0
 8009232:	d0f0      	beq.n	8009216 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8009234:	4b70      	ldr	r3, [pc, #448]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	496d      	ldr	r1, [pc, #436]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009244:	4313      	orrs	r3, r2
 8009246:	618b      	str	r3, [r1, #24]
 8009248:	e018      	b.n	800927c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800924a:	4b6b      	ldr	r3, [pc, #428]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a6a      	ldr	r2, [pc, #424]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009256:	f7ff fc81 	bl	8008b5c <HAL_GetTick>
 800925a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800925c:	e008      	b.n	8009270 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800925e:	f7ff fc7d 	bl	8008b5c <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e3c1      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8009270:	4b61      	ldr	r3, [pc, #388]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f0      	bne.n	800925e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80a0 	beq.w	80093ca <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	2b10      	cmp	r3, #16
 800928e:	d005      	beq.n	800929c <HAL_RCC_OscConfig+0x10c>
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	2b18      	cmp	r3, #24
 8009294:	d109      	bne.n	80092aa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b03      	cmp	r3, #3
 800929a:	d106      	bne.n	80092aa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f040 8092 	bne.w	80093ca <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e3a4      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b2:	d106      	bne.n	80092c2 <HAL_RCC_OscConfig+0x132>
 80092b4:	4b50      	ldr	r3, [pc, #320]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a4f      	ldr	r2, [pc, #316]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	e058      	b.n	8009374 <HAL_RCC_OscConfig+0x1e4>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d112      	bne.n	80092f0 <HAL_RCC_OscConfig+0x160>
 80092ca:	4b4b      	ldr	r3, [pc, #300]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a4a      	ldr	r2, [pc, #296]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	4b48      	ldr	r3, [pc, #288]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a47      	ldr	r2, [pc, #284]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	4b45      	ldr	r3, [pc, #276]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a44      	ldr	r2, [pc, #272]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	e041      	b.n	8009374 <HAL_RCC_OscConfig+0x1e4>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092f8:	d112      	bne.n	8009320 <HAL_RCC_OscConfig+0x190>
 80092fa:	4b3f      	ldr	r3, [pc, #252]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a3e      	ldr	r2, [pc, #248]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	4b3c      	ldr	r3, [pc, #240]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a3b      	ldr	r2, [pc, #236]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800930c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009310:	6013      	str	r3, [r2, #0]
 8009312:	4b39      	ldr	r3, [pc, #228]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a38      	ldr	r2, [pc, #224]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	e029      	b.n	8009374 <HAL_RCC_OscConfig+0x1e4>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009328:	d112      	bne.n	8009350 <HAL_RCC_OscConfig+0x1c0>
 800932a:	4b33      	ldr	r3, [pc, #204]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a32      	ldr	r2, [pc, #200]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	4b30      	ldr	r3, [pc, #192]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a2f      	ldr	r2, [pc, #188]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800933c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	4b2d      	ldr	r3, [pc, #180]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a2c      	ldr	r2, [pc, #176]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	e011      	b.n	8009374 <HAL_RCC_OscConfig+0x1e4>
 8009350:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a28      	ldr	r2, [pc, #160]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	4b26      	ldr	r3, [pc, #152]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a25      	ldr	r2, [pc, #148]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	4b23      	ldr	r3, [pc, #140]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a22      	ldr	r2, [pc, #136]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 800936e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d013      	beq.n	80093a4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800937c:	f7ff fbee 	bl	8008b5c <HAL_GetTick>
 8009380:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009382:	e008      	b.n	8009396 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009384:	f7ff fbea 	bl	8008b5c <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b64      	cmp	r3, #100	@ 0x64
 8009390:	d901      	bls.n	8009396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e32e      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009396:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0f0      	beq.n	8009384 <HAL_RCC_OscConfig+0x1f4>
 80093a2:	e012      	b.n	80093ca <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a4:	f7ff fbda 	bl	8008b5c <HAL_GetTick>
 80093a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093aa:	e008      	b.n	80093be <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80093ac:	f7ff fbd6 	bl	8008b5c <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b64      	cmp	r3, #100	@ 0x64
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e31a      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093be:	4b0e      	ldr	r3, [pc, #56]	@ (80093f8 <HAL_RCC_OscConfig+0x268>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1f0      	bne.n	80093ac <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 809a 	beq.w	800950c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d005      	beq.n	80093ea <HAL_RCC_OscConfig+0x25a>
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	2b18      	cmp	r3, #24
 80093e2:	d149      	bne.n	8009478 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d146      	bne.n	8009478 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d104      	bne.n	80093fc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e2fe      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
 80093f6:	bf00      	nop
 80093f8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d11c      	bne.n	800943c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8009402:	4b9a      	ldr	r3, [pc, #616]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0218 	and.w	r2, r3, #24
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	429a      	cmp	r2, r3
 8009410:	d014      	beq.n	800943c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8009412:	4b96      	ldr	r3, [pc, #600]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f023 0218 	bic.w	r2, r3, #24
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	4993      	ldr	r1, [pc, #588]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009420:	4313      	orrs	r3, r2
 8009422:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8009424:	f000 fdd0 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009428:	4b91      	ldr	r3, [pc, #580]	@ (8009670 <HAL_RCC_OscConfig+0x4e0>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fb0b 	bl	8008a48 <HAL_InitTick>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e2db      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943c:	f7ff fb8e 	bl	8008b5c <HAL_GetTick>
 8009440:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009442:	e008      	b.n	8009456 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009444:	f7ff fb8a 	bl	8008b5c <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e2ce      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009456:	4b85      	ldr	r3, [pc, #532]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f0      	beq.n	8009444 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8009462:	4b82      	ldr	r3, [pc, #520]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	041b      	lsls	r3, r3, #16
 8009470:	497e      	ldr	r1, [pc, #504]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009472:	4313      	orrs	r3, r2
 8009474:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8009476:	e049      	b.n	800950c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d02c      	beq.n	80094da <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8009480:	4b7a      	ldr	r3, [pc, #488]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f023 0218 	bic.w	r2, r3, #24
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	4977      	ldr	r1, [pc, #476]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 800948e:	4313      	orrs	r3, r2
 8009490:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8009492:	4b76      	ldr	r3, [pc, #472]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a75      	ldr	r2, [pc, #468]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009498:	f043 0301 	orr.w	r3, r3, #1
 800949c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800949e:	f7ff fb5d 	bl	8008b5c <HAL_GetTick>
 80094a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094a4:	e008      	b.n	80094b8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80094a6:	f7ff fb59 	bl	8008b5c <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d901      	bls.n	80094b8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e29d      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094b8:	4b6c      	ldr	r3, [pc, #432]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0f0      	beq.n	80094a6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80094c4:	4b69      	ldr	r3, [pc, #420]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	4966      	ldr	r1, [pc, #408]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	610b      	str	r3, [r1, #16]
 80094d8:	e018      	b.n	800950c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094da:	4b64      	ldr	r3, [pc, #400]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a63      	ldr	r2, [pc, #396]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80094e0:	f023 0301 	bic.w	r3, r3, #1
 80094e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e6:	f7ff fb39 	bl	8008b5c <HAL_GetTick>
 80094ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094ec:	e008      	b.n	8009500 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80094ee:	f7ff fb35 	bl	8008b5c <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d901      	bls.n	8009500 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e279      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009500:	4b5a      	ldr	r3, [pc, #360]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1f0      	bne.n	80094ee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0308 	and.w	r3, r3, #8
 8009514:	2b00      	cmp	r3, #0
 8009516:	d03c      	beq.n	8009592 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01c      	beq.n	800955a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009520:	4b52      	ldr	r3, [pc, #328]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009526:	4a51      	ldr	r2, [pc, #324]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800952c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009530:	f7ff fb14 	bl	8008b5c <HAL_GetTick>
 8009534:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009538:	f7ff fb10 	bl	8008b5c <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b02      	cmp	r3, #2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e254      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800954a:	4b48      	ldr	r3, [pc, #288]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 800954c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0ef      	beq.n	8009538 <HAL_RCC_OscConfig+0x3a8>
 8009558:	e01b      	b.n	8009592 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800955a:	4b44      	ldr	r3, [pc, #272]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 800955c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009560:	4a42      	ldr	r2, [pc, #264]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800956a:	f7ff faf7 	bl	8008b5c <HAL_GetTick>
 800956e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009570:	e008      	b.n	8009584 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009572:	f7ff faf3 	bl	8008b5c <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	2b02      	cmp	r3, #2
 800957e:	d901      	bls.n	8009584 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e237      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009584:	4b39      	ldr	r3, [pc, #228]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800958a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1ef      	bne.n	8009572 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0304 	and.w	r3, r3, #4
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80d2 	beq.w	8009744 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80095a0:	4b34      	ldr	r3, [pc, #208]	@ (8009674 <HAL_RCC_OscConfig+0x4e4>)
 80095a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d118      	bne.n	80095de <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80095ac:	4b31      	ldr	r3, [pc, #196]	@ (8009674 <HAL_RCC_OscConfig+0x4e4>)
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	4a30      	ldr	r2, [pc, #192]	@ (8009674 <HAL_RCC_OscConfig+0x4e4>)
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095b8:	f7ff fad0 	bl	8008b5c <HAL_GetTick>
 80095bc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095c0:	f7ff facc 	bl	8008b5c <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e210      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80095d2:	4b28      	ldr	r3, [pc, #160]	@ (8009674 <HAL_RCC_OscConfig+0x4e4>)
 80095d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0f0      	beq.n	80095c0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d108      	bne.n	80095f8 <HAL_RCC_OscConfig+0x468>
 80095e6:	4b21      	ldr	r3, [pc, #132]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80095e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ec:	4a1f      	ldr	r2, [pc, #124]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80095f6:	e074      	b.n	80096e2 <HAL_RCC_OscConfig+0x552>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d118      	bne.n	8009632 <HAL_RCC_OscConfig+0x4a2>
 8009600:	4b1a      	ldr	r3, [pc, #104]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009606:	4a19      	ldr	r2, [pc, #100]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009608:	f023 0301 	bic.w	r3, r3, #1
 800960c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009610:	4b16      	ldr	r3, [pc, #88]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009616:	4a15      	ldr	r2, [pc, #84]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800961c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009620:	4b12      	ldr	r3, [pc, #72]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009626:	4a11      	ldr	r2, [pc, #68]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009628:	f023 0304 	bic.w	r3, r3, #4
 800962c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009630:	e057      	b.n	80096e2 <HAL_RCC_OscConfig+0x552>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b05      	cmp	r3, #5
 8009638:	d11e      	bne.n	8009678 <HAL_RCC_OscConfig+0x4e8>
 800963a:	4b0c      	ldr	r3, [pc, #48]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 800963c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009640:	4a0a      	ldr	r2, [pc, #40]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009642:	f043 0304 	orr.w	r3, r3, #4
 8009646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800964a:	4b08      	ldr	r3, [pc, #32]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 800964c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009650:	4a06      	ldr	r2, [pc, #24]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800965a:	4b04      	ldr	r3, [pc, #16]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 800965c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009660:	4a02      	ldr	r2, [pc, #8]	@ (800966c <HAL_RCC_OscConfig+0x4dc>)
 8009662:	f043 0301 	orr.w	r3, r3, #1
 8009666:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800966a:	e03a      	b.n	80096e2 <HAL_RCC_OscConfig+0x552>
 800966c:	44020c00 	.word	0x44020c00
 8009670:	2000005c 	.word	0x2000005c
 8009674:	44020800 	.word	0x44020800
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b85      	cmp	r3, #133	@ 0x85
 800967e:	d118      	bne.n	80096b2 <HAL_RCC_OscConfig+0x522>
 8009680:	4ba2      	ldr	r3, [pc, #648]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009686:	4aa1      	ldr	r2, [pc, #644]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009688:	f043 0304 	orr.w	r3, r3, #4
 800968c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009690:	4b9e      	ldr	r3, [pc, #632]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009696:	4a9d      	ldr	r2, [pc, #628]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80096a0:	4b9a      	ldr	r3, [pc, #616]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096a6:	4a99      	ldr	r2, [pc, #612]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096a8:	f043 0301 	orr.w	r3, r3, #1
 80096ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80096b0:	e017      	b.n	80096e2 <HAL_RCC_OscConfig+0x552>
 80096b2:	4b96      	ldr	r3, [pc, #600]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096b8:	4a94      	ldr	r2, [pc, #592]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096ba:	f023 0301 	bic.w	r3, r3, #1
 80096be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80096c2:	4b92      	ldr	r3, [pc, #584]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096c8:	4a90      	ldr	r2, [pc, #576]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096ca:	f023 0304 	bic.w	r3, r3, #4
 80096ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80096d2:	4b8e      	ldr	r3, [pc, #568]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096d8:	4a8c      	ldr	r2, [pc, #560]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80096da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d016      	beq.n	8009718 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ea:	f7ff fa37 	bl	8008b5c <HAL_GetTick>
 80096ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096f0:	e00a      	b.n	8009708 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096f2:	f7ff fa33 	bl	8008b5c <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009700:	4293      	cmp	r3, r2
 8009702:	d901      	bls.n	8009708 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e175      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009708:	4b80      	ldr	r3, [pc, #512]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800970a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0ed      	beq.n	80096f2 <HAL_RCC_OscConfig+0x562>
 8009716:	e015      	b.n	8009744 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009718:	f7ff fa20 	bl	8008b5c <HAL_GetTick>
 800971c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800971e:	e00a      	b.n	8009736 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009720:	f7ff fa1c 	bl	8008b5c <HAL_GetTick>
 8009724:	4602      	mov	r2, r0
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800972e:	4293      	cmp	r3, r2
 8009730:	d901      	bls.n	8009736 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e15e      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009736:	4b75      	ldr	r3, [pc, #468]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1ed      	bne.n	8009720 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	d036      	beq.n	80097be <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009754:	2b00      	cmp	r3, #0
 8009756:	d019      	beq.n	800978c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009758:	4b6c      	ldr	r3, [pc, #432]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a6b      	ldr	r2, [pc, #428]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800975e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009764:	f7ff f9fa 	bl	8008b5c <HAL_GetTick>
 8009768:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800976c:	f7ff f9f6 	bl	8008b5c <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e13a      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800977e:	4b63      	ldr	r3, [pc, #396]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0f0      	beq.n	800976c <HAL_RCC_OscConfig+0x5dc>
 800978a:	e018      	b.n	80097be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800978c:	4b5f      	ldr	r3, [pc, #380]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a5e      	ldr	r2, [pc, #376]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009798:	f7ff f9e0 	bl	8008b5c <HAL_GetTick>
 800979c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80097a0:	f7ff f9dc 	bl	8008b5c <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e120      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80097b2:	4b56      	ldr	r3, [pc, #344]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1f0      	bne.n	80097a0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 8115 	beq.w	80099f2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	2b18      	cmp	r3, #24
 80097cc:	f000 80af 	beq.w	800992e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	f040 8086 	bne.w	80098e6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80097da:	4b4c      	ldr	r3, [pc, #304]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a4b      	ldr	r2, [pc, #300]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80097e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e6:	f7ff f9b9 	bl	8008b5c <HAL_GetTick>
 80097ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80097ec:	e008      	b.n	8009800 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80097ee:	f7ff f9b5 	bl	8008b5c <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e0f9      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009800:	4b42      	ldr	r3, [pc, #264]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1f0      	bne.n	80097ee <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800980c:	4b3f      	ldr	r3, [pc, #252]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009814:	f023 0303 	bic.w	r3, r3, #3
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009820:	0212      	lsls	r2, r2, #8
 8009822:	430a      	orrs	r2, r1
 8009824:	4939      	ldr	r1, [pc, #228]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009826:	4313      	orrs	r3, r2
 8009828:	628b      	str	r3, [r1, #40]	@ 0x28
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800982e:	3b01      	subs	r3, #1
 8009830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	3b01      	subs	r3, #1
 800983a:	025b      	lsls	r3, r3, #9
 800983c:	b29b      	uxth	r3, r3
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009844:	3b01      	subs	r3, #1
 8009846:	041b      	lsls	r3, r3, #16
 8009848:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009852:	3b01      	subs	r3, #1
 8009854:	061b      	lsls	r3, r3, #24
 8009856:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800985a:	492c      	ldr	r1, [pc, #176]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800985c:	4313      	orrs	r3, r2
 800985e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8009860:	4b2a      	ldr	r3, [pc, #168]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	4a29      	ldr	r2, [pc, #164]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009866:	f023 0310 	bic.w	r3, r3, #16
 800986a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009870:	4a26      	ldr	r2, [pc, #152]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8009876:	4b25      	ldr	r3, [pc, #148]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	4a24      	ldr	r2, [pc, #144]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 800987c:	f043 0310 	orr.w	r3, r3, #16
 8009880:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8009882:	4b22      	ldr	r3, [pc, #136]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	f023 020c 	bic.w	r2, r3, #12
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988e:	491f      	ldr	r1, [pc, #124]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009890:	4313      	orrs	r3, r2
 8009892:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8009894:	4b1d      	ldr	r3, [pc, #116]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 8009896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009898:	f023 0220 	bic.w	r2, r3, #32
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a0:	491a      	ldr	r1, [pc, #104]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80098a6:	4b19      	ldr	r3, [pc, #100]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098aa:	4a18      	ldr	r2, [pc, #96]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80098b2:	4b16      	ldr	r3, [pc, #88]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a15      	ldr	r2, [pc, #84]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098be:	f7ff f94d 	bl	8008b5c <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80098c4:	e008      	b.n	80098d8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80098c6:	f7ff f949 	bl	8008b5c <HAL_GetTick>
 80098ca:	4602      	mov	r2, r0
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d901      	bls.n	80098d8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	e08d      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80098d8:	4b0c      	ldr	r3, [pc, #48]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0f0      	beq.n	80098c6 <HAL_RCC_OscConfig+0x736>
 80098e4:	e085      	b.n	80099f2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80098e6:	4b09      	ldr	r3, [pc, #36]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a08      	ldr	r2, [pc, #32]	@ (800990c <HAL_RCC_OscConfig+0x77c>)
 80098ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f2:	f7ff f933 	bl	8008b5c <HAL_GetTick>
 80098f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80098f8:	e00a      	b.n	8009910 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80098fa:	f7ff f92f 	bl	8008b5c <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	2b02      	cmp	r3, #2
 8009906:	d903      	bls.n	8009910 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e073      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
 800990c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009910:	4b3a      	ldr	r3, [pc, #232]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1ee      	bne.n	80098fa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800991c:	4b37      	ldr	r3, [pc, #220]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	4a36      	ldr	r2, [pc, #216]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 8009922:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009926:	f023 0303 	bic.w	r3, r3, #3
 800992a:	6293      	str	r3, [r2, #40]	@ 0x28
 800992c:	e061      	b.n	80099f2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800992e:	4b33      	ldr	r3, [pc, #204]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009934:	4b31      	ldr	r3, [pc, #196]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 8009936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009938:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	2b01      	cmp	r3, #1
 8009940:	d031      	beq.n	80099a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f003 0203 	and.w	r2, r3, #3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800994c:	429a      	cmp	r2, r3
 800994e:	d12a      	bne.n	80099a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800995c:	429a      	cmp	r2, r3
 800995e:	d122      	bne.n	80099a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800996c:	429a      	cmp	r2, r3
 800996e:	d11a      	bne.n	80099a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	0a5b      	lsrs	r3, r3, #9
 8009974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800997e:	429a      	cmp	r2, r3
 8009980:	d111      	bne.n	80099a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	0c1b      	lsrs	r3, r3, #16
 8009986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800998e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009990:	429a      	cmp	r2, r3
 8009992:	d108      	bne.n	80099a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	0e1b      	lsrs	r3, r3, #24
 8009998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d001      	beq.n	80099aa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e024      	b.n	80099f4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80099aa:	4b14      	ldr	r3, [pc, #80]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 80099ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ae:	08db      	lsrs	r3, r3, #3
 80099b0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d01a      	beq.n	80099f2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80099bc:	4b0f      	ldr	r3, [pc, #60]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	4a0e      	ldr	r2, [pc, #56]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 80099c2:	f023 0310 	bic.w	r3, r3, #16
 80099c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c8:	f7ff f8c8 	bl	8008b5c <HAL_GetTick>
 80099cc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80099ce:	bf00      	nop
 80099d0:	f7ff f8c4 	bl	8008b5c <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	4293      	cmp	r3, r2
 80099da:	d0f9      	beq.n	80099d0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e0:	4a06      	ldr	r2, [pc, #24]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80099e6:	4b05      	ldr	r3, [pc, #20]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 80099e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ea:	4a04      	ldr	r2, [pc, #16]	@ (80099fc <HAL_RCC_OscConfig+0x86c>)
 80099ec:	f043 0310 	orr.w	r3, r3, #16
 80099f0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	44020c00 	.word	0x44020c00

08009a00 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e19e      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a14:	4b83      	ldr	r3, [pc, #524]	@ (8009c24 <HAL_RCC_ClockConfig+0x224>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 030f 	and.w	r3, r3, #15
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d910      	bls.n	8009a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a22:	4b80      	ldr	r3, [pc, #512]	@ (8009c24 <HAL_RCC_ClockConfig+0x224>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f023 020f 	bic.w	r2, r3, #15
 8009a2a:	497e      	ldr	r1, [pc, #504]	@ (8009c24 <HAL_RCC_ClockConfig+0x224>)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a32:	4b7c      	ldr	r3, [pc, #496]	@ (8009c24 <HAL_RCC_ClockConfig+0x224>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d001      	beq.n	8009a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e186      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d012      	beq.n	8009a76 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	695a      	ldr	r2, [r3, #20]
 8009a54:	4b74      	ldr	r3, [pc, #464]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	0a1b      	lsrs	r3, r3, #8
 8009a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d909      	bls.n	8009a76 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8009a62:	4b71      	ldr	r3, [pc, #452]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	021b      	lsls	r3, r3, #8
 8009a70:	496d      	ldr	r1, [pc, #436]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0308 	and.w	r3, r3, #8
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d012      	beq.n	8009aa8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	4b68      	ldr	r3, [pc, #416]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	091b      	lsrs	r3, r3, #4
 8009a8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d909      	bls.n	8009aa8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8009a94:	4b64      	ldr	r3, [pc, #400]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	4961      	ldr	r1, [pc, #388]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d010      	beq.n	8009ad6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d908      	bls.n	8009ad6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8009ac4:	4b58      	ldr	r3, [pc, #352]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	4955      	ldr	r1, [pc, #340]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0302 	and.w	r3, r3, #2
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d010      	beq.n	8009b04 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689a      	ldr	r2, [r3, #8]
 8009ae6:	4b50      	ldr	r3, [pc, #320]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	f003 030f 	and.w	r3, r3, #15
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d908      	bls.n	8009b04 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8009af2:	4b4d      	ldr	r3, [pc, #308]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	f023 020f 	bic.w	r2, r3, #15
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	494a      	ldr	r1, [pc, #296]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0301 	and.w	r3, r3, #1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 8093 	beq.w	8009c38 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d107      	bne.n	8009b2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009b1a:	4b43      	ldr	r3, [pc, #268]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d121      	bne.n	8009b6a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e113      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d107      	bne.n	8009b42 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b32:	4b3d      	ldr	r3, [pc, #244]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d115      	bne.n	8009b6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e107      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d107      	bne.n	8009b5a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8009b4a:	4b37      	ldr	r3, [pc, #220]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e0fb      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b5a:	4b33      	ldr	r3, [pc, #204]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e0f3      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	f023 0203 	bic.w	r2, r3, #3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	492c      	ldr	r1, [pc, #176]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7c:	f7fe ffee 	bl	8008b5c <HAL_GetTick>
 8009b80:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d112      	bne.n	8009bb0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b8a:	e00a      	b.n	8009ba2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009b8c:	f7fe ffe6 	bl	8008b5c <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e0d7      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ba2:	4b21      	ldr	r3, [pc, #132]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	f003 0318 	and.w	r3, r3, #24
 8009baa:	2b18      	cmp	r3, #24
 8009bac:	d1ee      	bne.n	8009b8c <HAL_RCC_ClockConfig+0x18c>
 8009bae:	e043      	b.n	8009c38 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d112      	bne.n	8009bde <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009bb8:	e00a      	b.n	8009bd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009bba:	f7fe ffcf 	bl	8008b5c <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e0c0      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009bd0:	4b15      	ldr	r3, [pc, #84]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	f003 0318 	and.w	r3, r3, #24
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d1ee      	bne.n	8009bba <HAL_RCC_ClockConfig+0x1ba>
 8009bdc:	e02c      	b.n	8009c38 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d122      	bne.n	8009c2c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8009be6:	e00a      	b.n	8009bfe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009be8:	f7fe ffb8 	bl	8008b5c <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e0a9      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <HAL_RCC_ClockConfig+0x228>)
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	f003 0318 	and.w	r3, r3, #24
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d1ee      	bne.n	8009be8 <HAL_RCC_ClockConfig+0x1e8>
 8009c0a:	e015      	b.n	8009c38 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009c0c:	f7fe ffa6 	bl	8008b5c <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d906      	bls.n	8009c2c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e097      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
 8009c22:	bf00      	nop
 8009c24:	40022000 	.word	0x40022000
 8009c28:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	f003 0318 	and.w	r3, r3, #24
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e9      	bne.n	8009c0c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0302 	and.w	r3, r3, #2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d010      	beq.n	8009c66 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	4b44      	ldr	r3, [pc, #272]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d208      	bcs.n	8009c66 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8009c54:	4b41      	ldr	r3, [pc, #260]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	f023 020f 	bic.w	r2, r3, #15
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	493e      	ldr	r1, [pc, #248]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c66:	4b3e      	ldr	r3, [pc, #248]	@ (8009d60 <HAL_RCC_ClockConfig+0x360>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 030f 	and.w	r3, r3, #15
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d210      	bcs.n	8009c96 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c74:	4b3a      	ldr	r3, [pc, #232]	@ (8009d60 <HAL_RCC_ClockConfig+0x360>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f023 020f 	bic.w	r2, r3, #15
 8009c7c:	4938      	ldr	r1, [pc, #224]	@ (8009d60 <HAL_RCC_ClockConfig+0x360>)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c84:	4b36      	ldr	r3, [pc, #216]	@ (8009d60 <HAL_RCC_ClockConfig+0x360>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 030f 	and.w	r3, r3, #15
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d001      	beq.n	8009c96 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e05d      	b.n	8009d52 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d010      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d208      	bcs.n	8009cc4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8009cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4927      	ldr	r1, [pc, #156]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d012      	beq.n	8009cf6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	691a      	ldr	r2, [r3, #16]
 8009cd4:	4b21      	ldr	r3, [pc, #132]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	091b      	lsrs	r3, r3, #4
 8009cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d209      	bcs.n	8009cf6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8009ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	491a      	ldr	r1, [pc, #104]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 0310 	and.w	r3, r3, #16
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d012      	beq.n	8009d28 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695a      	ldr	r2, [r3, #20]
 8009d06:	4b15      	ldr	r3, [pc, #84]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	0a1b      	lsrs	r3, r3, #8
 8009d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d209      	bcs.n	8009d28 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8009d14:	4b11      	ldr	r3, [pc, #68]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	490e      	ldr	r1, [pc, #56]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009d24:	4313      	orrs	r3, r2
 8009d26:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009d28:	f000 f822 	bl	8009d70 <HAL_RCC_GetSysClockFreq>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <HAL_RCC_ClockConfig+0x35c>)
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	490b      	ldr	r1, [pc, #44]	@ (8009d64 <HAL_RCC_ClockConfig+0x364>)
 8009d38:	5ccb      	ldrb	r3, [r1, r3]
 8009d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8009d68 <HAL_RCC_ClockConfig+0x368>)
 8009d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009d42:	4b0a      	ldr	r3, [pc, #40]	@ (8009d6c <HAL_RCC_ClockConfig+0x36c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fe fe7e 	bl	8008a48 <HAL_InitTick>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	44020c00 	.word	0x44020c00
 8009d60:	40022000 	.word	0x40022000
 8009d64:	080114bc 	.word	0x080114bc
 8009d68:	20000058 	.word	0x20000058
 8009d6c:	2000005c 	.word	0x2000005c

08009d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b089      	sub	sp, #36	@ 0x24
 8009d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8009d76:	4b8c      	ldr	r3, [pc, #560]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f003 0318 	and.w	r3, r3, #24
 8009d7e:	2b08      	cmp	r3, #8
 8009d80:	d102      	bne.n	8009d88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009d82:	4b8a      	ldr	r3, [pc, #552]	@ (8009fac <HAL_RCC_GetSysClockFreq+0x23c>)
 8009d84:	61fb      	str	r3, [r7, #28]
 8009d86:	e107      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d88:	4b87      	ldr	r3, [pc, #540]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f003 0318 	and.w	r3, r3, #24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d112      	bne.n	8009dba <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8009d94:	4b84      	ldr	r3, [pc, #528]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0320 	and.w	r3, r3, #32
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d009      	beq.n	8009db4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009da0:	4b81      	ldr	r3, [pc, #516]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	08db      	lsrs	r3, r3, #3
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	4a81      	ldr	r2, [pc, #516]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8009dac:	fa22 f303 	lsr.w	r3, r2, r3
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e0f1      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8009db4:	4b7e      	ldr	r3, [pc, #504]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8009db6:	61fb      	str	r3, [r7, #28]
 8009db8:	e0ee      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009dba:	4b7b      	ldr	r3, [pc, #492]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	f003 0318 	and.w	r3, r3, #24
 8009dc2:	2b10      	cmp	r3, #16
 8009dc4:	d102      	bne.n	8009dcc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8009fb4 <HAL_RCC_GetSysClockFreq+0x244>)
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	e0e5      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009dcc:	4b76      	ldr	r3, [pc, #472]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f003 0318 	and.w	r3, r3, #24
 8009dd4:	2b18      	cmp	r3, #24
 8009dd6:	f040 80dd 	bne.w	8009f94 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009dda:	4b73      	ldr	r3, [pc, #460]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009de4:	4b70      	ldr	r3, [pc, #448]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de8:	0a1b      	lsrs	r3, r3, #8
 8009dea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009df0:	4b6d      	ldr	r3, [pc, #436]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df4:	091b      	lsrs	r3, r3, #4
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8009dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8009e00:	08db      	lsrs	r3, r3, #3
 8009e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	fb02 f303 	mul.w	r3, r2, r3
 8009e0c:	ee07 3a90 	vmov	s15, r3
 8009e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e14:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 80b7 	beq.w	8009f8e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d003      	beq.n	8009e2e <HAL_RCC_GetSysClockFreq+0xbe>
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d056      	beq.n	8009eda <HAL_RCC_GetSysClockFreq+0x16a>
 8009e2c:	e077      	b.n	8009f1e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8009e2e:	4b5e      	ldr	r3, [pc, #376]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d02d      	beq.n	8009e96 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	08db      	lsrs	r3, r3, #3
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	4a5a      	ldr	r2, [pc, #360]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8009e46:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e64:	4b50      	ldr	r3, [pc, #320]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6c:	ee07 3a90 	vmov	s15, r3
 8009e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e74:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e78:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8009fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8009e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8009e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e90:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8009e94:	e065      	b.n	8009f62 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8009fbc <HAL_RCC_GetSysClockFreq+0x24c>
 8009ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb0:	ee07 3a90 	vmov	s15, r3
 8009eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8009eb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ebc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8009ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8009ed8:	e043      	b.n	8009f62 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8009fc0 <HAL_RCC_GetSysClockFreq+0x250>
 8009ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eec:	4b2e      	ldr	r3, [pc, #184]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef4:	ee07 3a90 	vmov	s15, r3
 8009ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009efc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f00:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8009fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8009f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f18:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8009f1c:	e021      	b.n	8009f62 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	ee07 3a90 	vmov	s15, r3
 8009f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f28:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009fc4 <HAL_RCC_GetSysClockFreq+0x254>
 8009f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f30:	4b1d      	ldr	r3, [pc, #116]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f38:	ee07 3a90 	vmov	s15, r3
 8009f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f40:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f44:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8009fb8 <HAL_RCC_GetSysClockFreq+0x248>
 8009f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8009f60:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8009f62:	4b11      	ldr	r3, [pc, #68]	@ (8009fa8 <HAL_RCC_GetSysClockFreq+0x238>)
 8009f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f66:	0a5b      	lsrs	r3, r3, #9
 8009f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f7a:	edd7 6a06 	vldr	s13, [r7, #24]
 8009f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f86:	ee17 3a90 	vmov	r3, s15
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	e004      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61fb      	str	r3, [r7, #28]
 8009f92:	e001      	b.n	8009f98 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8009f94:	4b06      	ldr	r3, [pc, #24]	@ (8009fb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8009f96:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8009f98:	69fb      	ldr	r3, [r7, #28]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3724      	adds	r7, #36	@ 0x24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	44020c00 	.word	0x44020c00
 8009fac:	003d0900 	.word	0x003d0900
 8009fb0:	03d09000 	.word	0x03d09000
 8009fb4:	017d7840 	.word	0x017d7840
 8009fb8:	46000000 	.word	0x46000000
 8009fbc:	4c742400 	.word	0x4c742400
 8009fc0:	4bbebc20 	.word	0x4bbebc20
 8009fc4:	4a742400 	.word	0x4a742400

08009fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009fcc:	f7ff fed0 	bl	8009d70 <HAL_RCC_GetSysClockFreq>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	4b08      	ldr	r3, [pc, #32]	@ (8009ff4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8009fd6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009fda:	4907      	ldr	r1, [pc, #28]	@ (8009ff8 <HAL_RCC_GetHCLKFreq+0x30>)
 8009fdc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8009fde:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe6:	4a05      	ldr	r2, [pc, #20]	@ (8009ffc <HAL_RCC_GetHCLKFreq+0x34>)
 8009fe8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8009fea:	4b04      	ldr	r3, [pc, #16]	@ (8009ffc <HAL_RCC_GetHCLKFreq+0x34>)
 8009fec:	681b      	ldr	r3, [r3, #0]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	44020c00 	.word	0x44020c00
 8009ff8:	080114bc 	.word	0x080114bc
 8009ffc:	20000058 	.word	0x20000058

0800a000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800a004:	f7ff ffe0 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800a008:	4602      	mov	r2, r0
 800a00a:	4b06      	ldr	r3, [pc, #24]	@ (800a024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	4904      	ldr	r1, [pc, #16]	@ (800a028 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a016:	5ccb      	ldrb	r3, [r1, r3]
 800a018:	f003 031f 	and.w	r3, r3, #31
 800a01c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a020:	4618      	mov	r0, r3
 800a022:	bd80      	pop	{r7, pc}
 800a024:	44020c00 	.word	0x44020c00
 800a028:	080114cc 	.word	0x080114cc

0800a02c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800a030:	f7ff ffca 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800a034:	4602      	mov	r2, r0
 800a036:	4b06      	ldr	r3, [pc, #24]	@ (800a050 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	0a1b      	lsrs	r3, r3, #8
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	4904      	ldr	r1, [pc, #16]	@ (800a054 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a042:	5ccb      	ldrb	r3, [r1, r3]
 800a044:	f003 031f 	and.w	r3, r3, #31
 800a048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	44020c00 	.word	0x44020c00
 800a054:	080114cc 	.word	0x080114cc

0800a058 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800a05c:	f7ff ffb4 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800a060:	4602      	mov	r2, r0
 800a062:	4b06      	ldr	r3, [pc, #24]	@ (800a07c <HAL_RCC_GetPCLK3Freq+0x24>)
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	0b1b      	lsrs	r3, r3, #12
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	4904      	ldr	r1, [pc, #16]	@ (800a080 <HAL_RCC_GetPCLK3Freq+0x28>)
 800a06e:	5ccb      	ldrb	r3, [r1, r3]
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a078:	4618      	mov	r0, r3
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	44020c00 	.word	0x44020c00
 800a080:	080114cc 	.word	0x080114cc

0800a084 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a088:	b0d8      	sub	sp, #352	@ 0x160
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a090:	2300      	movs	r3, #0
 800a092:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a096:	2300      	movs	r3, #0
 800a098:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a09c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800a0a8:	2500      	movs	r5, #0
 800a0aa:	ea54 0305 	orrs.w	r3, r4, r5
 800a0ae:	d00b      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800a0b0:	4bcd      	ldr	r3, [pc, #820]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a0b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0b6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800a0ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0c0:	4ac9      	ldr	r2, [pc, #804]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f002 0801 	and.w	r8, r2, #1
 800a0d4:	f04f 0900 	mov.w	r9, #0
 800a0d8:	ea58 0309 	orrs.w	r3, r8, r9
 800a0dc:	d042      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800a0de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d823      	bhi.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a139 	.word	0x0800a139
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a11d 	.word	0x0800a11d
 800a0fc:	0800a139 	.word	0x0800a139
 800a100:	0800a139 	.word	0x0800a139
 800a104:	0800a139 	.word	0x0800a139
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a10c:	3308      	adds	r3, #8
 800a10e:	4618      	mov	r0, r3
 800a110:	f004 fee0 	bl	800eed4 <RCCEx_PLL2_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800a11a:	e00e      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a11c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a120:	3330      	adds	r3, #48	@ 0x30
 800a122:	4618      	mov	r0, r3
 800a124:	f004 ff6e 	bl	800f004 <RCCEx_PLL3_Config>
 800a128:	4603      	mov	r3, r0
 800a12a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800a12e:	e004      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a136:	e000      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800a138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10c      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a142:	4ba9      	ldr	r3, [pc, #676]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a148:	f023 0107 	bic.w	r1, r3, #7
 800a14c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a152:	4aa5      	ldr	r2, [pc, #660]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a154:	430b      	orrs	r3, r1
 800a156:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a15a:	e003      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a160:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f002 0a02 	and.w	sl, r2, #2
 800a170:	f04f 0b00 	mov.w	fp, #0
 800a174:	ea5a 030b 	orrs.w	r3, sl, fp
 800a178:	f000 8088 	beq.w	800a28c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800a17c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a182:	2b28      	cmp	r3, #40	@ 0x28
 800a184:	d868      	bhi.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a186:	a201      	add	r2, pc, #4	@ (adr r2, 800a18c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800a188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18c:	0800a261 	.word	0x0800a261
 800a190:	0800a259 	.word	0x0800a259
 800a194:	0800a259 	.word	0x0800a259
 800a198:	0800a259 	.word	0x0800a259
 800a19c:	0800a259 	.word	0x0800a259
 800a1a0:	0800a259 	.word	0x0800a259
 800a1a4:	0800a259 	.word	0x0800a259
 800a1a8:	0800a259 	.word	0x0800a259
 800a1ac:	0800a231 	.word	0x0800a231
 800a1b0:	0800a259 	.word	0x0800a259
 800a1b4:	0800a259 	.word	0x0800a259
 800a1b8:	0800a259 	.word	0x0800a259
 800a1bc:	0800a259 	.word	0x0800a259
 800a1c0:	0800a259 	.word	0x0800a259
 800a1c4:	0800a259 	.word	0x0800a259
 800a1c8:	0800a259 	.word	0x0800a259
 800a1cc:	0800a245 	.word	0x0800a245
 800a1d0:	0800a259 	.word	0x0800a259
 800a1d4:	0800a259 	.word	0x0800a259
 800a1d8:	0800a259 	.word	0x0800a259
 800a1dc:	0800a259 	.word	0x0800a259
 800a1e0:	0800a259 	.word	0x0800a259
 800a1e4:	0800a259 	.word	0x0800a259
 800a1e8:	0800a259 	.word	0x0800a259
 800a1ec:	0800a261 	.word	0x0800a261
 800a1f0:	0800a259 	.word	0x0800a259
 800a1f4:	0800a259 	.word	0x0800a259
 800a1f8:	0800a259 	.word	0x0800a259
 800a1fc:	0800a259 	.word	0x0800a259
 800a200:	0800a259 	.word	0x0800a259
 800a204:	0800a259 	.word	0x0800a259
 800a208:	0800a259 	.word	0x0800a259
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a259 	.word	0x0800a259
 800a214:	0800a259 	.word	0x0800a259
 800a218:	0800a259 	.word	0x0800a259
 800a21c:	0800a259 	.word	0x0800a259
 800a220:	0800a259 	.word	0x0800a259
 800a224:	0800a259 	.word	0x0800a259
 800a228:	0800a259 	.word	0x0800a259
 800a22c:	0800a261 	.word	0x0800a261
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a234:	3308      	adds	r3, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f004 fe4c 	bl	800eed4 <RCCEx_PLL2_Config>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800a242:	e00e      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a248:	3330      	adds	r3, #48	@ 0x30
 800a24a:	4618      	mov	r0, r3
 800a24c:	f004 feda 	bl	800f004 <RCCEx_PLL3_Config>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800a256:	e004      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a25e:	e000      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800a260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a262:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10c      	bne.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a26a:	4b5f      	ldr	r3, [pc, #380]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a26c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a270:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a274:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a27a:	4a5b      	ldr	r2, [pc, #364]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a27c:	430b      	orrs	r3, r1
 800a27e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a282:	e003      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a284:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a288:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a28c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	f002 0304 	and.w	r3, r2, #4
 800a298:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800a29c:	2300      	movs	r3, #0
 800a29e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800a2a2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	d04e      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800a2ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2b2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a2b6:	d02c      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800a2b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a2bc:	d825      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a2be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2c2:	d028      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a2c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2c8:	d81f      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a2ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2cc:	d025      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a2ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2d0:	d81b      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a2d2:	2b80      	cmp	r3, #128	@ 0x80
 800a2d4:	d00f      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800a2d6:	2b80      	cmp	r3, #128	@ 0x80
 800a2d8:	d817      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01f      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800a2de:	2b40      	cmp	r3, #64	@ 0x40
 800a2e0:	d113      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f004 fdf3 	bl	800eed4 <RCCEx_PLL2_Config>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a2f4:	e014      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2fa:	3330      	adds	r3, #48	@ 0x30
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f004 fe81 	bl	800f004 <RCCEx_PLL3_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a308:	e00a      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a310:	e006      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a312:	bf00      	nop
 800a314:	e004      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a31e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a320:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10c      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a328:	4b2f      	ldr	r3, [pc, #188]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a32a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a32e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a338:	4a2b      	ldr	r2, [pc, #172]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a33a:	430b      	orrs	r3, r1
 800a33c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a340:	e003      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a342:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a346:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a34a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f002 0308 	and.w	r3, r2, #8
 800a356:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800a35a:	2300      	movs	r3, #0
 800a35c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800a360:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800a364:	460b      	mov	r3, r1
 800a366:	4313      	orrs	r3, r2
 800a368:	d056      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800a36a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a36e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a370:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a374:	d031      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a376:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a37a:	d82a      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a37c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a380:	d02d      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800a382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a386:	d824      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a388:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a38c:	d029      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800a38e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a392:	d81e      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a398:	d011      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800a39a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a39e:	d818      	bhi.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d023      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a3a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3a8:	d113      	bne.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f004 fd8f 	bl	800eed4 <RCCEx_PLL2_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a3bc:	e017      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a3be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3c2:	3330      	adds	r3, #48	@ 0x30
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f004 fe1d 	bl	800f004 <RCCEx_PLL3_Config>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a3d0:	e00d      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a3d8:	e009      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a3da:	bf00      	nop
 800a3dc:	e007      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a3de:	bf00      	nop
 800a3e0:	e005      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a3e2:	bf00      	nop
 800a3e4:	e003      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a3e6:	bf00      	nop
 800a3e8:	44020c00 	.word	0x44020c00
        break;
 800a3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10c      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a3f6:	4bbb      	ldr	r3, [pc, #748]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a3f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3fc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a406:	4ab7      	ldr	r2, [pc, #732]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a408:	430b      	orrs	r3, r1
 800a40a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a40e:	e003      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a410:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a414:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f002 0310 	and.w	r3, r2, #16
 800a424:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a428:	2300      	movs	r3, #0
 800a42a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800a42e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800a432:	460b      	mov	r3, r1
 800a434:	4313      	orrs	r3, r2
 800a436:	d053      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800a438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a43c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a43e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a442:	d031      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800a444:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a448:	d82a      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a44a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a44e:	d02d      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a454:	d824      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a45a:	d029      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a45c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a460:	d81e      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a466:	d011      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a46c:	d818      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d020      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a476:	d113      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a478:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a47c:	3308      	adds	r3, #8
 800a47e:	4618      	mov	r0, r3
 800a480:	f004 fd28 	bl	800eed4 <RCCEx_PLL2_Config>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800a48a:	e014      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a48c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a490:	3330      	adds	r3, #48	@ 0x30
 800a492:	4618      	mov	r0, r3
 800a494:	f004 fdb6 	bl	800f004 <RCCEx_PLL3_Config>
 800a498:	4603      	mov	r3, r0
 800a49a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800a49e:	e00a      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a4a6:	e006      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a4a8:	bf00      	nop
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a4ac:	bf00      	nop
 800a4ae:	e002      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a4b0:	bf00      	nop
 800a4b2:	e000      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10c      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a4be:	4b89      	ldr	r3, [pc, #548]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a4c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a4c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a4c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ce:	4a85      	ldr	r2, [pc, #532]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a4d6:	e003      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a4dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a4e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f002 0320 	and.w	r3, r2, #32
 800a4ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800a4f6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d053      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800a500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a506:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a50a:	d031      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800a50c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a510:	d82a      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a516:	d02d      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800a518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a51c:	d824      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a51e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a522:	d029      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a524:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a528:	d81e      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a52a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a52e:	d011      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a534:	d818      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d020      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800a53a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a53e:	d113      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a544:	3308      	adds	r3, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f004 fcc4 	bl	800eed4 <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800a552:	e014      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a554:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a558:	3330      	adds	r3, #48	@ 0x30
 800a55a:	4618      	mov	r0, r3
 800a55c:	f004 fd52 	bl	800f004 <RCCEx_PLL3_Config>
 800a560:	4603      	mov	r3, r0
 800a562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800a566:	e00a      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a56e:	e006      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a570:	bf00      	nop
 800a572:	e004      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a574:	bf00      	nop
 800a576:	e002      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a578:	bf00      	nop
 800a57a:	e000      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a57e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10c      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a586:	4b57      	ldr	r3, [pc, #348]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a58c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800a590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a596:	4a53      	ldr	r2, [pc, #332]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a598:	430b      	orrs	r3, r1
 800a59a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a59e:	e003      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a5a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a5a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a5b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800a5be:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	d053      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800a5c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a5d2:	d031      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800a5d4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a5d8:	d82a      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a5da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5de:	d02d      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800a5e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5e4:	d824      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a5e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5ea:	d029      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a5ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a5f0:	d81e      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a5f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a5f6:	d011      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a5f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a5fc:	d818      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d020      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a606:	d113      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a60c:	3308      	adds	r3, #8
 800a60e:	4618      	mov	r0, r3
 800a610:	f004 fc60 	bl	800eed4 <RCCEx_PLL2_Config>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a61a:	e014      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a61c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a620:	3330      	adds	r3, #48	@ 0x30
 800a622:	4618      	mov	r0, r3
 800a624:	f004 fcee 	bl	800f004 <RCCEx_PLL3_Config>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a62e:	e00a      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a636:	e006      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a638:	bf00      	nop
 800a63a:	e004      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a63c:	bf00      	nop
 800a63e:	e002      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a644:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a646:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10c      	bne.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800a64e:	4b25      	ldr	r3, [pc, #148]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a654:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800a658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a65e:	4a21      	ldr	r2, [pc, #132]	@ (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a660:	430b      	orrs	r3, r1
 800a662:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a666:	e003      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a668:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a66c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a67c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a680:	2300      	movs	r3, #0
 800a682:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800a686:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800a68a:	460b      	mov	r3, r1
 800a68c:	4313      	orrs	r3, r2
 800a68e:	d055      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800a690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a696:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a69a:	d033      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800a69c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a6a0:	d82c      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a6a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6a6:	d02f      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800a6a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a6ac:	d826      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a6ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6b2:	d02b      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800a6b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6b8:	d820      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a6ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6be:	d013      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a6c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6c4:	d81a      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d022      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800a6ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6ce:	d115      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a6d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f004 fbfc 	bl	800eed4 <RCCEx_PLL2_Config>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a6e2:	e016      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800a6e4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a6e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6ec:	3330      	adds	r3, #48	@ 0x30
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f004 fc88 	bl	800f004 <RCCEx_PLL3_Config>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a6fa:	e00a      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a702:	e006      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a704:	bf00      	nop
 800a706:	e004      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a708:	bf00      	nop
 800a70a:	e002      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a70c:	bf00      	nop
 800a70e:	e000      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a712:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10c      	bne.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800a71a:	4bbb      	ldr	r3, [pc, #748]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a71c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a720:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a72a:	4ab7      	ldr	r2, [pc, #732]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a72c:	430b      	orrs	r3, r1
 800a72e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a732:	e003      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a734:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a738:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800a73c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a748:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a74c:	2300      	movs	r3, #0
 800a74e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800a752:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800a756:	460b      	mov	r3, r1
 800a758:	4313      	orrs	r3, r2
 800a75a:	d053      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800a75c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a762:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a766:	d031      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x748>
 800a768:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a76c:	d82a      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a76e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a772:	d02d      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800a774:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a778:	d824      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a77a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a77e:	d029      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800a780:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a784:	d81e      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a786:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a78a:	d011      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800a78c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a790:	d818      	bhi.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d020      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800a796:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a79a:	d113      	bne.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a79c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f004 fb96 	bl	800eed4 <RCCEx_PLL2_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a7ae:	e014      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a7b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7b4:	3330      	adds	r3, #48	@ 0x30
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f004 fc24 	bl	800f004 <RCCEx_PLL3_Config>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a7c2:	e00a      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a7ca:	e006      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a7cc:	bf00      	nop
 800a7ce:	e004      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a7d0:	bf00      	nop
 800a7d2:	e002      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a7d4:	bf00      	nop
 800a7d6:	e000      	b.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a7d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10c      	bne.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800a7e2:	4b89      	ldr	r3, [pc, #548]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a7e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a7e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a7ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7f2:	4a85      	ldr	r2, [pc, #532]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a7fa:	e003      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a800:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800a804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800a810:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a814:	2300      	movs	r3, #0
 800a816:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a81a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a81e:	460b      	mov	r3, r1
 800a820:	4313      	orrs	r3, r2
 800a822:	d055      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800a824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a82c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a830:	d031      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800a832:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a836:	d82a      	bhi.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a83c:	d02d      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a842:	d824      	bhi.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a844:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a848:	d029      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800a84a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a84e:	d81e      	bhi.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a854:	d011      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800a856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a85a:	d818      	bhi.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d020      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a864:	d113      	bne.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a86a:	3308      	adds	r3, #8
 800a86c:	4618      	mov	r0, r3
 800a86e:	f004 fb31 	bl	800eed4 <RCCEx_PLL2_Config>
 800a872:	4603      	mov	r3, r0
 800a874:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a878:	e014      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a87a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a87e:	3330      	adds	r3, #48	@ 0x30
 800a880:	4618      	mov	r0, r3
 800a882:	f004 fbbf 	bl	800f004 <RCCEx_PLL3_Config>
 800a886:	4603      	mov	r3, r0
 800a888:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a88c:	e00a      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a894:	e006      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a896:	bf00      	nop
 800a898:	e004      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a89a:	bf00      	nop
 800a89c:	e002      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a89e:	bf00      	nop
 800a8a0:	e000      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10d      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800a8ac:	4b56      	ldr	r3, [pc, #344]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a8ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a8b2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800a8b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8be:	4a52      	ldr	r2, [pc, #328]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a8c0:	430b      	orrs	r3, r1
 800a8c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a8c6:	e003      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800a8d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a8dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a8e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	d044      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800a8f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8f8:	2b05      	cmp	r3, #5
 800a8fa:	d823      	bhi.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a8fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a902:	bf00      	nop
 800a904:	0800a94d 	.word	0x0800a94d
 800a908:	0800a91d 	.word	0x0800a91d
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a94d 	.word	0x0800a94d
 800a914:	0800a94d 	.word	0x0800a94d
 800a918:	0800a94d 	.word	0x0800a94d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a91c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a920:	3308      	adds	r3, #8
 800a922:	4618      	mov	r0, r3
 800a924:	f004 fad6 	bl	800eed4 <RCCEx_PLL2_Config>
 800a928:	4603      	mov	r3, r0
 800a92a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a92e:	e00e      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a934:	3330      	adds	r3, #48	@ 0x30
 800a936:	4618      	mov	r0, r3
 800a938:	f004 fb64 	bl	800f004 <RCCEx_PLL3_Config>
 800a93c:	4603      	mov	r3, r0
 800a93e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a942:	e004      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a94a:	e000      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800a94c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10d      	bne.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800a956:	4b2c      	ldr	r3, [pc, #176]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a958:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a95c:	f023 0107 	bic.w	r1, r3, #7
 800a960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a968:	4a27      	ldr	r2, [pc, #156]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a96a:	430b      	orrs	r3, r1
 800a96c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a970:	e003      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a976:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800a97a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a986:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a98a:	2300      	movs	r3, #0
 800a98c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a990:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a994:	460b      	mov	r3, r1
 800a996:	4313      	orrs	r3, r2
 800a998:	d04f      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800a99a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9a2:	2b50      	cmp	r3, #80	@ 0x50
 800a9a4:	d029      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a9a6:	2b50      	cmp	r3, #80	@ 0x50
 800a9a8:	d823      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a9aa:	2b40      	cmp	r3, #64	@ 0x40
 800a9ac:	d027      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a9ae:	2b40      	cmp	r3, #64	@ 0x40
 800a9b0:	d81f      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a9b2:	2b30      	cmp	r3, #48	@ 0x30
 800a9b4:	d025      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a9b6:	2b30      	cmp	r3, #48	@ 0x30
 800a9b8:	d81b      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a9ba:	2b20      	cmp	r3, #32
 800a9bc:	d00f      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d817      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d022      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a9c6:	2b10      	cmp	r3, #16
 800a9c8:	d113      	bne.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a9ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f004 fa7f 	bl	800eed4 <RCCEx_PLL2_Config>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a9dc:	e017      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a9de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9e2:	3330      	adds	r3, #48	@ 0x30
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f004 fb0d 	bl	800f004 <RCCEx_PLL3_Config>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a9f0:	e00d      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a9f8:	e009      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a9fa:	bf00      	nop
 800a9fc:	e007      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a9fe:	bf00      	nop
 800aa00:	e005      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800aa02:	bf00      	nop
 800aa04:	e003      	b.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800aa06:	bf00      	nop
 800aa08:	44020c00 	.word	0x44020c00
        break;
 800aa0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10d      	bne.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800aa16:	4baf      	ldr	r3, [pc, #700]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aa18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aa1c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800aa20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa28:	4aaa      	ldr	r2, [pc, #680]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800aa30:	e003      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa36:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800aa46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aa50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4313      	orrs	r3, r2
 800aa58:	d055      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800aa5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aa66:	d031      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800aa68:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aa6c:	d82a      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800aa6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa72:	d02d      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800aa74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa78:	d824      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800aa7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa7e:	d029      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800aa80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa84:	d81e      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800aa86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa8a:	d011      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800aa8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa90:	d818      	bhi.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d020      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800aa96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa9a:	d113      	bne.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aa9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f004 fa16 	bl	800eed4 <RCCEx_PLL2_Config>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800aaae:	e014      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aab4:	3330      	adds	r3, #48	@ 0x30
 800aab6:	4618      	mov	r0, r3
 800aab8:	f004 faa4 	bl	800f004 <RCCEx_PLL3_Config>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800aac2:	e00a      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aaca:	e006      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800aacc:	bf00      	nop
 800aace:	e004      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800aad0:	bf00      	nop
 800aad2:	e002      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800aad4:	bf00      	nop
 800aad6:	e000      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800aad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aada:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10d      	bne.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800aae2:	4b7c      	ldr	r3, [pc, #496]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aae8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800aaec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aaf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaf4:	4a77      	ldr	r2, [pc, #476]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800aafc:	e003      	b.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ab12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ab16:	2300      	movs	r3, #0
 800ab18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ab1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ab20:	460b      	mov	r3, r1
 800ab22:	4313      	orrs	r3, r2
 800ab24:	d03d      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800ab26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab32:	d01b      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800ab34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab38:	d814      	bhi.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800ab3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab3e:	d017      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800ab40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab44:	d80e      	bhi.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d014      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800ab4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab4e:	d109      	bne.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab54:	3330      	adds	r3, #48	@ 0x30
 800ab56:	4618      	mov	r0, r3
 800ab58:	f004 fa54 	bl	800f004 <RCCEx_PLL3_Config>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800ab62:	e008      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ab6a:	e004      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ab6c:	bf00      	nop
 800ab6e:	e002      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ab70:	bf00      	nop
 800ab72:	e000      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800ab74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10d      	bne.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800ab7e:	4b55      	ldr	r3, [pc, #340]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ab80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab84:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ab88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab90:	4a50      	ldr	r2, [pc, #320]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ab92:	430b      	orrs	r3, r1
 800ab94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ab98:	e003      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800abae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800abb2:	2300      	movs	r3, #0
 800abb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800abb8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	d03d      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800abc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800abce:	d01b      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800abd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800abd4:	d814      	bhi.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800abd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800abda:	d017      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800abdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800abe0:	d80e      	bhi.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d014      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800abe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abea:	d109      	bne.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800abec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abf0:	3330      	adds	r3, #48	@ 0x30
 800abf2:	4618      	mov	r0, r3
 800abf4:	f004 fa06 	bl	800f004 <RCCEx_PLL3_Config>
 800abf8:	4603      	mov	r3, r0
 800abfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800abfe:	e008      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ac06:	e004      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800ac08:	bf00      	nop
 800ac0a:	e002      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800ac10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800ac1a:	4b2e      	ldr	r3, [pc, #184]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ac1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac20:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800ac24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac2c:	4a29      	ldr	r2, [pc, #164]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ac34:	e003      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ac4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ac54:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ac58:	460b      	mov	r3, r1
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	d040      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800ac5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac6a:	d01b      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800ac6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac70:	d814      	bhi.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800ac72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac76:	d017      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ac78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac7c:	d80e      	bhi.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d014      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800ac82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac86:	d109      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac8c:	3330      	adds	r3, #48	@ 0x30
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f004 f9b8 	bl	800f004 <RCCEx_PLL3_Config>
 800ac94:	4603      	mov	r3, r0
 800ac96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800ac9a:	e008      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aca2:	e004      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800aca4:	bf00      	nop
 800aca6:	e002      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800aca8:	bf00      	nop
 800acaa:	e000      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800acac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d110      	bne.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800acb6:	4b07      	ldr	r3, [pc, #28]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800acb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acbc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800acc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800acc8:	4a02      	ldr	r2, [pc, #8]	@ (800acd4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800acca:	430b      	orrs	r3, r1
 800accc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800acd0:	e006      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800acd2:	bf00      	nop
 800acd4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800acdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ace0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	2100      	movs	r1, #0
 800acea:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800acee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800acf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4313      	orrs	r3, r2
 800acfe:	d03d      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800ad00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ad0c:	d01b      	beq.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800ad0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ad12:	d814      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800ad14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ad18:	d017      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800ad1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ad1e:	d80e      	bhi.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d014      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800ad24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad28:	d109      	bne.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad2e:	3330      	adds	r3, #48	@ 0x30
 800ad30:	4618      	mov	r0, r3
 800ad32:	f004 f967 	bl	800f004 <RCCEx_PLL3_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800ad3c:	e008      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ad44:	e004      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800ad46:	bf00      	nop
 800ad48:	e002      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800ad4a:	bf00      	nop
 800ad4c:	e000      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800ad4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10d      	bne.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800ad58:	4bbe      	ldr	r3, [pc, #760]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ad5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad5e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ad62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad6a:	4aba      	ldr	r2, [pc, #744]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ad72:	e003      	b.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800ad7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ad88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ad92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ad96:	460b      	mov	r3, r1
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	d035      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800ad9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ada0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ada4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ada8:	d015      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800adaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adae:	d80e      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d012      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800adb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adb8:	d109      	bne.n	800adce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800adba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adbe:	3330      	adds	r3, #48	@ 0x30
 800adc0:	4618      	mov	r0, r3
 800adc2:	f004 f91f 	bl	800f004 <RCCEx_PLL3_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800adcc:	e006      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800add4:	e002      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800ade4:	4b9b      	ldr	r3, [pc, #620]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ade6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800adea:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800adee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800adf6:	4a97      	ldr	r2, [pc, #604]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800adf8:	430b      	orrs	r3, r1
 800adfa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800adfe:	e003      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ae04:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	2100      	movs	r1, #0
 800ae12:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800ae16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4313      	orrs	r3, r2
 800ae26:	d00e      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800ae28:	4b8a      	ldr	r3, [pc, #552]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	4a89      	ldr	r2, [pc, #548]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ae2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae32:	61d3      	str	r3, [r2, #28]
 800ae34:	4b87      	ldr	r3, [pc, #540]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ae36:	69d9      	ldr	r1, [r3, #28]
 800ae38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae3c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800ae40:	4a84      	ldr	r2, [pc, #528]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ae42:	430b      	orrs	r3, r1
 800ae44:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ae5c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ae60:	460b      	mov	r3, r1
 800ae62:	4313      	orrs	r3, r2
 800ae64:	d055      	beq.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800ae66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae6e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ae72:	d031      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800ae74:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ae78:	d82a      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800ae7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae7e:	d02d      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800ae80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae84:	d824      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800ae86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae8a:	d029      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800ae8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae90:	d81e      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800ae92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae96:	d011      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800ae98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae9c:	d818      	bhi.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d020      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800aea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aea6:	d113      	bne.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aeac:	3308      	adds	r3, #8
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f004 f810 	bl	800eed4 <RCCEx_PLL2_Config>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800aeba:	e014      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aec0:	3330      	adds	r3, #48	@ 0x30
 800aec2:	4618      	mov	r0, r3
 800aec4:	f004 f89e 	bl	800f004 <RCCEx_PLL3_Config>
 800aec8:	4603      	mov	r3, r0
 800aeca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800aece:	e00a      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aed6:	e006      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800aed8:	bf00      	nop
 800aeda:	e004      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800aedc:	bf00      	nop
 800aede:	e002      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800aee0:	bf00      	nop
 800aee2:	e000      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800aee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10d      	bne.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800aeee:	4b59      	ldr	r3, [pc, #356]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aef0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aef4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800aef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aefc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800af00:	4a54      	ldr	r2, [pc, #336]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800af02:	430b      	orrs	r3, r1
 800af04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800af08:	e003      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800af12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800af1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af22:	2300      	movs	r3, #0
 800af24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af28:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4313      	orrs	r3, r2
 800af30:	d055      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800af32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800af3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800af3e:	d031      	beq.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800af40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800af44:	d82a      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800af46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af4a:	d02d      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800af4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af50:	d824      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800af52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af56:	d029      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800af58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af5c:	d81e      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800af5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af62:	d011      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800af64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af68:	d818      	bhi.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d020      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800af6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af72:	d113      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af78:	3308      	adds	r3, #8
 800af7a:	4618      	mov	r0, r3
 800af7c:	f003 ffaa 	bl	800eed4 <RCCEx_PLL2_Config>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800af86:	e014      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af8c:	3330      	adds	r3, #48	@ 0x30
 800af8e:	4618      	mov	r0, r3
 800af90:	f004 f838 	bl	800f004 <RCCEx_PLL3_Config>
 800af94:	4603      	mov	r3, r0
 800af96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800af9a:	e00a      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800afa2:	e006      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800afa4:	bf00      	nop
 800afa6:	e004      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800afa8:	bf00      	nop
 800afaa:	e002      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800afac:	bf00      	nop
 800afae:	e000      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800afb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10d      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800afba:	4b26      	ldr	r3, [pc, #152]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800afbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800afc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800afc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800afcc:	4a21      	ldr	r2, [pc, #132]	@ (800b054 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800afce:	430b      	orrs	r3, r1
 800afd0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800afd4:	e003      	b.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800afda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800afde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	2100      	movs	r1, #0
 800afe8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aff8:	460b      	mov	r3, r1
 800affa:	4313      	orrs	r3, r2
 800affc:	d057      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800affe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b002:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b006:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b00a:	d033      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800b00c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b010:	d82c      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b012:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b016:	d02f      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800b018:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b01c:	d826      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b01e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b022:	d02b      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800b024:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b028:	d820      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b02a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b02e:	d013      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b034:	d81a      	bhi.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b036:	2b00      	cmp	r3, #0
 800b038:	d022      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800b03a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b03e:	d115      	bne.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b044:	3308      	adds	r3, #8
 800b046:	4618      	mov	r0, r3
 800b048:	f003 ff44 	bl	800eed4 <RCCEx_PLL2_Config>
 800b04c:	4603      	mov	r3, r0
 800b04e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800b052:	e016      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800b054:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b05c:	3330      	adds	r3, #48	@ 0x30
 800b05e:	4618      	mov	r0, r3
 800b060:	f003 ffd0 	bl	800f004 <RCCEx_PLL3_Config>
 800b064:	4603      	mov	r3, r0
 800b066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800b06a:	e00a      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b072:	e006      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b074:	bf00      	nop
 800b076:	e004      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b078:	bf00      	nop
 800b07a:	e002      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b07c:	bf00      	nop
 800b07e:	e000      	b.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b080:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b086:	2b00      	cmp	r3, #0
 800b088:	d10d      	bne.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800b08a:	4bbb      	ldr	r3, [pc, #748]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b08c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b090:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b098:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b09c:	4ab6      	ldr	r2, [pc, #728]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b0a4:	e003      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b0aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800b0ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800b0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b0c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	d055      	beq.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800b0ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0d6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b0da:	d031      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800b0dc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b0e0:	d82a      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b0e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0e6:	d02d      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800b0e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0ec:	d824      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b0ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0f2:	d029      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800b0f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0f8:	d81e      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b0fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0fe:	d011      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800b100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b104:	d818      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b106:	2b00      	cmp	r3, #0
 800b108:	d020      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800b10a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b10e:	d113      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b114:	3308      	adds	r3, #8
 800b116:	4618      	mov	r0, r3
 800b118:	f003 fedc 	bl	800eed4 <RCCEx_PLL2_Config>
 800b11c:	4603      	mov	r3, r0
 800b11e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800b122:	e014      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b128:	3330      	adds	r3, #48	@ 0x30
 800b12a:	4618      	mov	r0, r3
 800b12c:	f003 ff6a 	bl	800f004 <RCCEx_PLL3_Config>
 800b130:	4603      	mov	r3, r0
 800b132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800b136:	e00a      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b13e:	e006      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b140:	bf00      	nop
 800b142:	e004      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b144:	bf00      	nop
 800b146:	e002      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b148:	bf00      	nop
 800b14a:	e000      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10d      	bne.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800b156:	4b88      	ldr	r3, [pc, #544]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b158:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b15c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800b160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b168:	4a83      	ldr	r2, [pc, #524]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b16a:	430b      	orrs	r3, r1
 800b16c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b170:	e003      	b.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b176:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800b17a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	2100      	movs	r1, #0
 800b184:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800b188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b18c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b190:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b194:	460b      	mov	r3, r1
 800b196:	4313      	orrs	r3, r2
 800b198:	d055      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800b19a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b19e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b1a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b1a6:	d031      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800b1a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b1ac:	d82a      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b1ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b1b2:	d02d      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800b1b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b1b8:	d824      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b1ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b1be:	d029      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800b1c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b1c4:	d81e      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b1c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1ca:	d011      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800b1cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d0:	d818      	bhi.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d020      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800b1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1da:	d113      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b1dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f003 fe76 	bl	800eed4 <RCCEx_PLL2_Config>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800b1ee:	e014      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1f4:	3330      	adds	r3, #48	@ 0x30
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f003 ff04 	bl	800f004 <RCCEx_PLL3_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800b202:	e00a      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b20a:	e006      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b20c:	bf00      	nop
 800b20e:	e004      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b210:	bf00      	nop
 800b212:	e002      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b21a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10d      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800b222:	4b55      	ldr	r3, [pc, #340]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b224:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b228:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b22c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b234:	4a50      	ldr	r2, [pc, #320]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b236:	430b      	orrs	r3, r1
 800b238:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b23c:	e003      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b242:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800b246:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	2100      	movs	r1, #0
 800b250:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800b254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b25c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b260:	460b      	mov	r3, r1
 800b262:	4313      	orrs	r3, r2
 800b264:	d055      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800b266:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b26a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b26e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b272:	d031      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800b274:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b278:	d82a      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b27a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b27e:	d02d      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800b280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b284:	d824      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b286:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b28a:	d029      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800b28c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b290:	d81e      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b296:	d011      	beq.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800b298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b29c:	d818      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d020      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800b2a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2a6:	d113      	bne.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b2a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f003 fe10 	bl	800eed4 <RCCEx_PLL2_Config>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b2ba:	e014      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b2bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2c0:	3330      	adds	r3, #48	@ 0x30
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f003 fe9e 	bl	800f004 <RCCEx_PLL3_Config>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b2ce:	e00a      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b2d6:	e006      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b2d8:	bf00      	nop
 800b2da:	e004      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b2dc:	bf00      	nop
 800b2de:	e002      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b2e0:	bf00      	nop
 800b2e2:	e000      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b2e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10d      	bne.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800b2ee:	4b22      	ldr	r3, [pc, #136]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b2f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b2f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b2f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b300:	4a1d      	ldr	r2, [pc, #116]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b302:	430b      	orrs	r3, r1
 800b304:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b308:	e003      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b30e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b31e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b322:	2300      	movs	r3, #0
 800b324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b328:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b32c:	460b      	mov	r3, r1
 800b32e:	4313      	orrs	r3, r2
 800b330:	d055      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b336:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b33a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b33e:	d035      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800b340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b344:	d82e      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b346:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b34a:	d031      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800b34c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b350:	d828      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b356:	d01b      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800b358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b35c:	d822      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800b362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b366:	d009      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800b368:	e01c      	b.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b36a:	4b03      	ldr	r3, [pc, #12]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36e:	4a02      	ldr	r2, [pc, #8]	@ (800b378 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b374:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b376:	e01c      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800b378:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b37c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b380:	3308      	adds	r3, #8
 800b382:	4618      	mov	r0, r3
 800b384:	f003 fda6 	bl	800eed4 <RCCEx_PLL2_Config>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b38e:	e010      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b394:	3330      	adds	r3, #48	@ 0x30
 800b396:	4618      	mov	r0, r3
 800b398:	f003 fe34 	bl	800f004 <RCCEx_PLL3_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b3a2:	e006      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b3aa:	e002      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b3ac:	bf00      	nop
 800b3ae:	e000      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b3b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10d      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b3ba:	4bc3      	ldr	r3, [pc, #780]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b3c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b3c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b3cc:	4abe      	ldr	r2, [pc, #760]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b3d4:	e003      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b3da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800b3de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b3ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b3f4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	d051      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b3fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b402:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b406:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b40a:	d033      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b40c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b410:	d82c      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b412:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b416:	d02d      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b418:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b41c:	d826      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b41e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b422:	d019      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800b424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b428:	d820      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800b42e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b432:	d007      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800b434:	e01a      	b.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b436:	4ba4      	ldr	r3, [pc, #656]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43a:	4aa3      	ldr	r2, [pc, #652]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b43c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b440:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b442:	e018      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b448:	3308      	adds	r3, #8
 800b44a:	4618      	mov	r0, r3
 800b44c:	f003 fd42 	bl	800eed4 <RCCEx_PLL2_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b456:	e00e      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b45c:	3330      	adds	r3, #48	@ 0x30
 800b45e:	4618      	mov	r0, r3
 800b460:	f003 fdd0 	bl	800f004 <RCCEx_PLL3_Config>
 800b464:	4603      	mov	r3, r0
 800b466:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b46a:	e004      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b472:	e000      	b.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800b474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b476:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10d      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b47e:	4b92      	ldr	r3, [pc, #584]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b484:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800b488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b48c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b490:	4a8d      	ldr	r2, [pc, #564]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b492:	430b      	orrs	r3, r1
 800b494:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b498:	e003      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b49e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b4a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b4ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b4b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	d032      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b4be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b4c6:	2b05      	cmp	r3, #5
 800b4c8:	d80f      	bhi.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d211      	bcs.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d911      	bls.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d109      	bne.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b4d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4da:	3308      	adds	r3, #8
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f003 fcf9 	bl	800eed4 <RCCEx_PLL2_Config>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b4e8:	e006      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b4f0:	e002      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800b4f2:	bf00      	nop
 800b4f4:	e000      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800b4f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10d      	bne.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b500:	4b71      	ldr	r3, [pc, #452]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b506:	f023 0107 	bic.w	r1, r3, #7
 800b50a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b50e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b512:	4a6d      	ldr	r2, [pc, #436]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b514:	430b      	orrs	r3, r1
 800b516:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b51a:	e003      	b.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b520:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800b524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	2100      	movs	r1, #0
 800b52e:	6739      	str	r1, [r7, #112]	@ 0x70
 800b530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b534:	677b      	str	r3, [r7, #116]	@ 0x74
 800b536:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b53a:	460b      	mov	r3, r1
 800b53c:	4313      	orrs	r3, r2
 800b53e:	d024      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800b540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800b54c:	2b08      	cmp	r3, #8
 800b54e:	d005      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b556:	e002      	b.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800b558:	bf00      	nop
 800b55a:	e000      	b.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800b55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b55e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10d      	bne.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800b566:	4b58      	ldr	r3, [pc, #352]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b56c:	f023 0108 	bic.w	r1, r3, #8
 800b570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b578:	4a53      	ldr	r2, [pc, #332]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b57a:	430b      	orrs	r3, r1
 800b57c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b580:	e003      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b582:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b586:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b58a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b596:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b598:	2300      	movs	r3, #0
 800b59a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b59c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	f000 80b9 	beq.w	800b71a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800b5a8:	4b48      	ldr	r3, [pc, #288]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ac:	4a47      	ldr	r2, [pc, #284]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b5ae:	f043 0301 	orr.w	r3, r3, #1
 800b5b2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b5b4:	f7fd fad2 	bl	8008b5c <HAL_GetTick>
 800b5b8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800b5bc:	e00b      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5be:	f7fd facd 	bl	8008b5c <HAL_GetTick>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d903      	bls.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b5d4:	e005      	b.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800b5d6:	4b3d      	ldr	r3, [pc, #244]	@ (800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0ed      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800b5e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f040 8093 	bne.w	800b712 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b5ec:	4b36      	ldr	r3, [pc, #216]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b5ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b5fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d023      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800b602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b606:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800b60a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b60e:	4293      	cmp	r3, r2
 800b610:	d01b      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b612:	4b2d      	ldr	r3, [pc, #180]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b61c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b620:	4b29      	ldr	r3, [pc, #164]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b626:	4a28      	ldr	r2, [pc, #160]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b62c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b630:	4b25      	ldr	r3, [pc, #148]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b636:	4a24      	ldr	r2, [pc, #144]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b63c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b640:	4a21      	ldr	r2, [pc, #132]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b642:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b64a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d019      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b656:	f7fd fa81 	bl	8008b5c <HAL_GetTick>
 800b65a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b65e:	e00d      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b660:	f7fd fa7c 	bl	8008b5c <HAL_GetTick>
 800b664:	4602      	mov	r2, r0
 800b666:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b66a:	1ad2      	subs	r2, r2, r3
 800b66c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b670:	429a      	cmp	r2, r3
 800b672:	d903      	bls.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800b674:	2303      	movs	r3, #3
 800b676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800b67a:	e006      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b67c:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b67e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b682:	f003 0302 	and.w	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0ea      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800b68a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d13a      	bne.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b696:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b69a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b69e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6a2:	d115      	bne.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800b6a4:	4b08      	ldr	r3, [pc, #32]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b6ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b6b4:	091b      	lsrs	r3, r3, #4
 800b6b6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b6ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b6be:	4a02      	ldr	r2, [pc, #8]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	61d3      	str	r3, [r2, #28]
 800b6c4:	e00a      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800b6c6:	bf00      	nop
 800b6c8:	44020c00 	.word	0x44020c00
 800b6cc:	44020800 	.word	0x44020800
 800b6d0:	4b9f      	ldr	r3, [pc, #636]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	4a9e      	ldr	r2, [pc, #632]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b6da:	61d3      	str	r3, [r2, #28]
 800b6dc:	4b9c      	ldr	r3, [pc, #624]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6e2:	4a9b      	ldr	r2, [pc, #620]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b6ec:	4b98      	ldr	r3, [pc, #608]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6ee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800b6f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b6fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6fe:	4a94      	ldr	r2, [pc, #592]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b700:	430b      	orrs	r3, r1
 800b702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b706:	e008      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b708:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b70c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800b710:	e003      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b716:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b71a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b726:	663b      	str	r3, [r7, #96]	@ 0x60
 800b728:	2300      	movs	r3, #0
 800b72a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b72c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b730:	460b      	mov	r3, r1
 800b732:	4313      	orrs	r3, r2
 800b734:	d035      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b736:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b73a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b73e:	2b30      	cmp	r3, #48	@ 0x30
 800b740:	d014      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800b742:	2b30      	cmp	r3, #48	@ 0x30
 800b744:	d80e      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b746:	2b20      	cmp	r3, #32
 800b748:	d012      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800b74a:	2b20      	cmp	r3, #32
 800b74c:	d80a      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d010      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800b752:	2b10      	cmp	r3, #16
 800b754:	d106      	bne.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b756:	4b7e      	ldr	r3, [pc, #504]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75a:	4a7d      	ldr	r2, [pc, #500]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b75c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b760:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800b762:	e008      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b76a:	e004      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b76c:	bf00      	nop
 800b76e:	e002      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b770:	bf00      	nop
 800b772:	e000      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b776:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10d      	bne.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b77e:	4b74      	ldr	r3, [pc, #464]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b784:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b78c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b790:	4a6f      	ldr	r2, [pc, #444]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b792:	430b      	orrs	r3, r1
 800b794:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b798:	e003      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b79e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b7a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b7ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	d033      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800b7be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800b7ca:	2b40      	cmp	r3, #64	@ 0x40
 800b7cc:	d007      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800b7ce:	e010      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d0:	4b5f      	ldr	r3, [pc, #380]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d4:	4a5e      	ldr	r2, [pc, #376]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b7d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b7dc:	e00d      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f003 fb75 	bl	800eed4 <RCCEx_PLL2_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b7f0:	e003      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10d      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800b802:	4b53      	ldr	r3, [pc, #332]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b808:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800b80c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b810:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b814:	4a4e      	ldr	r2, [pc, #312]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b816:	430b      	orrs	r3, r1
 800b818:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b81c:	e003      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b822:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b826:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b832:	653b      	str	r3, [r7, #80]	@ 0x50
 800b834:	2300      	movs	r3, #0
 800b836:	657b      	str	r3, [r7, #84]	@ 0x54
 800b838:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b83c:	460b      	mov	r3, r1
 800b83e:	4313      	orrs	r3, r2
 800b840:	d033      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800b842:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b846:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800b84e:	2b80      	cmp	r3, #128	@ 0x80
 800b850:	d007      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800b852:	e010      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b854:	4b3e      	ldr	r3, [pc, #248]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b858:	4a3d      	ldr	r2, [pc, #244]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b85a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b85e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b860:	e00d      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b862:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b866:	3308      	adds	r3, #8
 800b868:	4618      	mov	r0, r3
 800b86a:	f003 fb33 	bl	800eed4 <RCCEx_PLL2_Config>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b874:	e003      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b87e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10d      	bne.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800b886:	4b32      	ldr	r3, [pc, #200]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b88c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b894:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b898:	4a2d      	ldr	r2, [pc, #180]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b89a:	430b      	orrs	r3, r1
 800b89c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b8a0:	e003      	b.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b8a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b8aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b8b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	d04a      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800b8c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d827      	bhi.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800b8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800b8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d8:	0800b8ed 	.word	0x0800b8ed
 800b8dc:	0800b8fb 	.word	0x0800b8fb
 800b8e0:	0800b90f 	.word	0x0800b90f
 800b8e4:	0800b92b 	.word	0x0800b92b
 800b8e8:	0800b92b 	.word	0x0800b92b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ec:	4b18      	ldr	r3, [pc, #96]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f0:	4a17      	ldr	r2, [pc, #92]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b8f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b8f8:	e018      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b8fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8fe:	3308      	adds	r3, #8
 800b900:	4618      	mov	r0, r3
 800b902:	f003 fae7 	bl	800eed4 <RCCEx_PLL2_Config>
 800b906:	4603      	mov	r3, r0
 800b908:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b90c:	e00e      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b90e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b912:	3330      	adds	r3, #48	@ 0x30
 800b914:	4618      	mov	r0, r3
 800b916:	f003 fb75 	bl	800f004 <RCCEx_PLL3_Config>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b920:	e004      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b928:	e000      	b.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800b92a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b92c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10f      	bne.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b934:	4b06      	ldr	r3, [pc, #24]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b93a:	f023 0107 	bic.w	r1, r3, #7
 800b93e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b946:	4a02      	ldr	r2, [pc, #8]	@ (800b950 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b948:	430b      	orrs	r3, r1
 800b94a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b94e:	e005      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800b950:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b954:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b958:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b95c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b968:	643b      	str	r3, [r7, #64]	@ 0x40
 800b96a:	2300      	movs	r3, #0
 800b96c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b96e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b972:	460b      	mov	r3, r1
 800b974:	4313      	orrs	r3, r2
 800b976:	f000 8081 	beq.w	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800b97a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b97e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b982:	2b20      	cmp	r3, #32
 800b984:	d85f      	bhi.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800ba11 	.word	0x0800ba11
 800b990:	0800ba47 	.word	0x0800ba47
 800b994:	0800ba47 	.word	0x0800ba47
 800b998:	0800ba47 	.word	0x0800ba47
 800b99c:	0800ba47 	.word	0x0800ba47
 800b9a0:	0800ba47 	.word	0x0800ba47
 800b9a4:	0800ba47 	.word	0x0800ba47
 800b9a8:	0800ba47 	.word	0x0800ba47
 800b9ac:	0800ba1f 	.word	0x0800ba1f
 800b9b0:	0800ba47 	.word	0x0800ba47
 800b9b4:	0800ba47 	.word	0x0800ba47
 800b9b8:	0800ba47 	.word	0x0800ba47
 800b9bc:	0800ba47 	.word	0x0800ba47
 800b9c0:	0800ba47 	.word	0x0800ba47
 800b9c4:	0800ba47 	.word	0x0800ba47
 800b9c8:	0800ba47 	.word	0x0800ba47
 800b9cc:	0800ba33 	.word	0x0800ba33
 800b9d0:	0800ba47 	.word	0x0800ba47
 800b9d4:	0800ba47 	.word	0x0800ba47
 800b9d8:	0800ba47 	.word	0x0800ba47
 800b9dc:	0800ba47 	.word	0x0800ba47
 800b9e0:	0800ba47 	.word	0x0800ba47
 800b9e4:	0800ba47 	.word	0x0800ba47
 800b9e8:	0800ba47 	.word	0x0800ba47
 800b9ec:	0800ba4f 	.word	0x0800ba4f
 800b9f0:	0800ba47 	.word	0x0800ba47
 800b9f4:	0800ba47 	.word	0x0800ba47
 800b9f8:	0800ba47 	.word	0x0800ba47
 800b9fc:	0800ba47 	.word	0x0800ba47
 800ba00:	0800ba47 	.word	0x0800ba47
 800ba04:	0800ba47 	.word	0x0800ba47
 800ba08:	0800ba47 	.word	0x0800ba47
 800ba0c:	0800ba4f 	.word	0x0800ba4f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba10:	4bab      	ldr	r3, [pc, #684]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba14:	4aaa      	ldr	r2, [pc, #680]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800ba1c:	e018      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba22:	3308      	adds	r3, #8
 800ba24:	4618      	mov	r0, r3
 800ba26:	f003 fa55 	bl	800eed4 <RCCEx_PLL2_Config>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800ba30:	e00e      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba36:	3330      	adds	r3, #48	@ 0x30
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f003 fae3 	bl	800f004 <RCCEx_PLL3_Config>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800ba44:	e004      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ba4c:	e000      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800ba4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10d      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800ba58:	4b99      	ldr	r3, [pc, #612]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ba62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba6a:	4a95      	ldr	r2, [pc, #596]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ba72:	e003      	b.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800ba7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ba88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ba92:	460b      	mov	r3, r1
 800ba94:	4313      	orrs	r3, r2
 800ba96:	d04e      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800ba98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800baa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baa4:	d02e      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800baa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baaa:	d827      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800baac:	2bc0      	cmp	r3, #192	@ 0xc0
 800baae:	d02b      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800bab0:	2bc0      	cmp	r3, #192	@ 0xc0
 800bab2:	d823      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800bab4:	2b80      	cmp	r3, #128	@ 0x80
 800bab6:	d017      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800bab8:	2b80      	cmp	r3, #128	@ 0x80
 800baba:	d81f      	bhi.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800bac0:	2b40      	cmp	r3, #64	@ 0x40
 800bac2:	d007      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800bac4:	e01a      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bac6:	4b7e      	ldr	r3, [pc, #504]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baca:	4a7d      	ldr	r2, [pc, #500]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bacc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bad0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800bad2:	e01a      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bad8:	3308      	adds	r3, #8
 800bada:	4618      	mov	r0, r3
 800badc:	f003 f9fa 	bl	800eed4 <RCCEx_PLL2_Config>
 800bae0:	4603      	mov	r3, r0
 800bae2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800bae6:	e010      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800baec:	3330      	adds	r3, #48	@ 0x30
 800baee:	4618      	mov	r0, r3
 800baf0:	f003 fa88 	bl	800f004 <RCCEx_PLL3_Config>
 800baf4:	4603      	mov	r3, r0
 800baf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800bafa:	e006      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bb02:	e002      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800bb04:	bf00      	nop
 800bb06:	e000      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800bb08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10d      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800bb12:	4b6b      	ldr	r3, [pc, #428]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bb14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb18:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800bb1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb24:	4a66      	ldr	r2, [pc, #408]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bb26:	430b      	orrs	r3, r1
 800bb28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bb2c:	e003      	b.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800bb36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bb42:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb44:	2300      	movs	r3, #0
 800bb46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	d055      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800bb52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800bb5a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bb5e:	d031      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800bb60:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bb64:	d82a      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800bb66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb6a:	d02d      	beq.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800bb6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb70:	d824      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800bb72:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bb76:	d029      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800bb78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bb7c:	d81e      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800bb7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb82:	d011      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800bb84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb88:	d818      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d020      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800bb8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb92:	d113      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb98:	3308      	adds	r3, #8
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f003 f99a 	bl	800eed4 <RCCEx_PLL2_Config>
 800bba0:	4603      	mov	r3, r0
 800bba2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800bba6:	e014      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbac:	3330      	adds	r3, #48	@ 0x30
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f003 fa28 	bl	800f004 <RCCEx_PLL3_Config>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800bbba:	e00a      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bbc2:	e006      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800bbc4:	bf00      	nop
 800bbc6:	e004      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800bbc8:	bf00      	nop
 800bbca:	e002      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800bbcc:	bf00      	nop
 800bbce:	e000      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800bbd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10d      	bne.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800bbda:	4b39      	ldr	r3, [pc, #228]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bbdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbe0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800bbe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbe8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800bbec:	4a34      	ldr	r2, [pc, #208]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bbee:	430b      	orrs	r3, r1
 800bbf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bbf4:	e003      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bbfa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800bbfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bc0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bc14:	460b      	mov	r3, r1
 800bc16:	4313      	orrs	r3, r2
 800bc18:	d058      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800bc1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bc26:	d031      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800bc28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bc2c:	d82a      	bhi.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800bc2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc32:	d02d      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800bc34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc38:	d824      	bhi.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800bc3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc3e:	d029      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800bc40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bc44:	d81e      	bhi.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800bc46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc4a:	d011      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800bc4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc50:	d818      	bhi.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d020      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800bc56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc5a:	d113      	bne.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bc5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc60:	3308      	adds	r3, #8
 800bc62:	4618      	mov	r0, r3
 800bc64:	f003 f936 	bl	800eed4 <RCCEx_PLL2_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800bc6e:	e014      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc74:	3330      	adds	r3, #48	@ 0x30
 800bc76:	4618      	mov	r0, r3
 800bc78:	f003 f9c4 	bl	800f004 <RCCEx_PLL3_Config>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800bc82:	e00a      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bc8a:	e006      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800bc8c:	bf00      	nop
 800bc8e:	e004      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800bc90:	bf00      	nop
 800bc92:	e002      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800bc94:	bf00      	nop
 800bc96:	e000      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800bc98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d110      	bne.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800bca2:	4b07      	ldr	r3, [pc, #28]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bca8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800bcac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcb4:	4902      	ldr	r1, [pc, #8]	@ (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bcbc:	e006      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800bcbe:	bf00      	nop
 800bcc0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcc4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bcc8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	6239      	str	r1, [r7, #32]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bce2:	460b      	mov	r3, r1
 800bce4:	4313      	orrs	r3, r2
 800bce6:	d055      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800bce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bcf0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800bcf4:	d031      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800bcf6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800bcfa:	d82a      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800bcfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd00:	d02d      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800bd02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd06:	d824      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800bd08:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bd0c:	d029      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800bd0e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bd12:	d81e      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800bd14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd18:	d011      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800bd1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd1e:	d818      	bhi.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d020      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800bd24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd28:	d113      	bne.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bd2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd2e:	3308      	adds	r3, #8
 800bd30:	4618      	mov	r0, r3
 800bd32:	f003 f8cf 	bl	800eed4 <RCCEx_PLL2_Config>
 800bd36:	4603      	mov	r3, r0
 800bd38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd3c:	e014      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bd3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd42:	3330      	adds	r3, #48	@ 0x30
 800bd44:	4618      	mov	r0, r3
 800bd46:	f003 f95d 	bl	800f004 <RCCEx_PLL3_Config>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd50:	e00a      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bd58:	e006      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bd5a:	bf00      	nop
 800bd5c:	e004      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bd5e:	bf00      	nop
 800bd60:	e002      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bd62:	bf00      	nop
 800bd64:	e000      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bd66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10d      	bne.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800bd70:	4b88      	ldr	r3, [pc, #544]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bd72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd76:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800bd7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bd82:	4984      	ldr	r1, [pc, #528]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bd8a:	e003      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bd90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bd94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	61b9      	str	r1, [r7, #24]
 800bda0:	f003 0302 	and.w	r3, r3, #2
 800bda4:	61fb      	str	r3, [r7, #28]
 800bda6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4313      	orrs	r3, r2
 800bdae:	d03d      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800bdb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bdb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d81c      	bhi.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800bdbc:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800bdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc2:	bf00      	nop
 800bdc4:	0800bdff 	.word	0x0800bdff
 800bdc8:	0800bdd5 	.word	0x0800bdd5
 800bdcc:	0800bde3 	.word	0x0800bde3
 800bdd0:	0800bdff 	.word	0x0800bdff
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdd4:	4b6f      	ldr	r3, [pc, #444]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd8:	4a6e      	ldr	r2, [pc, #440]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bdda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdde:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bde0:	e00e      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bde2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bde6:	3308      	adds	r3, #8
 800bde8:	4618      	mov	r0, r3
 800bdea:	f003 f873 	bl	800eed4 <RCCEx_PLL2_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800bdf4:	e004      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bdfc:	e000      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800bdfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10d      	bne.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800be08:	4b62      	ldr	r3, [pc, #392]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800be0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be0e:	f023 0203 	bic.w	r2, r3, #3
 800be12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800be1a:	495e      	ldr	r1, [pc, #376]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800be22:	e003      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800be28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	2100      	movs	r1, #0
 800be36:	6139      	str	r1, [r7, #16]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800be42:	460b      	mov	r3, r1
 800be44:	4313      	orrs	r3, r2
 800be46:	d03a      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800be48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800be50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be54:	d00e      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800be56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be5a:	d815      	bhi.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d017      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800be60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be64:	d110      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be66:	4b4b      	ldr	r3, [pc, #300]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	4a4a      	ldr	r2, [pc, #296]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800be6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800be72:	e00e      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be78:	3308      	adds	r3, #8
 800be7a:	4618      	mov	r0, r3
 800be7c:	f003 f82a 	bl	800eed4 <RCCEx_PLL2_Config>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800be86:	e004      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800be8e:	e000      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800be90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10d      	bne.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800be9a:	4b3e      	ldr	r3, [pc, #248]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800be9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bea8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800beac:	4939      	ldr	r1, [pc, #228]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800beae:	4313      	orrs	r3, r2
 800beb0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800beb4:	e003      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800beba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	2100      	movs	r1, #0
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	f003 0310 	and.w	r3, r3, #16
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bed4:	460b      	mov	r3, r1
 800bed6:	4313      	orrs	r3, r2
 800bed8:	d038      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800beda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bede:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bee2:	2b30      	cmp	r3, #48	@ 0x30
 800bee4:	d01b      	beq.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800bee6:	2b30      	cmp	r3, #48	@ 0x30
 800bee8:	d815      	bhi.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800beea:	2b10      	cmp	r3, #16
 800beec:	d002      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d007      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800bef2:	e010      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bef4:	4b27      	ldr	r3, [pc, #156]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef8:	4a26      	ldr	r2, [pc, #152]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800befa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800befe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf00:	e00e      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bf02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf06:	3330      	adds	r3, #48	@ 0x30
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f003 f87b 	bl	800f004 <RCCEx_PLL3_Config>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800bf14:	e004      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bf1c:	e000      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800bf1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10d      	bne.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800bf28:	4b1a      	ldr	r3, [pc, #104]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bf2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf2e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bf32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf36:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bf3a:	4916      	ldr	r1, [pc, #88]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bf42:	e003      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bf48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	2100      	movs	r1, #0
 800bf56:	6039      	str	r1, [r7, #0]
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	607b      	str	r3, [r7, #4]
 800bf5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf62:	460b      	mov	r3, r1
 800bf64:	4313      	orrs	r3, r2
 800bf66:	d00c      	beq.n	800bf82 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800bf68:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bf6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bf6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bf72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf76:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800bf7a:	4906      	ldr	r1, [pc, #24]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800bf82:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf92:	bf00      	nop
 800bf94:	44020c00 	.word	0x44020c00

0800bf98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b08b      	sub	sp, #44	@ 0x2c
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bfa0:	4bae      	ldr	r3, [pc, #696]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bfa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bfaa:	4bac      	ldr	r3, [pc, #688]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bfac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800bfb4:	4ba9      	ldr	r3, [pc, #676]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bfb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb8:	0a1b      	lsrs	r3, r3, #8
 800bfba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfbe:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bfc0:	4ba6      	ldr	r3, [pc, #664]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc4:	091b      	lsrs	r3, r3, #4
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bfcc:	4ba3      	ldr	r3, [pc, #652]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd0:	08db      	lsrs	r3, r3, #3
 800bfd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	fb02 f303 	mul.w	r3, r2, r3
 800bfdc:	ee07 3a90 	vmov	s15, r3
 800bfe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 8126 	beq.w	800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d053      	beq.n	800c09e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d86f      	bhi.n	800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d003      	beq.n	800c00a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d02b      	beq.n	800c060 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c008:	e068      	b.n	800c0dc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c00a:	4b94      	ldr	r3, [pc, #592]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	08db      	lsrs	r3, r3, #3
 800c010:	f003 0303 	and.w	r3, r3, #3
 800c014:	4a92      	ldr	r2, [pc, #584]	@ (800c260 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800c016:	fa22 f303 	lsr.w	r3, r2, r3
 800c01a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	ee07 3a90 	vmov	s15, r3
 800c02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03e:	ed97 6a04 	vldr	s12, [r7, #16]
 800c042:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c05e:	e068      	b.n	800c132 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800c268 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800c06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	ee07 3a90 	vmov	s15, r3
 800c078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07c:	ed97 6a04 	vldr	s12, [r7, #16]
 800c080:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c098:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c09c:	e049      	b.n	800c132 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c26c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800c0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b0:	6a3b      	ldr	r3, [r7, #32]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ba:	ed97 6a04 	vldr	s12, [r7, #16]
 800c0be:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c0da:	e02a      	b.n	800c132 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0dc:	4b5f      	ldr	r3, [pc, #380]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	08db      	lsrs	r3, r3, #3
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	4a5e      	ldr	r2, [pc, #376]	@ (800c260 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800c0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ec:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c106:	6a3b      	ldr	r3, [r7, #32]
 800c108:	ee07 3a90 	vmov	s15, r3
 800c10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c110:	ed97 6a04 	vldr	s12, [r7, #16]
 800c114:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800c264 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c130:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c132:	4b4a      	ldr	r3, [pc, #296]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c13a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c13e:	d121      	bne.n	800c184 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c140:	4b46      	ldr	r3, [pc, #280]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d017      	beq.n	800c17c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c14c:	4b43      	ldr	r3, [pc, #268]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c14e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c150:	0a5b      	lsrs	r3, r3, #9
 800c152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800c15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c162:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800c166:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c172:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	e006      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e002      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c18a:	4b34      	ldr	r3, [pc, #208]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c196:	d121      	bne.n	800c1dc <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c198:	4b30      	ldr	r3, [pc, #192]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c19c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c1a4:	4b2d      	ldr	r3, [pc, #180]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a8:	0c1b      	lsrs	r3, r3, #16
 800c1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c1b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800c1be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ca:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	e006      	b.n	800c1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	605a      	str	r2, [r3, #4]
 800c1da:	e002      	b.n	800c1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1e2:	4b1e      	ldr	r3, [pc, #120]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1ee:	d121      	bne.n	800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c1f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d017      	beq.n	800c22c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c1fc:	4b17      	ldr	r3, [pc, #92]	@ (800c25c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c200:	0e1b      	lsrs	r3, r3, #24
 800c202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800c20e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c212:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800c216:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c222:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c22a:	e010      	b.n	800c24e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	609a      	str	r2, [r3, #8]
}
 800c232:	e00c      	b.n	800c24e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	609a      	str	r2, [r3, #8]
}
 800c23a:	e008      	b.n	800c24e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	609a      	str	r2, [r3, #8]
}
 800c24e:	bf00      	nop
 800c250:	372c      	adds	r7, #44	@ 0x2c
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	44020c00 	.word	0x44020c00
 800c260:	03d09000 	.word	0x03d09000
 800c264:	46000000 	.word	0x46000000
 800c268:	4a742400 	.word	0x4a742400
 800c26c:	4bbebc20 	.word	0x4bbebc20

0800c270 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800c270:	b480      	push	{r7}
 800c272:	b08b      	sub	sp, #44	@ 0x2c
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c278:	4bae      	ldr	r3, [pc, #696]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c27a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c280:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c282:	4bac      	ldr	r3, [pc, #688]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800c28c:	4ba9      	ldr	r3, [pc, #676]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c290:	0a1b      	lsrs	r3, r3, #8
 800c292:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c296:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c298:	4ba6      	ldr	r3, [pc, #664]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29c:	091b      	lsrs	r3, r3, #4
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c2a4:	4ba3      	ldr	r3, [pc, #652]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2a8:	08db      	lsrs	r3, r3, #3
 800c2aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	fb02 f303 	mul.w	r3, r2, r3
 800c2b4:	ee07 3a90 	vmov	s15, r3
 800c2b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2bc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 8126 	beq.w	800c514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d053      	beq.n	800c376 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d86f      	bhi.n	800c3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d003      	beq.n	800c2e2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d02b      	beq.n	800c338 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c2e0:	e068      	b.n	800c3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c2e2:	4b94      	ldr	r3, [pc, #592]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	08db      	lsrs	r3, r3, #3
 800c2e8:	f003 0303 	and.w	r3, r3, #3
 800c2ec:	4a92      	ldr	r2, [pc, #584]	@ (800c538 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c2f2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	ee07 3a90 	vmov	s15, r3
 800c2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	ee07 3a90 	vmov	s15, r3
 800c304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c316:	ed97 6a04 	vldr	s12, [r7, #16]
 800c31a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800c53c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c332:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c336:	e068      	b.n	800c40a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c342:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800c540 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800c346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	ee07 3a90 	vmov	s15, r3
 800c350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c354:	ed97 6a04 	vldr	s12, [r7, #16]
 800c358:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c53c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c35c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c36c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c370:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c374:	e049      	b.n	800c40a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	ee07 3a90 	vmov	s15, r3
 800c37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c380:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c544 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800c384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c392:	ed97 6a04 	vldr	s12, [r7, #16]
 800c396:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800c53c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c3b2:	e02a      	b.n	800c40a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c3b4:	4b5f      	ldr	r3, [pc, #380]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	08db      	lsrs	r3, r3, #3
 800c3ba:	f003 0303 	and.w	r3, r3, #3
 800c3be:	4a5e      	ldr	r2, [pc, #376]	@ (800c538 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c3c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3c4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	ee07 3a90 	vmov	s15, r3
 800c3cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	ee07 3a90 	vmov	s15, r3
 800c3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	ee07 3a90 	vmov	s15, r3
 800c3e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e8:	ed97 6a04 	vldr	s12, [r7, #16]
 800c3ec:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800c53c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c3f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c404:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c408:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c40a:	4b4a      	ldr	r3, [pc, #296]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c412:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c416:	d121      	bne.n	800c45c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c418:	4b46      	ldr	r3, [pc, #280]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d017      	beq.n	800c454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c424:	4b43      	ldr	r3, [pc, #268]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c428:	0a5b      	lsrs	r3, r3, #9
 800c42a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c42e:	ee07 3a90 	vmov	s15, r3
 800c432:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800c436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c43a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800c43e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c44a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	601a      	str	r2, [r3, #0]
 800c452:	e006      	b.n	800c462 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	e002      	b.n	800c462 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c462:	4b34      	ldr	r3, [pc, #208]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c46a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c46e:	d121      	bne.n	800c4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c470:	4b30      	ldr	r3, [pc, #192]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d017      	beq.n	800c4ac <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c47c:	4b2d      	ldr	r3, [pc, #180]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c480:	0c1b      	lsrs	r3, r3, #16
 800c482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c48e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c492:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800c496:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c49a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c49e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4a2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	605a      	str	r2, [r3, #4]
 800c4aa:	e006      	b.n	800c4ba <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	605a      	str	r2, [r3, #4]
 800c4b2:	e002      	b.n	800c4ba <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ba:	4b1e      	ldr	r3, [pc, #120]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4c6:	d121      	bne.n	800c50c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c4c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d017      	beq.n	800c504 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c4d4:	4b17      	ldr	r3, [pc, #92]	@ (800c534 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c4d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d8:	0e1b      	lsrs	r3, r3, #24
 800c4da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800c4e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800c4ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4fa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c502:	e010      	b.n	800c526 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	609a      	str	r2, [r3, #8]
}
 800c50a:	e00c      	b.n	800c526 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	609a      	str	r2, [r3, #8]
}
 800c512:	e008      	b.n	800c526 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	609a      	str	r2, [r3, #8]
}
 800c526:	bf00      	nop
 800c528:	372c      	adds	r7, #44	@ 0x2c
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	44020c00 	.word	0x44020c00
 800c538:	03d09000 	.word	0x03d09000
 800c53c:	46000000 	.word	0x46000000
 800c540:	4a742400 	.word	0x4a742400
 800c544:	4bbebc20 	.word	0x4bbebc20

0800c548 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800c548:	b480      	push	{r7}
 800c54a:	b08b      	sub	sp, #44	@ 0x2c
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c550:	4bae      	ldr	r3, [pc, #696]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c558:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c55a:	4bac      	ldr	r3, [pc, #688]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c55c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c55e:	f003 0303 	and.w	r3, r3, #3
 800c562:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800c564:	4ba9      	ldr	r3, [pc, #676]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c568:	0a1b      	lsrs	r3, r3, #8
 800c56a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c56e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c570:	4ba6      	ldr	r3, [pc, #664]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c574:	091b      	lsrs	r3, r3, #4
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c57c:	4ba3      	ldr	r3, [pc, #652]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c57e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c580:	08db      	lsrs	r3, r3, #3
 800c582:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	fb02 f303 	mul.w	r3, r2, r3
 800c58c:	ee07 3a90 	vmov	s15, r3
 800c590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c594:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 8126 	beq.w	800c7ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	2b03      	cmp	r3, #3
 800c5a4:	d053      	beq.n	800c64e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d86f      	bhi.n	800c68c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d003      	beq.n	800c5ba <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d02b      	beq.n	800c610 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c5b8:	e068      	b.n	800c68c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c5ba:	4b94      	ldr	r3, [pc, #592]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	08db      	lsrs	r3, r3, #3
 800c5c0:	f003 0303 	and.w	r3, r3, #3
 800c5c4:	4a92      	ldr	r2, [pc, #584]	@ (800c810 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800c5c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ca:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	ee07 3a90 	vmov	s15, r3
 800c5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ee:	ed97 6a04 	vldr	s12, [r7, #16]
 800c5f2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c60e:	e068      	b.n	800c6e2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c61a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800c818 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800c61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62c:	ed97 6a04 	vldr	s12, [r7, #16]
 800c630:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c63c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c644:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c648:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c64c:	e049      	b.n	800c6e2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	ee07 3a90 	vmov	s15, r3
 800c654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c658:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c81c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800c65c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c66a:	ed97 6a04 	vldr	s12, [r7, #16]
 800c66e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c67a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c682:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c686:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c68a:	e02a      	b.n	800c6e2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c68c:	4b5f      	ldr	r3, [pc, #380]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	08db      	lsrs	r3, r3, #3
 800c692:	f003 0303 	and.w	r3, r3, #3
 800c696:	4a5e      	ldr	r2, [pc, #376]	@ (800c810 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800c698:	fa22 f303 	lsr.w	r3, r2, r3
 800c69c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	ee07 3a90 	vmov	s15, r3
 800c6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	ee07 3a90 	vmov	s15, r3
 800c6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6b6:	6a3b      	ldr	r3, [r7, #32]
 800c6b8:	ee07 3a90 	vmov	s15, r3
 800c6bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c0:	ed97 6a04 	vldr	s12, [r7, #16]
 800c6c4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800c814 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c6c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c6e0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6e2:	4b4a      	ldr	r3, [pc, #296]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6ee:	d121      	bne.n	800c734 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c6f0:	4b46      	ldr	r3, [pc, #280]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c6f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d017      	beq.n	800c72c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c6fc:	4b43      	ldr	r3, [pc, #268]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c700:	0a5b      	lsrs	r3, r3, #9
 800c702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800c70e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c712:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800c716:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c71a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c71e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c722:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e006      	b.n	800c73a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	e002      	b.n	800c73a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c73a:	4b34      	ldr	r3, [pc, #208]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c746:	d121      	bne.n	800c78c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c748:	4b30      	ldr	r3, [pc, #192]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c74c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d017      	beq.n	800c784 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c754:	4b2d      	ldr	r3, [pc, #180]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c758:	0c1b      	lsrs	r3, r3, #16
 800c75a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c75e:	ee07 3a90 	vmov	s15, r3
 800c762:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c76a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800c76e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	605a      	str	r2, [r3, #4]
 800c782:	e006      	b.n	800c792 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	605a      	str	r2, [r3, #4]
 800c78a:	e002      	b.n	800c792 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c792:	4b1e      	ldr	r3, [pc, #120]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c79a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c79e:	d121      	bne.n	800c7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d017      	beq.n	800c7dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c7ac:	4b17      	ldr	r3, [pc, #92]	@ (800c80c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c7ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7b0:	0e1b      	lsrs	r3, r3, #24
 800c7b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800c7be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800c7c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7d2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800c7da:	e010      	b.n	800c7fe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	609a      	str	r2, [r3, #8]
}
 800c7e2:	e00c      	b.n	800c7fe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	609a      	str	r2, [r3, #8]
}
 800c7ea:	e008      	b.n	800c7fe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	609a      	str	r2, [r3, #8]
}
 800c7fe:	bf00      	nop
 800c800:	372c      	adds	r7, #44	@ 0x2c
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	44020c00 	.word	0x44020c00
 800c810:	03d09000 	.word	0x03d09000
 800c814:	46000000 	.word	0x46000000
 800c818:	4a742400 	.word	0x4a742400
 800c81c:	4bbebc20 	.word	0x4bbebc20

0800c820 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b08f      	sub	sp, #60	@ 0x3c
 800c824:	af00      	add	r7, sp, #0
 800c826:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c82a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c82e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800c832:	4321      	orrs	r1, r4
 800c834:	d150      	bne.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c836:	4b26      	ldr	r3, [pc, #152]	@ (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c83c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c840:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c842:	4b23      	ldr	r3, [pc, #140]	@ (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c848:	f003 0302 	and.w	r3, r3, #2
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d108      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c856:	d104      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c85e:	f002 bb2a 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c862:	4b1b      	ldr	r3, [pc, #108]	@ (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c86c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c870:	d108      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800c872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c878:	d104      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800c87a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c87e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c880:	f002 bb19 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800c884:	4b12      	ldr	r3, [pc, #72]	@ (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c88c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c890:	d119      	bne.n	800c8c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c898:	d115      	bne.n	800c8c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800c89a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800c8a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8a6:	d30a      	bcc.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800c8a8:	4b09      	ldr	r3, [pc, #36]	@ (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c8aa:	69db      	ldr	r3, [r3, #28]
 800c8ac:	0a1b      	lsrs	r3, r3, #8
 800c8ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c8b2:	4a08      	ldr	r2, [pc, #32]	@ (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800c8ba:	f002 bafc 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800c8c2:	f002 baf8 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8ca:	f002 baf4 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c8ce:	bf00      	nop
 800c8d0:	44020c00 	.word	0x44020c00
 800c8d4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800c8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8dc:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800c8e0:	ea50 0104 	orrs.w	r1, r0, r4
 800c8e4:	f001 8275 	beq.w	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800c8e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8ec:	2801      	cmp	r0, #1
 800c8ee:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800c8f2:	f082 82dd 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c8f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8fa:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800c8fe:	ea50 0104 	orrs.w	r1, r0, r4
 800c902:	f001 816c 	beq.w	800dbde <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800c906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c90a:	2801      	cmp	r0, #1
 800c90c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800c910:	f082 82ce 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c914:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c918:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800c91c:	ea50 0104 	orrs.w	r1, r0, r4
 800c920:	f001 8602 	beq.w	800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800c924:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c928:	2801      	cmp	r0, #1
 800c92a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800c92e:	f082 82bf 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c932:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c936:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800c93a:	ea50 0104 	orrs.w	r1, r0, r4
 800c93e:	f001 854c 	beq.w	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800c942:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c946:	2801      	cmp	r0, #1
 800c948:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800c94c:	f082 82b0 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c950:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c954:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800c958:	ea50 0104 	orrs.w	r1, r0, r4
 800c95c:	f001 849e 	beq.w	800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800c960:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c964:	2801      	cmp	r0, #1
 800c966:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800c96a:	f082 82a1 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c96e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c972:	f1a1 0420 	sub.w	r4, r1, #32
 800c976:	ea50 0104 	orrs.w	r1, r0, r4
 800c97a:	f001 83e8 	beq.w	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800c97e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c982:	2801      	cmp	r0, #1
 800c984:	f171 0120 	sbcs.w	r1, r1, #32
 800c988:	f082 8292 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c98c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c990:	f1a1 0410 	sub.w	r4, r1, #16
 800c994:	ea50 0104 	orrs.w	r1, r0, r4
 800c998:	f002 8256 	beq.w	800ee48 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800c99c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9a0:	2801      	cmp	r0, #1
 800c9a2:	f171 0110 	sbcs.w	r1, r1, #16
 800c9a6:	f082 8283 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c9aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9ae:	f1a1 0408 	sub.w	r4, r1, #8
 800c9b2:	ea50 0104 	orrs.w	r1, r0, r4
 800c9b6:	f002 81cc 	beq.w	800ed52 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800c9ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9be:	2801      	cmp	r0, #1
 800c9c0:	f171 0108 	sbcs.w	r1, r1, #8
 800c9c4:	f082 8274 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c9c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9cc:	1f0c      	subs	r4, r1, #4
 800c9ce:	ea50 0104 	orrs.w	r1, r0, r4
 800c9d2:	f001 8648 	beq.w	800e666 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800c9d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9da:	2801      	cmp	r0, #1
 800c9dc:	f171 0104 	sbcs.w	r1, r1, #4
 800c9e0:	f082 8266 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c9e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9e8:	1e8c      	subs	r4, r1, #2
 800c9ea:	ea50 0104 	orrs.w	r1, r0, r4
 800c9ee:	f002 8143 	beq.w	800ec78 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800c9f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9f6:	2801      	cmp	r0, #1
 800c9f8:	f171 0102 	sbcs.w	r1, r1, #2
 800c9fc:	f082 8258 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca04:	1e4c      	subs	r4, r1, #1
 800ca06:	ea50 0104 	orrs.w	r1, r0, r4
 800ca0a:	f002 80ce 	beq.w	800ebaa <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800ca0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca12:	2801      	cmp	r0, #1
 800ca14:	f171 0101 	sbcs.w	r1, r1, #1
 800ca18:	f082 824a 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca20:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800ca24:	4321      	orrs	r1, r4
 800ca26:	f002 8059 	beq.w	800eadc <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800ca2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca2e:	4cd9      	ldr	r4, [pc, #868]	@ (800cd94 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800ca30:	42a0      	cmp	r0, r4
 800ca32:	f171 0100 	sbcs.w	r1, r1, #0
 800ca36:	f082 823b 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca3e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800ca42:	4321      	orrs	r1, r4
 800ca44:	f001 87d9 	beq.w	800e9fa <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800ca48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca4c:	4cd2      	ldr	r4, [pc, #840]	@ (800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800ca4e:	42a0      	cmp	r0, r4
 800ca50:	f171 0100 	sbcs.w	r1, r1, #0
 800ca54:	f082 822c 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca58:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca5c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800ca60:	4321      	orrs	r1, r4
 800ca62:	f001 8751 	beq.w	800e908 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800ca66:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca6a:	4ccc      	ldr	r4, [pc, #816]	@ (800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ca6c:	42a0      	cmp	r0, r4
 800ca6e:	f171 0100 	sbcs.w	r1, r1, #0
 800ca72:	f082 821d 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca76:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca7a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800ca7e:	4321      	orrs	r1, r4
 800ca80:	f001 869a 	beq.w	800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800ca84:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca88:	4cc5      	ldr	r4, [pc, #788]	@ (800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800ca8a:	42a0      	cmp	r0, r4
 800ca8c:	f171 0100 	sbcs.w	r1, r1, #0
 800ca90:	f082 820e 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca94:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca98:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800ca9c:	4321      	orrs	r1, r4
 800ca9e:	f001 8612 	beq.w	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800caa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caa6:	4cbf      	ldr	r4, [pc, #764]	@ (800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800caa8:	42a0      	cmp	r0, r4
 800caaa:	f171 0100 	sbcs.w	r1, r1, #0
 800caae:	f082 81ff 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cab6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800caba:	4321      	orrs	r1, r4
 800cabc:	f002 817e 	beq.w	800edbc <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800cac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cac4:	4cb8      	ldr	r4, [pc, #736]	@ (800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800cac6:	42a0      	cmp	r0, r4
 800cac8:	f171 0100 	sbcs.w	r1, r1, #0
 800cacc:	f082 81f0 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cad4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800cad8:	4321      	orrs	r1, r4
 800cada:	f000 829e 	beq.w	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800cade:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cae2:	4cb2      	ldr	r4, [pc, #712]	@ (800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800cae4:	42a0      	cmp	r0, r4
 800cae6:	f171 0100 	sbcs.w	r1, r1, #0
 800caea:	f082 81e1 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800caee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800caf2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800caf6:	4321      	orrs	r1, r4
 800caf8:	f000 826d 	beq.w	800cfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800cafc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb00:	4cab      	ldr	r4, [pc, #684]	@ (800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800cb02:	42a0      	cmp	r0, r4
 800cb04:	f171 0100 	sbcs.w	r1, r1, #0
 800cb08:	f082 81d2 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cb0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb10:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800cb14:	4321      	orrs	r1, r4
 800cb16:	f001 800d 	beq.w	800db34 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800cb1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb1e:	4ca5      	ldr	r4, [pc, #660]	@ (800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800cb20:	42a0      	cmp	r0, r4
 800cb22:	f171 0100 	sbcs.w	r1, r1, #0
 800cb26:	f082 81c3 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cb2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb2e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800cb32:	4321      	orrs	r1, r4
 800cb34:	f000 81d0 	beq.w	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800cb38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb3c:	4c9e      	ldr	r4, [pc, #632]	@ (800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800cb3e:	42a0      	cmp	r0, r4
 800cb40:	f171 0100 	sbcs.w	r1, r1, #0
 800cb44:	f082 81b4 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cb48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb4c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800cb50:	4321      	orrs	r1, r4
 800cb52:	f000 8142 	beq.w	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800cb56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb5a:	4c98      	ldr	r4, [pc, #608]	@ (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800cb5c:	42a0      	cmp	r0, r4
 800cb5e:	f171 0100 	sbcs.w	r1, r1, #0
 800cb62:	f082 81a5 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cb66:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb6a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800cb6e:	4321      	orrs	r1, r4
 800cb70:	f001 824e 	beq.w	800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800cb74:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb78:	4c91      	ldr	r4, [pc, #580]	@ (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800cb7a:	42a0      	cmp	r0, r4
 800cb7c:	f171 0100 	sbcs.w	r1, r1, #0
 800cb80:	f082 8196 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cb84:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb88:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800cb8c:	4321      	orrs	r1, r4
 800cb8e:	f001 8197 	beq.w	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800cb92:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cb96:	4c8b      	ldr	r4, [pc, #556]	@ (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800cb98:	42a0      	cmp	r0, r4
 800cb9a:	f171 0100 	sbcs.w	r1, r1, #0
 800cb9e:	f082 8187 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cba6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800cbaa:	4321      	orrs	r1, r4
 800cbac:	f001 8154 	beq.w	800de58 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800cbb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbb4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800cbb8:	f171 0100 	sbcs.w	r1, r1, #0
 800cbbc:	f082 8178 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cbc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbc4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800cbc8:	4321      	orrs	r1, r4
 800cbca:	f001 80b7 	beq.w	800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800cbce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbd2:	f248 0401 	movw	r4, #32769	@ 0x8001
 800cbd6:	42a0      	cmp	r0, r4
 800cbd8:	f171 0100 	sbcs.w	r1, r1, #0
 800cbdc:	f082 8168 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cbe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbe4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800cbe8:	4321      	orrs	r1, r4
 800cbea:	f001 8064 	beq.w	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800cbee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbf2:	f244 0401 	movw	r4, #16385	@ 0x4001
 800cbf6:	42a0      	cmp	r0, r4
 800cbf8:	f171 0100 	sbcs.w	r1, r1, #0
 800cbfc:	f082 8158 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cc00:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc04:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800cc08:	4321      	orrs	r1, r4
 800cc0a:	f001 8011 	beq.w	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800cc0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc12:	f242 0401 	movw	r4, #8193	@ 0x2001
 800cc16:	42a0      	cmp	r0, r4
 800cc18:	f171 0100 	sbcs.w	r1, r1, #0
 800cc1c:	f082 8148 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cc20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc24:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800cc28:	4321      	orrs	r1, r4
 800cc2a:	f000 871e 	beq.w	800da6a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800cc2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc32:	f241 0401 	movw	r4, #4097	@ 0x1001
 800cc36:	42a0      	cmp	r0, r4
 800cc38:	f171 0100 	sbcs.w	r1, r1, #0
 800cc3c:	f082 8138 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cc40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc44:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800cc48:	4321      	orrs	r1, r4
 800cc4a:	f000 86a8 	beq.w	800d99e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800cc4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc52:	f640 0401 	movw	r4, #2049	@ 0x801
 800cc56:	42a0      	cmp	r0, r4
 800cc58:	f171 0100 	sbcs.w	r1, r1, #0
 800cc5c:	f082 8128 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cc60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc64:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800cc68:	4321      	orrs	r1, r4
 800cc6a:	f000 8632 	beq.w	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800cc6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc72:	f240 4401 	movw	r4, #1025	@ 0x401
 800cc76:	42a0      	cmp	r0, r4
 800cc78:	f171 0100 	sbcs.w	r1, r1, #0
 800cc7c:	f082 8118 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cc80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc84:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800cc88:	4321      	orrs	r1, r4
 800cc8a:	f000 85b0 	beq.w	800d7ee <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800cc8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc92:	f240 2401 	movw	r4, #513	@ 0x201
 800cc96:	42a0      	cmp	r0, r4
 800cc98:	f171 0100 	sbcs.w	r1, r1, #0
 800cc9c:	f082 8108 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cca4:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800cca8:	4321      	orrs	r1, r4
 800ccaa:	f000 8535 	beq.w	800d718 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800ccae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccb2:	f240 1401 	movw	r4, #257	@ 0x101
 800ccb6:	42a0      	cmp	r0, r4
 800ccb8:	f171 0100 	sbcs.w	r1, r1, #0
 800ccbc:	f082 80f8 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ccc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccc4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800ccc8:	4321      	orrs	r1, r4
 800ccca:	f000 84ba 	beq.w	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800ccce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccd2:	2881      	cmp	r0, #129	@ 0x81
 800ccd4:	f171 0100 	sbcs.w	r1, r1, #0
 800ccd8:	f082 80ea 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ccdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cce0:	2821      	cmp	r0, #33	@ 0x21
 800cce2:	f171 0100 	sbcs.w	r1, r1, #0
 800cce6:	d26f      	bcs.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccec:	4301      	orrs	r1, r0
 800ccee:	f002 80df 	beq.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ccf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ccf6:	1e42      	subs	r2, r0, #1
 800ccf8:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ccfc:	2a20      	cmp	r2, #32
 800ccfe:	f173 0100 	sbcs.w	r1, r3, #0
 800cd02:	f082 80d5 	bcs.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cd06:	2a1f      	cmp	r2, #31
 800cd08:	f202 80d2 	bhi.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cd0c:	a101      	add	r1, pc, #4	@ (adr r1, 800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800cd0e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd12:	bf00      	nop
 800cd14:	0800d075 	.word	0x0800d075
 800cd18:	0800d141 	.word	0x0800d141
 800cd1c:	0800eeb1 	.word	0x0800eeb1
 800cd20:	0800d201 	.word	0x0800d201
 800cd24:	0800eeb1 	.word	0x0800eeb1
 800cd28:	0800eeb1 	.word	0x0800eeb1
 800cd2c:	0800eeb1 	.word	0x0800eeb1
 800cd30:	0800d2d1 	.word	0x0800d2d1
 800cd34:	0800eeb1 	.word	0x0800eeb1
 800cd38:	0800eeb1 	.word	0x0800eeb1
 800cd3c:	0800eeb1 	.word	0x0800eeb1
 800cd40:	0800eeb1 	.word	0x0800eeb1
 800cd44:	0800eeb1 	.word	0x0800eeb1
 800cd48:	0800eeb1 	.word	0x0800eeb1
 800cd4c:	0800eeb1 	.word	0x0800eeb1
 800cd50:	0800d3b3 	.word	0x0800d3b3
 800cd54:	0800eeb1 	.word	0x0800eeb1
 800cd58:	0800eeb1 	.word	0x0800eeb1
 800cd5c:	0800eeb1 	.word	0x0800eeb1
 800cd60:	0800eeb1 	.word	0x0800eeb1
 800cd64:	0800eeb1 	.word	0x0800eeb1
 800cd68:	0800eeb1 	.word	0x0800eeb1
 800cd6c:	0800eeb1 	.word	0x0800eeb1
 800cd70:	0800eeb1 	.word	0x0800eeb1
 800cd74:	0800eeb1 	.word	0x0800eeb1
 800cd78:	0800eeb1 	.word	0x0800eeb1
 800cd7c:	0800eeb1 	.word	0x0800eeb1
 800cd80:	0800eeb1 	.word	0x0800eeb1
 800cd84:	0800eeb1 	.word	0x0800eeb1
 800cd88:	0800eeb1 	.word	0x0800eeb1
 800cd8c:	0800eeb1 	.word	0x0800eeb1
 800cd90:	0800d489 	.word	0x0800d489
 800cd94:	80000001 	.word	0x80000001
 800cd98:	40000001 	.word	0x40000001
 800cd9c:	20000001 	.word	0x20000001
 800cda0:	10000001 	.word	0x10000001
 800cda4:	08000001 	.word	0x08000001
 800cda8:	04000001 	.word	0x04000001
 800cdac:	00800001 	.word	0x00800001
 800cdb0:	00400001 	.word	0x00400001
 800cdb4:	00200001 	.word	0x00200001
 800cdb8:	00100001 	.word	0x00100001
 800cdbc:	00080001 	.word	0x00080001
 800cdc0:	00040001 	.word	0x00040001
 800cdc4:	00020001 	.word	0x00020001
 800cdc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdcc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	f000 83c4 	beq.w	800d55e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800cdd6:	f002 b86b 	b.w	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800cdda:	4ba1      	ldr	r3, [pc, #644]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cde0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cde4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800cde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cdec:	d036      	beq.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cdf4:	d86b      	bhi.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cdfc:	d02b      	beq.n	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce04:	d863      	bhi.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800ce06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce0c:	d01b      	beq.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce14:	d85b      	bhi.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d004      	beq.n	800ce26 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce22:	d008      	beq.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800ce24:	e053      	b.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce26:	f107 0320 	add.w	r3, r7, #32
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff f8b4 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce34:	e04e      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce36:	f107 0314 	add.w	r3, r7, #20
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff fa18 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce44:	e046      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce46:	f107 0308 	add.w	r3, r7, #8
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff fb7c 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce54:	e03e      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ce56:	4b83      	ldr	r3, [pc, #524]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ce58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce5a:	e03b      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce5c:	4b80      	ldr	r3, [pc, #512]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce62:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ce66:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce68:	4b7d      	ldr	r3, [pc, #500]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 0302 	and.w	r3, r3, #2
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d10c      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800ce74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d109      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ce7a:	4b79      	ldr	r3, [pc, #484]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	08db      	lsrs	r3, r3, #3
 800ce80:	f003 0303 	and.w	r3, r3, #3
 800ce84:	4a78      	ldr	r2, [pc, #480]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ce86:	fa22 f303 	lsr.w	r3, r2, r3
 800ce8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce8c:	e01e      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce8e:	4b74      	ldr	r3, [pc, #464]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce9a:	d106      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ce9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cea2:	d102      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cea4:	4b71      	ldr	r3, [pc, #452]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cea8:	e010      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ceaa:	4b6d      	ldr	r3, [pc, #436]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceb6:	d106      	bne.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800ceb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cebe:	d102      	bne.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cec0:	4b6b      	ldr	r3, [pc, #428]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800cec2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec4:	e002      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800cec6:	2300      	movs	r3, #0
 800cec8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ceca:	e003      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800cecc:	e002      	b.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800cece:	2300      	movs	r3, #0
 800ced0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ced2:	bf00      	nop
          }
        }
        break;
 800ced4:	f001 bfef 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ced8:	4b61      	ldr	r3, [pc, #388]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ceda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cede:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800cee2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800cee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ceea:	d036      	beq.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cef2:	d86b      	bhi.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800cefa:	d02b      	beq.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800cefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800cf02:	d863      	bhi.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800cf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf0a:	d01b      	beq.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf12:	d85b      	bhi.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d004      	beq.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cf20:	d008      	beq.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800cf22:	e053      	b.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf24:	f107 0320 	add.w	r3, r7, #32
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff f835 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cf32:	e04e      	b.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf34:	f107 0314 	add.w	r3, r7, #20
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7ff f999 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cf42:	e046      	b.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf44:	f107 0308 	add.w	r3, r7, #8
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7ff fafd 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cf52:	e03e      	b.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cf54:	4b43      	ldr	r3, [pc, #268]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cf56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cf58:	e03b      	b.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf5a:	4b41      	ldr	r3, [pc, #260]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cf60:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800cf64:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf66:	4b3e      	ldr	r3, [pc, #248]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0302 	and.w	r3, r3, #2
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d10c      	bne.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800cf72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d109      	bne.n	800cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cf78:	4b39      	ldr	r3, [pc, #228]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	08db      	lsrs	r3, r3, #3
 800cf7e:	f003 0303 	and.w	r3, r3, #3
 800cf82:	4a39      	ldr	r2, [pc, #228]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800cf84:	fa22 f303 	lsr.w	r3, r2, r3
 800cf88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf8a:	e01e      	b.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf8c:	4b34      	ldr	r3, [pc, #208]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf98:	d106      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cf9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfa0:	d102      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cfa2:	4b32      	ldr	r3, [pc, #200]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800cfa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfa6:	e010      	b.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfa8:	4b2d      	ldr	r3, [pc, #180]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfb4:	d106      	bne.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800cfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfbc:	d102      	bne.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cfbe:	4b2c      	ldr	r3, [pc, #176]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800cfc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfc2:	e002      	b.n	800cfca <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800cfc8:	e003      	b.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800cfca:	e002      	b.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cfd0:	bf00      	nop
          }
        }
        break;
 800cfd2:	f001 bf70 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800cfd6:	4b22      	ldr	r3, [pc, #136]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cfd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cfdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfe0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d108      	bne.n	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfe8:	f107 0320 	add.w	r3, r7, #32
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe ffd3 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cff6:	f001 bf5e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800cffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffc:	2b40      	cmp	r3, #64	@ 0x40
 800cffe:	d108      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d000:	f107 0314 	add.w	r3, r7, #20
 800d004:	4618      	mov	r0, r3
 800d006:	f7ff f933 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d00e:	f001 bf52 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800d012:	2300      	movs	r3, #0
 800d014:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d016:	f001 bf4e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800d01a:	4b11      	ldr	r3, [pc, #68]	@ (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d01c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d024:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800d026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d108      	bne.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d02c:	f107 0320 	add.w	r3, r7, #32
 800d030:	4618      	mov	r0, r3
 800d032:	f7fe ffb1 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d03a:	f001 bf3c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800d03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d040:	2b80      	cmp	r3, #128	@ 0x80
 800d042:	d108      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d044:	f107 0314 	add.w	r3, r7, #20
 800d048:	4618      	mov	r0, r3
 800d04a:	f7ff f911 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d052:	f001 bf30 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800d056:	2300      	movs	r3, #0
 800d058:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d05a:	f001 bf2c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d05e:	bf00      	nop
 800d060:	44020c00 	.word	0x44020c00
 800d064:	00bb8000 	.word	0x00bb8000
 800d068:	03d09000 	.word	0x03d09000
 800d06c:	003d0900 	.word	0x003d0900
 800d070:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d074:	4b9d      	ldr	r3, [pc, #628]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d07a:	f003 0307 	and.w	r3, r3, #7
 800d07e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d082:	2b00      	cmp	r3, #0
 800d084:	d104      	bne.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d086:	f7fc ffd1 	bl	800a02c <HAL_RCC_GetPCLK2Freq>
 800d08a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800d08c:	f001 bf13 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800d090:	4b96      	ldr	r3, [pc, #600]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d09c:	d10a      	bne.n	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d107      	bne.n	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0a4:	f107 0314 	add.w	r3, r7, #20
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff f8e1 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b2:	e043      	b.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800d0b4:	4b8d      	ldr	r3, [pc, #564]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0c0:	d10a      	bne.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d107      	bne.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0c8:	f107 0308 	add.w	r3, r7, #8
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fa3b 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0d6:	e031      	b.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d0d8:	4b84      	ldr	r3, [pc, #528]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0302 	and.w	r3, r3, #2
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d10c      	bne.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	d109      	bne.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d0ea:	4b80      	ldr	r3, [pc, #512]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	08db      	lsrs	r3, r3, #3
 800d0f0:	f003 0303 	and.w	r3, r3, #3
 800d0f4:	4a7e      	ldr	r2, [pc, #504]	@ (800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800d0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fc:	e01e      	b.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800d0fe:	4b7b      	ldr	r3, [pc, #492]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d10a:	d105      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800d10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10e:	2b04      	cmp	r3, #4
 800d110:	d102      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800d112:	4b78      	ldr	r3, [pc, #480]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d114:	637b      	str	r3, [r7, #52]	@ 0x34
 800d116:	e011      	b.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d118:	4b74      	ldr	r3, [pc, #464]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d11a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d11e:	f003 0302 	and.w	r3, r3, #2
 800d122:	2b02      	cmp	r3, #2
 800d124:	d106      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800d126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d128:	2b05      	cmp	r3, #5
 800d12a:	d103      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800d12c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d130:	637b      	str	r3, [r7, #52]	@ 0x34
 800d132:	e003      	b.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800d134:	2300      	movs	r3, #0
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d138:	f001 bebd 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d13c:	f001 bebb 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d140:	4b6a      	ldr	r3, [pc, #424]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d14a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d104      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d152:	f7fc ff55 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d156:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800d158:	f001 bead 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800d15c:	4b63      	ldr	r3, [pc, #396]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d168:	d10a      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	2b08      	cmp	r3, #8
 800d16e:	d107      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d170:	f107 0314 	add.w	r3, r7, #20
 800d174:	4618      	mov	r0, r3
 800d176:	f7ff f87b 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d17e:	e03d      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800d180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d182:	2b10      	cmp	r3, #16
 800d184:	d108      	bne.n	800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d186:	f107 0308 	add.w	r3, r7, #8
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7ff f9dc 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d194:	f001 be8f 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d198:	4b54      	ldr	r3, [pc, #336]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d10c      	bne.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a6:	2b18      	cmp	r3, #24
 800d1a8:	d109      	bne.n	800d1be <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d1aa:	4b50      	ldr	r3, [pc, #320]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	08db      	lsrs	r3, r3, #3
 800d1b0:	f003 0303 	and.w	r3, r3, #3
 800d1b4:	4a4e      	ldr	r2, [pc, #312]	@ (800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800d1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1bc:	e01e      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800d1be:	4b4b      	ldr	r3, [pc, #300]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d1c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1ca:	d105      	bne.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ce:	2b20      	cmp	r3, #32
 800d1d0:	d102      	bne.n	800d1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800d1d2:	4b48      	ldr	r3, [pc, #288]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d6:	e011      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d1d8:	4b44      	ldr	r3, [pc, #272]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d1da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	d106      	bne.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	2b28      	cmp	r3, #40	@ 0x28
 800d1ea:	d103      	bne.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800d1ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1f2:	e003      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1f8:	f001 be5d 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d1fc:	f001 be5b 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d200:	4b3a      	ldr	r3, [pc, #232]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d206:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800d20a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d104      	bne.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d212:	f7fc fef5 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d216:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800d218:	f001 be4d 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800d21c:	4b33      	ldr	r3, [pc, #204]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d228:	d10a      	bne.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800d22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22c:	2b40      	cmp	r3, #64	@ 0x40
 800d22e:	d107      	bne.n	800d240 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d230:	f107 0314 	add.w	r3, r7, #20
 800d234:	4618      	mov	r0, r3
 800d236:	f7ff f81b 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d23e:	e045      	b.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800d240:	4b2a      	ldr	r3, [pc, #168]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d24c:	d10a      	bne.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	2b80      	cmp	r3, #128	@ 0x80
 800d252:	d107      	bne.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d254:	f107 0308 	add.w	r3, r7, #8
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff f975 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	637b      	str	r3, [r7, #52]	@ 0x34
 800d262:	e033      	b.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d264:	4b21      	ldr	r3, [pc, #132]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 0302 	and.w	r3, r3, #2
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	d10c      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800d270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d272:	2bc0      	cmp	r3, #192	@ 0xc0
 800d274:	d109      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d276:	4b1d      	ldr	r3, [pc, #116]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	08db      	lsrs	r3, r3, #3
 800d27c:	f003 0303 	and.w	r3, r3, #3
 800d280:	4a1b      	ldr	r2, [pc, #108]	@ (800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800d282:	fa22 f303 	lsr.w	r3, r2, r3
 800d286:	637b      	str	r3, [r7, #52]	@ 0x34
 800d288:	e020      	b.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800d28a:	4b18      	ldr	r3, [pc, #96]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d292:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d296:	d106      	bne.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800d298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d29e:	d102      	bne.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800d2a0:	4b14      	ldr	r3, [pc, #80]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2a4:	e012      	b.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d2a6:	4b11      	ldr	r3, [pc, #68]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d2a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d2ac:	f003 0302 	and.w	r3, r3, #2
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d107      	bne.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800d2ba:	d103      	bne.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800d2bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c2:	e003      	b.n	800d2cc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2c8:	f001 bdf5 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d2cc:	f001 bdf3 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d2d0:	4b06      	ldr	r3, [pc, #24]	@ (800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d2d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d2d6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800d2da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d10a      	bne.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d2e2:	f7fc fe8d 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d2e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800d2e8:	f001 bde5 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d2ec:	44020c00 	.word	0x44020c00
 800d2f0:	03d09000 	.word	0x03d09000
 800d2f4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800d2f8:	4ba0      	ldr	r3, [pc, #640]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d304:	d10b      	bne.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800d306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d30c:	d107      	bne.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d30e:	f107 0314 	add.w	r3, r7, #20
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe ffac 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d31c:	e047      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800d31e:	4b97      	ldr	r3, [pc, #604]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d32a:	d10b      	bne.n	800d344 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d332:	d107      	bne.n	800d344 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d334:	f107 0308 	add.w	r3, r7, #8
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff f905 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	637b      	str	r3, [r7, #52]	@ 0x34
 800d342:	e034      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d344:	4b8d      	ldr	r3, [pc, #564]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0302 	and.w	r3, r3, #2
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d10d      	bne.n	800d36c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800d350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d352:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d356:	d109      	bne.n	800d36c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d358:	4b88      	ldr	r3, [pc, #544]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	08db      	lsrs	r3, r3, #3
 800d35e:	f003 0303 	and.w	r3, r3, #3
 800d362:	4a87      	ldr	r2, [pc, #540]	@ (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d364:	fa22 f303 	lsr.w	r3, r2, r3
 800d368:	637b      	str	r3, [r7, #52]	@ 0x34
 800d36a:	e020      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800d36c:	4b83      	ldr	r3, [pc, #524]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d378:	d106      	bne.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800d37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d380:	d102      	bne.n	800d388 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800d382:	4b80      	ldr	r3, [pc, #512]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d384:	637b      	str	r3, [r7, #52]	@ 0x34
 800d386:	e012      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d388:	4b7c      	ldr	r3, [pc, #496]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d38a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d38e:	f003 0302 	and.w	r3, r3, #2
 800d392:	2b02      	cmp	r3, #2
 800d394:	d107      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800d39c:	d103      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800d39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a4:	e003      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3aa:	f001 bd84 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d3ae:	f001 bd82 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d3b2:	4b72      	ldr	r3, [pc, #456]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d3b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d3b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d3bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d3c4:	f7fc fe1c 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d3c8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800d3ca:	f001 bd74 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800d3ce:	4b6b      	ldr	r3, [pc, #428]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3da:	d10b      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3e2:	d107      	bne.n	800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3e4:	f107 0314 	add.w	r3, r7, #20
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe ff41 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3f2:	e047      	b.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800d3f4:	4b61      	ldr	r3, [pc, #388]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d400:	d10b      	bne.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d408:	d107      	bne.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d40a:	f107 0308 	add.w	r3, r7, #8
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff f89a 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	637b      	str	r3, [r7, #52]	@ 0x34
 800d418:	e034      	b.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d41a:	4b58      	ldr	r3, [pc, #352]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 0302 	and.w	r3, r3, #2
 800d422:	2b02      	cmp	r3, #2
 800d424:	d10d      	bne.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800d426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d428:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d42c:	d109      	bne.n	800d442 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d42e:	4b53      	ldr	r3, [pc, #332]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	08db      	lsrs	r3, r3, #3
 800d434:	f003 0303 	and.w	r3, r3, #3
 800d438:	4a51      	ldr	r2, [pc, #324]	@ (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d43a:	fa22 f303 	lsr.w	r3, r2, r3
 800d43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d440:	e020      	b.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800d442:	4b4e      	ldr	r3, [pc, #312]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d44a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d44e:	d106      	bne.n	800d45e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d456:	d102      	bne.n	800d45e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800d458:	4b4a      	ldr	r3, [pc, #296]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d45a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d45c:	e012      	b.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d45e:	4b47      	ldr	r3, [pc, #284]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d464:	f003 0302 	and.w	r3, r3, #2
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d107      	bne.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d46e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d472:	d103      	bne.n	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800d474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d478:	637b      	str	r3, [r7, #52]	@ 0x34
 800d47a:	e003      	b.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800d47c:	2300      	movs	r3, #0
 800d47e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d480:	f001 bd19 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d484:	f001 bd17 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d488:	4b3c      	ldr	r3, [pc, #240]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d48a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d48e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800d492:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d496:	2b00      	cmp	r3, #0
 800d498:	d104      	bne.n	800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d49a:	f7fc fdb1 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d49e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800d4a0:	f001 bd09 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800d4a4:	4b35      	ldr	r3, [pc, #212]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4b0:	d10b      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4b8:	d107      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4ba:	f107 0314 	add.w	r3, r7, #20
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fed6 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4c8:	e047      	b.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800d4ca:	4b2c      	ldr	r3, [pc, #176]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4d6:	d10b      	bne.n	800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4de:	d107      	bne.n	800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4e0:	f107 0308 	add.w	r3, r7, #8
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff f82f 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4ee:	e034      	b.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d4f0:	4b22      	ldr	r3, [pc, #136]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f003 0302 	and.w	r3, r3, #2
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d10d      	bne.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800d4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800d502:	d109      	bne.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d504:	4b1d      	ldr	r3, [pc, #116]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	08db      	lsrs	r3, r3, #3
 800d50a:	f003 0303 	and.w	r3, r3, #3
 800d50e:	4a1c      	ldr	r2, [pc, #112]	@ (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d510:	fa22 f303 	lsr.w	r3, r2, r3
 800d514:	637b      	str	r3, [r7, #52]	@ 0x34
 800d516:	e020      	b.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800d518:	4b18      	ldr	r3, [pc, #96]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d524:	d106      	bne.n	800d534 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d52c:	d102      	bne.n	800d534 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800d52e:	4b15      	ldr	r3, [pc, #84]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d530:	637b      	str	r3, [r7, #52]	@ 0x34
 800d532:	e012      	b.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d534:	4b11      	ldr	r3, [pc, #68]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d107      	bne.n	800d552 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800d542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d544:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800d548:	d103      	bne.n	800d552 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800d54a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d54e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d550:	e003      	b.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800d552:	2300      	movs	r3, #0
 800d554:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d556:	f001 bcae 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d55a:	f001 bcac 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800d55e:	4b07      	ldr	r3, [pc, #28]	@ (800d57c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d564:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800d568:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800d56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10b      	bne.n	800d588 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d570:	f7fc fd46 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d574:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800d576:	f001 bc9e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d57a:	bf00      	nop
 800d57c:	44020c00 	.word	0x44020c00
 800d580:	03d09000 	.word	0x03d09000
 800d584:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800d588:	4ba0      	ldr	r3, [pc, #640]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d594:	d10b      	bne.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d59c:	d107      	bne.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d59e:	f107 0314 	add.w	r3, r7, #20
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fe fe64 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5ac:	e047      	b.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800d5ae:	4b97      	ldr	r3, [pc, #604]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5ba:	d10b      	bne.n	800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d5c2:	d107      	bne.n	800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5c4:	f107 0308 	add.w	r3, r7, #8
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe ffbd 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d2:	e034      	b.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800d5d4:	4b8d      	ldr	r3, [pc, #564]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d10d      	bne.n	800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d5e6:	d109      	bne.n	800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d5e8:	4b88      	ldr	r3, [pc, #544]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	08db      	lsrs	r3, r3, #3
 800d5ee:	f003 0303 	and.w	r3, r3, #3
 800d5f2:	4a87      	ldr	r2, [pc, #540]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800d5f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5fa:	e020      	b.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800d5fc:	4b83      	ldr	r3, [pc, #524]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d608:	d106      	bne.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d610:	d102      	bne.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800d612:	4b80      	ldr	r3, [pc, #512]	@ (800d814 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800d614:	637b      	str	r3, [r7, #52]	@ 0x34
 800d616:	e012      	b.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800d618:	4b7c      	ldr	r3, [pc, #496]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d61a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d61e:	f003 0302 	and.w	r3, r3, #2
 800d622:	2b02      	cmp	r3, #2
 800d624:	d107      	bne.n	800d636 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800d626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d628:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800d62c:	d103      	bne.n	800d636 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800d62e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d632:	637b      	str	r3, [r7, #52]	@ 0x34
 800d634:	e003      	b.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800d636:	2300      	movs	r3, #0
 800d638:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d63a:	f001 bc3c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d63e:	f001 bc3a 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800d642:	4b72      	ldr	r3, [pc, #456]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d648:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d64c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800d64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d650:	2b00      	cmp	r3, #0
 800d652:	d104      	bne.n	800d65e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d654:	f7fc fcd4 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d658:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800d65a:	f001 bc2c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800d65e:	4b6b      	ldr	r3, [pc, #428]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d66a:	d10b      	bne.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d672:	d107      	bne.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d674:	f107 0314 	add.w	r3, r7, #20
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe fdf9 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	637b      	str	r3, [r7, #52]	@ 0x34
 800d682:	e047      	b.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800d684:	4b61      	ldr	r3, [pc, #388]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d68c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d690:	d10b      	bne.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800d692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d698:	d107      	bne.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d69a:	f107 0308 	add.w	r3, r7, #8
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe ff52 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6a8:	e034      	b.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800d6aa:	4b58      	ldr	r3, [pc, #352]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 0302 	and.w	r3, r3, #2
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d10d      	bne.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d6bc:	d109      	bne.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d6be:	4b53      	ldr	r3, [pc, #332]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	08db      	lsrs	r3, r3, #3
 800d6c4:	f003 0303 	and.w	r3, r3, #3
 800d6c8:	4a51      	ldr	r2, [pc, #324]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800d6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6d0:	e020      	b.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800d6d2:	4b4e      	ldr	r3, [pc, #312]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6de:	d106      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d6e6:	d102      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800d6e8:	4b4a      	ldr	r3, [pc, #296]	@ (800d814 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800d6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ec:	e012      	b.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800d6ee:	4b47      	ldr	r3, [pc, #284]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d6f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6f4:	f003 0302 	and.w	r3, r3, #2
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d107      	bne.n	800d70c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d702:	d103      	bne.n	800d70c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800d704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d708:	637b      	str	r3, [r7, #52]	@ 0x34
 800d70a:	e003      	b.n	800d714 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d710:	f001 bbd1 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d714:	f001 bbcf 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800d718:	4b3c      	ldr	r3, [pc, #240]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d71a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d71e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d722:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800d724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d726:	2b00      	cmp	r3, #0
 800d728:	d104      	bne.n	800d734 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d72a:	f7fc fc69 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d72e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800d730:	f001 bbc1 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800d734:	4b35      	ldr	r3, [pc, #212]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d73c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d740:	d10b      	bne.n	800d75a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800d742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d748:	d107      	bne.n	800d75a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d74a:	f107 0314 	add.w	r3, r7, #20
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fe fd8e 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	637b      	str	r3, [r7, #52]	@ 0x34
 800d758:	e047      	b.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800d75a:	4b2c      	ldr	r3, [pc, #176]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d766:	d10b      	bne.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d76e:	d107      	bne.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d770:	f107 0308 	add.w	r3, r7, #8
 800d774:	4618      	mov	r0, r3
 800d776:	f7fe fee7 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d77e:	e034      	b.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800d780:	4b22      	ldr	r3, [pc, #136]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f003 0302 	and.w	r3, r3, #2
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d10d      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800d78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d792:	d109      	bne.n	800d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d794:	4b1d      	ldr	r3, [pc, #116]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	08db      	lsrs	r3, r3, #3
 800d79a:	f003 0303 	and.w	r3, r3, #3
 800d79e:	4a1c      	ldr	r2, [pc, #112]	@ (800d810 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800d7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d7a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7a6:	e020      	b.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800d7a8:	4b18      	ldr	r3, [pc, #96]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d7b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7b4:	d106      	bne.n	800d7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d7bc:	d102      	bne.n	800d7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800d7be:	4b15      	ldr	r3, [pc, #84]	@ (800d814 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800d7c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7c2:	e012      	b.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800d7c4:	4b11      	ldr	r3, [pc, #68]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d7c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7ca:	f003 0302 	and.w	r3, r3, #2
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d107      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d7d8:	d103      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800d7da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7e0:	e003      	b.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7e6:	f001 bb66 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d7ea:	f001 bb64 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800d7ee:	4b07      	ldr	r3, [pc, #28]	@ (800d80c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d7f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d7f4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800d7f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10b      	bne.n	800d818 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d800:	f7fc fbfe 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d804:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800d806:	f001 bb56 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d80a:	bf00      	nop
 800d80c:	44020c00 	.word	0x44020c00
 800d810:	03d09000 	.word	0x03d09000
 800d814:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800d818:	4ba1      	ldr	r3, [pc, #644]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d824:	d10b      	bne.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d82c:	d107      	bne.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d82e:	f107 0314 	add.w	r3, r7, #20
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fd1c 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d83c:	e047      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800d83e:	4b98      	ldr	r3, [pc, #608]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d84a:	d10b      	bne.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800d84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d852:	d107      	bne.n	800d864 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d854:	f107 0308 	add.w	r3, r7, #8
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fe fe75 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	637b      	str	r3, [r7, #52]	@ 0x34
 800d862:	e034      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800d864:	4b8e      	ldr	r3, [pc, #568]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d10d      	bne.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d876:	d109      	bne.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d878:	4b89      	ldr	r3, [pc, #548]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	08db      	lsrs	r3, r3, #3
 800d87e:	f003 0303 	and.w	r3, r3, #3
 800d882:	4a88      	ldr	r2, [pc, #544]	@ (800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800d884:	fa22 f303 	lsr.w	r3, r2, r3
 800d888:	637b      	str	r3, [r7, #52]	@ 0x34
 800d88a:	e020      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800d88c:	4b84      	ldr	r3, [pc, #528]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d898:	d106      	bne.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8a0:	d102      	bne.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800d8a2:	4b81      	ldr	r3, [pc, #516]	@ (800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800d8a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8a6:	e012      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800d8a8:	4b7d      	ldr	r3, [pc, #500]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d8aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d8ae:	f003 0302 	and.w	r3, r3, #2
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d107      	bne.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800d8bc:	d103      	bne.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800d8be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8c4:	e003      	b.n	800d8ce <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8ca:	f001 baf4 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d8ce:	f001 baf2 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800d8d2:	4b73      	ldr	r3, [pc, #460]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d8d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d8d8:	f003 0307 	and.w	r3, r3, #7
 800d8dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800d8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d104      	bne.n	800d8ee <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d8e4:	f7fc fb8c 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d8e8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800d8ea:	f001 bae4 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800d8ee:	4b6c      	ldr	r3, [pc, #432]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8fa:	d10a      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fe:	2b01      	cmp	r3, #1
 800d900:	d107      	bne.n	800d912 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d902:	f107 0314 	add.w	r3, r7, #20
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fcb2 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d910:	e043      	b.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800d912:	4b63      	ldr	r3, [pc, #396]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d91a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d91e:	d10a      	bne.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800d920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d922:	2b02      	cmp	r3, #2
 800d924:	d107      	bne.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d926:	f107 0308 	add.w	r3, r7, #8
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fe0c 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	637b      	str	r3, [r7, #52]	@ 0x34
 800d934:	e031      	b.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800d936:	4b5a      	ldr	r3, [pc, #360]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f003 0302 	and.w	r3, r3, #2
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d10c      	bne.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	2b03      	cmp	r3, #3
 800d946:	d109      	bne.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d948:	4b55      	ldr	r3, [pc, #340]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	08db      	lsrs	r3, r3, #3
 800d94e:	f003 0303 	and.w	r3, r3, #3
 800d952:	4a54      	ldr	r2, [pc, #336]	@ (800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800d954:	fa22 f303 	lsr.w	r3, r2, r3
 800d958:	637b      	str	r3, [r7, #52]	@ 0x34
 800d95a:	e01e      	b.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800d95c:	4b50      	ldr	r3, [pc, #320]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d968:	d105      	bne.n	800d976 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800d96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d102      	bne.n	800d976 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800d970:	4b4d      	ldr	r3, [pc, #308]	@ (800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800d972:	637b      	str	r3, [r7, #52]	@ 0x34
 800d974:	e011      	b.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800d976:	4b4a      	ldr	r3, [pc, #296]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d97c:	f003 0302 	and.w	r3, r3, #2
 800d980:	2b02      	cmp	r3, #2
 800d982:	d106      	bne.n	800d992 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800d984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d986:	2b05      	cmp	r3, #5
 800d988:	d103      	bne.n	800d992 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800d98a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d98e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d990:	e003      	b.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d996:	f001 ba8e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d99a:	f001 ba8c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800d99e:	4b40      	ldr	r3, [pc, #256]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d9a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d9a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d9a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d104      	bne.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d9b0:	f7fc fb26 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800d9b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800d9b6:	f001 ba7e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800d9ba:	4b39      	ldr	r3, [pc, #228]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9c6:	d10a      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ca:	2b10      	cmp	r3, #16
 800d9cc:	d107      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9ce:	f107 0314 	add.w	r3, r7, #20
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fe fc4c 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9dc:	e043      	b.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800d9de:	4b30      	ldr	r3, [pc, #192]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d9e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9ea:	d10a      	bne.n	800da02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ee:	2b20      	cmp	r3, #32
 800d9f0:	d107      	bne.n	800da02 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9f2:	f107 0308 	add.w	r3, r7, #8
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe fda6 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800da00:	e031      	b.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800da02:	4b27      	ldr	r3, [pc, #156]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d10c      	bne.n	800da28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	2b30      	cmp	r3, #48	@ 0x30
 800da12:	d109      	bne.n	800da28 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800da14:	4b22      	ldr	r3, [pc, #136]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	08db      	lsrs	r3, r3, #3
 800da1a:	f003 0303 	and.w	r3, r3, #3
 800da1e:	4a21      	ldr	r2, [pc, #132]	@ (800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800da20:	fa22 f303 	lsr.w	r3, r2, r3
 800da24:	637b      	str	r3, [r7, #52]	@ 0x34
 800da26:	e01e      	b.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800da28:	4b1d      	ldr	r3, [pc, #116]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da34:	d105      	bne.n	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800da36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da38:	2b40      	cmp	r3, #64	@ 0x40
 800da3a:	d102      	bne.n	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800da3c:	4b1a      	ldr	r3, [pc, #104]	@ (800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800da3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da40:	e011      	b.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800da42:	4b17      	ldr	r3, [pc, #92]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800da44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da48:	f003 0302 	and.w	r3, r3, #2
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d106      	bne.n	800da5e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800da50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da52:	2b50      	cmp	r3, #80	@ 0x50
 800da54:	d103      	bne.n	800da5e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800da56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da5c:	e003      	b.n	800da66 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800da5e:	2300      	movs	r3, #0
 800da60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da62:	f001 ba28 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800da66:	f001 ba26 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800da6a:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800da6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800da70:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800da74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800da76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d104      	bne.n	800da86 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800da7c:	f7fc faec 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800da80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800da82:	f001 ba18 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da8c:	d10e      	bne.n	800daac <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da8e:	f107 0314 	add.w	r3, r7, #20
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe fbec 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da9c:	f001 ba0b 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800daa0:	44020c00 	.word	0x44020c00
 800daa4:	03d09000 	.word	0x03d09000
 800daa8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800daac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dab2:	d108      	bne.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dab4:	f107 0308 	add.w	r3, r7, #8
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fe fd45 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dac2:	f001 b9f8 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800dac6:	4ba4      	ldr	r3, [pc, #656]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0302 	and.w	r3, r3, #2
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d10d      	bne.n	800daee <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dad8:	d109      	bne.n	800daee <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dada:	4b9f      	ldr	r3, [pc, #636]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	08db      	lsrs	r3, r3, #3
 800dae0:	f003 0303 	and.w	r3, r3, #3
 800dae4:	4a9d      	ldr	r2, [pc, #628]	@ (800dd5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800dae6:	fa22 f303 	lsr.w	r3, r2, r3
 800daea:	637b      	str	r3, [r7, #52]	@ 0x34
 800daec:	e020      	b.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800daee:	4b9a      	ldr	r3, [pc, #616]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800daf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dafa:	d106      	bne.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800dafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db02:	d102      	bne.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800db04:	4b96      	ldr	r3, [pc, #600]	@ (800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800db06:	637b      	str	r3, [r7, #52]	@ 0x34
 800db08:	e012      	b.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800db0a:	4b93      	ldr	r3, [pc, #588]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800db0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db10:	f003 0302 	and.w	r3, r3, #2
 800db14:	2b02      	cmp	r3, #2
 800db16:	d107      	bne.n	800db28 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800db18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800db1e:	d103      	bne.n	800db28 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800db20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db24:	637b      	str	r3, [r7, #52]	@ 0x34
 800db26:	e003      	b.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800db28:	2300      	movs	r3, #0
 800db2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db2c:	f001 b9c3 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800db30:	f001 b9c1 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800db34:	4b88      	ldr	r3, [pc, #544]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800db36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800db3a:	f003 0307 	and.w	r3, r3, #7
 800db3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800db40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db42:	2b00      	cmp	r3, #0
 800db44:	d104      	bne.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800db46:	f7fc fa3f 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800db4a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800db4c:	f001 b9b3 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800db50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db52:	2b01      	cmp	r3, #1
 800db54:	d104      	bne.n	800db60 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800db56:	f7fc f90b 	bl	8009d70 <HAL_RCC_GetSysClockFreq>
 800db5a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800db5c:	f001 b9ab 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800db60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db62:	2b02      	cmp	r3, #2
 800db64:	d108      	bne.n	800db78 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db66:	f107 0314 	add.w	r3, r7, #20
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fb80 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db74:	f001 b99f 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800db78:	4b77      	ldr	r3, [pc, #476]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db84:	d105      	bne.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800db86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d102      	bne.n	800db92 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800db8c:	4b75      	ldr	r3, [pc, #468]	@ (800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800db8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db90:	e023      	b.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800db92:	4b71      	ldr	r3, [pc, #452]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f003 0302 	and.w	r3, r3, #2
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	d10c      	bne.n	800dbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800db9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba0:	2b04      	cmp	r3, #4
 800dba2:	d109      	bne.n	800dbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dba4:	4b6c      	ldr	r3, [pc, #432]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	08db      	lsrs	r3, r3, #3
 800dbaa:	f003 0303 	and.w	r3, r3, #3
 800dbae:	4a6b      	ldr	r2, [pc, #428]	@ (800dd5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800dbb0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbb6:	e010      	b.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800dbb8:	4b67      	ldr	r3, [pc, #412]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbc4:	d105      	bne.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc8:	2b05      	cmp	r3, #5
 800dbca:	d102      	bne.n	800dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800dbcc:	4b64      	ldr	r3, [pc, #400]	@ (800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800dbce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd0:	e003      	b.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbd6:	f001 b96e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dbda:	f001 b96c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800dbde:	4b5e      	ldr	r3, [pc, #376]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dbe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dbe4:	f003 0308 	and.w	r3, r3, #8
 800dbe8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800dbea:	4b5b      	ldr	r3, [pc, #364]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dbec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dbf0:	f003 0302 	and.w	r3, r3, #2
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d106      	bne.n	800dc06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d103      	bne.n	800dc06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800dbfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc04:	e012      	b.n	800dc2c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800dc06:	4b54      	ldr	r3, [pc, #336]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dc08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dc0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc14:	d106      	bne.n	800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800dc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d103      	bne.n	800dc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800dc1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dc20:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc22:	e003      	b.n	800dc2c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800dc24:	2300      	movs	r3, #0
 800dc26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800dc28:	f001 b945 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dc2c:	f001 b943 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800dc30:	4b49      	ldr	r3, [pc, #292]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dc32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dc3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d104      	bne.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800dc42:	f7fc f9dd 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800dc46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800dc48:	f001 b935 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc52:	d108      	bne.n	800dc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc54:	f107 0308 	add.w	r3, r7, #8
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7fe fc75 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc62:	f001 b928 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800dc66:	4b3c      	ldr	r3, [pc, #240]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f003 0302 	and.w	r3, r3, #2
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d10d      	bne.n	800dc8e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800dc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc78:	d109      	bne.n	800dc8e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dc7a:	4b37      	ldr	r3, [pc, #220]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	08db      	lsrs	r3, r3, #3
 800dc80:	f003 0303 	and.w	r3, r3, #3
 800dc84:	4a35      	ldr	r2, [pc, #212]	@ (800dd5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800dc86:	fa22 f303 	lsr.w	r3, r2, r3
 800dc8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc8c:	e011      	b.n	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800dc8e:	4b32      	ldr	r3, [pc, #200]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dc96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc9a:	d106      	bne.n	800dcaa <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dca2:	d102      	bne.n	800dcaa <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800dca4:	4b2e      	ldr	r3, [pc, #184]	@ (800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800dca6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dca8:	e003      	b.n	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dcae:	f001 b902 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dcb2:	f001 b900 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800dcb6:	4b28      	ldr	r3, [pc, #160]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dcb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dcbc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800dcc0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d104      	bne.n	800dcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800dcc8:	f7fc f99a 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800dccc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800dcce:	f001 b8f2 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dcd8:	d108      	bne.n	800dcec <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcda:	f107 0308 	add.w	r3, r7, #8
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe fc32 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dce8:	f001 b8e5 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800dcec:	4b1a      	ldr	r3, [pc, #104]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f003 0302 	and.w	r3, r3, #2
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d10d      	bne.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800dcfe:	d109      	bne.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dd00:	4b15      	ldr	r3, [pc, #84]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	08db      	lsrs	r3, r3, #3
 800dd06:	f003 0303 	and.w	r3, r3, #3
 800dd0a:	4a14      	ldr	r2, [pc, #80]	@ (800dd5c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800dd0c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd10:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd12:	e011      	b.n	800dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800dd14:	4b10      	ldr	r3, [pc, #64]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd20:	d106      	bne.n	800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800dd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800dd28:	d102      	bne.n	800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800dd2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd2e:	e003      	b.n	800dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd34:	f001 b8bf 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dd38:	f001 b8bd 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800dd3c:	4b06      	ldr	r3, [pc, #24]	@ (800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dd3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dd46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800dd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10c      	bne.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800dd4e:	f7fc f983 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800dd52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800dd54:	f001 b8af 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dd58:	44020c00 	.word	0x44020c00
 800dd5c:	03d09000 	.word	0x03d09000
 800dd60:	003d0900 	.word	0x003d0900
 800dd64:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dd6e:	d108      	bne.n	800dd82 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd70:	f107 0308 	add.w	r3, r7, #8
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe fbe7 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dd7e:	f001 b89a 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800dd82:	4b9f      	ldr	r3, [pc, #636]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0302 	and.w	r3, r3, #2
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d10d      	bne.n	800ddaa <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd94:	d109      	bne.n	800ddaa <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dd96:	4b9a      	ldr	r3, [pc, #616]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	08db      	lsrs	r3, r3, #3
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	4a98      	ldr	r2, [pc, #608]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800dda2:	fa22 f303 	lsr.w	r3, r2, r3
 800dda6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dda8:	e011      	b.n	800ddce <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800ddaa:	4b95      	ldr	r3, [pc, #596]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ddb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddb6:	d106      	bne.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ddbe:	d102      	bne.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800ddc0:	4b91      	ldr	r3, [pc, #580]	@ (800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ddc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddc4:	e003      	b.n	800ddce <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ddca:	f001 b874 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ddce:	f001 b872 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ddd2:	4b8b      	ldr	r3, [pc, #556]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ddd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ddd8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800dddc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800ddde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d104      	bne.n	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800dde4:	f7fc f938 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800dde8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800ddea:	f001 b864 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ddf4:	d108      	bne.n	800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddf6:	f107 0308 	add.w	r3, r7, #8
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fe fba4 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de04:	f001 b857 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800de08:	4b7d      	ldr	r3, [pc, #500]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f003 0302 	and.w	r3, r3, #2
 800de10:	2b02      	cmp	r3, #2
 800de12:	d10d      	bne.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800de14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800de1a:	d109      	bne.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800de1c:	4b78      	ldr	r3, [pc, #480]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	08db      	lsrs	r3, r3, #3
 800de22:	f003 0303 	and.w	r3, r3, #3
 800de26:	4a77      	ldr	r2, [pc, #476]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800de28:	fa22 f303 	lsr.w	r3, r2, r3
 800de2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de2e:	e011      	b.n	800de54 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800de30:	4b73      	ldr	r3, [pc, #460]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de3c:	d106      	bne.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800de3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800de44:	d102      	bne.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800de46:	4b70      	ldr	r3, [pc, #448]	@ (800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800de48:	637b      	str	r3, [r7, #52]	@ 0x34
 800de4a:	e003      	b.n	800de54 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de50:	f001 b831 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800de54:	f001 b82f 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800de58:	4b69      	ldr	r3, [pc, #420]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800de5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800de5e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800de62:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800de64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de66:	2b00      	cmp	r3, #0
 800de68:	d104      	bne.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800de6a:	f7fc f8c9 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800de6e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800de70:	f001 b821 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800de74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de7a:	d108      	bne.n	800de8e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de7c:	f107 0308 	add.w	r3, r7, #8
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fb61 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de8a:	f001 b814 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800de8e:	4b5c      	ldr	r3, [pc, #368]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	2b02      	cmp	r3, #2
 800de98:	d10e      	bne.n	800deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800de9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dea0:	d10a      	bne.n	800deb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dea2:	4b57      	ldr	r3, [pc, #348]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	08db      	lsrs	r3, r3, #3
 800dea8:	f003 0303 	and.w	r3, r3, #3
 800deac:	4a55      	ldr	r2, [pc, #340]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800deae:	fa22 f303 	lsr.w	r3, r2, r3
 800deb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800deb4:	f000 bfff 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800debc:	f000 bffb 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800dec0:	4b4f      	ldr	r3, [pc, #316]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dec2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dec6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800deca:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800decc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dece:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800ded2:	d056      	beq.n	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800ded4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800deda:	f200 808b 	bhi.w	800dff4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800dede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dee4:	d03e      	beq.n	800df64 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800dee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800deec:	f200 8082 	bhi.w	800dff4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800def0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800def6:	d027      	beq.n	800df48 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800def8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800defe:	d879      	bhi.n	800dff4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800df00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df06:	d017      	beq.n	800df38 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800df08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df0e:	d871      	bhi.n	800dff4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800df10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df1c:	d004      	beq.n	800df28 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800df1e:	e069      	b.n	800dff4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800df20:	f7fc f89a 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800df24:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800df26:	e068      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df28:	f107 0314 	add.w	r3, r7, #20
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe f99f 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df36:	e060      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df38:	f107 0308 	add.w	r3, r7, #8
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fe fb03 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df46:	e058      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800df48:	4b2d      	ldr	r3, [pc, #180]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800df4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df4e:	f003 0302 	and.w	r3, r3, #2
 800df52:	2b02      	cmp	r3, #2
 800df54:	d103      	bne.n	800df5e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800df56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df5a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800df5c:	e04d      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df62:	e04a      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800df64:	4b26      	ldr	r3, [pc, #152]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800df66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df72:	d103      	bne.n	800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800df74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800df78:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800df7a:	e03e      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df80:	e03b      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800df82:	4b1f      	ldr	r3, [pc, #124]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800df84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df88:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800df8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df8e:	4b1c      	ldr	r3, [pc, #112]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f003 0302 	and.w	r3, r3, #2
 800df96:	2b02      	cmp	r3, #2
 800df98:	d10c      	bne.n	800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800df9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d109      	bne.n	800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dfa0:	4b17      	ldr	r3, [pc, #92]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	08db      	lsrs	r3, r3, #3
 800dfa6:	f003 0303 	and.w	r3, r3, #3
 800dfaa:	4a16      	ldr	r2, [pc, #88]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800dfac:	fa22 f303 	lsr.w	r3, r2, r3
 800dfb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfb2:	e01e      	b.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dfb4:	4b12      	ldr	r3, [pc, #72]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dfbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfc0:	d106      	bne.n	800dfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800dfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfc8:	d102      	bne.n	800dfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800dfca:	4b0f      	ldr	r3, [pc, #60]	@ (800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800dfcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfce:	e010      	b.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfdc:	d106      	bne.n	800dfec <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800dfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dfe4:	d102      	bne.n	800dfec <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800dfe6:	4b09      	ldr	r3, [pc, #36]	@ (800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800dfe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfea:	e002      	b.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800dff0:	e003      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800dff2:	e002      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800dff4:	2300      	movs	r3, #0
 800dff6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dff8:	bf00      	nop
          }
        }
        break;
 800dffa:	f000 bf5c 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dffe:	bf00      	nop
 800e000:	44020c00 	.word	0x44020c00
 800e004:	03d09000 	.word	0x03d09000
 800e008:	003d0900 	.word	0x003d0900
 800e00c:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e010:	4b9e      	ldr	r3, [pc, #632]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e012:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e016:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e01a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800e01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e022:	d056      	beq.n	800e0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800e024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e026:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e02a:	f200 808b 	bhi.w	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e034:	d03e      	beq.n	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800e036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e03c:	f200 8082 	bhi.w	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e046:	d027      	beq.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800e048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e04e:	d879      	bhi.n	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e056:	d017      	beq.n	800e088 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800e058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e05e:	d871      	bhi.n	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800e066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e06c:	d004      	beq.n	800e078 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800e06e:	e069      	b.n	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800e070:	f7fb ffc6 	bl	800a000 <HAL_RCC_GetPCLK1Freq>
 800e074:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e076:	e068      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e078:	f107 0314 	add.w	r3, r7, #20
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe f8f7 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e086:	e060      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e088:	f107 0308 	add.w	r3, r7, #8
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe fa5b 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e096:	e058      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e098:	4b7c      	ldr	r3, [pc, #496]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e09a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d103      	bne.n	800e0ae <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800e0a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e0ac:	e04d      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e0b2:	e04a      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e0b4:	4b75      	ldr	r3, [pc, #468]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0c2:	d103      	bne.n	800e0cc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800e0c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e0c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e0ca:	e03e      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e0d0:	e03b      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e0d2:	4b6e      	ldr	r3, [pc, #440]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e0d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e0d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e0dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e0de:	4b6b      	ldr	r3, [pc, #428]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f003 0302 	and.w	r3, r3, #2
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	d10c      	bne.n	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800e0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d109      	bne.n	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e0f0:	4b66      	ldr	r3, [pc, #408]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	08db      	lsrs	r3, r3, #3
 800e0f6:	f003 0303 	and.w	r3, r3, #3
 800e0fa:	4a65      	ldr	r2, [pc, #404]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800e0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800e100:	637b      	str	r3, [r7, #52]	@ 0x34
 800e102:	e01e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e104:	4b61      	ldr	r3, [pc, #388]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e10c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e110:	d106      	bne.n	800e120 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e118:	d102      	bne.n	800e120 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e11a:	4b5e      	ldr	r3, [pc, #376]	@ (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800e11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e11e:	e010      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e120:	4b5a      	ldr	r3, [pc, #360]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e12c:	d106      	bne.n	800e13c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800e12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e134:	d102      	bne.n	800e13c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e136:	4b58      	ldr	r3, [pc, #352]	@ (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800e138:	637b      	str	r3, [r7, #52]	@ 0x34
 800e13a:	e002      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e140:	e003      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800e142:	e002      	b.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800e144:	2300      	movs	r3, #0
 800e146:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e148:	bf00      	nop
          }
        }
        break;
 800e14a:	f000 beb4 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800e14e:	4b4f      	ldr	r3, [pc, #316]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e150:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e154:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e158:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800e15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e160:	d056      	beq.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800e162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e168:	f200 808b 	bhi.w	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e172:	d03e      	beq.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800e174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e17a:	f200 8082 	bhi.w	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e180:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e184:	d027      	beq.n	800e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e18c:	d879      	bhi.n	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e190:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e194:	d017      	beq.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e19c:	d871      	bhi.n	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d004      	beq.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1aa:	d004      	beq.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800e1ac:	e069      	b.n	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e1ae:	f7fb ff53 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800e1b2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e1b4:	e068      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b6:	f107 0314 	add.w	r3, r7, #20
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe f858 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e1c4:	e060      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c6:	f107 0308 	add.w	r3, r7, #8
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fe f9bc 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e1d4:	e058      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e1d6:	4b2d      	ldr	r3, [pc, #180]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e1d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1dc:	f003 0302 	and.w	r3, r3, #2
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d103      	bne.n	800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800e1e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e1ea:	e04d      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e1f0:	e04a      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e1f2:	4b26      	ldr	r3, [pc, #152]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e1f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e200:	d103      	bne.n	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800e202:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e206:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e208:	e03e      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e20e:	e03b      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e210:	4b1e      	ldr	r3, [pc, #120]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e216:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e21a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e21c:	4b1b      	ldr	r3, [pc, #108]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0302 	and.w	r3, r3, #2
 800e224:	2b02      	cmp	r3, #2
 800e226:	d10c      	bne.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800e228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d109      	bne.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e22e:	4b17      	ldr	r3, [pc, #92]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	08db      	lsrs	r3, r3, #3
 800e234:	f003 0303 	and.w	r3, r3, #3
 800e238:	4a15      	ldr	r2, [pc, #84]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800e23a:	fa22 f303 	lsr.w	r3, r2, r3
 800e23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e240:	e01e      	b.n	800e280 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e242:	4b12      	ldr	r3, [pc, #72]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e24a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e24e:	d106      	bne.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800e250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e256:	d102      	bne.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e258:	4b0e      	ldr	r3, [pc, #56]	@ (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800e25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e25c:	e010      	b.n	800e280 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e25e:	4b0b      	ldr	r3, [pc, #44]	@ (800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e26a:	d106      	bne.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800e26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e272:	d102      	bne.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e274:	4b08      	ldr	r3, [pc, #32]	@ (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800e276:	637b      	str	r3, [r7, #52]	@ 0x34
 800e278:	e002      	b.n	800e280 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e27e:	e003      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800e280:	e002      	b.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e286:	bf00      	nop
          }
        }
        break;
 800e288:	f000 be15 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e28c:	44020c00 	.word	0x44020c00
 800e290:	03d09000 	.word	0x03d09000
 800e294:	003d0900 	.word	0x003d0900
 800e298:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800e29c:	4b9e      	ldr	r3, [pc, #632]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e29e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e2a2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800e2a6:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800e2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2aa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800e2ae:	d056      	beq.n	800e35e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800e2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800e2b6:	f200 808b 	bhi.w	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2c0:	d03e      	beq.n	800e340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2c8:	f200 8082 	bhi.w	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e2d2:	d027      	beq.n	800e324 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e2da:	d879      	bhi.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2e2:	d017      	beq.n	800e314 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2ea:	d871      	bhi.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d004      	beq.n	800e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2f8:	d004      	beq.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800e2fa:	e069      	b.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e2fc:	f7fb feac 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800e300:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e302:	e068      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e304:	f107 0314 	add.w	r3, r7, #20
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fd ffb1 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e312:	e060      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e314:	f107 0308 	add.w	r3, r7, #8
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe f915 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e322:	e058      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e324:	4b7c      	ldr	r3, [pc, #496]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e32a:	f003 0302 	and.w	r3, r3, #2
 800e32e:	2b02      	cmp	r3, #2
 800e330:	d103      	bne.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800e332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e336:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e338:	e04d      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e33e:	e04a      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e340:	4b75      	ldr	r3, [pc, #468]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e34a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e34e:	d103      	bne.n	800e358 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800e350:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e354:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e356:	e03e      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e35c:	e03b      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e35e:	4b6e      	ldr	r3, [pc, #440]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e364:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e368:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e36a:	4b6b      	ldr	r3, [pc, #428]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f003 0302 	and.w	r3, r3, #2
 800e372:	2b02      	cmp	r3, #2
 800e374:	d10c      	bne.n	800e390 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800e376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d109      	bne.n	800e390 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e37c:	4b66      	ldr	r3, [pc, #408]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	08db      	lsrs	r3, r3, #3
 800e382:	f003 0303 	and.w	r3, r3, #3
 800e386:	4a65      	ldr	r2, [pc, #404]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800e388:	fa22 f303 	lsr.w	r3, r2, r3
 800e38c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e38e:	e01e      	b.n	800e3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e390:	4b61      	ldr	r3, [pc, #388]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e39c:	d106      	bne.n	800e3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800e39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3a4:	d102      	bne.n	800e3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e3a6:	4b5e      	ldr	r3, [pc, #376]	@ (800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800e3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3aa:	e010      	b.n	800e3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3ac:	4b5a      	ldr	r3, [pc, #360]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3b8:	d106      	bne.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800e3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e3c0:	d102      	bne.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e3c2:	4b58      	ldr	r3, [pc, #352]	@ (800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800e3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3c6:	e002      	b.n	800e3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e3cc:	e003      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800e3ce:	e002      	b.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e3d4:	bf00      	nop
          }
        }
        break;
 800e3d6:	f000 bd6e 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800e3da:	4b4f      	ldr	r3, [pc, #316]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e3dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e3e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e3e4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e3ec:	d056      	beq.n	800e49c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800e3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e3f4:	f200 808b 	bhi.w	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3fe:	d03e      	beq.n	800e47e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800e400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e402:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e406:	f200 8082 	bhi.w	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e40c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e410:	d027      	beq.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800e412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e414:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e418:	d879      	bhi.n	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e420:	d017      	beq.n	800e452 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e428:	d871      	bhi.n	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d004      	beq.n	800e43a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800e430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e432:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e436:	d004      	beq.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800e438:	e069      	b.n	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e43a:	f7fb fe0d 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800e43e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e440:	e068      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e442:	f107 0314 	add.w	r3, r7, #20
 800e446:	4618      	mov	r0, r3
 800e448:	f7fd ff12 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e450:	e060      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e452:	f107 0308 	add.w	r3, r7, #8
 800e456:	4618      	mov	r0, r3
 800e458:	f7fe f876 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e460:	e058      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e462:	4b2d      	ldr	r3, [pc, #180]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e468:	f003 0302 	and.w	r3, r3, #2
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	d103      	bne.n	800e478 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800e470:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e474:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e476:	e04d      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800e478:	2300      	movs	r3, #0
 800e47a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e47c:	e04a      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e47e:	4b26      	ldr	r3, [pc, #152]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e48c:	d103      	bne.n	800e496 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800e48e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e492:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e494:	e03e      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e49a:	e03b      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e49c:	4b1e      	ldr	r3, [pc, #120]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e49e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e4a2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f003 0302 	and.w	r3, r3, #2
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d10c      	bne.n	800e4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d109      	bne.n	800e4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e4ba:	4b17      	ldr	r3, [pc, #92]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	08db      	lsrs	r3, r3, #3
 800e4c0:	f003 0303 	and.w	r3, r3, #3
 800e4c4:	4a15      	ldr	r2, [pc, #84]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800e4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4cc:	e01e      	b.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e4ce:	4b12      	ldr	r3, [pc, #72]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4da:	d106      	bne.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800e4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e2:	d102      	bne.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800e4e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4e8:	e010      	b.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e4f6:	d106      	bne.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800e4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4fe:	d102      	bne.n	800e506 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e500:	4b08      	ldr	r3, [pc, #32]	@ (800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800e502:	637b      	str	r3, [r7, #52]	@ 0x34
 800e504:	e002      	b.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e50a:	e003      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800e50c:	e002      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800e50e:	2300      	movs	r3, #0
 800e510:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e512:	bf00      	nop
          }
        }
        break;
 800e514:	f000 bccf 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e518:	44020c00 	.word	0x44020c00
 800e51c:	03d09000 	.word	0x03d09000
 800e520:	003d0900 	.word	0x003d0900
 800e524:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800e528:	4b9e      	ldr	r3, [pc, #632]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e52a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e52e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e532:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800e534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e53a:	d056      	beq.n	800e5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800e53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e542:	f200 808b 	bhi.w	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e54c:	d03e      	beq.n	800e5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800e54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e554:	f200 8082 	bhi.w	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e55e:	d027      	beq.n	800e5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800e560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e562:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e566:	d879      	bhi.n	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e56e:	d017      	beq.n	800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800e570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e576:	d871      	bhi.n	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d004      	beq.n	800e588 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800e57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e584:	d004      	beq.n	800e590 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800e586:	e069      	b.n	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e588:	f7fb fd66 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800e58c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e58e:	e068      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e590:	f107 0314 	add.w	r3, r7, #20
 800e594:	4618      	mov	r0, r3
 800e596:	f7fd fe6b 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e59e:	e060      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5a0:	f107 0308 	add.w	r3, r7, #8
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fd ffcf 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5ae:	e058      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e5b0:	4b7c      	ldr	r3, [pc, #496]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e5b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e5b6:	f003 0302 	and.w	r3, r3, #2
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d103      	bne.n	800e5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800e5be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e5c4:	e04d      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5ca:	e04a      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e5cc:	4b75      	ldr	r3, [pc, #468]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e5ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e5d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e5d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e5da:	d103      	bne.n	800e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800e5dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e5e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e5e2:	e03e      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5e8:	e03b      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e5ea:	4b6e      	ldr	r3, [pc, #440]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e5ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e5f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e5f6:	4b6b      	ldr	r3, [pc, #428]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d10c      	bne.n	800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800e602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e604:	2b00      	cmp	r3, #0
 800e606:	d109      	bne.n	800e61c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e608:	4b66      	ldr	r3, [pc, #408]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	08db      	lsrs	r3, r3, #3
 800e60e:	f003 0303 	and.w	r3, r3, #3
 800e612:	4a65      	ldr	r2, [pc, #404]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800e614:	fa22 f303 	lsr.w	r3, r2, r3
 800e618:	637b      	str	r3, [r7, #52]	@ 0x34
 800e61a:	e01e      	b.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e61c:	4b61      	ldr	r3, [pc, #388]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e628:	d106      	bne.n	800e638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800e62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e630:	d102      	bne.n	800e638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e632:	4b5e      	ldr	r3, [pc, #376]	@ (800e7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800e634:	637b      	str	r3, [r7, #52]	@ 0x34
 800e636:	e010      	b.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e638:	4b5a      	ldr	r3, [pc, #360]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e644:	d106      	bne.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800e646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e64c:	d102      	bne.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e64e:	4b58      	ldr	r3, [pc, #352]	@ (800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800e650:	637b      	str	r3, [r7, #52]	@ 0x34
 800e652:	e002      	b.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e654:	2300      	movs	r3, #0
 800e656:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e658:	e003      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800e65a:	e002      	b.n	800e662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e660:	bf00      	nop
          }
        }
        break;
 800e662:	f000 bc28 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e666:	4b4f      	ldr	r3, [pc, #316]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e66c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e670:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800e672:	4b4c      	ldr	r3, [pc, #304]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e67a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e67e:	d106      	bne.n	800e68e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800e680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e682:	2b00      	cmp	r3, #0
 800e684:	d103      	bne.n	800e68e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800e686:	4b4a      	ldr	r3, [pc, #296]	@ (800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800e688:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800e68a:	f000 bc14 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e694:	d108      	bne.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e696:	f107 0320 	add.w	r3, r7, #32
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fd fc7c 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6a4:	f000 bc07 	b.w	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6ae:	d107      	bne.n	800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6b0:	f107 0314 	add.w	r3, r7, #20
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fd fddb 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6be:	e3fa      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e6c4:	e3f7      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e6c6:	4b37      	ldr	r3, [pc, #220]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e6c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e6cc:	f003 0307 	and.w	r3, r3, #7
 800e6d0:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	2b04      	cmp	r3, #4
 800e6d6:	d861      	bhi.n	800e79c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800e6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800e6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6de:	bf00      	nop
 800e6e0:	0800e6f5 	.word	0x0800e6f5
 800e6e4:	0800e705 	.word	0x0800e705
 800e6e8:	0800e715 	.word	0x0800e715
 800e6ec:	0800e725 	.word	0x0800e725
 800e6f0:	0800e72b 	.word	0x0800e72b
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6f4:	f107 0320 	add.w	r3, r7, #32
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd fc4d 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e700:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e702:	e04e      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e704:	f107 0314 	add.w	r3, r7, #20
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fd fdb1 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e712:	e046      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e714:	f107 0308 	add.w	r3, r7, #8
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fd ff15 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e722:	e03e      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800e724:	4b23      	ldr	r3, [pc, #140]	@ (800e7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800e726:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e728:	e03b      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e72a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e72c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e730:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e734:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e736:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f003 0302 	and.w	r3, r3, #2
 800e73e:	2b02      	cmp	r3, #2
 800e740:	d10c      	bne.n	800e75c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800e742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e744:	2b00      	cmp	r3, #0
 800e746:	d109      	bne.n	800e75c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e748:	4b16      	ldr	r3, [pc, #88]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	08db      	lsrs	r3, r3, #3
 800e74e:	f003 0303 	and.w	r3, r3, #3
 800e752:	4a15      	ldr	r2, [pc, #84]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800e754:	fa22 f303 	lsr.w	r3, r2, r3
 800e758:	637b      	str	r3, [r7, #52]	@ 0x34
 800e75a:	e01e      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e75c:	4b11      	ldr	r3, [pc, #68]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e768:	d106      	bne.n	800e778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800e76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e770:	d102      	bne.n	800e778 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e772:	4b0e      	ldr	r3, [pc, #56]	@ (800e7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800e774:	637b      	str	r3, [r7, #52]	@ 0x34
 800e776:	e010      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e778:	4b0a      	ldr	r3, [pc, #40]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e784:	d106      	bne.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800e786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e78c:	d102      	bne.n	800e794 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e78e:	4b08      	ldr	r3, [pc, #32]	@ (800e7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800e790:	637b      	str	r3, [r7, #52]	@ 0x34
 800e792:	e002      	b.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e798:	e003      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800e79a:	e002      	b.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e7a0:	bf00      	nop
          }
        }
        break;
 800e7a2:	e388      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e7a4:	44020c00 	.word	0x44020c00
 800e7a8:	03d09000 	.word	0x03d09000
 800e7ac:	003d0900 	.word	0x003d0900
 800e7b0:	017d7840 	.word	0x017d7840
 800e7b4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e7b8:	4ba9      	ldr	r3, [pc, #676]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e7ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e7be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e7c2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c6:	2b20      	cmp	r3, #32
 800e7c8:	f200 809a 	bhi.w	800e900 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800e7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800e7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d2:	bf00      	nop
 800e7d4:	0800e859 	.word	0x0800e859
 800e7d8:	0800e901 	.word	0x0800e901
 800e7dc:	0800e901 	.word	0x0800e901
 800e7e0:	0800e901 	.word	0x0800e901
 800e7e4:	0800e901 	.word	0x0800e901
 800e7e8:	0800e901 	.word	0x0800e901
 800e7ec:	0800e901 	.word	0x0800e901
 800e7f0:	0800e901 	.word	0x0800e901
 800e7f4:	0800e869 	.word	0x0800e869
 800e7f8:	0800e901 	.word	0x0800e901
 800e7fc:	0800e901 	.word	0x0800e901
 800e800:	0800e901 	.word	0x0800e901
 800e804:	0800e901 	.word	0x0800e901
 800e808:	0800e901 	.word	0x0800e901
 800e80c:	0800e901 	.word	0x0800e901
 800e810:	0800e901 	.word	0x0800e901
 800e814:	0800e879 	.word	0x0800e879
 800e818:	0800e901 	.word	0x0800e901
 800e81c:	0800e901 	.word	0x0800e901
 800e820:	0800e901 	.word	0x0800e901
 800e824:	0800e901 	.word	0x0800e901
 800e828:	0800e901 	.word	0x0800e901
 800e82c:	0800e901 	.word	0x0800e901
 800e830:	0800e901 	.word	0x0800e901
 800e834:	0800e889 	.word	0x0800e889
 800e838:	0800e901 	.word	0x0800e901
 800e83c:	0800e901 	.word	0x0800e901
 800e840:	0800e901 	.word	0x0800e901
 800e844:	0800e901 	.word	0x0800e901
 800e848:	0800e901 	.word	0x0800e901
 800e84c:	0800e901 	.word	0x0800e901
 800e850:	0800e901 	.word	0x0800e901
 800e854:	0800e88f 	.word	0x0800e88f
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e858:	f107 0320 	add.w	r3, r7, #32
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fd fb9b 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800e862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e864:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e866:	e04e      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e868:	f107 0314 	add.w	r3, r7, #20
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fd fcff 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e876:	e046      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e878:	f107 0308 	add.w	r3, r7, #8
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fd fe63 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e886:	e03e      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800e888:	4b76      	ldr	r3, [pc, #472]	@ (800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800e88a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e88c:	e03b      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e88e:	4b74      	ldr	r3, [pc, #464]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e894:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e898:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e89a:	4b71      	ldr	r3, [pc, #452]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f003 0302 	and.w	r3, r3, #2
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d10c      	bne.n	800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800e8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d109      	bne.n	800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e8ac:	4b6c      	ldr	r3, [pc, #432]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	08db      	lsrs	r3, r3, #3
 800e8b2:	f003 0303 	and.w	r3, r3, #3
 800e8b6:	4a6c      	ldr	r2, [pc, #432]	@ (800ea68 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800e8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8be:	e01e      	b.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e8c0:	4b67      	ldr	r3, [pc, #412]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e8c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8cc:	d106      	bne.n	800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800e8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8d4:	d102      	bne.n	800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e8d6:	4b65      	ldr	r3, [pc, #404]	@ (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800e8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8da:	e010      	b.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e8dc:	4b60      	ldr	r3, [pc, #384]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8e8:	d106      	bne.n	800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800e8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8f0:	d102      	bne.n	800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e8f2:	4b5f      	ldr	r3, [pc, #380]	@ (800ea70 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800e8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8f6:	e002      	b.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e8fc:	e003      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800e8fe:	e002      	b.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800e900:	2300      	movs	r3, #0
 800e902:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e904:	bf00      	nop
          }
        }
        break;
 800e906:	e2d6      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e908:	4b55      	ldr	r3, [pc, #340]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e90a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e90e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800e912:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800e914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e91a:	d031      	beq.n	800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800e91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e922:	d866      	bhi.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800e924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e926:	2bc0      	cmp	r3, #192	@ 0xc0
 800e928:	d027      	beq.n	800e97a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800e92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92c:	2bc0      	cmp	r3, #192	@ 0xc0
 800e92e:	d860      	bhi.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800e930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e932:	2b80      	cmp	r3, #128	@ 0x80
 800e934:	d019      	beq.n	800e96a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800e936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e938:	2b80      	cmp	r3, #128	@ 0x80
 800e93a:	d85a      	bhi.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800e942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e944:	2b40      	cmp	r3, #64	@ 0x40
 800e946:	d008      	beq.n	800e95a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800e948:	e053      	b.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e94a:	f107 0320 	add.w	r3, r7, #32
 800e94e:	4618      	mov	r0, r3
 800e950:	f7fd fb22 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800e954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e956:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e958:	e04e      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e95a:	f107 0314 	add.w	r3, r7, #20
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fd fc86 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e968:	e046      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e96a:	f107 0308 	add.w	r3, r7, #8
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fd fdea 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e978:	e03e      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800e97a:	4b3a      	ldr	r3, [pc, #232]	@ (800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800e97c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e97e:	e03b      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e980:	4b37      	ldr	r3, [pc, #220]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e986:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e98a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e98c:	4b34      	ldr	r3, [pc, #208]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f003 0302 	and.w	r3, r3, #2
 800e994:	2b02      	cmp	r3, #2
 800e996:	d10c      	bne.n	800e9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800e998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d109      	bne.n	800e9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e99e:	4b30      	ldr	r3, [pc, #192]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	08db      	lsrs	r3, r3, #3
 800e9a4:	f003 0303 	and.w	r3, r3, #3
 800e9a8:	4a2f      	ldr	r2, [pc, #188]	@ (800ea68 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800e9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e9ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9b0:	e01e      	b.n	800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e9b2:	4b2b      	ldr	r3, [pc, #172]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9be:	d106      	bne.n	800e9ce <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800e9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9c6:	d102      	bne.n	800e9ce <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e9c8:	4b28      	ldr	r3, [pc, #160]	@ (800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800e9ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9cc:	e010      	b.n	800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e9ce:	4b24      	ldr	r3, [pc, #144]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9da:	d106      	bne.n	800e9ea <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800e9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e9e2:	d102      	bne.n	800e9ea <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e9e4:	4b22      	ldr	r3, [pc, #136]	@ (800ea70 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800e9e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9e8:	e002      	b.n	800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e9ee:	e003      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800e9f0:	e002      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e9f6:	bf00      	nop
          }
        }
        break;
 800e9f8:	e25d      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800e9fa:	4b19      	ldr	r3, [pc, #100]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e9fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea00:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800ea04:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800ea06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d103      	bne.n	800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ea0c:	f7fb fb0e 	bl	800a02c <HAL_RCC_GetPCLK2Freq>
 800ea10:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ea12:	e250      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800ea14:	4b12      	ldr	r3, [pc, #72]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea20:	d10b      	bne.n	800ea3a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea28:	d107      	bne.n	800ea3a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea2a:	f107 0314 	add.w	r3, r7, #20
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fd fc1e 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea38:	e04f      	b.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800ea3a:	4b09      	ldr	r3, [pc, #36]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea46:	d115      	bne.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800ea48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea4e:	d111      	bne.n	800ea74 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea50:	f107 0308 	add.w	r3, r7, #8
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fd fd77 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea5e:	e03c      	b.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800ea60:	44020c00 	.word	0x44020c00
 800ea64:	00bb8000 	.word	0x00bb8000
 800ea68:	03d09000 	.word	0x03d09000
 800ea6c:	003d0900 	.word	0x003d0900
 800ea70:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800ea74:	4b94      	ldr	r3, [pc, #592]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f003 0302 	and.w	r3, r3, #2
 800ea7c:	2b02      	cmp	r3, #2
 800ea7e:	d10d      	bne.n	800ea9c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800ea80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ea86:	d109      	bne.n	800ea9c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ea88:	4b8f      	ldr	r3, [pc, #572]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	08db      	lsrs	r3, r3, #3
 800ea8e:	f003 0303 	and.w	r3, r3, #3
 800ea92:	4a8e      	ldr	r2, [pc, #568]	@ (800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ea94:	fa22 f303 	lsr.w	r3, r2, r3
 800ea98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea9a:	e01e      	b.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800ea9c:	4b8a      	ldr	r3, [pc, #552]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eaa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaa8:	d106      	bne.n	800eab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800eaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eab0:	d102      	bne.n	800eab8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800eab2:	4b87      	ldr	r3, [pc, #540]	@ (800ecd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800eab4:	637b      	str	r3, [r7, #52]	@ 0x34
 800eab6:	e010      	b.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800eab8:	4b83      	ldr	r3, [pc, #524]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eac4:	d106      	bne.n	800ead4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800eac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800eacc:	d102      	bne.n	800ead4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800eace:	4b81      	ldr	r3, [pc, #516]	@ (800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ead0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ead2:	e002      	b.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800ead4:	2300      	movs	r3, #0
 800ead6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ead8:	e1ed      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eada:	e1ec      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800eadc:	4b7a      	ldr	r3, [pc, #488]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eae2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800eae6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800eae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d103      	bne.n	800eaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800eaee:	f7fb fab3 	bl	800a058 <HAL_RCC_GetPCLK3Freq>
 800eaf2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800eaf4:	e1df      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800eaf6:	4b74      	ldr	r3, [pc, #464]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eafe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb02:	d10b      	bne.n	800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800eb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb0a:	d107      	bne.n	800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb0c:	f107 0314 	add.w	r3, r7, #20
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fd fbad 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb1a:	e045      	b.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800eb1c:	4b6a      	ldr	r3, [pc, #424]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eb24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb28:	d10b      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb30:	d107      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb32:	f107 0308 	add.w	r3, r7, #8
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fd fd06 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb40:	e032      	b.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800eb42:	4b61      	ldr	r3, [pc, #388]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f003 0302 	and.w	r3, r3, #2
 800eb4a:	2b02      	cmp	r3, #2
 800eb4c:	d10d      	bne.n	800eb6a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb54:	d109      	bne.n	800eb6a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800eb56:	4b5c      	ldr	r3, [pc, #368]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	08db      	lsrs	r3, r3, #3
 800eb5c:	f003 0303 	and.w	r3, r3, #3
 800eb60:	4a5a      	ldr	r2, [pc, #360]	@ (800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800eb62:	fa22 f303 	lsr.w	r3, r2, r3
 800eb66:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb68:	e01e      	b.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800eb6a:	4b57      	ldr	r3, [pc, #348]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eb72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb76:	d106      	bne.n	800eb86 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800eb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb7e:	d102      	bne.n	800eb86 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800eb80:	4b53      	ldr	r3, [pc, #332]	@ (800ecd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800eb82:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb84:	e010      	b.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800eb86:	4b50      	ldr	r3, [pc, #320]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb92:	d106      	bne.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800eb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800eb9a:	d102      	bne.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800eb9c:	4b4d      	ldr	r3, [pc, #308]	@ (800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800eb9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eba0:	e002      	b.n	800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800eba2:	2300      	movs	r3, #0
 800eba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eba6:	e186      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eba8:	e185      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ebaa:	4b47      	ldr	r3, [pc, #284]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ebac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ebb0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800ebb4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d103      	bne.n	800ebc4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ebbc:	f7fb fa36 	bl	800a02c <HAL_RCC_GetPCLK2Freq>
 800ebc0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ebc2:	e178      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800ebc4:	4b40      	ldr	r3, [pc, #256]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ebd0:	d10b      	bne.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebd8:	d107      	bne.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebda:	f107 0314 	add.w	r3, r7, #20
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fd fb46 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebe8:	e045      	b.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800ebea:	4b37      	ldr	r3, [pc, #220]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ebf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebf6:	d10b      	bne.n	800ec10 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebfe:	d107      	bne.n	800ec10 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec00:	f107 0308 	add.w	r3, r7, #8
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fd fc9f 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec0e:	e032      	b.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800ec10:	4b2d      	ldr	r3, [pc, #180]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f003 0302 	and.w	r3, r3, #2
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d10d      	bne.n	800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800ec1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ec22:	d109      	bne.n	800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ec24:	4b28      	ldr	r3, [pc, #160]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	08db      	lsrs	r3, r3, #3
 800ec2a:	f003 0303 	and.w	r3, r3, #3
 800ec2e:	4a27      	ldr	r2, [pc, #156]	@ (800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ec30:	fa22 f303 	lsr.w	r3, r2, r3
 800ec34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec36:	e01e      	b.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800ec38:	4b23      	ldr	r3, [pc, #140]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ec40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec44:	d106      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800ec46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec4c:	d102      	bne.n	800ec54 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800ec4e:	4b20      	ldr	r3, [pc, #128]	@ (800ecd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ec50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec52:	e010      	b.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800ec54:	4b1c      	ldr	r3, [pc, #112]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec60:	d106      	bne.n	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800ec62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec64:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ec68:	d102      	bne.n	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800ec6a:	4b1a      	ldr	r3, [pc, #104]	@ (800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ec6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec6e:	e002      	b.n	800ec76 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800ec70:	2300      	movs	r3, #0
 800ec72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ec74:	e11f      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ec76:	e11e      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ec78:	4b13      	ldr	r3, [pc, #76]	@ (800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ec7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ec7e:	f003 0303 	and.w	r3, r3, #3
 800ec82:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800ec84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec86:	2b03      	cmp	r3, #3
 800ec88:	d85f      	bhi.n	800ed4a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800ec8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ec90 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800ec8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec90:	0800eca1 	.word	0x0800eca1
 800ec94:	0800eca9 	.word	0x0800eca9
 800ec98:	0800ecb9 	.word	0x0800ecb9
 800ec9c:	0800ecd9 	.word	0x0800ecd9
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800eca0:	f7fb f992 	bl	8009fc8 <HAL_RCC_GetHCLKFreq>
 800eca4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800eca6:	e053      	b.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eca8:	f107 0320 	add.w	r3, r7, #32
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fd f973 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ecb6:	e04b      	b.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecb8:	f107 0314 	add.w	r3, r7, #20
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fd fad7 	bl	800c270 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ecc6:	e043      	b.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ecc8:	44020c00 	.word	0x44020c00
 800eccc:	03d09000 	.word	0x03d09000
 800ecd0:	003d0900 	.word	0x003d0900
 800ecd4:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ecd8:	4b79      	ldr	r3, [pc, #484]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ecda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ecde:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ece2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ece4:	4b76      	ldr	r3, [pc, #472]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 0302 	and.w	r3, r3, #2
 800ecec:	2b02      	cmp	r3, #2
 800ecee:	d10c      	bne.n	800ed0a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800ecf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d109      	bne.n	800ed0a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ecf6:	4b72      	ldr	r3, [pc, #456]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	08db      	lsrs	r3, r3, #3
 800ecfc:	f003 0303 	and.w	r3, r3, #3
 800ed00:	4a70      	ldr	r2, [pc, #448]	@ (800eec4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ed02:	fa22 f303 	lsr.w	r3, r2, r3
 800ed06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed08:	e01e      	b.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed0a:	4b6d      	ldr	r3, [pc, #436]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ed12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed16:	d106      	bne.n	800ed26 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800ed18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed1e:	d102      	bne.n	800ed26 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ed20:	4b69      	ldr	r3, [pc, #420]	@ (800eec8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ed22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed24:	e010      	b.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed26:	4b66      	ldr	r3, [pc, #408]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed32:	d106      	bne.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800ed34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed3a:	d102      	bne.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ed3c:	4b63      	ldr	r3, [pc, #396]	@ (800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800ed3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed40:	e002      	b.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ed42:	2300      	movs	r3, #0
 800ed44:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ed46:	e003      	b.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ed48:	e002      	b.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ed4e:	bf00      	nop
          }
        }
        break;
 800ed50:	e0b1      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800ed52:	4b5b      	ldr	r3, [pc, #364]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ed54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ed58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ed5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800ed5e:	4b58      	ldr	r3, [pc, #352]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ed60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ed64:	f003 0302 	and.w	r3, r3, #2
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d106      	bne.n	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d103      	bne.n	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800ed72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed78:	e01f      	b.n	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800ed7a:	4b51      	ldr	r3, [pc, #324]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ed7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ed80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed88:	d106      	bne.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed8c:	2b40      	cmp	r3, #64	@ 0x40
 800ed8e:	d103      	bne.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800ed90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ed94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed96:	e010      	b.n	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800ed98:	4b49      	ldr	r3, [pc, #292]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eda0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eda4:	d106      	bne.n	800edb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800eda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eda8:	2b80      	cmp	r3, #128	@ 0x80
 800edaa:	d103      	bne.n	800edb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800edac:	f248 0312 	movw	r3, #32786	@ 0x8012
 800edb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800edb2:	e002      	b.n	800edba <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800edb4:	2300      	movs	r3, #0
 800edb6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800edb8:	e07d      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800edba:	e07c      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800edbc:	4b40      	ldr	r3, [pc, #256]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800edbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800edc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800edc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800edc8:	4b3d      	ldr	r3, [pc, #244]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800edd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800edd4:	d105      	bne.n	800ede2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800edd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d102      	bne.n	800ede2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800eddc:	4b3c      	ldr	r3, [pc, #240]	@ (800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800edde:	637b      	str	r3, [r7, #52]	@ 0x34
 800ede0:	e031      	b.n	800ee46 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800ede2:	4b37      	ldr	r3, [pc, #220]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800edee:	d10a      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800edf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf2:	2b10      	cmp	r3, #16
 800edf4:	d107      	bne.n	800ee06 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800edf6:	f107 0320 	add.w	r3, r7, #32
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7fd f8cc 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee04:	e01f      	b.n	800ee46 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800ee06:	4b2e      	ldr	r3, [pc, #184]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ee08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee0c:	f003 0302 	and.w	r3, r3, #2
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	d106      	bne.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800ee14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee16:	2b20      	cmp	r3, #32
 800ee18:	d103      	bne.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800ee1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee20:	e011      	b.n	800ee46 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800ee22:	4b27      	ldr	r3, [pc, #156]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ee24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ee28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee30:	d106      	bne.n	800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800ee32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee34:	2b30      	cmp	r3, #48	@ 0x30
 800ee36:	d103      	bne.n	800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800ee38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ee3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee3e:	e002      	b.n	800ee46 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800ee40:	2300      	movs	r3, #0
 800ee42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ee44:	e037      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ee46:	e036      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800ee48:	4b1d      	ldr	r3, [pc, #116]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ee4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ee4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ee52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800ee54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee56:	2b10      	cmp	r3, #16
 800ee58:	d107      	bne.n	800ee6a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee5a:	f107 0320 	add.w	r3, r7, #32
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fd f89a 	bl	800bf98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee66:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ee68:	e025      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800ee6a:	4b15      	ldr	r3, [pc, #84]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee76:	d10a      	bne.n	800ee8e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800ee78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7a:	2b20      	cmp	r3, #32
 800ee7c:	d107      	bne.n	800ee8e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee7e:	f107 0308 	add.w	r3, r7, #8
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fd fb60 	bl	800c548 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee8c:	e00f      	b.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ee8e:	4b0c      	ldr	r3, [pc, #48]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee9a:	d105      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ee9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9e:	2b30      	cmp	r3, #48	@ 0x30
 800eea0:	d102      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800eea2:	4b0b      	ldr	r3, [pc, #44]	@ (800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800eea4:	637b      	str	r3, [r7, #52]	@ 0x34
 800eea6:	e002      	b.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800eeac:	e003      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eeae:	e002      	b.n	800eeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800eeb4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800eeb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	373c      	adds	r7, #60	@ 0x3c
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd90      	pop	{r4, r7, pc}
 800eec0:	44020c00 	.word	0x44020c00
 800eec4:	03d09000 	.word	0x03d09000
 800eec8:	003d0900 	.word	0x003d0900
 800eecc:	017d7840 	.word	0x017d7840
 800eed0:	02dc6c00 	.word	0x02dc6c00

0800eed4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800eedc:	4b48      	ldr	r3, [pc, #288]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a47      	ldr	r2, [pc, #284]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800eee2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eee6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eee8:	f7f9 fe38 	bl	8008b5c <HAL_GetTick>
 800eeec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eeee:	e008      	b.n	800ef02 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eef0:	f7f9 fe34 	bl	8008b5c <HAL_GetTick>
 800eef4:	4602      	mov	r2, r0
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d901      	bls.n	800ef02 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e07a      	b.n	800eff8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ef02:	4b3f      	ldr	r3, [pc, #252]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1f0      	bne.n	800eef0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ef0e:	4b3c      	ldr	r3, [pc, #240]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ef16:	f023 0303 	bic.w	r3, r3, #3
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	6811      	ldr	r1, [r2, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	6852      	ldr	r2, [r2, #4]
 800ef22:	0212      	lsls	r2, r2, #8
 800ef24:	430a      	orrs	r2, r1
 800ef26:	4936      	ldr	r1, [pc, #216]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	3b01      	subs	r3, #1
 800ef32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	025b      	lsls	r3, r3, #9
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	431a      	orrs	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	041b      	lsls	r3, r3, #16
 800ef4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ef4e:	431a      	orrs	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	695b      	ldr	r3, [r3, #20]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	061b      	lsls	r3, r3, #24
 800ef58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ef5c:	4928      	ldr	r1, [pc, #160]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ef62:	4b27      	ldr	r3, [pc, #156]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef66:	f023 020c 	bic.w	r2, r3, #12
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	4924      	ldr	r1, [pc, #144]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef70:	4313      	orrs	r3, r2
 800ef72:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800ef74:	4b22      	ldr	r3, [pc, #136]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef78:	f023 0220 	bic.w	r2, r3, #32
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	69db      	ldr	r3, [r3, #28]
 800ef80:	491f      	ldr	r1, [pc, #124]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef82:	4313      	orrs	r3, r2
 800ef84:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ef86:	4b1e      	ldr	r3, [pc, #120]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef8e:	491c      	ldr	r1, [pc, #112]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef90:	4313      	orrs	r3, r2
 800ef92:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800ef94:	4b1a      	ldr	r3, [pc, #104]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef98:	4a19      	ldr	r2, [pc, #100]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800ef9a:	f023 0310 	bic.w	r3, r3, #16
 800ef9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800efa0:	4b17      	ldr	r3, [pc, #92]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800efa8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	6a12      	ldr	r2, [r2, #32]
 800efb0:	00d2      	lsls	r2, r2, #3
 800efb2:	4913      	ldr	r1, [pc, #76]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efb4:	4313      	orrs	r3, r2
 800efb6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800efb8:	4b11      	ldr	r3, [pc, #68]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efbc:	4a10      	ldr	r2, [pc, #64]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efbe:	f043 0310 	orr.w	r3, r3, #16
 800efc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800efc4:	4b0e      	ldr	r3, [pc, #56]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4a0d      	ldr	r2, [pc, #52]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800efce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800efd0:	f7f9 fdc4 	bl	8008b5c <HAL_GetTick>
 800efd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800efd6:	e008      	b.n	800efea <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800efd8:	f7f9 fdc0 	bl	8008b5c <HAL_GetTick>
 800efdc:	4602      	mov	r2, r0
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	d901      	bls.n	800efea <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800efe6:	2303      	movs	r3, #3
 800efe8:	e006      	b.n	800eff8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800efea:	4b05      	ldr	r3, [pc, #20]	@ (800f000 <RCCEx_PLL2_Config+0x12c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d0f0      	beq.n	800efd8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800eff6:	2300      	movs	r3, #0

}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	44020c00 	.word	0x44020c00

0800f004 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800f00c:	4b48      	ldr	r3, [pc, #288]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a47      	ldr	r2, [pc, #284]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f016:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f018:	f7f9 fda0 	bl	8008b5c <HAL_GetTick>
 800f01c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f01e:	e008      	b.n	800f032 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f020:	f7f9 fd9c 	bl	8008b5c <HAL_GetTick>
 800f024:	4602      	mov	r2, r0
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d901      	bls.n	800f032 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e07a      	b.n	800f128 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f032:	4b3f      	ldr	r3, [pc, #252]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1f0      	bne.n	800f020 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800f03e:	4b3c      	ldr	r3, [pc, #240]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f042:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f046:	f023 0303 	bic.w	r3, r3, #3
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	6811      	ldr	r1, [r2, #0]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	6852      	ldr	r2, [r2, #4]
 800f052:	0212      	lsls	r2, r2, #8
 800f054:	430a      	orrs	r2, r1
 800f056:	4936      	ldr	r1, [pc, #216]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f058:	4313      	orrs	r3, r2
 800f05a:	630b      	str	r3, [r1, #48]	@ 0x30
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	3b01      	subs	r3, #1
 800f062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	3b01      	subs	r3, #1
 800f06c:	025b      	lsls	r3, r3, #9
 800f06e:	b29b      	uxth	r3, r3
 800f070:	431a      	orrs	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	3b01      	subs	r3, #1
 800f078:	041b      	lsls	r3, r3, #16
 800f07a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f07e:	431a      	orrs	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	695b      	ldr	r3, [r3, #20]
 800f084:	3b01      	subs	r3, #1
 800f086:	061b      	lsls	r3, r3, #24
 800f088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f08c:	4928      	ldr	r1, [pc, #160]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f08e:	4313      	orrs	r3, r2
 800f090:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f092:	4b27      	ldr	r3, [pc, #156]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f096:	f023 020c 	bic.w	r2, r3, #12
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	4924      	ldr	r1, [pc, #144]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800f0a4:	4b22      	ldr	r3, [pc, #136]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0a8:	f023 0220 	bic.w	r2, r3, #32
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	491f      	ldr	r1, [pc, #124]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800f0b6:	4b1e      	ldr	r3, [pc, #120]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0be:	491c      	ldr	r1, [pc, #112]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800f0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0c8:	4a19      	ldr	r2, [pc, #100]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0ca:	f023 0310 	bic.w	r3, r3, #16
 800f0ce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800f0d0:	4b17      	ldr	r3, [pc, #92]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f0d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	6a12      	ldr	r2, [r2, #32]
 800f0e0:	00d2      	lsls	r2, r2, #3
 800f0e2:	4913      	ldr	r1, [pc, #76]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800f0e8:	4b11      	ldr	r3, [pc, #68]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0ec:	4a10      	ldr	r2, [pc, #64]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0ee:	f043 0310 	orr.w	r3, r3, #16
 800f0f2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800f0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a0d      	ldr	r2, [pc, #52]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f0fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f100:	f7f9 fd2c 	bl	8008b5c <HAL_GetTick>
 800f104:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f106:	e008      	b.n	800f11a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f108:	f7f9 fd28 	bl	8008b5c <HAL_GetTick>
 800f10c:	4602      	mov	r2, r0
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	2b02      	cmp	r3, #2
 800f114:	d901      	bls.n	800f11a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800f116:	2303      	movs	r3, #3
 800f118:	e006      	b.n	800f128 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f11a:	4b05      	ldr	r3, [pc, #20]	@ (800f130 <RCCEx_PLL3_Config+0x12c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f122:	2b00      	cmp	r3, #0
 800f124:	d0f0      	beq.n	800f108 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	44020c00 	.word	0x44020c00

0800f134 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f142:	2b01      	cmp	r3, #1
 800f144:	d101      	bne.n	800f14a <HAL_UARTEx_DisableFifoMode+0x16>
 800f146:	2302      	movs	r3, #2
 800f148:	e027      	b.n	800f19a <HAL_UARTEx_DisableFifoMode+0x66>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2201      	movs	r2, #1
 800f14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2224      	movs	r2, #36	@ 0x24
 800f156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f022 0201 	bic.w	r2, r2, #1
 800f170:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f178:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3714      	adds	r7, #20
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b084      	sub	sp, #16
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
 800f1ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d101      	bne.n	800f1be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e02d      	b.n	800f21a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2224      	movs	r2, #36	@ 0x24
 800f1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f022 0201 	bic.w	r2, r2, #1
 800f1e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	430a      	orrs	r2, r1
 800f1f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 f850 	bl	800f2a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2220      	movs	r2, #32
 800f20c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f232:	2b01      	cmp	r3, #1
 800f234:	d101      	bne.n	800f23a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f236:	2302      	movs	r3, #2
 800f238:	e02d      	b.n	800f296 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2201      	movs	r2, #1
 800f23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2224      	movs	r2, #36	@ 0x24
 800f246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f022 0201 	bic.w	r2, r2, #1
 800f260:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	430a      	orrs	r2, r1
 800f274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 f812 	bl	800f2a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2220      	movs	r2, #32
 800f288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d108      	bne.n	800f2c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2c0:	e031      	b.n	800f326 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2c2:	2308      	movs	r3, #8
 800f2c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2c6:	2308      	movs	r3, #8
 800f2c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	0e5b      	lsrs	r3, r3, #25
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	f003 0307 	and.w	r3, r3, #7
 800f2d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	0f5b      	lsrs	r3, r3, #29
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	f003 0307 	and.w	r3, r3, #7
 800f2e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2ea:	7bbb      	ldrb	r3, [r7, #14]
 800f2ec:	7b3a      	ldrb	r2, [r7, #12]
 800f2ee:	4911      	ldr	r1, [pc, #68]	@ (800f334 <UARTEx_SetNbDataToProcess+0x94>)
 800f2f0:	5c8a      	ldrb	r2, [r1, r2]
 800f2f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2f6:	7b3a      	ldrb	r2, [r7, #12]
 800f2f8:	490f      	ldr	r1, [pc, #60]	@ (800f338 <UARTEx_SetNbDataToProcess+0x98>)
 800f2fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f300:	b29a      	uxth	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	7b7a      	ldrb	r2, [r7, #13]
 800f30c:	4909      	ldr	r1, [pc, #36]	@ (800f334 <UARTEx_SetNbDataToProcess+0x94>)
 800f30e:	5c8a      	ldrb	r2, [r1, r2]
 800f310:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f314:	7b7a      	ldrb	r2, [r7, #13]
 800f316:	4908      	ldr	r1, [pc, #32]	@ (800f338 <UARTEx_SetNbDataToProcess+0x98>)
 800f318:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f31a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f31e:	b29a      	uxth	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f326:	bf00      	nop
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	080114d4 	.word	0x080114d4
 800f338:	080114dc 	.word	0x080114dc

0800f33c <__assert_func>:
 800f33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f33e:	4614      	mov	r4, r2
 800f340:	461a      	mov	r2, r3
 800f342:	4b09      	ldr	r3, [pc, #36]	@ (800f368 <__assert_func+0x2c>)
 800f344:	4605      	mov	r5, r0
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68d8      	ldr	r0, [r3, #12]
 800f34a:	b14c      	cbz	r4, 800f360 <__assert_func+0x24>
 800f34c:	4b07      	ldr	r3, [pc, #28]	@ (800f36c <__assert_func+0x30>)
 800f34e:	9100      	str	r1, [sp, #0]
 800f350:	4907      	ldr	r1, [pc, #28]	@ (800f370 <__assert_func+0x34>)
 800f352:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f356:	462b      	mov	r3, r5
 800f358:	f000 f970 	bl	800f63c <fiprintf>
 800f35c:	f000 fabc 	bl	800f8d8 <abort>
 800f360:	4b04      	ldr	r3, [pc, #16]	@ (800f374 <__assert_func+0x38>)
 800f362:	461c      	mov	r4, r3
 800f364:	e7f3      	b.n	800f34e <__assert_func+0x12>
 800f366:	bf00      	nop
 800f368:	20000070 	.word	0x20000070
 800f36c:	080114e4 	.word	0x080114e4
 800f370:	080114f1 	.word	0x080114f1
 800f374:	0801151f 	.word	0x0801151f

0800f378 <malloc>:
 800f378:	4b02      	ldr	r3, [pc, #8]	@ (800f384 <malloc+0xc>)
 800f37a:	4601      	mov	r1, r0
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	f000 b82d 	b.w	800f3dc <_malloc_r>
 800f382:	bf00      	nop
 800f384:	20000070 	.word	0x20000070

0800f388 <free>:
 800f388:	4b02      	ldr	r3, [pc, #8]	@ (800f394 <free+0xc>)
 800f38a:	4601      	mov	r1, r0
 800f38c:	6818      	ldr	r0, [r3, #0]
 800f38e:	f000 baab 	b.w	800f8e8 <_free_r>
 800f392:	bf00      	nop
 800f394:	20000070 	.word	0x20000070

0800f398 <sbrk_aligned>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4e0f      	ldr	r6, [pc, #60]	@ (800f3d8 <sbrk_aligned+0x40>)
 800f39c:	460c      	mov	r4, r1
 800f39e:	4605      	mov	r5, r0
 800f3a0:	6831      	ldr	r1, [r6, #0]
 800f3a2:	b911      	cbnz	r1, 800f3aa <sbrk_aligned+0x12>
 800f3a4:	f000 fa3c 	bl	800f820 <_sbrk_r>
 800f3a8:	6030      	str	r0, [r6, #0]
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f000 fa37 	bl	800f820 <_sbrk_r>
 800f3b2:	1c43      	adds	r3, r0, #1
 800f3b4:	d103      	bne.n	800f3be <sbrk_aligned+0x26>
 800f3b6:	f04f 34ff 	mov.w	r4, #4294967295
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	1cc4      	adds	r4, r0, #3
 800f3c0:	f024 0403 	bic.w	r4, r4, #3
 800f3c4:	42a0      	cmp	r0, r4
 800f3c6:	d0f8      	beq.n	800f3ba <sbrk_aligned+0x22>
 800f3c8:	1a21      	subs	r1, r4, r0
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f000 fa28 	bl	800f820 <_sbrk_r>
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d1f2      	bne.n	800f3ba <sbrk_aligned+0x22>
 800f3d4:	e7ef      	b.n	800f3b6 <sbrk_aligned+0x1e>
 800f3d6:	bf00      	nop
 800f3d8:	20000178 	.word	0x20000178

0800f3dc <_malloc_r>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	1ccd      	adds	r5, r1, #3
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	f025 0503 	bic.w	r5, r5, #3
 800f3e8:	3508      	adds	r5, #8
 800f3ea:	2d0c      	cmp	r5, #12
 800f3ec:	bf38      	it	cc
 800f3ee:	250c      	movcc	r5, #12
 800f3f0:	2d00      	cmp	r5, #0
 800f3f2:	db01      	blt.n	800f3f8 <_malloc_r+0x1c>
 800f3f4:	42a9      	cmp	r1, r5
 800f3f6:	d904      	bls.n	800f402 <_malloc_r+0x26>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	6033      	str	r3, [r6, #0]
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4d8 <_malloc_r+0xfc>
 800f406:	f000 f869 	bl	800f4dc <__malloc_lock>
 800f40a:	f8d8 3000 	ldr.w	r3, [r8]
 800f40e:	461c      	mov	r4, r3
 800f410:	bb44      	cbnz	r4, 800f464 <_malloc_r+0x88>
 800f412:	4629      	mov	r1, r5
 800f414:	4630      	mov	r0, r6
 800f416:	f7ff ffbf 	bl	800f398 <sbrk_aligned>
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	4604      	mov	r4, r0
 800f41e:	d158      	bne.n	800f4d2 <_malloc_r+0xf6>
 800f420:	f8d8 4000 	ldr.w	r4, [r8]
 800f424:	4627      	mov	r7, r4
 800f426:	2f00      	cmp	r7, #0
 800f428:	d143      	bne.n	800f4b2 <_malloc_r+0xd6>
 800f42a:	2c00      	cmp	r4, #0
 800f42c:	d04b      	beq.n	800f4c6 <_malloc_r+0xea>
 800f42e:	6823      	ldr	r3, [r4, #0]
 800f430:	4639      	mov	r1, r7
 800f432:	4630      	mov	r0, r6
 800f434:	eb04 0903 	add.w	r9, r4, r3
 800f438:	f000 f9f2 	bl	800f820 <_sbrk_r>
 800f43c:	4581      	cmp	r9, r0
 800f43e:	d142      	bne.n	800f4c6 <_malloc_r+0xea>
 800f440:	6821      	ldr	r1, [r4, #0]
 800f442:	4630      	mov	r0, r6
 800f444:	1a6d      	subs	r5, r5, r1
 800f446:	4629      	mov	r1, r5
 800f448:	f7ff ffa6 	bl	800f398 <sbrk_aligned>
 800f44c:	3001      	adds	r0, #1
 800f44e:	d03a      	beq.n	800f4c6 <_malloc_r+0xea>
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	442b      	add	r3, r5
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	f8d8 3000 	ldr.w	r3, [r8]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	bb62      	cbnz	r2, 800f4b8 <_malloc_r+0xdc>
 800f45e:	f8c8 7000 	str.w	r7, [r8]
 800f462:	e00f      	b.n	800f484 <_malloc_r+0xa8>
 800f464:	6822      	ldr	r2, [r4, #0]
 800f466:	1b52      	subs	r2, r2, r5
 800f468:	d420      	bmi.n	800f4ac <_malloc_r+0xd0>
 800f46a:	2a0b      	cmp	r2, #11
 800f46c:	d917      	bls.n	800f49e <_malloc_r+0xc2>
 800f46e:	1961      	adds	r1, r4, r5
 800f470:	42a3      	cmp	r3, r4
 800f472:	6025      	str	r5, [r4, #0]
 800f474:	bf18      	it	ne
 800f476:	6059      	strne	r1, [r3, #4]
 800f478:	6863      	ldr	r3, [r4, #4]
 800f47a:	bf08      	it	eq
 800f47c:	f8c8 1000 	streq.w	r1, [r8]
 800f480:	5162      	str	r2, [r4, r5]
 800f482:	604b      	str	r3, [r1, #4]
 800f484:	4630      	mov	r0, r6
 800f486:	f000 f82f 	bl	800f4e8 <__malloc_unlock>
 800f48a:	f104 000b 	add.w	r0, r4, #11
 800f48e:	1d23      	adds	r3, r4, #4
 800f490:	f020 0007 	bic.w	r0, r0, #7
 800f494:	1ac2      	subs	r2, r0, r3
 800f496:	bf1c      	itt	ne
 800f498:	1a1b      	subne	r3, r3, r0
 800f49a:	50a3      	strne	r3, [r4, r2]
 800f49c:	e7af      	b.n	800f3fe <_malloc_r+0x22>
 800f49e:	6862      	ldr	r2, [r4, #4]
 800f4a0:	42a3      	cmp	r3, r4
 800f4a2:	bf0c      	ite	eq
 800f4a4:	f8c8 2000 	streq.w	r2, [r8]
 800f4a8:	605a      	strne	r2, [r3, #4]
 800f4aa:	e7eb      	b.n	800f484 <_malloc_r+0xa8>
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	6864      	ldr	r4, [r4, #4]
 800f4b0:	e7ae      	b.n	800f410 <_malloc_r+0x34>
 800f4b2:	463c      	mov	r4, r7
 800f4b4:	687f      	ldr	r7, [r7, #4]
 800f4b6:	e7b6      	b.n	800f426 <_malloc_r+0x4a>
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	42a3      	cmp	r3, r4
 800f4be:	d1fb      	bne.n	800f4b8 <_malloc_r+0xdc>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	6053      	str	r3, [r2, #4]
 800f4c4:	e7de      	b.n	800f484 <_malloc_r+0xa8>
 800f4c6:	230c      	movs	r3, #12
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	6033      	str	r3, [r6, #0]
 800f4cc:	f000 f80c 	bl	800f4e8 <__malloc_unlock>
 800f4d0:	e794      	b.n	800f3fc <_malloc_r+0x20>
 800f4d2:	6005      	str	r5, [r0, #0]
 800f4d4:	e7d6      	b.n	800f484 <_malloc_r+0xa8>
 800f4d6:	bf00      	nop
 800f4d8:	2000017c 	.word	0x2000017c

0800f4dc <__malloc_lock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	@ (800f4e4 <__malloc_lock+0x8>)
 800f4de:	f000 b9ec 	b.w	800f8ba <__retarget_lock_acquire_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	200002c0 	.word	0x200002c0

0800f4e8 <__malloc_unlock>:
 800f4e8:	4801      	ldr	r0, [pc, #4]	@ (800f4f0 <__malloc_unlock+0x8>)
 800f4ea:	f000 b9e7 	b.w	800f8bc <__retarget_lock_release_recursive>
 800f4ee:	bf00      	nop
 800f4f0:	200002c0 	.word	0x200002c0

0800f4f4 <std>:
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	b510      	push	{r4, lr}
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	6083      	str	r3, [r0, #8]
 800f4fc:	8181      	strh	r1, [r0, #12]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6643      	str	r3, [r0, #100]	@ 0x64
 800f502:	81c2      	strh	r2, [r0, #14]
 800f504:	2208      	movs	r2, #8
 800f506:	6183      	str	r3, [r0, #24]
 800f508:	e9c0 3300 	strd	r3, r3, [r0]
 800f50c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f510:	305c      	adds	r0, #92	@ 0x5c
 800f512:	f000 f928 	bl	800f766 <memset>
 800f516:	4b0d      	ldr	r3, [pc, #52]	@ (800f54c <std+0x58>)
 800f518:	6224      	str	r4, [r4, #32]
 800f51a:	6263      	str	r3, [r4, #36]	@ 0x24
 800f51c:	4b0c      	ldr	r3, [pc, #48]	@ (800f550 <std+0x5c>)
 800f51e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f520:	4b0c      	ldr	r3, [pc, #48]	@ (800f554 <std+0x60>)
 800f522:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f524:	4b0c      	ldr	r3, [pc, #48]	@ (800f558 <std+0x64>)
 800f526:	6323      	str	r3, [r4, #48]	@ 0x30
 800f528:	4b0c      	ldr	r3, [pc, #48]	@ (800f55c <std+0x68>)
 800f52a:	429c      	cmp	r4, r3
 800f52c:	d006      	beq.n	800f53c <std+0x48>
 800f52e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f532:	4294      	cmp	r4, r2
 800f534:	d002      	beq.n	800f53c <std+0x48>
 800f536:	33d0      	adds	r3, #208	@ 0xd0
 800f538:	429c      	cmp	r4, r3
 800f53a:	d105      	bne.n	800f548 <std+0x54>
 800f53c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f544:	f000 b9b8 	b.w	800f8b8 <__retarget_lock_init_recursive>
 800f548:	bd10      	pop	{r4, pc}
 800f54a:	bf00      	nop
 800f54c:	0800f6c1 	.word	0x0800f6c1
 800f550:	0800f6e3 	.word	0x0800f6e3
 800f554:	0800f71b 	.word	0x0800f71b
 800f558:	0800f73f 	.word	0x0800f73f
 800f55c:	20000180 	.word	0x20000180

0800f560 <stdio_exit_handler>:
 800f560:	4a02      	ldr	r2, [pc, #8]	@ (800f56c <stdio_exit_handler+0xc>)
 800f562:	4903      	ldr	r1, [pc, #12]	@ (800f570 <stdio_exit_handler+0x10>)
 800f564:	4803      	ldr	r0, [pc, #12]	@ (800f574 <stdio_exit_handler+0x14>)
 800f566:	f000 b87b 	b.w	800f660 <_fwalk_sglue>
 800f56a:	bf00      	nop
 800f56c:	20000064 	.word	0x20000064
 800f570:	08010029 	.word	0x08010029
 800f574:	20000074 	.word	0x20000074

0800f578 <cleanup_stdio>:
 800f578:	6841      	ldr	r1, [r0, #4]
 800f57a:	4b0c      	ldr	r3, [pc, #48]	@ (800f5ac <cleanup_stdio+0x34>)
 800f57c:	4299      	cmp	r1, r3
 800f57e:	b510      	push	{r4, lr}
 800f580:	4604      	mov	r4, r0
 800f582:	d001      	beq.n	800f588 <cleanup_stdio+0x10>
 800f584:	f000 fd50 	bl	8010028 <_fflush_r>
 800f588:	68a1      	ldr	r1, [r4, #8]
 800f58a:	4b09      	ldr	r3, [pc, #36]	@ (800f5b0 <cleanup_stdio+0x38>)
 800f58c:	4299      	cmp	r1, r3
 800f58e:	d002      	beq.n	800f596 <cleanup_stdio+0x1e>
 800f590:	4620      	mov	r0, r4
 800f592:	f000 fd49 	bl	8010028 <_fflush_r>
 800f596:	68e1      	ldr	r1, [r4, #12]
 800f598:	4b06      	ldr	r3, [pc, #24]	@ (800f5b4 <cleanup_stdio+0x3c>)
 800f59a:	4299      	cmp	r1, r3
 800f59c:	d004      	beq.n	800f5a8 <cleanup_stdio+0x30>
 800f59e:	4620      	mov	r0, r4
 800f5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a4:	f000 bd40 	b.w	8010028 <_fflush_r>
 800f5a8:	bd10      	pop	{r4, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000180 	.word	0x20000180
 800f5b0:	200001e8 	.word	0x200001e8
 800f5b4:	20000250 	.word	0x20000250

0800f5b8 <global_stdio_init.part.0>:
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f5e8 <global_stdio_init.part.0+0x30>)
 800f5bc:	2104      	movs	r1, #4
 800f5be:	4c0b      	ldr	r4, [pc, #44]	@ (800f5ec <global_stdio_init.part.0+0x34>)
 800f5c0:	4a0b      	ldr	r2, [pc, #44]	@ (800f5f0 <global_stdio_init.part.0+0x38>)
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	601a      	str	r2, [r3, #0]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f7ff ff94 	bl	800f4f4 <std>
 800f5cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	2109      	movs	r1, #9
 800f5d4:	f7ff ff8e 	bl	800f4f4 <std>
 800f5d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f5dc:	2202      	movs	r2, #2
 800f5de:	2112      	movs	r1, #18
 800f5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e4:	f7ff bf86 	b.w	800f4f4 <std>
 800f5e8:	200002b8 	.word	0x200002b8
 800f5ec:	20000180 	.word	0x20000180
 800f5f0:	0800f561 	.word	0x0800f561

0800f5f4 <__sfp_lock_acquire>:
 800f5f4:	4801      	ldr	r0, [pc, #4]	@ (800f5fc <__sfp_lock_acquire+0x8>)
 800f5f6:	f000 b960 	b.w	800f8ba <__retarget_lock_acquire_recursive>
 800f5fa:	bf00      	nop
 800f5fc:	200002c1 	.word	0x200002c1

0800f600 <__sfp_lock_release>:
 800f600:	4801      	ldr	r0, [pc, #4]	@ (800f608 <__sfp_lock_release+0x8>)
 800f602:	f000 b95b 	b.w	800f8bc <__retarget_lock_release_recursive>
 800f606:	bf00      	nop
 800f608:	200002c1 	.word	0x200002c1

0800f60c <__sinit>:
 800f60c:	b510      	push	{r4, lr}
 800f60e:	4604      	mov	r4, r0
 800f610:	f7ff fff0 	bl	800f5f4 <__sfp_lock_acquire>
 800f614:	6a23      	ldr	r3, [r4, #32]
 800f616:	b11b      	cbz	r3, 800f620 <__sinit+0x14>
 800f618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f61c:	f7ff bff0 	b.w	800f600 <__sfp_lock_release>
 800f620:	4b04      	ldr	r3, [pc, #16]	@ (800f634 <__sinit+0x28>)
 800f622:	6223      	str	r3, [r4, #32]
 800f624:	4b04      	ldr	r3, [pc, #16]	@ (800f638 <__sinit+0x2c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1f5      	bne.n	800f618 <__sinit+0xc>
 800f62c:	f7ff ffc4 	bl	800f5b8 <global_stdio_init.part.0>
 800f630:	e7f2      	b.n	800f618 <__sinit+0xc>
 800f632:	bf00      	nop
 800f634:	0800f579 	.word	0x0800f579
 800f638:	200002b8 	.word	0x200002b8

0800f63c <fiprintf>:
 800f63c:	b40e      	push	{r1, r2, r3}
 800f63e:	b503      	push	{r0, r1, lr}
 800f640:	ab03      	add	r3, sp, #12
 800f642:	4601      	mov	r1, r0
 800f644:	4805      	ldr	r0, [pc, #20]	@ (800f65c <fiprintf+0x20>)
 800f646:	f853 2b04 	ldr.w	r2, [r3], #4
 800f64a:	6800      	ldr	r0, [r0, #0]
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	f000 f9bf 	bl	800f9d0 <_vfiprintf_r>
 800f652:	b002      	add	sp, #8
 800f654:	f85d eb04 	ldr.w	lr, [sp], #4
 800f658:	b003      	add	sp, #12
 800f65a:	4770      	bx	lr
 800f65c:	20000070 	.word	0x20000070

0800f660 <_fwalk_sglue>:
 800f660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f664:	4607      	mov	r7, r0
 800f666:	4688      	mov	r8, r1
 800f668:	4614      	mov	r4, r2
 800f66a:	2600      	movs	r6, #0
 800f66c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f670:	f1b9 0901 	subs.w	r9, r9, #1
 800f674:	d505      	bpl.n	800f682 <_fwalk_sglue+0x22>
 800f676:	6824      	ldr	r4, [r4, #0]
 800f678:	2c00      	cmp	r4, #0
 800f67a:	d1f7      	bne.n	800f66c <_fwalk_sglue+0xc>
 800f67c:	4630      	mov	r0, r6
 800f67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	2b01      	cmp	r3, #1
 800f686:	d907      	bls.n	800f698 <_fwalk_sglue+0x38>
 800f688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f68c:	3301      	adds	r3, #1
 800f68e:	d003      	beq.n	800f698 <_fwalk_sglue+0x38>
 800f690:	4629      	mov	r1, r5
 800f692:	4638      	mov	r0, r7
 800f694:	47c0      	blx	r8
 800f696:	4306      	orrs	r6, r0
 800f698:	3568      	adds	r5, #104	@ 0x68
 800f69a:	e7e9      	b.n	800f670 <_fwalk_sglue+0x10>

0800f69c <iprintf>:
 800f69c:	b40f      	push	{r0, r1, r2, r3}
 800f69e:	b507      	push	{r0, r1, r2, lr}
 800f6a0:	4906      	ldr	r1, [pc, #24]	@ (800f6bc <iprintf+0x20>)
 800f6a2:	ab04      	add	r3, sp, #16
 800f6a4:	6808      	ldr	r0, [r1, #0]
 800f6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6aa:	6881      	ldr	r1, [r0, #8]
 800f6ac:	9301      	str	r3, [sp, #4]
 800f6ae:	f000 f98f 	bl	800f9d0 <_vfiprintf_r>
 800f6b2:	b003      	add	sp, #12
 800f6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6b8:	b004      	add	sp, #16
 800f6ba:	4770      	bx	lr
 800f6bc:	20000070 	.word	0x20000070

0800f6c0 <__sread>:
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c8:	f000 f898 	bl	800f7fc <_read_r>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	bfab      	itete	ge
 800f6d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f6d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f6d4:	181b      	addge	r3, r3, r0
 800f6d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f6da:	bfac      	ite	ge
 800f6dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f6de:	81a3      	strhlt	r3, [r4, #12]
 800f6e0:	bd10      	pop	{r4, pc}

0800f6e2 <__swrite>:
 800f6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e6:	461f      	mov	r7, r3
 800f6e8:	898b      	ldrh	r3, [r1, #12]
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	05db      	lsls	r3, r3, #23
 800f6f0:	4616      	mov	r6, r2
 800f6f2:	d505      	bpl.n	800f700 <__swrite+0x1e>
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6fc:	f000 f86c 	bl	800f7d8 <_lseek_r>
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	4632      	mov	r2, r6
 800f704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f708:	4628      	mov	r0, r5
 800f70a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f70e:	81a3      	strh	r3, [r4, #12]
 800f710:	463b      	mov	r3, r7
 800f712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f716:	f000 b893 	b.w	800f840 <_write_r>

0800f71a <__sseek>:
 800f71a:	b510      	push	{r4, lr}
 800f71c:	460c      	mov	r4, r1
 800f71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f722:	f000 f859 	bl	800f7d8 <_lseek_r>
 800f726:	1c43      	adds	r3, r0, #1
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	bf15      	itete	ne
 800f72c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f72e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f736:	81a3      	strheq	r3, [r4, #12]
 800f738:	bf18      	it	ne
 800f73a:	81a3      	strhne	r3, [r4, #12]
 800f73c:	bd10      	pop	{r4, pc}

0800f73e <__sclose>:
 800f73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f742:	f000 b839 	b.w	800f7b8 <_close_r>

0800f746 <memcmp>:
 800f746:	3901      	subs	r1, #1
 800f748:	4402      	add	r2, r0
 800f74a:	b510      	push	{r4, lr}
 800f74c:	4290      	cmp	r0, r2
 800f74e:	d101      	bne.n	800f754 <memcmp+0xe>
 800f750:	2000      	movs	r0, #0
 800f752:	e005      	b.n	800f760 <memcmp+0x1a>
 800f754:	7803      	ldrb	r3, [r0, #0]
 800f756:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f75a:	42a3      	cmp	r3, r4
 800f75c:	d001      	beq.n	800f762 <memcmp+0x1c>
 800f75e:	1b18      	subs	r0, r3, r4
 800f760:	bd10      	pop	{r4, pc}
 800f762:	3001      	adds	r0, #1
 800f764:	e7f2      	b.n	800f74c <memcmp+0x6>

0800f766 <memset>:
 800f766:	4402      	add	r2, r0
 800f768:	4603      	mov	r3, r0
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d100      	bne.n	800f770 <memset+0xa>
 800f76e:	4770      	bx	lr
 800f770:	f803 1b01 	strb.w	r1, [r3], #1
 800f774:	e7f9      	b.n	800f76a <memset+0x4>

0800f776 <strcspn>:
 800f776:	4603      	mov	r3, r0
 800f778:	b570      	push	{r4, r5, r6, lr}
 800f77a:	461e      	mov	r6, r3
 800f77c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f780:	b144      	cbz	r4, 800f794 <strcspn+0x1e>
 800f782:	1e4a      	subs	r2, r1, #1
 800f784:	e001      	b.n	800f78a <strcspn+0x14>
 800f786:	42a5      	cmp	r5, r4
 800f788:	d004      	beq.n	800f794 <strcspn+0x1e>
 800f78a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800f78e:	2d00      	cmp	r5, #0
 800f790:	d1f9      	bne.n	800f786 <strcspn+0x10>
 800f792:	e7f2      	b.n	800f77a <strcspn+0x4>
 800f794:	1a30      	subs	r0, r6, r0
 800f796:	bd70      	pop	{r4, r5, r6, pc}

0800f798 <strspn>:
 800f798:	4603      	mov	r3, r0
 800f79a:	b570      	push	{r4, r5, r6, lr}
 800f79c:	461e      	mov	r6, r3
 800f79e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f7a2:	b13c      	cbz	r4, 800f7b4 <strspn+0x1c>
 800f7a4:	1e4a      	subs	r2, r1, #1
 800f7a6:	e001      	b.n	800f7ac <strspn+0x14>
 800f7a8:	42a5      	cmp	r5, r4
 800f7aa:	d0f7      	beq.n	800f79c <strspn+0x4>
 800f7ac:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800f7b0:	2d00      	cmp	r5, #0
 800f7b2:	d1f9      	bne.n	800f7a8 <strspn+0x10>
 800f7b4:	1a30      	subs	r0, r6, r0
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}

0800f7b8 <_close_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	4d05      	ldr	r5, [pc, #20]	@ (800f7d4 <_close_r+0x1c>)
 800f7be:	4604      	mov	r4, r0
 800f7c0:	4608      	mov	r0, r1
 800f7c2:	602b      	str	r3, [r5, #0]
 800f7c4:	f7f1 ffe8 	bl	8001798 <_close>
 800f7c8:	1c43      	adds	r3, r0, #1
 800f7ca:	d102      	bne.n	800f7d2 <_close_r+0x1a>
 800f7cc:	682b      	ldr	r3, [r5, #0]
 800f7ce:	b103      	cbz	r3, 800f7d2 <_close_r+0x1a>
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	bd38      	pop	{r3, r4, r5, pc}
 800f7d4:	200002bc 	.word	0x200002bc

0800f7d8 <_lseek_r>:
 800f7d8:	b538      	push	{r3, r4, r5, lr}
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4d06      	ldr	r5, [pc, #24]	@ (800f7f8 <_lseek_r+0x20>)
 800f7de:	4608      	mov	r0, r1
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	602a      	str	r2, [r5, #0]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	f7f1 fffd 	bl	80017e6 <_lseek>
 800f7ec:	1c43      	adds	r3, r0, #1
 800f7ee:	d102      	bne.n	800f7f6 <_lseek_r+0x1e>
 800f7f0:	682b      	ldr	r3, [r5, #0]
 800f7f2:	b103      	cbz	r3, 800f7f6 <_lseek_r+0x1e>
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	bd38      	pop	{r3, r4, r5, pc}
 800f7f8:	200002bc 	.word	0x200002bc

0800f7fc <_read_r>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	4604      	mov	r4, r0
 800f800:	4d06      	ldr	r5, [pc, #24]	@ (800f81c <_read_r+0x20>)
 800f802:	4608      	mov	r0, r1
 800f804:	4611      	mov	r1, r2
 800f806:	2200      	movs	r2, #0
 800f808:	602a      	str	r2, [r5, #0]
 800f80a:	461a      	mov	r2, r3
 800f80c:	f7f1 ff8b 	bl	8001726 <_read>
 800f810:	1c43      	adds	r3, r0, #1
 800f812:	d102      	bne.n	800f81a <_read_r+0x1e>
 800f814:	682b      	ldr	r3, [r5, #0]
 800f816:	b103      	cbz	r3, 800f81a <_read_r+0x1e>
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	bd38      	pop	{r3, r4, r5, pc}
 800f81c:	200002bc 	.word	0x200002bc

0800f820 <_sbrk_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	2300      	movs	r3, #0
 800f824:	4d05      	ldr	r5, [pc, #20]	@ (800f83c <_sbrk_r+0x1c>)
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	f7f1 ffe8 	bl	8001800 <_sbrk>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d102      	bne.n	800f83a <_sbrk_r+0x1a>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b103      	cbz	r3, 800f83a <_sbrk_r+0x1a>
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	200002bc 	.word	0x200002bc

0800f840 <_write_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4604      	mov	r4, r0
 800f844:	4d06      	ldr	r5, [pc, #24]	@ (800f860 <_write_r+0x20>)
 800f846:	4608      	mov	r0, r1
 800f848:	4611      	mov	r1, r2
 800f84a:	2200      	movs	r2, #0
 800f84c:	602a      	str	r2, [r5, #0]
 800f84e:	461a      	mov	r2, r3
 800f850:	f7f1 ff86 	bl	8001760 <_write>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_write_r+0x1e>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_write_r+0x1e>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	200002bc 	.word	0x200002bc

0800f864 <__errno>:
 800f864:	4b01      	ldr	r3, [pc, #4]	@ (800f86c <__errno+0x8>)
 800f866:	6818      	ldr	r0, [r3, #0]
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	20000070 	.word	0x20000070

0800f870 <__libc_init_array>:
 800f870:	b570      	push	{r4, r5, r6, lr}
 800f872:	4d0d      	ldr	r5, [pc, #52]	@ (800f8a8 <__libc_init_array+0x38>)
 800f874:	2600      	movs	r6, #0
 800f876:	4c0d      	ldr	r4, [pc, #52]	@ (800f8ac <__libc_init_array+0x3c>)
 800f878:	1b64      	subs	r4, r4, r5
 800f87a:	10a4      	asrs	r4, r4, #2
 800f87c:	42a6      	cmp	r6, r4
 800f87e:	d109      	bne.n	800f894 <__libc_init_array+0x24>
 800f880:	4d0b      	ldr	r5, [pc, #44]	@ (800f8b0 <__libc_init_array+0x40>)
 800f882:	2600      	movs	r6, #0
 800f884:	4c0b      	ldr	r4, [pc, #44]	@ (800f8b4 <__libc_init_array+0x44>)
 800f886:	f000 fd61 	bl	801034c <_init>
 800f88a:	1b64      	subs	r4, r4, r5
 800f88c:	10a4      	asrs	r4, r4, #2
 800f88e:	42a6      	cmp	r6, r4
 800f890:	d105      	bne.n	800f89e <__libc_init_array+0x2e>
 800f892:	bd70      	pop	{r4, r5, r6, pc}
 800f894:	f855 3b04 	ldr.w	r3, [r5], #4
 800f898:	3601      	adds	r6, #1
 800f89a:	4798      	blx	r3
 800f89c:	e7ee      	b.n	800f87c <__libc_init_array+0xc>
 800f89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a2:	3601      	adds	r6, #1
 800f8a4:	4798      	blx	r3
 800f8a6:	e7f2      	b.n	800f88e <__libc_init_array+0x1e>
 800f8a8:	0801155c 	.word	0x0801155c
 800f8ac:	0801155c 	.word	0x0801155c
 800f8b0:	0801155c 	.word	0x0801155c
 800f8b4:	08011560 	.word	0x08011560

0800f8b8 <__retarget_lock_init_recursive>:
 800f8b8:	4770      	bx	lr

0800f8ba <__retarget_lock_acquire_recursive>:
 800f8ba:	4770      	bx	lr

0800f8bc <__retarget_lock_release_recursive>:
 800f8bc:	4770      	bx	lr

0800f8be <memcpy>:
 800f8be:	440a      	add	r2, r1
 800f8c0:	1e43      	subs	r3, r0, #1
 800f8c2:	4291      	cmp	r1, r2
 800f8c4:	d100      	bne.n	800f8c8 <memcpy+0xa>
 800f8c6:	4770      	bx	lr
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8ce:	4291      	cmp	r1, r2
 800f8d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8d4:	d1f9      	bne.n	800f8ca <memcpy+0xc>
 800f8d6:	bd10      	pop	{r4, pc}

0800f8d8 <abort>:
 800f8d8:	2006      	movs	r0, #6
 800f8da:	b508      	push	{r3, lr}
 800f8dc:	f000 fc88 	bl	80101f0 <raise>
 800f8e0:	2001      	movs	r0, #1
 800f8e2:	f7f1 ff15 	bl	8001710 <_exit>
	...

0800f8e8 <_free_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	d041      	beq.n	800f974 <_free_r+0x8c>
 800f8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8f4:	1f0c      	subs	r4, r1, #4
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	bfb8      	it	lt
 800f8fa:	18e4      	addlt	r4, r4, r3
 800f8fc:	f7ff fdee 	bl	800f4dc <__malloc_lock>
 800f900:	4a1d      	ldr	r2, [pc, #116]	@ (800f978 <_free_r+0x90>)
 800f902:	6813      	ldr	r3, [r2, #0]
 800f904:	b933      	cbnz	r3, 800f914 <_free_r+0x2c>
 800f906:	6063      	str	r3, [r4, #4]
 800f908:	6014      	str	r4, [r2, #0]
 800f90a:	4628      	mov	r0, r5
 800f90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f910:	f7ff bdea 	b.w	800f4e8 <__malloc_unlock>
 800f914:	42a3      	cmp	r3, r4
 800f916:	d908      	bls.n	800f92a <_free_r+0x42>
 800f918:	6820      	ldr	r0, [r4, #0]
 800f91a:	1821      	adds	r1, r4, r0
 800f91c:	428b      	cmp	r3, r1
 800f91e:	bf01      	itttt	eq
 800f920:	6819      	ldreq	r1, [r3, #0]
 800f922:	685b      	ldreq	r3, [r3, #4]
 800f924:	1809      	addeq	r1, r1, r0
 800f926:	6021      	streq	r1, [r4, #0]
 800f928:	e7ed      	b.n	800f906 <_free_r+0x1e>
 800f92a:	461a      	mov	r2, r3
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	b10b      	cbz	r3, 800f934 <_free_r+0x4c>
 800f930:	42a3      	cmp	r3, r4
 800f932:	d9fa      	bls.n	800f92a <_free_r+0x42>
 800f934:	6811      	ldr	r1, [r2, #0]
 800f936:	1850      	adds	r0, r2, r1
 800f938:	42a0      	cmp	r0, r4
 800f93a:	d10b      	bne.n	800f954 <_free_r+0x6c>
 800f93c:	6820      	ldr	r0, [r4, #0]
 800f93e:	4401      	add	r1, r0
 800f940:	1850      	adds	r0, r2, r1
 800f942:	6011      	str	r1, [r2, #0]
 800f944:	4283      	cmp	r3, r0
 800f946:	d1e0      	bne.n	800f90a <_free_r+0x22>
 800f948:	6818      	ldr	r0, [r3, #0]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	4408      	add	r0, r1
 800f94e:	6053      	str	r3, [r2, #4]
 800f950:	6010      	str	r0, [r2, #0]
 800f952:	e7da      	b.n	800f90a <_free_r+0x22>
 800f954:	d902      	bls.n	800f95c <_free_r+0x74>
 800f956:	230c      	movs	r3, #12
 800f958:	602b      	str	r3, [r5, #0]
 800f95a:	e7d6      	b.n	800f90a <_free_r+0x22>
 800f95c:	6820      	ldr	r0, [r4, #0]
 800f95e:	1821      	adds	r1, r4, r0
 800f960:	428b      	cmp	r3, r1
 800f962:	bf02      	ittt	eq
 800f964:	6819      	ldreq	r1, [r3, #0]
 800f966:	685b      	ldreq	r3, [r3, #4]
 800f968:	1809      	addeq	r1, r1, r0
 800f96a:	6063      	str	r3, [r4, #4]
 800f96c:	bf08      	it	eq
 800f96e:	6021      	streq	r1, [r4, #0]
 800f970:	6054      	str	r4, [r2, #4]
 800f972:	e7ca      	b.n	800f90a <_free_r+0x22>
 800f974:	bd38      	pop	{r3, r4, r5, pc}
 800f976:	bf00      	nop
 800f978:	2000017c 	.word	0x2000017c

0800f97c <__sfputc_r>:
 800f97c:	6893      	ldr	r3, [r2, #8]
 800f97e:	3b01      	subs	r3, #1
 800f980:	2b00      	cmp	r3, #0
 800f982:	b410      	push	{r4}
 800f984:	6093      	str	r3, [r2, #8]
 800f986:	da08      	bge.n	800f99a <__sfputc_r+0x1e>
 800f988:	6994      	ldr	r4, [r2, #24]
 800f98a:	42a3      	cmp	r3, r4
 800f98c:	db01      	blt.n	800f992 <__sfputc_r+0x16>
 800f98e:	290a      	cmp	r1, #10
 800f990:	d103      	bne.n	800f99a <__sfputc_r+0x1e>
 800f992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f996:	f000 bb6f 	b.w	8010078 <__swbuf_r>
 800f99a:	6813      	ldr	r3, [r2, #0]
 800f99c:	1c58      	adds	r0, r3, #1
 800f99e:	6010      	str	r0, [r2, #0]
 800f9a0:	4608      	mov	r0, r1
 800f9a2:	7019      	strb	r1, [r3, #0]
 800f9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <__sfputs_r>:
 800f9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	460f      	mov	r7, r1
 800f9b0:	4614      	mov	r4, r2
 800f9b2:	18d5      	adds	r5, r2, r3
 800f9b4:	42ac      	cmp	r4, r5
 800f9b6:	d101      	bne.n	800f9bc <__sfputs_r+0x12>
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	e007      	b.n	800f9cc <__sfputs_r+0x22>
 800f9bc:	463a      	mov	r2, r7
 800f9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f7ff ffda 	bl	800f97c <__sfputc_r>
 800f9c8:	1c43      	adds	r3, r0, #1
 800f9ca:	d1f3      	bne.n	800f9b4 <__sfputs_r+0xa>
 800f9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9d0 <_vfiprintf_r>:
 800f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	460d      	mov	r5, r1
 800f9d6:	b09d      	sub	sp, #116	@ 0x74
 800f9d8:	4614      	mov	r4, r2
 800f9da:	4698      	mov	r8, r3
 800f9dc:	4606      	mov	r6, r0
 800f9de:	b118      	cbz	r0, 800f9e8 <_vfiprintf_r+0x18>
 800f9e0:	6a03      	ldr	r3, [r0, #32]
 800f9e2:	b90b      	cbnz	r3, 800f9e8 <_vfiprintf_r+0x18>
 800f9e4:	f7ff fe12 	bl	800f60c <__sinit>
 800f9e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9ea:	07d9      	lsls	r1, r3, #31
 800f9ec:	d405      	bmi.n	800f9fa <_vfiprintf_r+0x2a>
 800f9ee:	89ab      	ldrh	r3, [r5, #12]
 800f9f0:	059a      	lsls	r2, r3, #22
 800f9f2:	d402      	bmi.n	800f9fa <_vfiprintf_r+0x2a>
 800f9f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9f6:	f7ff ff60 	bl	800f8ba <__retarget_lock_acquire_recursive>
 800f9fa:	89ab      	ldrh	r3, [r5, #12]
 800f9fc:	071b      	lsls	r3, r3, #28
 800f9fe:	d501      	bpl.n	800fa04 <_vfiprintf_r+0x34>
 800fa00:	692b      	ldr	r3, [r5, #16]
 800fa02:	b99b      	cbnz	r3, 800fa2c <_vfiprintf_r+0x5c>
 800fa04:	4629      	mov	r1, r5
 800fa06:	4630      	mov	r0, r6
 800fa08:	f000 fb74 	bl	80100f4 <__swsetup_r>
 800fa0c:	b170      	cbz	r0, 800fa2c <_vfiprintf_r+0x5c>
 800fa0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa10:	07dc      	lsls	r4, r3, #31
 800fa12:	d504      	bpl.n	800fa1e <_vfiprintf_r+0x4e>
 800fa14:	f04f 30ff 	mov.w	r0, #4294967295
 800fa18:	b01d      	add	sp, #116	@ 0x74
 800fa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa1e:	89ab      	ldrh	r3, [r5, #12]
 800fa20:	0598      	lsls	r0, r3, #22
 800fa22:	d4f7      	bmi.n	800fa14 <_vfiprintf_r+0x44>
 800fa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa26:	f7ff ff49 	bl	800f8bc <__retarget_lock_release_recursive>
 800fa2a:	e7f3      	b.n	800fa14 <_vfiprintf_r+0x44>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa32:	f04f 0901 	mov.w	r9, #1
 800fa36:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800fbec <_vfiprintf_r+0x21c>
 800fa3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa3c:	2320      	movs	r3, #32
 800fa3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa42:	2330      	movs	r3, #48	@ 0x30
 800fa44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa48:	4623      	mov	r3, r4
 800fa4a:	469a      	mov	sl, r3
 800fa4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa50:	b10a      	cbz	r2, 800fa56 <_vfiprintf_r+0x86>
 800fa52:	2a25      	cmp	r2, #37	@ 0x25
 800fa54:	d1f9      	bne.n	800fa4a <_vfiprintf_r+0x7a>
 800fa56:	ebba 0b04 	subs.w	fp, sl, r4
 800fa5a:	d00b      	beq.n	800fa74 <_vfiprintf_r+0xa4>
 800fa5c:	465b      	mov	r3, fp
 800fa5e:	4622      	mov	r2, r4
 800fa60:	4629      	mov	r1, r5
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7ff ffa1 	bl	800f9aa <__sfputs_r>
 800fa68:	3001      	adds	r0, #1
 800fa6a:	f000 80a7 	beq.w	800fbbc <_vfiprintf_r+0x1ec>
 800fa6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa70:	445a      	add	r2, fp
 800fa72:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa74:	f89a 3000 	ldrb.w	r3, [sl]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f000 809f 	beq.w	800fbbc <_vfiprintf_r+0x1ec>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f04f 32ff 	mov.w	r2, #4294967295
 800fa84:	f10a 0a01 	add.w	sl, sl, #1
 800fa88:	9304      	str	r3, [sp, #16]
 800fa8a:	9307      	str	r3, [sp, #28]
 800fa8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa90:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa96:	4654      	mov	r4, sl
 800fa98:	2205      	movs	r2, #5
 800fa9a:	4854      	ldr	r0, [pc, #336]	@ (800fbec <_vfiprintf_r+0x21c>)
 800fa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faa0:	f000 fbc2 	bl	8010228 <memchr>
 800faa4:	9a04      	ldr	r2, [sp, #16]
 800faa6:	b9d8      	cbnz	r0, 800fae0 <_vfiprintf_r+0x110>
 800faa8:	06d1      	lsls	r1, r2, #27
 800faaa:	bf44      	itt	mi
 800faac:	2320      	movmi	r3, #32
 800faae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fab2:	0713      	lsls	r3, r2, #28
 800fab4:	bf44      	itt	mi
 800fab6:	232b      	movmi	r3, #43	@ 0x2b
 800fab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fabc:	f89a 3000 	ldrb.w	r3, [sl]
 800fac0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fac2:	d015      	beq.n	800faf0 <_vfiprintf_r+0x120>
 800fac4:	9a07      	ldr	r2, [sp, #28]
 800fac6:	4654      	mov	r4, sl
 800fac8:	2000      	movs	r0, #0
 800faca:	f04f 0c0a 	mov.w	ip, #10
 800face:	4621      	mov	r1, r4
 800fad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fad4:	3b30      	subs	r3, #48	@ 0x30
 800fad6:	2b09      	cmp	r3, #9
 800fad8:	d94b      	bls.n	800fb72 <_vfiprintf_r+0x1a2>
 800fada:	b1b0      	cbz	r0, 800fb0a <_vfiprintf_r+0x13a>
 800fadc:	9207      	str	r2, [sp, #28]
 800fade:	e014      	b.n	800fb0a <_vfiprintf_r+0x13a>
 800fae0:	eba0 0308 	sub.w	r3, r0, r8
 800fae4:	46a2      	mov	sl, r4
 800fae6:	fa09 f303 	lsl.w	r3, r9, r3
 800faea:	4313      	orrs	r3, r2
 800faec:	9304      	str	r3, [sp, #16]
 800faee:	e7d2      	b.n	800fa96 <_vfiprintf_r+0xc6>
 800faf0:	9b03      	ldr	r3, [sp, #12]
 800faf2:	1d19      	adds	r1, r3, #4
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	9103      	str	r1, [sp, #12]
 800fafa:	bfbb      	ittet	lt
 800fafc:	425b      	neglt	r3, r3
 800fafe:	f042 0202 	orrlt.w	r2, r2, #2
 800fb02:	9307      	strge	r3, [sp, #28]
 800fb04:	9307      	strlt	r3, [sp, #28]
 800fb06:	bfb8      	it	lt
 800fb08:	9204      	strlt	r2, [sp, #16]
 800fb0a:	7823      	ldrb	r3, [r4, #0]
 800fb0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb0e:	d10a      	bne.n	800fb26 <_vfiprintf_r+0x156>
 800fb10:	7863      	ldrb	r3, [r4, #1]
 800fb12:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb14:	d132      	bne.n	800fb7c <_vfiprintf_r+0x1ac>
 800fb16:	9b03      	ldr	r3, [sp, #12]
 800fb18:	3402      	adds	r4, #2
 800fb1a:	1d1a      	adds	r2, r3, #4
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb22:	9203      	str	r2, [sp, #12]
 800fb24:	9305      	str	r3, [sp, #20]
 800fb26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbfc <_vfiprintf_r+0x22c>
 800fb2a:	2203      	movs	r2, #3
 800fb2c:	7821      	ldrb	r1, [r4, #0]
 800fb2e:	4650      	mov	r0, sl
 800fb30:	f000 fb7a 	bl	8010228 <memchr>
 800fb34:	b138      	cbz	r0, 800fb46 <_vfiprintf_r+0x176>
 800fb36:	eba0 000a 	sub.w	r0, r0, sl
 800fb3a:	2240      	movs	r2, #64	@ 0x40
 800fb3c:	9b04      	ldr	r3, [sp, #16]
 800fb3e:	3401      	adds	r4, #1
 800fb40:	4082      	lsls	r2, r0
 800fb42:	4313      	orrs	r3, r2
 800fb44:	9304      	str	r3, [sp, #16]
 800fb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb4a:	2206      	movs	r2, #6
 800fb4c:	4828      	ldr	r0, [pc, #160]	@ (800fbf0 <_vfiprintf_r+0x220>)
 800fb4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb52:	f000 fb69 	bl	8010228 <memchr>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d03f      	beq.n	800fbda <_vfiprintf_r+0x20a>
 800fb5a:	4b26      	ldr	r3, [pc, #152]	@ (800fbf4 <_vfiprintf_r+0x224>)
 800fb5c:	bb1b      	cbnz	r3, 800fba6 <_vfiprintf_r+0x1d6>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	3307      	adds	r3, #7
 800fb62:	f023 0307 	bic.w	r3, r3, #7
 800fb66:	3308      	adds	r3, #8
 800fb68:	9303      	str	r3, [sp, #12]
 800fb6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb6c:	443b      	add	r3, r7
 800fb6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb70:	e76a      	b.n	800fa48 <_vfiprintf_r+0x78>
 800fb72:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb76:	460c      	mov	r4, r1
 800fb78:	2001      	movs	r0, #1
 800fb7a:	e7a8      	b.n	800face <_vfiprintf_r+0xfe>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	3401      	adds	r4, #1
 800fb80:	f04f 0c0a 	mov.w	ip, #10
 800fb84:	4619      	mov	r1, r3
 800fb86:	9305      	str	r3, [sp, #20]
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb8e:	3a30      	subs	r2, #48	@ 0x30
 800fb90:	2a09      	cmp	r2, #9
 800fb92:	d903      	bls.n	800fb9c <_vfiprintf_r+0x1cc>
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d0c6      	beq.n	800fb26 <_vfiprintf_r+0x156>
 800fb98:	9105      	str	r1, [sp, #20]
 800fb9a:	e7c4      	b.n	800fb26 <_vfiprintf_r+0x156>
 800fb9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fba0:	4604      	mov	r4, r0
 800fba2:	2301      	movs	r3, #1
 800fba4:	e7f0      	b.n	800fb88 <_vfiprintf_r+0x1b8>
 800fba6:	ab03      	add	r3, sp, #12
 800fba8:	462a      	mov	r2, r5
 800fbaa:	a904      	add	r1, sp, #16
 800fbac:	4630      	mov	r0, r6
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	4b11      	ldr	r3, [pc, #68]	@ (800fbf8 <_vfiprintf_r+0x228>)
 800fbb2:	f3af 8000 	nop.w
 800fbb6:	4607      	mov	r7, r0
 800fbb8:	1c78      	adds	r0, r7, #1
 800fbba:	d1d6      	bne.n	800fb6a <_vfiprintf_r+0x19a>
 800fbbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbbe:	07d9      	lsls	r1, r3, #31
 800fbc0:	d405      	bmi.n	800fbce <_vfiprintf_r+0x1fe>
 800fbc2:	89ab      	ldrh	r3, [r5, #12]
 800fbc4:	059a      	lsls	r2, r3, #22
 800fbc6:	d402      	bmi.n	800fbce <_vfiprintf_r+0x1fe>
 800fbc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbca:	f7ff fe77 	bl	800f8bc <__retarget_lock_release_recursive>
 800fbce:	89ab      	ldrh	r3, [r5, #12]
 800fbd0:	065b      	lsls	r3, r3, #25
 800fbd2:	f53f af1f 	bmi.w	800fa14 <_vfiprintf_r+0x44>
 800fbd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbd8:	e71e      	b.n	800fa18 <_vfiprintf_r+0x48>
 800fbda:	ab03      	add	r3, sp, #12
 800fbdc:	462a      	mov	r2, r5
 800fbde:	a904      	add	r1, sp, #16
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	4b04      	ldr	r3, [pc, #16]	@ (800fbf8 <_vfiprintf_r+0x228>)
 800fbe6:	f000 f87d 	bl	800fce4 <_printf_i>
 800fbea:	e7e4      	b.n	800fbb6 <_vfiprintf_r+0x1e6>
 800fbec:	08011520 	.word	0x08011520
 800fbf0:	0801152a 	.word	0x0801152a
 800fbf4:	00000000 	.word	0x00000000
 800fbf8:	0800f9ab 	.word	0x0800f9ab
 800fbfc:	08011526 	.word	0x08011526

0800fc00 <_printf_common>:
 800fc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc04:	4616      	mov	r6, r2
 800fc06:	4698      	mov	r8, r3
 800fc08:	688a      	ldr	r2, [r1, #8]
 800fc0a:	4607      	mov	r7, r0
 800fc0c:	690b      	ldr	r3, [r1, #16]
 800fc0e:	460c      	mov	r4, r1
 800fc10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc14:	4293      	cmp	r3, r2
 800fc16:	bfb8      	it	lt
 800fc18:	4613      	movlt	r3, r2
 800fc1a:	6033      	str	r3, [r6, #0]
 800fc1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc20:	b10a      	cbz	r2, 800fc26 <_printf_common+0x26>
 800fc22:	3301      	adds	r3, #1
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	0699      	lsls	r1, r3, #26
 800fc2a:	bf42      	ittt	mi
 800fc2c:	6833      	ldrmi	r3, [r6, #0]
 800fc2e:	3302      	addmi	r3, #2
 800fc30:	6033      	strmi	r3, [r6, #0]
 800fc32:	6825      	ldr	r5, [r4, #0]
 800fc34:	f015 0506 	ands.w	r5, r5, #6
 800fc38:	d106      	bne.n	800fc48 <_printf_common+0x48>
 800fc3a:	f104 0a19 	add.w	sl, r4, #25
 800fc3e:	68e3      	ldr	r3, [r4, #12]
 800fc40:	6832      	ldr	r2, [r6, #0]
 800fc42:	1a9b      	subs	r3, r3, r2
 800fc44:	42ab      	cmp	r3, r5
 800fc46:	dc2b      	bgt.n	800fca0 <_printf_common+0xa0>
 800fc48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc4c:	6822      	ldr	r2, [r4, #0]
 800fc4e:	3b00      	subs	r3, #0
 800fc50:	bf18      	it	ne
 800fc52:	2301      	movne	r3, #1
 800fc54:	0692      	lsls	r2, r2, #26
 800fc56:	d430      	bmi.n	800fcba <_printf_common+0xba>
 800fc58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc5c:	4641      	mov	r1, r8
 800fc5e:	4638      	mov	r0, r7
 800fc60:	47c8      	blx	r9
 800fc62:	3001      	adds	r0, #1
 800fc64:	d023      	beq.n	800fcae <_printf_common+0xae>
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	341a      	adds	r4, #26
 800fc6a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800fc6e:	f003 0306 	and.w	r3, r3, #6
 800fc72:	2b04      	cmp	r3, #4
 800fc74:	bf0a      	itet	eq
 800fc76:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fc7a:	2500      	movne	r5, #0
 800fc7c:	6833      	ldreq	r3, [r6, #0]
 800fc7e:	f04f 0600 	mov.w	r6, #0
 800fc82:	bf08      	it	eq
 800fc84:	1aed      	subeq	r5, r5, r3
 800fc86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800fc8a:	bf08      	it	eq
 800fc8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc90:	4293      	cmp	r3, r2
 800fc92:	bfc4      	itt	gt
 800fc94:	1a9b      	subgt	r3, r3, r2
 800fc96:	18ed      	addgt	r5, r5, r3
 800fc98:	42b5      	cmp	r5, r6
 800fc9a:	d11a      	bne.n	800fcd2 <_printf_common+0xd2>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	e008      	b.n	800fcb2 <_printf_common+0xb2>
 800fca0:	2301      	movs	r3, #1
 800fca2:	4652      	mov	r2, sl
 800fca4:	4641      	mov	r1, r8
 800fca6:	4638      	mov	r0, r7
 800fca8:	47c8      	blx	r9
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d103      	bne.n	800fcb6 <_printf_common+0xb6>
 800fcae:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb6:	3501      	adds	r5, #1
 800fcb8:	e7c1      	b.n	800fc3e <_printf_common+0x3e>
 800fcba:	18e1      	adds	r1, r4, r3
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	2030      	movs	r0, #48	@ 0x30
 800fcc0:	3302      	adds	r3, #2
 800fcc2:	4422      	add	r2, r4
 800fcc4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fcc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fcd0:	e7c2      	b.n	800fc58 <_printf_common+0x58>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	4622      	mov	r2, r4
 800fcd6:	4641      	mov	r1, r8
 800fcd8:	4638      	mov	r0, r7
 800fcda:	47c8      	blx	r9
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d0e6      	beq.n	800fcae <_printf_common+0xae>
 800fce0:	3601      	adds	r6, #1
 800fce2:	e7d9      	b.n	800fc98 <_printf_common+0x98>

0800fce4 <_printf_i>:
 800fce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fce8:	7e0f      	ldrb	r7, [r1, #24]
 800fcea:	4691      	mov	r9, r2
 800fcec:	4680      	mov	r8, r0
 800fcee:	460c      	mov	r4, r1
 800fcf0:	2f78      	cmp	r7, #120	@ 0x78
 800fcf2:	469a      	mov	sl, r3
 800fcf4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fcf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fcfa:	d807      	bhi.n	800fd0c <_printf_i+0x28>
 800fcfc:	2f62      	cmp	r7, #98	@ 0x62
 800fcfe:	d80a      	bhi.n	800fd16 <_printf_i+0x32>
 800fd00:	2f00      	cmp	r7, #0
 800fd02:	f000 80d1 	beq.w	800fea8 <_printf_i+0x1c4>
 800fd06:	2f58      	cmp	r7, #88	@ 0x58
 800fd08:	f000 80b8 	beq.w	800fe7c <_printf_i+0x198>
 800fd0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fd14:	e03a      	b.n	800fd8c <_printf_i+0xa8>
 800fd16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd1a:	2b15      	cmp	r3, #21
 800fd1c:	d8f6      	bhi.n	800fd0c <_printf_i+0x28>
 800fd1e:	a101      	add	r1, pc, #4	@ (adr r1, 800fd24 <_printf_i+0x40>)
 800fd20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd24:	0800fd7d 	.word	0x0800fd7d
 800fd28:	0800fd91 	.word	0x0800fd91
 800fd2c:	0800fd0d 	.word	0x0800fd0d
 800fd30:	0800fd0d 	.word	0x0800fd0d
 800fd34:	0800fd0d 	.word	0x0800fd0d
 800fd38:	0800fd0d 	.word	0x0800fd0d
 800fd3c:	0800fd91 	.word	0x0800fd91
 800fd40:	0800fd0d 	.word	0x0800fd0d
 800fd44:	0800fd0d 	.word	0x0800fd0d
 800fd48:	0800fd0d 	.word	0x0800fd0d
 800fd4c:	0800fd0d 	.word	0x0800fd0d
 800fd50:	0800fe8f 	.word	0x0800fe8f
 800fd54:	0800fdbb 	.word	0x0800fdbb
 800fd58:	0800fe49 	.word	0x0800fe49
 800fd5c:	0800fd0d 	.word	0x0800fd0d
 800fd60:	0800fd0d 	.word	0x0800fd0d
 800fd64:	0800feb1 	.word	0x0800feb1
 800fd68:	0800fd0d 	.word	0x0800fd0d
 800fd6c:	0800fdbb 	.word	0x0800fdbb
 800fd70:	0800fd0d 	.word	0x0800fd0d
 800fd74:	0800fd0d 	.word	0x0800fd0d
 800fd78:	0800fe51 	.word	0x0800fe51
 800fd7c:	6833      	ldr	r3, [r6, #0]
 800fd7e:	1d1a      	adds	r2, r3, #4
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6032      	str	r2, [r6, #0]
 800fd84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e09c      	b.n	800feca <_printf_i+0x1e6>
 800fd90:	6833      	ldr	r3, [r6, #0]
 800fd92:	6820      	ldr	r0, [r4, #0]
 800fd94:	1d19      	adds	r1, r3, #4
 800fd96:	6031      	str	r1, [r6, #0]
 800fd98:	0606      	lsls	r6, r0, #24
 800fd9a:	d501      	bpl.n	800fda0 <_printf_i+0xbc>
 800fd9c:	681d      	ldr	r5, [r3, #0]
 800fd9e:	e003      	b.n	800fda8 <_printf_i+0xc4>
 800fda0:	0645      	lsls	r5, r0, #25
 800fda2:	d5fb      	bpl.n	800fd9c <_printf_i+0xb8>
 800fda4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fda8:	2d00      	cmp	r5, #0
 800fdaa:	da03      	bge.n	800fdb4 <_printf_i+0xd0>
 800fdac:	232d      	movs	r3, #45	@ 0x2d
 800fdae:	426d      	negs	r5, r5
 800fdb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdb4:	4858      	ldr	r0, [pc, #352]	@ (800ff18 <_printf_i+0x234>)
 800fdb6:	230a      	movs	r3, #10
 800fdb8:	e011      	b.n	800fdde <_printf_i+0xfa>
 800fdba:	6821      	ldr	r1, [r4, #0]
 800fdbc:	6833      	ldr	r3, [r6, #0]
 800fdbe:	0608      	lsls	r0, r1, #24
 800fdc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800fdc4:	d402      	bmi.n	800fdcc <_printf_i+0xe8>
 800fdc6:	0649      	lsls	r1, r1, #25
 800fdc8:	bf48      	it	mi
 800fdca:	b2ad      	uxthmi	r5, r5
 800fdcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800fdce:	6033      	str	r3, [r6, #0]
 800fdd0:	4851      	ldr	r0, [pc, #324]	@ (800ff18 <_printf_i+0x234>)
 800fdd2:	bf14      	ite	ne
 800fdd4:	230a      	movne	r3, #10
 800fdd6:	2308      	moveq	r3, #8
 800fdd8:	2100      	movs	r1, #0
 800fdda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fdde:	6866      	ldr	r6, [r4, #4]
 800fde0:	2e00      	cmp	r6, #0
 800fde2:	60a6      	str	r6, [r4, #8]
 800fde4:	db05      	blt.n	800fdf2 <_printf_i+0x10e>
 800fde6:	6821      	ldr	r1, [r4, #0]
 800fde8:	432e      	orrs	r6, r5
 800fdea:	f021 0104 	bic.w	r1, r1, #4
 800fdee:	6021      	str	r1, [r4, #0]
 800fdf0:	d04b      	beq.n	800fe8a <_printf_i+0x1a6>
 800fdf2:	4616      	mov	r6, r2
 800fdf4:	fbb5 f1f3 	udiv	r1, r5, r3
 800fdf8:	fb03 5711 	mls	r7, r3, r1, r5
 800fdfc:	5dc7      	ldrb	r7, [r0, r7]
 800fdfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe02:	462f      	mov	r7, r5
 800fe04:	460d      	mov	r5, r1
 800fe06:	42bb      	cmp	r3, r7
 800fe08:	d9f4      	bls.n	800fdf4 <_printf_i+0x110>
 800fe0a:	2b08      	cmp	r3, #8
 800fe0c:	d10b      	bne.n	800fe26 <_printf_i+0x142>
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	07df      	lsls	r7, r3, #31
 800fe12:	d508      	bpl.n	800fe26 <_printf_i+0x142>
 800fe14:	6923      	ldr	r3, [r4, #16]
 800fe16:	6861      	ldr	r1, [r4, #4]
 800fe18:	4299      	cmp	r1, r3
 800fe1a:	bfde      	ittt	le
 800fe1c:	2330      	movle	r3, #48	@ 0x30
 800fe1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe22:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe26:	1b92      	subs	r2, r2, r6
 800fe28:	6122      	str	r2, [r4, #16]
 800fe2a:	464b      	mov	r3, r9
 800fe2c:	aa03      	add	r2, sp, #12
 800fe2e:	4621      	mov	r1, r4
 800fe30:	4640      	mov	r0, r8
 800fe32:	f8cd a000 	str.w	sl, [sp]
 800fe36:	f7ff fee3 	bl	800fc00 <_printf_common>
 800fe3a:	3001      	adds	r0, #1
 800fe3c:	d14a      	bne.n	800fed4 <_printf_i+0x1f0>
 800fe3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe42:	b004      	add	sp, #16
 800fe44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	f043 0320 	orr.w	r3, r3, #32
 800fe4e:	6023      	str	r3, [r4, #0]
 800fe50:	2778      	movs	r7, #120	@ 0x78
 800fe52:	4832      	ldr	r0, [pc, #200]	@ (800ff1c <_printf_i+0x238>)
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe5a:	061f      	lsls	r7, r3, #24
 800fe5c:	6831      	ldr	r1, [r6, #0]
 800fe5e:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe62:	d402      	bmi.n	800fe6a <_printf_i+0x186>
 800fe64:	065f      	lsls	r7, r3, #25
 800fe66:	bf48      	it	mi
 800fe68:	b2ad      	uxthmi	r5, r5
 800fe6a:	6031      	str	r1, [r6, #0]
 800fe6c:	07d9      	lsls	r1, r3, #31
 800fe6e:	bf44      	itt	mi
 800fe70:	f043 0320 	orrmi.w	r3, r3, #32
 800fe74:	6023      	strmi	r3, [r4, #0]
 800fe76:	b11d      	cbz	r5, 800fe80 <_printf_i+0x19c>
 800fe78:	2310      	movs	r3, #16
 800fe7a:	e7ad      	b.n	800fdd8 <_printf_i+0xf4>
 800fe7c:	4826      	ldr	r0, [pc, #152]	@ (800ff18 <_printf_i+0x234>)
 800fe7e:	e7e9      	b.n	800fe54 <_printf_i+0x170>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	f023 0320 	bic.w	r3, r3, #32
 800fe86:	6023      	str	r3, [r4, #0]
 800fe88:	e7f6      	b.n	800fe78 <_printf_i+0x194>
 800fe8a:	4616      	mov	r6, r2
 800fe8c:	e7bd      	b.n	800fe0a <_printf_i+0x126>
 800fe8e:	6833      	ldr	r3, [r6, #0]
 800fe90:	6825      	ldr	r5, [r4, #0]
 800fe92:	1d18      	adds	r0, r3, #4
 800fe94:	6961      	ldr	r1, [r4, #20]
 800fe96:	6030      	str	r0, [r6, #0]
 800fe98:	062e      	lsls	r6, r5, #24
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	d501      	bpl.n	800fea2 <_printf_i+0x1be>
 800fe9e:	6019      	str	r1, [r3, #0]
 800fea0:	e002      	b.n	800fea8 <_printf_i+0x1c4>
 800fea2:	0668      	lsls	r0, r5, #25
 800fea4:	d5fb      	bpl.n	800fe9e <_printf_i+0x1ba>
 800fea6:	8019      	strh	r1, [r3, #0]
 800fea8:	2300      	movs	r3, #0
 800feaa:	4616      	mov	r6, r2
 800feac:	6123      	str	r3, [r4, #16]
 800feae:	e7bc      	b.n	800fe2a <_printf_i+0x146>
 800feb0:	6833      	ldr	r3, [r6, #0]
 800feb2:	2100      	movs	r1, #0
 800feb4:	1d1a      	adds	r2, r3, #4
 800feb6:	6032      	str	r2, [r6, #0]
 800feb8:	681e      	ldr	r6, [r3, #0]
 800feba:	6862      	ldr	r2, [r4, #4]
 800febc:	4630      	mov	r0, r6
 800febe:	f000 f9b3 	bl	8010228 <memchr>
 800fec2:	b108      	cbz	r0, 800fec8 <_printf_i+0x1e4>
 800fec4:	1b80      	subs	r0, r0, r6
 800fec6:	6060      	str	r0, [r4, #4]
 800fec8:	6863      	ldr	r3, [r4, #4]
 800feca:	6123      	str	r3, [r4, #16]
 800fecc:	2300      	movs	r3, #0
 800fece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fed2:	e7aa      	b.n	800fe2a <_printf_i+0x146>
 800fed4:	6923      	ldr	r3, [r4, #16]
 800fed6:	4632      	mov	r2, r6
 800fed8:	4649      	mov	r1, r9
 800feda:	4640      	mov	r0, r8
 800fedc:	47d0      	blx	sl
 800fede:	3001      	adds	r0, #1
 800fee0:	d0ad      	beq.n	800fe3e <_printf_i+0x15a>
 800fee2:	6823      	ldr	r3, [r4, #0]
 800fee4:	079b      	lsls	r3, r3, #30
 800fee6:	d413      	bmi.n	800ff10 <_printf_i+0x22c>
 800fee8:	68e0      	ldr	r0, [r4, #12]
 800feea:	9b03      	ldr	r3, [sp, #12]
 800feec:	4298      	cmp	r0, r3
 800feee:	bfb8      	it	lt
 800fef0:	4618      	movlt	r0, r3
 800fef2:	e7a6      	b.n	800fe42 <_printf_i+0x15e>
 800fef4:	2301      	movs	r3, #1
 800fef6:	4632      	mov	r2, r6
 800fef8:	4649      	mov	r1, r9
 800fefa:	4640      	mov	r0, r8
 800fefc:	47d0      	blx	sl
 800fefe:	3001      	adds	r0, #1
 800ff00:	d09d      	beq.n	800fe3e <_printf_i+0x15a>
 800ff02:	3501      	adds	r5, #1
 800ff04:	68e3      	ldr	r3, [r4, #12]
 800ff06:	9903      	ldr	r1, [sp, #12]
 800ff08:	1a5b      	subs	r3, r3, r1
 800ff0a:	42ab      	cmp	r3, r5
 800ff0c:	dcf2      	bgt.n	800fef4 <_printf_i+0x210>
 800ff0e:	e7eb      	b.n	800fee8 <_printf_i+0x204>
 800ff10:	2500      	movs	r5, #0
 800ff12:	f104 0619 	add.w	r6, r4, #25
 800ff16:	e7f5      	b.n	800ff04 <_printf_i+0x220>
 800ff18:	08011531 	.word	0x08011531
 800ff1c:	08011542 	.word	0x08011542

0800ff20 <__sflush_r>:
 800ff20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff28:	0716      	lsls	r6, r2, #28
 800ff2a:	4605      	mov	r5, r0
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	d454      	bmi.n	800ffda <__sflush_r+0xba>
 800ff30:	684b      	ldr	r3, [r1, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dc02      	bgt.n	800ff3c <__sflush_r+0x1c>
 800ff36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	dd48      	ble.n	800ffce <__sflush_r+0xae>
 800ff3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff3e:	2e00      	cmp	r6, #0
 800ff40:	d045      	beq.n	800ffce <__sflush_r+0xae>
 800ff42:	2300      	movs	r3, #0
 800ff44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ff48:	682f      	ldr	r7, [r5, #0]
 800ff4a:	6a21      	ldr	r1, [r4, #32]
 800ff4c:	602b      	str	r3, [r5, #0]
 800ff4e:	d030      	beq.n	800ffb2 <__sflush_r+0x92>
 800ff50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ff52:	89a3      	ldrh	r3, [r4, #12]
 800ff54:	0759      	lsls	r1, r3, #29
 800ff56:	d505      	bpl.n	800ff64 <__sflush_r+0x44>
 800ff58:	6863      	ldr	r3, [r4, #4]
 800ff5a:	1ad2      	subs	r2, r2, r3
 800ff5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff5e:	b10b      	cbz	r3, 800ff64 <__sflush_r+0x44>
 800ff60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff62:	1ad2      	subs	r2, r2, r3
 800ff64:	2300      	movs	r3, #0
 800ff66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff68:	6a21      	ldr	r1, [r4, #32]
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	47b0      	blx	r6
 800ff6e:	1c43      	adds	r3, r0, #1
 800ff70:	89a3      	ldrh	r3, [r4, #12]
 800ff72:	d106      	bne.n	800ff82 <__sflush_r+0x62>
 800ff74:	6829      	ldr	r1, [r5, #0]
 800ff76:	291d      	cmp	r1, #29
 800ff78:	d82b      	bhi.n	800ffd2 <__sflush_r+0xb2>
 800ff7a:	4a2a      	ldr	r2, [pc, #168]	@ (8010024 <__sflush_r+0x104>)
 800ff7c:	40ca      	lsrs	r2, r1
 800ff7e:	07d6      	lsls	r6, r2, #31
 800ff80:	d527      	bpl.n	800ffd2 <__sflush_r+0xb2>
 800ff82:	2200      	movs	r2, #0
 800ff84:	04d9      	lsls	r1, r3, #19
 800ff86:	6062      	str	r2, [r4, #4]
 800ff88:	6922      	ldr	r2, [r4, #16]
 800ff8a:	6022      	str	r2, [r4, #0]
 800ff8c:	d504      	bpl.n	800ff98 <__sflush_r+0x78>
 800ff8e:	1c42      	adds	r2, r0, #1
 800ff90:	d101      	bne.n	800ff96 <__sflush_r+0x76>
 800ff92:	682b      	ldr	r3, [r5, #0]
 800ff94:	b903      	cbnz	r3, 800ff98 <__sflush_r+0x78>
 800ff96:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff9a:	602f      	str	r7, [r5, #0]
 800ff9c:	b1b9      	cbz	r1, 800ffce <__sflush_r+0xae>
 800ff9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffa2:	4299      	cmp	r1, r3
 800ffa4:	d002      	beq.n	800ffac <__sflush_r+0x8c>
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	f7ff fc9e 	bl	800f8e8 <_free_r>
 800ffac:	2300      	movs	r3, #0
 800ffae:	6363      	str	r3, [r4, #52]	@ 0x34
 800ffb0:	e00d      	b.n	800ffce <__sflush_r+0xae>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	47b0      	blx	r6
 800ffb8:	4602      	mov	r2, r0
 800ffba:	1c50      	adds	r0, r2, #1
 800ffbc:	d1c9      	bne.n	800ff52 <__sflush_r+0x32>
 800ffbe:	682b      	ldr	r3, [r5, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d0c6      	beq.n	800ff52 <__sflush_r+0x32>
 800ffc4:	2b1d      	cmp	r3, #29
 800ffc6:	d001      	beq.n	800ffcc <__sflush_r+0xac>
 800ffc8:	2b16      	cmp	r3, #22
 800ffca:	d11d      	bne.n	8010008 <__sflush_r+0xe8>
 800ffcc:	602f      	str	r7, [r5, #0]
 800ffce:	2000      	movs	r0, #0
 800ffd0:	e021      	b.n	8010016 <__sflush_r+0xf6>
 800ffd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffd6:	b21b      	sxth	r3, r3
 800ffd8:	e01a      	b.n	8010010 <__sflush_r+0xf0>
 800ffda:	690f      	ldr	r7, [r1, #16]
 800ffdc:	2f00      	cmp	r7, #0
 800ffde:	d0f6      	beq.n	800ffce <__sflush_r+0xae>
 800ffe0:	0793      	lsls	r3, r2, #30
 800ffe2:	680e      	ldr	r6, [r1, #0]
 800ffe4:	600f      	str	r7, [r1, #0]
 800ffe6:	bf0c      	ite	eq
 800ffe8:	694b      	ldreq	r3, [r1, #20]
 800ffea:	2300      	movne	r3, #0
 800ffec:	eba6 0807 	sub.w	r8, r6, r7
 800fff0:	608b      	str	r3, [r1, #8]
 800fff2:	f1b8 0f00 	cmp.w	r8, #0
 800fff6:	ddea      	ble.n	800ffce <__sflush_r+0xae>
 800fff8:	4643      	mov	r3, r8
 800fffa:	463a      	mov	r2, r7
 800fffc:	6a21      	ldr	r1, [r4, #32]
 800fffe:	4628      	mov	r0, r5
 8010000:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010002:	47b0      	blx	r6
 8010004:	2800      	cmp	r0, #0
 8010006:	dc08      	bgt.n	801001a <__sflush_r+0xfa>
 8010008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801000c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010010:	f04f 30ff 	mov.w	r0, #4294967295
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001a:	4407      	add	r7, r0
 801001c:	eba8 0800 	sub.w	r8, r8, r0
 8010020:	e7e7      	b.n	800fff2 <__sflush_r+0xd2>
 8010022:	bf00      	nop
 8010024:	20400001 	.word	0x20400001

08010028 <_fflush_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	690b      	ldr	r3, [r1, #16]
 801002c:	4605      	mov	r5, r0
 801002e:	460c      	mov	r4, r1
 8010030:	b913      	cbnz	r3, 8010038 <_fflush_r+0x10>
 8010032:	2500      	movs	r5, #0
 8010034:	4628      	mov	r0, r5
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	b118      	cbz	r0, 8010042 <_fflush_r+0x1a>
 801003a:	6a03      	ldr	r3, [r0, #32]
 801003c:	b90b      	cbnz	r3, 8010042 <_fflush_r+0x1a>
 801003e:	f7ff fae5 	bl	800f60c <__sinit>
 8010042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d0f3      	beq.n	8010032 <_fflush_r+0xa>
 801004a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801004c:	07d0      	lsls	r0, r2, #31
 801004e:	d404      	bmi.n	801005a <_fflush_r+0x32>
 8010050:	0599      	lsls	r1, r3, #22
 8010052:	d402      	bmi.n	801005a <_fflush_r+0x32>
 8010054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010056:	f7ff fc30 	bl	800f8ba <__retarget_lock_acquire_recursive>
 801005a:	4628      	mov	r0, r5
 801005c:	4621      	mov	r1, r4
 801005e:	f7ff ff5f 	bl	800ff20 <__sflush_r>
 8010062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010064:	4605      	mov	r5, r0
 8010066:	07da      	lsls	r2, r3, #31
 8010068:	d4e4      	bmi.n	8010034 <_fflush_r+0xc>
 801006a:	89a3      	ldrh	r3, [r4, #12]
 801006c:	059b      	lsls	r3, r3, #22
 801006e:	d4e1      	bmi.n	8010034 <_fflush_r+0xc>
 8010070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010072:	f7ff fc23 	bl	800f8bc <__retarget_lock_release_recursive>
 8010076:	e7dd      	b.n	8010034 <_fflush_r+0xc>

08010078 <__swbuf_r>:
 8010078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007a:	460e      	mov	r6, r1
 801007c:	4614      	mov	r4, r2
 801007e:	4605      	mov	r5, r0
 8010080:	b118      	cbz	r0, 801008a <__swbuf_r+0x12>
 8010082:	6a03      	ldr	r3, [r0, #32]
 8010084:	b90b      	cbnz	r3, 801008a <__swbuf_r+0x12>
 8010086:	f7ff fac1 	bl	800f60c <__sinit>
 801008a:	69a3      	ldr	r3, [r4, #24]
 801008c:	60a3      	str	r3, [r4, #8]
 801008e:	89a3      	ldrh	r3, [r4, #12]
 8010090:	071a      	lsls	r2, r3, #28
 8010092:	d501      	bpl.n	8010098 <__swbuf_r+0x20>
 8010094:	6923      	ldr	r3, [r4, #16]
 8010096:	b943      	cbnz	r3, 80100aa <__swbuf_r+0x32>
 8010098:	4621      	mov	r1, r4
 801009a:	4628      	mov	r0, r5
 801009c:	f000 f82a 	bl	80100f4 <__swsetup_r>
 80100a0:	b118      	cbz	r0, 80100aa <__swbuf_r+0x32>
 80100a2:	f04f 37ff 	mov.w	r7, #4294967295
 80100a6:	4638      	mov	r0, r7
 80100a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	b2f6      	uxtb	r6, r6
 80100ae:	6922      	ldr	r2, [r4, #16]
 80100b0:	4637      	mov	r7, r6
 80100b2:	1a98      	subs	r0, r3, r2
 80100b4:	6963      	ldr	r3, [r4, #20]
 80100b6:	4283      	cmp	r3, r0
 80100b8:	dc05      	bgt.n	80100c6 <__swbuf_r+0x4e>
 80100ba:	4621      	mov	r1, r4
 80100bc:	4628      	mov	r0, r5
 80100be:	f7ff ffb3 	bl	8010028 <_fflush_r>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d1ed      	bne.n	80100a2 <__swbuf_r+0x2a>
 80100c6:	68a3      	ldr	r3, [r4, #8]
 80100c8:	3b01      	subs	r3, #1
 80100ca:	60a3      	str	r3, [r4, #8]
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	1c5a      	adds	r2, r3, #1
 80100d0:	6022      	str	r2, [r4, #0]
 80100d2:	701e      	strb	r6, [r3, #0]
 80100d4:	1c43      	adds	r3, r0, #1
 80100d6:	6962      	ldr	r2, [r4, #20]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d004      	beq.n	80100e6 <__swbuf_r+0x6e>
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	07db      	lsls	r3, r3, #31
 80100e0:	d5e1      	bpl.n	80100a6 <__swbuf_r+0x2e>
 80100e2:	2e0a      	cmp	r6, #10
 80100e4:	d1df      	bne.n	80100a6 <__swbuf_r+0x2e>
 80100e6:	4621      	mov	r1, r4
 80100e8:	4628      	mov	r0, r5
 80100ea:	f7ff ff9d 	bl	8010028 <_fflush_r>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d0d9      	beq.n	80100a6 <__swbuf_r+0x2e>
 80100f2:	e7d6      	b.n	80100a2 <__swbuf_r+0x2a>

080100f4 <__swsetup_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4b29      	ldr	r3, [pc, #164]	@ (801019c <__swsetup_r+0xa8>)
 80100f8:	4605      	mov	r5, r0
 80100fa:	460c      	mov	r4, r1
 80100fc:	6818      	ldr	r0, [r3, #0]
 80100fe:	b118      	cbz	r0, 8010108 <__swsetup_r+0x14>
 8010100:	6a03      	ldr	r3, [r0, #32]
 8010102:	b90b      	cbnz	r3, 8010108 <__swsetup_r+0x14>
 8010104:	f7ff fa82 	bl	800f60c <__sinit>
 8010108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801010c:	0719      	lsls	r1, r3, #28
 801010e:	d422      	bmi.n	8010156 <__swsetup_r+0x62>
 8010110:	06da      	lsls	r2, r3, #27
 8010112:	d407      	bmi.n	8010124 <__swsetup_r+0x30>
 8010114:	2209      	movs	r2, #9
 8010116:	602a      	str	r2, [r5, #0]
 8010118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801011c:	f04f 30ff 	mov.w	r0, #4294967295
 8010120:	81a3      	strh	r3, [r4, #12]
 8010122:	e033      	b.n	801018c <__swsetup_r+0x98>
 8010124:	0758      	lsls	r0, r3, #29
 8010126:	d512      	bpl.n	801014e <__swsetup_r+0x5a>
 8010128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801012a:	b141      	cbz	r1, 801013e <__swsetup_r+0x4a>
 801012c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010130:	4299      	cmp	r1, r3
 8010132:	d002      	beq.n	801013a <__swsetup_r+0x46>
 8010134:	4628      	mov	r0, r5
 8010136:	f7ff fbd7 	bl	800f8e8 <_free_r>
 801013a:	2300      	movs	r3, #0
 801013c:	6363      	str	r3, [r4, #52]	@ 0x34
 801013e:	89a3      	ldrh	r3, [r4, #12]
 8010140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010144:	81a3      	strh	r3, [r4, #12]
 8010146:	2300      	movs	r3, #0
 8010148:	6063      	str	r3, [r4, #4]
 801014a:	6923      	ldr	r3, [r4, #16]
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	f043 0308 	orr.w	r3, r3, #8
 8010154:	81a3      	strh	r3, [r4, #12]
 8010156:	6923      	ldr	r3, [r4, #16]
 8010158:	b94b      	cbnz	r3, 801016e <__swsetup_r+0x7a>
 801015a:	89a3      	ldrh	r3, [r4, #12]
 801015c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010164:	d003      	beq.n	801016e <__swsetup_r+0x7a>
 8010166:	4621      	mov	r1, r4
 8010168:	4628      	mov	r0, r5
 801016a:	f000 f890 	bl	801028e <__smakebuf_r>
 801016e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010172:	f013 0201 	ands.w	r2, r3, #1
 8010176:	d00a      	beq.n	801018e <__swsetup_r+0x9a>
 8010178:	2200      	movs	r2, #0
 801017a:	60a2      	str	r2, [r4, #8]
 801017c:	6962      	ldr	r2, [r4, #20]
 801017e:	4252      	negs	r2, r2
 8010180:	61a2      	str	r2, [r4, #24]
 8010182:	6922      	ldr	r2, [r4, #16]
 8010184:	b942      	cbnz	r2, 8010198 <__swsetup_r+0xa4>
 8010186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801018a:	d1c5      	bne.n	8010118 <__swsetup_r+0x24>
 801018c:	bd38      	pop	{r3, r4, r5, pc}
 801018e:	0799      	lsls	r1, r3, #30
 8010190:	bf58      	it	pl
 8010192:	6962      	ldrpl	r2, [r4, #20]
 8010194:	60a2      	str	r2, [r4, #8]
 8010196:	e7f4      	b.n	8010182 <__swsetup_r+0x8e>
 8010198:	2000      	movs	r0, #0
 801019a:	e7f7      	b.n	801018c <__swsetup_r+0x98>
 801019c:	20000070 	.word	0x20000070

080101a0 <_raise_r>:
 80101a0:	291f      	cmp	r1, #31
 80101a2:	b538      	push	{r3, r4, r5, lr}
 80101a4:	4605      	mov	r5, r0
 80101a6:	460c      	mov	r4, r1
 80101a8:	d904      	bls.n	80101b4 <_raise_r+0x14>
 80101aa:	2316      	movs	r3, #22
 80101ac:	6003      	str	r3, [r0, #0]
 80101ae:	f04f 30ff 	mov.w	r0, #4294967295
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80101b6:	b112      	cbz	r2, 80101be <_raise_r+0x1e>
 80101b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101bc:	b94b      	cbnz	r3, 80101d2 <_raise_r+0x32>
 80101be:	4628      	mov	r0, r5
 80101c0:	f000 f830 	bl	8010224 <_getpid_r>
 80101c4:	4622      	mov	r2, r4
 80101c6:	4601      	mov	r1, r0
 80101c8:	4628      	mov	r0, r5
 80101ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ce:	f000 b817 	b.w	8010200 <_kill_r>
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d00a      	beq.n	80101ec <_raise_r+0x4c>
 80101d6:	1c59      	adds	r1, r3, #1
 80101d8:	d103      	bne.n	80101e2 <_raise_r+0x42>
 80101da:	2316      	movs	r3, #22
 80101dc:	6003      	str	r3, [r0, #0]
 80101de:	2001      	movs	r0, #1
 80101e0:	e7e7      	b.n	80101b2 <_raise_r+0x12>
 80101e2:	2100      	movs	r1, #0
 80101e4:	4620      	mov	r0, r4
 80101e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80101ea:	4798      	blx	r3
 80101ec:	2000      	movs	r0, #0
 80101ee:	e7e0      	b.n	80101b2 <_raise_r+0x12>

080101f0 <raise>:
 80101f0:	4b02      	ldr	r3, [pc, #8]	@ (80101fc <raise+0xc>)
 80101f2:	4601      	mov	r1, r0
 80101f4:	6818      	ldr	r0, [r3, #0]
 80101f6:	f7ff bfd3 	b.w	80101a0 <_raise_r>
 80101fa:	bf00      	nop
 80101fc:	20000070 	.word	0x20000070

08010200 <_kill_r>:
 8010200:	b538      	push	{r3, r4, r5, lr}
 8010202:	2300      	movs	r3, #0
 8010204:	4d06      	ldr	r5, [pc, #24]	@ (8010220 <_kill_r+0x20>)
 8010206:	4604      	mov	r4, r0
 8010208:	4608      	mov	r0, r1
 801020a:	4611      	mov	r1, r2
 801020c:	602b      	str	r3, [r5, #0]
 801020e:	f7f1 fa6f 	bl	80016f0 <_kill>
 8010212:	1c43      	adds	r3, r0, #1
 8010214:	d102      	bne.n	801021c <_kill_r+0x1c>
 8010216:	682b      	ldr	r3, [r5, #0]
 8010218:	b103      	cbz	r3, 801021c <_kill_r+0x1c>
 801021a:	6023      	str	r3, [r4, #0]
 801021c:	bd38      	pop	{r3, r4, r5, pc}
 801021e:	bf00      	nop
 8010220:	200002bc 	.word	0x200002bc

08010224 <_getpid_r>:
 8010224:	f7f1 ba5c 	b.w	80016e0 <_getpid>

08010228 <memchr>:
 8010228:	b2c9      	uxtb	r1, r1
 801022a:	4603      	mov	r3, r0
 801022c:	4402      	add	r2, r0
 801022e:	b510      	push	{r4, lr}
 8010230:	4293      	cmp	r3, r2
 8010232:	4618      	mov	r0, r3
 8010234:	d101      	bne.n	801023a <memchr+0x12>
 8010236:	2000      	movs	r0, #0
 8010238:	e003      	b.n	8010242 <memchr+0x1a>
 801023a:	7804      	ldrb	r4, [r0, #0]
 801023c:	3301      	adds	r3, #1
 801023e:	428c      	cmp	r4, r1
 8010240:	d1f6      	bne.n	8010230 <memchr+0x8>
 8010242:	bd10      	pop	{r4, pc}

08010244 <__swhatbuf_r>:
 8010244:	b570      	push	{r4, r5, r6, lr}
 8010246:	460c      	mov	r4, r1
 8010248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801024c:	b096      	sub	sp, #88	@ 0x58
 801024e:	4615      	mov	r5, r2
 8010250:	2900      	cmp	r1, #0
 8010252:	461e      	mov	r6, r3
 8010254:	da0c      	bge.n	8010270 <__swhatbuf_r+0x2c>
 8010256:	89a3      	ldrh	r3, [r4, #12]
 8010258:	2100      	movs	r1, #0
 801025a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801025e:	bf14      	ite	ne
 8010260:	2340      	movne	r3, #64	@ 0x40
 8010262:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010266:	2000      	movs	r0, #0
 8010268:	6031      	str	r1, [r6, #0]
 801026a:	602b      	str	r3, [r5, #0]
 801026c:	b016      	add	sp, #88	@ 0x58
 801026e:	bd70      	pop	{r4, r5, r6, pc}
 8010270:	466a      	mov	r2, sp
 8010272:	f000 f849 	bl	8010308 <_fstat_r>
 8010276:	2800      	cmp	r0, #0
 8010278:	dbed      	blt.n	8010256 <__swhatbuf_r+0x12>
 801027a:	9901      	ldr	r1, [sp, #4]
 801027c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010280:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010284:	4259      	negs	r1, r3
 8010286:	4159      	adcs	r1, r3
 8010288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801028c:	e7eb      	b.n	8010266 <__swhatbuf_r+0x22>

0801028e <__smakebuf_r>:
 801028e:	898b      	ldrh	r3, [r1, #12]
 8010290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010292:	079d      	lsls	r5, r3, #30
 8010294:	4606      	mov	r6, r0
 8010296:	460c      	mov	r4, r1
 8010298:	d507      	bpl.n	80102aa <__smakebuf_r+0x1c>
 801029a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801029e:	6023      	str	r3, [r4, #0]
 80102a0:	6123      	str	r3, [r4, #16]
 80102a2:	2301      	movs	r3, #1
 80102a4:	6163      	str	r3, [r4, #20]
 80102a6:	b003      	add	sp, #12
 80102a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102aa:	ab01      	add	r3, sp, #4
 80102ac:	466a      	mov	r2, sp
 80102ae:	f7ff ffc9 	bl	8010244 <__swhatbuf_r>
 80102b2:	9f00      	ldr	r7, [sp, #0]
 80102b4:	4605      	mov	r5, r0
 80102b6:	4630      	mov	r0, r6
 80102b8:	4639      	mov	r1, r7
 80102ba:	f7ff f88f 	bl	800f3dc <_malloc_r>
 80102be:	b948      	cbnz	r0, 80102d4 <__smakebuf_r+0x46>
 80102c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102c4:	059a      	lsls	r2, r3, #22
 80102c6:	d4ee      	bmi.n	80102a6 <__smakebuf_r+0x18>
 80102c8:	f023 0303 	bic.w	r3, r3, #3
 80102cc:	f043 0302 	orr.w	r3, r3, #2
 80102d0:	81a3      	strh	r3, [r4, #12]
 80102d2:	e7e2      	b.n	801029a <__smakebuf_r+0xc>
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	6020      	str	r0, [r4, #0]
 80102d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102dc:	81a3      	strh	r3, [r4, #12]
 80102de:	9b01      	ldr	r3, [sp, #4]
 80102e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80102e4:	b15b      	cbz	r3, 80102fe <__smakebuf_r+0x70>
 80102e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102ea:	4630      	mov	r0, r6
 80102ec:	f000 f81e 	bl	801032c <_isatty_r>
 80102f0:	b128      	cbz	r0, 80102fe <__smakebuf_r+0x70>
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f023 0303 	bic.w	r3, r3, #3
 80102f8:	f043 0301 	orr.w	r3, r3, #1
 80102fc:	81a3      	strh	r3, [r4, #12]
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	431d      	orrs	r5, r3
 8010302:	81a5      	strh	r5, [r4, #12]
 8010304:	e7cf      	b.n	80102a6 <__smakebuf_r+0x18>
	...

08010308 <_fstat_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	2300      	movs	r3, #0
 801030c:	4d06      	ldr	r5, [pc, #24]	@ (8010328 <_fstat_r+0x20>)
 801030e:	4604      	mov	r4, r0
 8010310:	4608      	mov	r0, r1
 8010312:	4611      	mov	r1, r2
 8010314:	602b      	str	r3, [r5, #0]
 8010316:	f7f1 fa4b 	bl	80017b0 <_fstat>
 801031a:	1c43      	adds	r3, r0, #1
 801031c:	d102      	bne.n	8010324 <_fstat_r+0x1c>
 801031e:	682b      	ldr	r3, [r5, #0]
 8010320:	b103      	cbz	r3, 8010324 <_fstat_r+0x1c>
 8010322:	6023      	str	r3, [r4, #0]
 8010324:	bd38      	pop	{r3, r4, r5, pc}
 8010326:	bf00      	nop
 8010328:	200002bc 	.word	0x200002bc

0801032c <_isatty_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	2300      	movs	r3, #0
 8010330:	4d05      	ldr	r5, [pc, #20]	@ (8010348 <_isatty_r+0x1c>)
 8010332:	4604      	mov	r4, r0
 8010334:	4608      	mov	r0, r1
 8010336:	602b      	str	r3, [r5, #0]
 8010338:	f7f1 fa4a 	bl	80017d0 <_isatty>
 801033c:	1c43      	adds	r3, r0, #1
 801033e:	d102      	bne.n	8010346 <_isatty_r+0x1a>
 8010340:	682b      	ldr	r3, [r5, #0]
 8010342:	b103      	cbz	r3, 8010346 <_isatty_r+0x1a>
 8010344:	6023      	str	r3, [r4, #0]
 8010346:	bd38      	pop	{r3, r4, r5, pc}
 8010348:	200002bc 	.word	0x200002bc

0801034c <_init>:
 801034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034e:	bf00      	nop
 8010350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010352:	bc08      	pop	{r3}
 8010354:	469e      	mov	lr, r3
 8010356:	4770      	bx	lr

08010358 <_fini>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	bf00      	nop
 801035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801035e:	bc08      	pop	{r3}
 8010360:	469e      	mov	lr, r3
 8010362:	4770      	bx	lr
