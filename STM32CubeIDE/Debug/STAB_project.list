
STAB_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae4  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001014  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad44  0800ad44  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad44  0800ad44  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad44  0800ad44  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad48  0800ad48  0001ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800ad4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000c0  0800ae0c  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800ae0c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d95b  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001968  00000000  00000000  0002da94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  0002f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031cd8  00000000  00000000  00030c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db9b  00000000  00000000  00062936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00133c9a  00000000  00000000  000704d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040ac  00000000  00000000  001a416c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a8218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000c0 	.word	0x200000c0
 8000268:	00000000 	.word	0x00000000
 800026c:	08009d18 	.word	0x08009d18

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000c4 	.word	0x200000c4
 8000288:	08009d18 	.word	0x08009d18

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__popcountsi2>:
 800029c:	0843      	lsrs	r3, r0, #1
 800029e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	0883      	lsrs	r3, r0, #2
 80002a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002aa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002ae:	4418      	add	r0, r3
 80002b0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002b4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002b8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002bc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002c0:	0e00      	lsrs	r0, r0, #24
 80002c2:	4770      	bx	lr

080002c4 <user_provided_block_device_read>:
// Lecture de données depuis SRAM3
int user_provided_block_device_read(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    void *buffer,
                                    lfs_size_t size) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	603b      	str	r3, [r7, #0]
    // Lire les données depuis l'adresse SRAM3
    memcpy(buffer, &sram3_storage[block * c->block_size + offset], size);
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <user_provided_block_device_read+0x38>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	68b9      	ldr	r1, [r7, #8]
 80002dc:	fb03 f101 	mul.w	r1, r3, r1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	440b      	add	r3, r1
 80002e4:	4413      	add	r3, r2
 80002e6:	69ba      	ldr	r2, [r7, #24]
 80002e8:	4619      	mov	r1, r3
 80002ea:	6838      	ldr	r0, [r7, #0]
 80002ec:	f008 ffc5 	bl	800927a <memcpy>
    return 0;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000

08000300 <user_provided_block_device_prog>:
// Programmation (écriture) de données dans SRAM3
int user_provided_block_device_prog(const struct lfs_config *c,
                                    lfs_block_t block,
                                    lfs_off_t offset,
                                    const void *buffer,
                                    lfs_size_t size) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
 800030c:	603b      	str	r3, [r7, #0]
    // Écrire les données dans l'adresse SRAM3
    memcpy(&sram3_storage[block * c->block_size + offset], buffer, size);
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <user_provided_block_device_prog+0x38>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	68b9      	ldr	r1, [r7, #8]
 8000318:	fb03 f101 	mul.w	r1, r3, r1
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	440b      	add	r3, r1
 8000320:	4413      	add	r3, r2
 8000322:	69ba      	ldr	r2, [r7, #24]
 8000324:	6839      	ldr	r1, [r7, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f008 ffa7 	bl	800927a <memcpy>
    return 0;
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000

0800033c <user_provided_block_device_erase>:

// Effacement d'un bloc de SRAM3
int user_provided_block_device_erase(const struct lfs_config *c,
                                     lfs_block_t block) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
    // Effacer le bloc en remplissant de 0xFF
    memset(&sram3_storage[block * c->block_size], 0xFF, c->block_size);
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <user_provided_block_device_erase+0x30>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	6839      	ldr	r1, [r7, #0]
 8000350:	fb01 f303 	mul.w	r3, r1, r3
 8000354:	18d0      	adds	r0, r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	461a      	mov	r2, r3
 800035c:	21ff      	movs	r1, #255	; 0xff
 800035e:	f008 fee0 	bl	8009122 <memset>
    return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000000 	.word	0x20000000

08000370 <user_provided_block_device_sync>:

// Synchronisation (pas nécessaire ici, mais fourni pour la conformité)
int user_provided_block_device_sync(const struct lfs_config *c) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
    return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b0b8      	sub	sp, #224	; 0xe0
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038e:	f007 f9b1 	bl	80076f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000392:	f000 f867 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000396:	f000 f8e3 	bl	8000560 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800039a:	f000 f8d5 	bl	8000548 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  extern struct lfs_config cfg;
  lfs_t lfs;
  int err = lfs_mount(&lfs, &cfg);
 800039e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003a2:	492c      	ldr	r1, [pc, #176]	; (8000454 <main+0xcc>)
 80003a4:	4618      	mov	r0, r3
 80003a6:	f007 f845 	bl	8007434 <lfs_mount>
 80003aa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

  if (err) {
 80003ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d00d      	beq.n	80003d2 <main+0x4a>
    // Format si le système de fichiers est absent ou corrompu
    lfs_format(&lfs, &cfg);
 80003b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003ba:	4926      	ldr	r1, [pc, #152]	; (8000454 <main+0xcc>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f007 f823 	bl	8007408 <lfs_format>
    err = lfs_mount(&lfs, &cfg);
 80003c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003c6:	4923      	ldr	r1, [pc, #140]	; (8000454 <main+0xcc>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f007 f833 	bl	8007434 <lfs_mount>
 80003ce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  }

  if (err == 0) {
 80003d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d135      	bne.n	8000446 <main+0xbe>
      // === Début code d’écriture LittleFS ===
      lfs_file_t file;
      const char *text = "Bonjour SRAM3 !";
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <main+0xd0>)
 80003dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

      if (lfs_file_open(&lfs, &file, "monfichier.txt", LFS_O_WRONLY | LFS_O_CREAT) == 0) {
 80003e0:	1d39      	adds	r1, r7, #4
 80003e2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80003e6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <main+0xd4>)
 80003ec:	f007 f838 	bl	8007460 <lfs_file_open>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d112      	bne.n	800041c <main+0x94>
          lfs_file_write(&lfs, &file, text, strlen(text));
 80003f6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80003fa:	f7ff ff47 	bl	800028c <strlen>
 80003fe:	4603      	mov	r3, r0
 8000400:	1d39      	adds	r1, r7, #4
 8000402:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000406:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800040a:	f007 f889 	bl	8007520 <lfs_file_write>
          lfs_file_close(&lfs, &file);
 800040e:	1d3a      	adds	r2, r7, #4
 8000410:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f007 f856 	bl	80074c8 <lfs_file_close>
      }
      // === Fin code d’écriture LittleFS ===

      // LED clignote toutes les secondes (succès)
      while (1) {
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // Allume LED
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000422:	480f      	ldr	r0, [pc, #60]	; (8000460 <main+0xd8>)
 8000424:	f007 fd0a 	bl	8007e3c <HAL_GPIO_WritePin>
          HAL_Delay(1000); // Attend 1 seconde
 8000428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042c:	f007 fa20 	bl	8007870 <HAL_Delay>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); // Éteint LED
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000436:	480a      	ldr	r0, [pc, #40]	; (8000460 <main+0xd8>)
 8000438:	f007 fd00 	bl	8007e3c <HAL_GPIO_WritePin>
          HAL_Delay(10000); // Attend 1 seconde
 800043c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000440:	f007 fa16 	bl	8007870 <HAL_Delay>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);   // Allume LED
 8000444:	e7ea      	b.n	800041c <main+0x94>
      }
  } else {
      // LED OFF = échec du montage
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <main+0xd8>)
 800044e:	f007 fcf5 	bl	8007e3c <HAL_GPIO_WritePin>
      while (1); // Boucle infinie pour bloquer ici si erreur
 8000452:	e7fe      	b.n	8000452 <main+0xca>
 8000454:	20000004 	.word	0x20000004
 8000458:	08009d30 	.word	0x08009d30
 800045c:	08009d40 	.word	0x08009d40
 8000460:	42022000 	.word	0x42022000

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b09c      	sub	sp, #112	; 0x70
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0320 	add.w	r3, r7, #32
 800046e:	2250      	movs	r2, #80	; 0x50
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f008 fe55 	bl	8009122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	f107 0308 	add.w	r3, r7, #8
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
 8000488:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800048a:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <SystemClock_Config+0xdc>)
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	4a2c      	ldr	r2, [pc, #176]	; (8000540 <SystemClock_Config+0xdc>)
 8000490:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000494:	6113      	str	r3, [r2, #16]
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <SystemClock_Config+0xdc>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004a2:	bf00      	nop
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <SystemClock_Config+0xdc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	2b08      	cmp	r3, #8
 80004ae:	d1f9      	bne.n	80004a4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 80004b0:	2310      	movs	r3, #16
 80004b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80004b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80004ba:	2320      	movs	r3, #32
 80004bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80004c2:	2302      	movs	r3, #2
 80004c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004ca:	237d      	movs	r3, #125	; 0x7d
 80004cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ce:	2302      	movs	r3, #2
 80004d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80004da:	2308      	movs	r3, #8
 80004dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80004de:	2300      	movs	r3, #0
 80004e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	4618      	mov	r0, r3
 80004ec:	f007 fcce 	bl	8007e8c <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004f6:	f000 f87f 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	231f      	movs	r3, #31
 80004fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2303      	movs	r3, #3
 8000500:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2105      	movs	r1, #5
 8000518:	4618      	mov	r0, r3
 800051a:	f008 f8ef 	bl	80086fc <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000524:	f000 f868 	bl	80005f8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <SystemClock_Config+0xe0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <SystemClock_Config+0xe0>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	3770      	adds	r7, #112	; 0x70
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	44020800 	.word	0x44020800
 8000544:	40022000 	.word	0x40022000

08000548 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800054c:	f007 fc8e 	bl	8007e6c <HAL_ICACHE_Enable>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000556:	f000 f84f 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  // Cette section configure la LED LED1 pour qu'elle soit éteinte au démarrage.
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	481c      	ldr	r0, [pc, #112]	; (80005f0 <MX_GPIO_Init+0x90>)
 800057e:	f007 fc5d 	bl	8007e3c <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_GPIO_Init+0x94>)
 8000584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <MX_GPIO_Init+0x94>)
 800058a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_GPIO_Init+0x94>)
 8000594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_GPIO_Init+0x94>)
 80005a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <MX_GPIO_Init+0x94>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_GPIO_Init+0x94>)
 80005b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <MX_GPIO_Init+0x90>)
 80005c6:	f007 fc39 	bl	8007e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80005ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <MX_GPIO_Init+0x90>)
 80005e4:	f007 facc 	bl	8007b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	42022000 	.word	0x42022000
 80005f4:	44020c00 	.word	0x44020c00

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	e7fe      	b.n	8000600 <Error_Handler+0x8>

08000602 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f007 f8e8 	bl	8007830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return 1;
 8000668:	2301      	movs	r3, #1
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <_kill>:

int _kill(int pid, int sig)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800067e:	f008 fdcf 	bl	8009220 <__errno>
 8000682:	4603      	mov	r3, r0
 8000684:	2216      	movs	r2, #22
 8000686:	601a      	str	r2, [r3, #0]
  return -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <_exit>:

void _exit (int status)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ffe7 	bl	8000674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006a6:	e7fe      	b.n	80006a6 <_exit+0x12>

080006a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e00a      	b.n	80006d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ba:	f3af 8000 	nop.w
 80006be:	4601      	mov	r1, r0
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	b2ca      	uxtb	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf0      	blt.n	80006ba <_read+0x12>
  }

  return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	e009      	b.n	8000708 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	60ba      	str	r2, [r7, #8]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	dbf1      	blt.n	80006f4 <_write+0x12>
  }
  return len;
 8000710:	687b      	ldr	r3, [r7, #4]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <_close>:

int _close(int file)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000742:	605a      	str	r2, [r3, #4]
  return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <_isatty>:

int _isatty(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f008 fd34 	bl	8009220 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200a0000 	.word	0x200a0000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	200000dc 	.word	0x200000dc
 80007ec:	20000230 	.word	0x20000230

080007f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f006 ff02 	bl	80075fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f008 fd05 	bl	800922c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fdb1 	bl	8000388 <main>

08000826 <LoopForever>:

LoopForever:
    b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000834:	0800ad4c 	.word	0x0800ad4c
  ldr r2, =_sbss
 8000838:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800083c:	20000230 	.word	0x20000230

08000840 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_IRQHandler>

08000842 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4293      	cmp	r3, r2
 8000852:	bf38      	it	cc
 8000854:	4613      	movcc	r3, r2
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4293      	cmp	r3, r2
 8000872:	bf28      	it	cs
 8000874:	4613      	movcs	r3, r2
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	fbb3 f2f2 	udiv	r2, r3, r2
 8000894:	6839      	ldr	r1, [r7, #0]
 8000896:	fb01 f202 	mul.w	r2, r1, r2
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	1ad3      	subs	r3, r2, r3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	3b01      	subs	r3, #1
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ffde 	bl	8000882 <lfs_aligndown>
 80008c6:	4603      	mov	r3, r0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	fa93 f3a3 	rbit	r3, r3
 80008fe:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fcc0 	bl	800029c <__popcountsi2>
 800091c:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	1ad3      	subs	r3, r2, r3
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800094a:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ffee 	bl	8000942 <lfs_fromle32>
 8000966:	4603      	mov	r3, r0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ffed 	bl	8000970 <lfs_frombe32>
 8000996:	4603      	mov	r3, r0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f008 f9c5 	bl	8008d38 <malloc>
 80009ae:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f008 f9c1 	bl	8008d48 <free>
#else
    (void)p;
#endif
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	f04f 32ff 	mov.w	r2, #4294967295
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68d8      	ldr	r0, [r3, #12]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a00:	461a      	mov	r2, r3
 8000a02:	21ff      	movs	r1, #255	; 0xff
 8000a04:	f008 fb8d 	bl	8009122 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000a18:	b5b0      	push	{r4, r5, r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a28:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a2e:	441a      	add	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d80a      	bhi.n	8000a50 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8124 	beq.w	8000c8c <lfs_bd_read+0x274>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f0c0 811e 	bcc.w	8000c8c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000a50:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000a54:	e11f      	b.n	8000c96 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a58:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d03f      	beq.n	8000ae0 <lfs_bd_read+0xc8>
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d13a      	bne.n	8000ae0 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d232      	bcs.n	8000ae0 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d324      	bcc.n	8000ace <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	6859      	ldr	r1, [r3, #4]
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	1acb      	subs	r3, r1, r3
 8000a90:	4413      	add	r3, r2
 8000a92:	4619      	mov	r1, r3
 8000a94:	69b8      	ldr	r0, [r7, #24]
 8000a96:	f7ff fee4 	bl	8000862 <lfs_min>
 8000a9a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000aa6:	1acb      	subs	r3, r1, r3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4619      	mov	r1, r3
 8000aae:	69f8      	ldr	r0, [r7, #28]
 8000ab0:	f008 fbe3 	bl	800927a <memcpy>

                data += diff;
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4413      	add	r3, r2
 8000aba:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000acc:	e0de      	b.n	8000c8c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	69b8      	ldr	r0, [r7, #24]
 8000ada:	f7ff fec2 	bl	8000862 <lfs_min>
 8000ade:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d13a      	bne.n	8000b60 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d232      	bcs.n	8000b60 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d324      	bcc.n	8000b4e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6859      	ldr	r1, [r3, #4]
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	1acb      	subs	r3, r1, r3
 8000b10:	4413      	add	r3, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	69b8      	ldr	r0, [r7, #24]
 8000b16:	f7ff fea4 	bl	8000862 <lfs_min>
 8000b1a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b26:	1acb      	subs	r3, r1, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	69f8      	ldr	r0, [r7, #28]
 8000b30:	f008 fba3 	bl	800927a <memcpy>

                data += diff;
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4413      	add	r3, r2
 8000b3a:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000b4c:	e09e      	b.n	8000c8c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	69b8      	ldr	r0, [r7, #24]
 8000b5a:	f7ff fe82 	bl	8000862 <lfs_min>
 8000b5e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d336      	bcc.n	8000bd6 <lfs_bd_read+0x1be>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b74:	fb01 f202 	mul.w	r2, r1, r2
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b82:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d325      	bcc.n	8000bd6 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4619      	mov	r1, r3
 8000b92:	69b8      	ldr	r0, [r7, #24]
 8000b94:	f7ff fe75 	bl	8000882 <lfs_aligndown>
 8000b98:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b9e:	685c      	ldr	r4, [r3, #4]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000bae:	47a0      	blx	r4
 8000bb0:	6178      	str	r0, [r7, #20]
            if (err) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <lfs_bd_read+0x1a4>
                return err;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	e06c      	b.n	8000c96 <lfs_bd_read+0x27e>
            }

            data += diff;
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4413      	add	r3, r2
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000bd4:	e05a      	b.n	8000c8c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00a      	beq.n	8000bf4 <lfs_bd_read+0x1dc>
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d305      	bcc.n	8000bf4 <lfs_bd_read+0x1dc>
 8000be8:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <lfs_bd_read+0x288>)
 8000bea:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <lfs_bd_read+0x28c>)
 8000bec:	216b      	movs	r1, #107	; 0x6b
 8000bee:	482e      	ldr	r0, [pc, #184]	; (8000ca8 <lfs_bd_read+0x290>)
 8000bf0:	f008 f884 	bl	8008cfc <__assert_func>
        rcache->block = block;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4619      	mov	r1, r3
 8000c02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c04:	f7ff fe3d 	bl	8000882 <lfs_aligndown>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c18:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	f7ff fe45 	bl	80008ac <lfs_alignup>
 8000c22:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c28:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	f7ff fe18 	bl	8000862 <lfs_min>
 8000c32:	4602      	mov	r2, r0
                - rcache->off,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000c38:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f7ff fe0d 	bl	8000862 <lfs_min>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c52:	685c      	ldr	r4, [r3, #4]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	462b      	mov	r3, r5
 8000c6c:	47a0      	blx	r4
 8000c6e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	dd05      	ble.n	8000c82 <lfs_bd_read+0x26a>
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <lfs_bd_read+0x294>)
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <lfs_bd_read+0x28c>)
 8000c7a:	2176      	movs	r1, #118	; 0x76
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <lfs_bd_read+0x290>)
 8000c7e:	f008 f83d 	bl	8008cfc <__assert_func>
        if (err) {
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <lfs_bd_read+0x274>
            return err;
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	e004      	b.n	8000c96 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f47f aee1 	bne.w	8000a56 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08009d50 	.word	0x08009d50
 8000ca4:	0800ab60 	.word	0x0800ab60
 8000ca8:	08009d80 	.word	0x08009d80
 8000cac:	08009dcc 	.word	0x08009dcc

08000cb0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	; 0x40
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cca:	e039      	b.n	8000d40 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdc4 	bl	8000862 <lfs_min>
 8000cda:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	1ad1      	subs	r1, r2, r3
 8000ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce6:	4413      	add	r3, r2
 8000ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cea:	9203      	str	r2, [sp, #12]
 8000cec:	f107 0214 	add.w	r2, r7, #20
 8000cf0:	9202      	str	r2, [sp, #8]
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff fe8a 	bl	8000a18 <lfs_bd_read>
 8000d04:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <lfs_bd_cmp+0x60>
            return err;
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	e01c      	b.n	8000d4a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	18d1      	adds	r1, r2, r3
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f008 f9f0 	bl	8009102 <memcmp>
 8000d22:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d006      	beq.n	8000d38 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da01      	bge.n	8000d34 <lfs_bd_cmp+0x84>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e00a      	b.n	8000d4a <lfs_bd_cmp+0x9a>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e008      	b.n	8000d4a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	4413      	add	r3, r2
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3c1      	bcc.n	8000ccc <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b08e      	sub	sp, #56	; 0x38
 8000d56:	af04      	add	r7, sp, #16
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
 8000d68:	e030      	b.n	8000dcc <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2108      	movs	r1, #8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fd75 	bl	8000862 <lfs_min>
 8000d78:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1ad1      	subs	r1, r2, r3
 8000d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	4413      	add	r3, r2
 8000d86:	6a3a      	ldr	r2, [r7, #32]
 8000d88:	9203      	str	r2, [sp, #12]
 8000d8a:	f107 0214 	add.w	r2, r7, #20
 8000d8e:	9202      	str	r2, [sp, #8]
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	460b      	mov	r3, r1
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fe3b 	bl	8000a18 <lfs_bd_read>
 8000da2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <lfs_bd_crc+0x5c>
            return err;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	e013      	b.n	8000dd6 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f107 0114 	add.w	r1, r7, #20
 8000db6:	6a3a      	ldr	r2, [r7, #32]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fbe1 	bl	8007580 <lfs_crc>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	4413      	add	r3, r2
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
 8000dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3ca      	bcc.n	8000d6a <lfs_bd_crc+0x18>
    }

    return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df6:	d060      	beq.n	8000eba <lfs_bd_flush+0xda>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f113 0f02 	cmn.w	r3, #2
 8000e00:	d05b      	beq.n	8000eba <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d305      	bcc.n	8000e1a <lfs_bd_flush+0x3a>
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <lfs_bd_flush+0xe4>)
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <lfs_bd_flush+0xe8>)
 8000e12:	21b3      	movs	r1, #179	; 0xb3
 8000e14:	482d      	ldr	r0, [pc, #180]	; (8000ecc <lfs_bd_flush+0xec>)
 8000e16:	f007 ff71 	bl	8008cfc <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4610      	mov	r0, r2
 8000e28:	f7ff fd40 	bl	80008ac <lfs_alignup>
 8000e2c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000e32:	689c      	ldr	r4, [r3, #8]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	462b      	mov	r3, r5
 8000e4a:	47a0      	blx	r4
 8000e4c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd05      	ble.n	8000e60 <lfs_bd_flush+0x80>
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <lfs_bd_flush+0xf0>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <lfs_bd_flush+0xe8>)
 8000e58:	21b7      	movs	r1, #183	; 0xb7
 8000e5a:	481c      	ldr	r0, [pc, #112]	; (8000ecc <lfs_bd_flush+0xec>)
 8000e5c:	f007 ff4e 	bl	8008cfc <__assert_func>
        if (err) {
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <lfs_bd_flush+0x8a>
            return err;
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	e028      	b.n	8000ebc <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d020      	beq.n	8000eb2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff fdab 	bl	80009ce <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000e84:	69f8      	ldr	r0, [r7, #28]
 8000e86:	9003      	str	r0, [sp, #12]
 8000e88:	9102      	str	r1, [sp, #8]
 8000e8a:	9201      	str	r2, [sp, #4]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	2100      	movs	r1, #0
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f7ff ff0b 	bl	8000cb0 <lfs_bd_cmp>
 8000e9a:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	da01      	bge.n	8000ea6 <lfs_bd_flush+0xc6>
                return res;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	e00a      	b.n	8000ebc <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000eac:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000eb0:	e004      	b.n	8000ebc <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fd99 	bl	80009ec <lfs_cache_zero>
    }

    return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec4:	08009dd8 	.word	0x08009dd8
 8000ec8:	0800ab6c 	.word	0x0800ab6c
 8000ecc:	08009d80 	.word	0x08009d80
 8000ed0:	08009dcc 	.word	0x08009dcc

08000ed4 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff fd72 	bl	80009ce <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ff75 	bl	8000de0 <lfs_bd_flush>
 8000ef6:	6178      	str	r0, [r7, #20]
    if (err) {
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <lfs_bd_sync+0x2e>
        return err;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	e011      	b.n	8000f26 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4798      	blx	r3
 8000f10:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd05      	ble.n	8000f24 <lfs_bd_sync+0x50>
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <lfs_bd_sync+0x5c>)
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <lfs_bd_sync+0x60>)
 8000f1c:	21dd      	movs	r1, #221	; 0xdd
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <lfs_bd_sync+0x64>)
 8000f20:	f007 feec 	bl	8008cfc <__assert_func>
    return err;
 8000f24:	697b      	ldr	r3, [r7, #20]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	08009dcc 	.word	0x08009dcc
 8000f34:	0800ab7c 	.word	0x0800ab7c
 8000f38:	08009d80 	.word	0x08009d80

08000f3c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	f113 0f02 	cmn.w	r3, #2
 8000f54:	d00a      	beq.n	8000f6c <lfs_bd_prog+0x30>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d305      	bcc.n	8000f6c <lfs_bd_prog+0x30>
 8000f60:	4b47      	ldr	r3, [pc, #284]	; (8001080 <lfs_bd_prog+0x144>)
 8000f62:	4a48      	ldr	r2, [pc, #288]	; (8001084 <lfs_bd_prog+0x148>)
 8000f64:	21e8      	movs	r1, #232	; 0xe8
 8000f66:	4848      	ldr	r0, [pc, #288]	; (8001088 <lfs_bd_prog+0x14c>)
 8000f68:	f007 fec8 	bl	8008cfc <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f70:	441a      	add	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d978      	bls.n	800106e <lfs_bd_prog+0x132>
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <lfs_bd_prog+0x150>)
 8000f7e:	4a41      	ldr	r2, [pc, #260]	; (8001084 <lfs_bd_prog+0x148>)
 8000f80:	21e9      	movs	r1, #233	; 0xe9
 8000f82:	4841      	ldr	r0, [pc, #260]	; (8001088 <lfs_bd_prog+0x14c>)
 8000f84:	f007 feba 	bl	8008cfc <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d151      	bne.n	8001036 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d34c      	bcc.n	8001036 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	4413      	add	r3, r2
                off >= pcache->off &&
 8000fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d243      	bcs.n	8001036 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	6859      	ldr	r1, [r3, #4]
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fc2:	f7ff fc4e 	bl	8000862 <lfs_min>
 8000fc6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fd2:	1acb      	subs	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	69f9      	ldr	r1, [r7, #28]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f008 f94d 	bl	800927a <memcpy>

            data += diff;
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4413      	add	r3, r2
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	6898      	ldr	r0, [r3, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fc1c 	bl	8000842 <lfs_max>
 800100a:	4602      	mov	r2, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	429a      	cmp	r2, r3
 800101c:	d127      	bne.n	800106e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fedb 	bl	8000de0 <lfs_bd_flush>
 800102a:	6178      	str	r0, [r7, #20]
                if (err) {
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d01d      	beq.n	800106e <lfs_bd_prog+0x132>
                    return err;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	e01f      	b.n	8001076 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103e:	d006      	beq.n	800104e <lfs_bd_prog+0x112>
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <lfs_bd_prog+0x154>)
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <lfs_bd_prog+0x148>)
 8001044:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <lfs_bd_prog+0x14c>)
 800104a:	f007 fe57 	bl	8008cfc <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001052:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4619      	mov	r1, r3
 800105c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800105e:	f7ff fc10 	bl	8000882 <lfs_aligndown>
 8001062:	4602      	mov	r2, r0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	2b00      	cmp	r3, #0
 8001072:	d189      	bne.n	8000f88 <lfs_bd_prog+0x4c>
    }

    return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	08009dfc 	.word	0x08009dfc
 8001084:	0800ab88 	.word	0x0800ab88
 8001088:	08009d80 	.word	0x08009d80
 800108c:	08009e34 	.word	0x08009e34
 8001090:	08009e58 	.word	0x08009e58

08001094 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d306      	bcc.n	80010b6 <lfs_bd_erase+0x22>
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <lfs_bd_erase+0x54>)
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <lfs_bd_erase+0x58>)
 80010ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80010b0:	480f      	ldr	r0, [pc, #60]	; (80010f0 <lfs_bd_erase+0x5c>)
 80010b2:	f007 fe23 	bl	8008cfc <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	4610      	mov	r0, r2
 80010c4:	4798      	blx	r3
 80010c6:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dd06      	ble.n	80010dc <lfs_bd_erase+0x48>
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <lfs_bd_erase+0x60>)
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <lfs_bd_erase+0x58>)
 80010d2:	f44f 718b 	mov.w	r1, #278	; 0x116
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <lfs_bd_erase+0x5c>)
 80010d8:	f007 fe10 	bl	8008cfc <__assert_func>
    return err;
 80010dc:	68fb      	ldr	r3, [r7, #12]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08009e7c 	.word	0x08009e7c
 80010ec:	0800ab94 	.word	0x0800ab94
 80010f0:	08009d80 	.word	0x08009d80
 80010f4:	08009dcc 	.word	0x08009dcc

080010f8 <lfs_path_namelen>:


/// Small type-level utilities ///

// some operations on paths
static inline lfs_size_t lfs_path_namelen(const char *path) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    return strcspn(path, "/");
 8001100:	4904      	ldr	r1, [pc, #16]	; (8001114 <lfs_path_namelen+0x1c>)
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f008 f815 	bl	8009132 <strcspn>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08009e98 	.word	0x08009e98

08001118 <lfs_path_islast>:

static inline bool lfs_path_islast(const char *path) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    lfs_size_t namelen = lfs_path_namelen(path);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffe9 	bl	80010f8 <lfs_path_namelen>
 8001126:	60f8      	str	r0, [r7, #12]
    return path[namelen + strspn(path + namelen, "/")] == '\0';
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	4909      	ldr	r1, [pc, #36]	; (8001154 <lfs_path_islast+0x3c>)
 8001130:	4618      	mov	r0, r3
 8001132:	f008 f80f 	bl	8009154 <strspn>
 8001136:	4602      	mov	r2, r0
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08009e98 	.word	0x08009e98

08001158 <lfs_path_isdir>:

static inline bool lfs_path_isdir(const char *path) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    return path[lfs_path_namelen(path)] != '\0';
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ffc9 	bl	80010f8 <lfs_path_namelen>
 8001166:	4602      	mov	r2, r0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf14      	ite	ne
 8001172:	2301      	movne	r3, #1
 8001174:	2300      	moveq	r3, #0
 8001176:	b2db      	uxtb	r3, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lfs_pair_swap>:

// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3304      	adds	r3, #4
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ba:	d005      	beq.n	80011c8 <lfs_pair_isnull+0x1e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3304      	adds	r3, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c6:	d101      	bne.n	80011cc <lfs_pair_isnull+0x22>
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <lfs_pair_isnull+0x24>
 80011cc:	2300      	movs	r3, #0
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d017      	beq.n	8001226 <lfs_pair_cmp+0x46>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3304      	adds	r3, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d00f      	beq.n	8001226 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3304      	adds	r3, #4
 800120e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d008      	beq.n	8001226 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3304      	adds	r3, #4
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d001      	beq.n	8001226 <lfs_pair_cmp+0x46>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <lfs_pair_cmp+0x48>
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d107      	bne.n	800125a <lfs_pair_issync+0x26>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3304      	adds	r3, #4
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3304      	adds	r3, #4
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d00d      	beq.n	8001276 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001264:	429a      	cmp	r2, r3
 8001266:	d108      	bne.n	800127a <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3304      	adds	r3, #4
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d101      	bne.n	800127a <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <lfs_pair_issync+0x48>
 800127a:	2300      	movs	r3, #0
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb51 	bl	8000942 <lfs_fromle32>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	1d1c      	adds	r4, r3, #4
 80012b0:	4610      	mov	r0, r2
 80012b2:	f7ff fb46 	bl	8000942 <lfs_fromle32>
 80012b6:	4603      	mov	r3, r0
 80012b8:	6023      	str	r3, [r4, #0]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}

080012c2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80012c2:	b590      	push	{r4, r7, lr}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb42 	bl	8000958 <lfs_tole32>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3304      	adds	r3, #4
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1d1c      	adds	r4, r3, #4
 80012e4:	4610      	mov	r0, r2
 80012e6:	f7ff fb37 	bl	8000958 <lfs_tole32>
 80012ea:	4603      	mov	r3, r0
 80012ec:	6023      	str	r3, [r4, #0]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}

080012f6 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	43db      	mvns	r3, r3
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	b2db      	uxtb	r3, r3
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	059b      	lsls	r3, r3, #22
 800131e:	159b      	asrs	r3, r3, #22
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0d1b      	lsrs	r3, r3, #20
 8001344:	b29b      	uxth	r3, r3
 8001346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800134a:	b29b      	uxth	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0d1b      	lsrs	r3, r3, #20
 8001364:	b29b      	uxth	r3, r3
 8001366:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800136a:	b29b      	uxth	r3, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0d1b      	lsrs	r3, r3, #20
 8001384:	b29b      	uxth	r3, r3
 8001386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138a:	b29b      	uxth	r3, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0d1b      	lsrs	r3, r3, #20
 80013a4:	b2db      	uxtb	r3, r3
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffec 	bl	8001398 <lfs_tag_chunk>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b25b      	sxtb	r3, r3
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	0a9b      	lsrs	r3, r3, #10
 80013d8:	b29b      	uxth	r3, r3
 80013da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013de:	b29b      	uxth	r3, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff7f 	bl	8001312 <lfs_tag_isdelete>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ffe5 	bl	80013ec <lfs_tag_size>
 8001422:	4603      	mov	r3, r0
 8001424:	3304      	adds	r3, #4
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
    a->tag ^= b->tag;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	405a      	eors	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0];
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	405a      	eors	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	405a      	eors	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
    return a->tag == 0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
            && a->pair[0] == 0
            && a->pair[1] == 0;
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <lfs_gstate_iszero+0x24>
            && a->pair[0] == 0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <lfs_gstate_iszero+0x24>
            && a->pair[1] == 0;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <lfs_gstate_iszero+0x24>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <lfs_gstate_iszero+0x26>
 8001492:	2300      	movs	r3, #0
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff9a 	bl	80013ec <lfs_tag_size>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff87 	bl	80013ec <lfs_tag_size>
 80014de:	4603      	mov	r3, r0
 80014e0:	b2db      	uxtb	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff1e 	bl	8001338 <lfs_tag_type1>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf14      	ite	ne
 8001502:	2301      	movne	r3, #1
 8001504:	2300      	moveq	r3, #0
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff65 	bl	80013ec <lfs_tag_size>
 8001522:	4603      	mov	r3, r0
 8001524:	0a5b      	lsrs	r3, r3, #9
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fef6 	bl	8001338 <lfs_tag_type1>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00a      	beq.n	8001568 <lfs_gstate_hasmovehere+0x30>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	6839      	ldr	r1, [r7, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe41 	bl	80011e0 <lfs_pair_cmp>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <lfs_gstate_hasmovehere+0x30>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <lfs_gstate_hasmovehere+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff f9dc 	bl	8000942 <lfs_fromle32>
 800158a:	4602      	mov	r2, r0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f9d4 	bl	8000942 <lfs_fromle32>
 800159a:	4602      	mov	r2, r0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff f9cc 	bl	8000942 <lfs_fromle32>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f9c7 	bl	8000958 <lfs_tole32>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff f9bf 	bl	8000958 <lfs_tole32>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f9b7 	bl	8000958 <lfs_tole32>
 80015ea:	4602      	mov	r2, r0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff f99c 	bl	8000942 <lfs_fromle32>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f994 	bl	8000942 <lfs_fromle32>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	605a      	str	r2, [r3, #4]
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff f98f 	bl	8000958 <lfs_tole32>
 800163a:	4602      	mov	r2, r0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff f987 	bl	8000958 <lfs_tole32>
 800164a:	4602      	mov	r2, r0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff f96c 	bl	8000942 <lfs_fromle32>
 800166a:	4602      	mov	r2, r0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff f964 	bl	8000942 <lfs_fromle32>
 800167a:	4602      	mov	r2, r0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	605a      	str	r2, [r3, #4]
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f95f 	bl	8000958 <lfs_tole32>
 800169a:	4602      	mov	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f957 	bl	8000958 <lfs_tole32>
 80016aa:	4602      	mov	r2, r0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f93c 	bl	8000942 <lfs_fromle32>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f934 	bl	8000942 <lfs_fromle32>
 80016da:	4602      	mov	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f92c 	bl	8000942 <lfs_fromle32>
 80016ea:	4602      	mov	r2, r0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f924 	bl	8000942 <lfs_fromle32>
 80016fa:	4602      	mov	r2, r0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f91c 	bl	8000942 <lfs_fromle32>
 800170a:	4602      	mov	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f914 	bl	8000942 <lfs_fromle32>
 800171a:	4602      	mov	r2, r0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	615a      	str	r2, [r3, #20]
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f90f 	bl	8000958 <lfs_tole32>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff f907 	bl	8000958 <lfs_tole32>
 800174a:	4602      	mov	r2, r0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f8ff 	bl	8000958 <lfs_tole32>
 800175a:	4602      	mov	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f8f7 	bl	8000958 <lfs_tole32>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f8ef 	bl	8000958 <lfs_tole32>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f8e7 	bl	8000958 <lfs_tole32>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	615a      	str	r2, [r3, #20]
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e009      	b.n	80017bc <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d101      	bne.n	80017b6 <lfs_mlist_isopen+0x1e>
            return true;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e007      	b.n	80017c6 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f1      	bne.n	80017a8 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3328      	adds	r3, #40	; 0x28
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e00d      	b.n	8001800 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d105      	bne.n	80017fa <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	601a      	str	r2, [r3, #0]
            break;
 80017f8:	e007      	b.n	800180a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ed      	bne.n	80017e4 <lfs_mlist_remove+0x12>
        }
    }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <lfs_fs_disk_version+0x18>)
    }
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	00020001 	.word	0x00020001

08001858 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffeb 	bl	800183c <lfs_fs_disk_version>
 8001866:	4603      	mov	r3, r0
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	b29b      	uxth	r3, r3

}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffdd 	bl	800183c <lfs_fs_disk_version>
 8001882:	4603      	mov	r3, r0
 8001884:	b29b      	uxth	r3, r3
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->lookahead.next = 0;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ckpoint(lfs);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffe5 	bl	800188e <lfs_alloc_ckpoint>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e6:	4413      	add	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 80018ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80018f0:	fb01 f202 	mul.w	r2, r1, r2
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d212      	bcs.n	8001928 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	441a      	add	r2, r3
 800190c:	7811      	ldrb	r1, [r2, #0]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f002 0207 	and.w	r2, r2, #7
 8001914:	2001      	movs	r0, #1
 8001916:	fa00 f202 	lsl.w	r2, r0, r2
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001920:	4403      	add	r3, r0
 8001922:	430a      	orrs	r2, r1
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	4413      	add	r3, r2
            % lfs->block_count;
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800194e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001952:	fb01 f202 	mul.w	r2, r1, r2
 8001956:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->lookahead.next = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    lfs->lookahead.size = lfs_min(
 8001968:	00da      	lsls	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7fe ff76 	bl	8000862 <lfs_min>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	659a      	str	r2, [r3, #88]	; 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	461a      	mov	r2, r3
 8001988:	2100      	movs	r1, #0
 800198a:	f007 fbca 	bl	8009122 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800198e:	2301      	movs	r3, #1
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4909      	ldr	r1, [pc, #36]	; (80019b8 <lfs_alloc_scan+0x80>)
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f004 ff8f 	bl	80068b8 <lfs_fs_traverse_>
 800199a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff81 	bl	80018aa <lfs_alloc_drop>
        return err;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	e000      	b.n	80019ae <lfs_alloc_scan+0x76>
    }

    return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	080018cd 	.word	0x080018cd

080019bc <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80019c6:	e04d      	b.n	8001a64 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d131      	bne.n	8001a50 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	4413      	add	r3, r2
                        % lfs->block_count;
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80019fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80019fe:	fb01 f202 	mul.w	r2, r1, r2
 8001a02:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	661a      	str	r2, [r3, #96]	; 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d211      	bcs.n	8001a4c <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1dd      	bne.n	8001a08 <lfs_alloc+0x4c>
                        return 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e032      	b.n	8001ab6 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->lookahead.ckpoint -= 1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3ab      	bcc.n	80019c8 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d116      	bne.n	8001aa6 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	4413      	add	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001a86:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a8a:	fb01 f202 	mul.w	r2, r1, r2
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <lfs_alloc+0x104>)
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	f240 22bd 	movw	r2, #701	; 0x2bd
 8001a98:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <lfs_alloc+0x108>)
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <lfs_alloc+0x10c>)
 8001a9c:	f007 fadc 	bl	8009058 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8001aa0:	f06f 031b 	mvn.w	r3, #27
 8001aa4:	e007      	b.n	8001ab6 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff46 	bl	8001938 <lfs_alloc_scan>
 8001aac:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d088      	beq.n	80019c6 <lfs_alloc+0xa>
            return err;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	08009ec8 	.word	0x08009ec8
 8001ac4:	08009d80 	.word	0x08009d80
 8001ac8:	08009e9c 	.word	0x08009e9c

08001acc <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b08f      	sub	sp, #60	; 0x3c
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	333c      	adds	r3, #60	; 0x3c
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fd20 	bl	8001538 <lfs_gstate_hasmovehere>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80ca 	beq.w	8001c94 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fc63 	bl	80013cc <lfs_tag_id>
 8001b06:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80c3 	beq.w	8001c94 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc5a 	bl	80013cc <lfs_tag_id>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7ff fc55 	bl	80013cc <lfs_tag_id>
 8001b22:	4603      	mov	r3, r0
 8001b24:	429c      	cmp	r4, r3
 8001b26:	d102      	bne.n	8001b2e <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8001b28:	f06f 0301 	mvn.w	r3, #1
 8001b2c:	e0be      	b.n	8001cac <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc4a 	bl	80013cc <lfs_tag_id>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461c      	mov	r4, r3
 8001b3c:	6838      	ldr	r0, [r7, #0]
 8001b3e:	f7ff fc45 	bl	80013cc <lfs_tag_id>
 8001b42:	4603      	mov	r3, r0
 8001b44:	429c      	cmp	r4, r3
 8001b46:	f080 80a5 	bcs.w	8001c94 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b50:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b52:	e09f      	b.n	8001c94 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fc55 	bl	8001406 <lfs_tag_dsize>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001b68:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8001b6e:	2204      	movs	r2, #4
 8001b70:	9203      	str	r2, [sp, #12]
 8001b72:	f107 0210 	add.w	r2, r7, #16
 8001b76:	9202      	str	r2, [sp, #8]
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	9201      	str	r2, [sp, #4]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2304      	movs	r3, #4
 8001b80:	460a      	mov	r2, r1
 8001b82:	2100      	movs	r1, #0
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7fe ff47 	bl	8000a18 <lfs_bd_read>
 8001b8a:	61b8      	str	r0, [r7, #24]
        if (err) {
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <lfs_dir_getslice+0xca>
            return err;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	e08a      	b.n	8001cac <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fee9 	bl	8000970 <lfs_frombe32>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4053      	eors	r3, r2
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fc0e 	bl	80013cc <lfs_tag_id>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d02b      	beq.n	8001c0e <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bb6:	69f8      	ldr	r0, [r7, #28]
 8001bb8:	f7ff fbbe 	bl	8001338 <lfs_tag_type1>
 8001bbc:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc2:	d124      	bne.n	8001c0e <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001bc4:	69f8      	ldr	r0, [r7, #28]
 8001bc6:	f7ff fc01 	bl	80013cc <lfs_tag_id>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461c      	mov	r4, r3
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fbf9 	bl	80013cc <lfs_tag_id>
 8001bda:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	d816      	bhi.n	8001c0e <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <lfs_dir_getslice+0x1e8>)
 8001be8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d102      	bne.n	8001bfe <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8001bf8:	f06f 0301 	mvn.w	r3, #1
 8001bfc:	e056      	b.n	8001cac <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001bfe:	69f8      	ldr	r0, [r7, #28]
 8001c00:	f7ff fbd7 	bl	80013b2 <lfs_tag_splice>
 8001c04:	4603      	mov	r3, r0
 8001c06:	029a      	lsls	r2, r3, #10
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	401a      	ands	r2, r3
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	1ac9      	subs	r1, r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d138      	bne.n	8001c94 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 8001c22:	69f8      	ldr	r0, [r7, #28]
 8001c24:	f7ff fb75 	bl	8001312 <lfs_tag_isdelete>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 8001c2e:	f06f 0301 	mvn.w	r3, #1
 8001c32:	e03b      	b.n	8001cac <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001c34:	69f8      	ldr	r0, [r7, #28]
 8001c36:	f7ff fbd9 	bl	80013ec <lfs_tag_size>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fe0f 	bl	8000862 <lfs_min>
 8001c44:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001c46:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c50:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001c52:	3204      	adds	r2, #4
 8001c54:	6979      	ldr	r1, [r7, #20]
 8001c56:	9103      	str	r1, [sp, #12]
 8001c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c5a:	9102      	str	r1, [sp, #8]
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	4602      	mov	r2, r0
 8001c64:	2100      	movs	r1, #0
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7fe fed6 	bl	8000a18 <lfs_bd_read>
 8001c6c:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <lfs_dir_getslice+0x1ac>
                return err;
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	e019      	b.n	8001cac <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001c78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	18d0      	adds	r0, r2, r3
 8001c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	f007 fa4b 	bl	8009122 <memset>

            return tag + gdiff;
 8001c8c:	6a3a      	ldr	r2, [r7, #32]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4413      	add	r3, r2
 8001c92:	e00b      	b.n	8001cac <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fbb5 	bl	8001406 <lfs_tag_dsize>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f4bf af56 	bcs.w	8001b54 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8001ca8:	f06f 0301 	mvn.w	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	372c      	adds	r7, #44	; 0x2c
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	000ffc00 	.word	0x000ffc00

08001cb8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af04      	add	r7, sp, #16
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f7ff fb90 	bl	80013ec <lfs_tag_size>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fef4 	bl	8001acc <lfs_dir_getslice>
 8001ce4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b08c      	sub	sp, #48	; 0x30
 8001cf2:	af04      	add	r7, sp, #16
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfe:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d04:	441a      	add	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f240 80c0 	bls.w	8001e92 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001d12:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001d16:	e0c1      	b.n	8001e9c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d1a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03f      	beq.n	8001da2 <lfs_dir_getread+0xb4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f113 0f02 	cmn.w	r3, #2
 8001d2a:	d13a      	bne.n	8001da2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d232      	bcs.n	8001da2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d324      	bcc.n	8001d90 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d50:	1acb      	subs	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	69b8      	ldr	r0, [r7, #24]
 8001d58:	f7fe fd83 	bl	8000862 <lfs_min>
 8001d5c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d68:	1acb      	subs	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	69f8      	ldr	r0, [r7, #28]
 8001d72:	f007 fa82 	bl	800927a <memcpy>

                data += diff;
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	4413      	add	r3, r2
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001d8e:	e080      	b.n	8001e92 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	69b8      	ldr	r0, [r7, #24]
 8001d9c:	f7fe fd61 	bl	8000862 <lfs_min>
 8001da0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f113 0f02 	cmn.w	r3, #2
 8001daa:	d13a      	bne.n	8001e22 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d232      	bcs.n	8001e22 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d324      	bcc.n	8001e10 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	69b8      	ldr	r0, [r7, #24]
 8001dd8:	f7fe fd43 	bl	8000862 <lfs_min>
 8001ddc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001de8:	1acb      	subs	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4619      	mov	r1, r3
 8001df0:	69f8      	ldr	r0, [r7, #28]
 8001df2:	f007 fa42 	bl	800927a <memcpy>

                data += diff;
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	4413      	add	r3, r2
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001e0e:	e040      	b.n	8001e92 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	69b8      	ldr	r0, [r7, #24]
 8001e1c:	f7fe fd21 	bl	8000862 <lfs_min>
 8001e20:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e34:	f7fe fd25 	bl	8000882 <lfs_aligndown>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	441a      	add	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	f7fe fd2d 	bl	80008ac <lfs_alignup>
 8001e52:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f7fe fd00 	bl	8000862 <lfs_min>
 8001e62:	4602      	mov	r2, r0
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	6889      	ldr	r1, [r1, #8]
 8001e74:	9102      	str	r1, [sp, #8]
 8001e76:	9201      	str	r2, [sp, #4]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fe23 	bl	8001acc <lfs_dir_getslice>
 8001e86:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da01      	bge.n	8001e92 <lfs_dir_getread+0x1a4>
            return err;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	e004      	b.n	8001e9c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f af3f 	bne.w	8001d18 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <lfs_dir_traverse_filter+0x1e>
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <lfs_dir_traverse_filter+0xac>)
 8001ec0:	e000      	b.n	8001ec4 <lfs_dir_traverse_filter+0x20>
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ec4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	405a      	eors	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d014      	beq.n	8001f00 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fa19 	bl	8001312 <lfs_tag_isdelete>
 8001ee0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <lfs_dir_traverse_filter+0xac>)
 8001eea:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <lfs_dir_traverse_filter+0xb4>)
 8001ef2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001ef4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001ef8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d104      	bne.n	8001f0a <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
        return true;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e01e      	b.n	8001f48 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f0a:	68b8      	ldr	r0, [r7, #8]
 8001f0c:	f7ff fa14 	bl	8001338 <lfs_tag_type1>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d116      	bne.n	8001f46 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001f18:	68b8      	ldr	r0, [r7, #8]
 8001f1a:	f7ff fa57 	bl	80013cc <lfs_tag_id>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461c      	mov	r4, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fa50 	bl	80013cc <lfs_tag_id>
 8001f2c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f2e:	429c      	cmp	r4, r3
 8001f30:	d809      	bhi.n	8001f46 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f7ff fa3d 	bl	80013b2 <lfs_tag_splice>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	029a      	lsls	r2, r3, #10
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	441a      	add	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}
 8001f50:	7ffffc00 	.word	0x7ffffc00
 8001f54:	700ffc00 	.word	0x700ffc00
 8001f58:	000ffc00 	.word	0x000ffc00

08001f5c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b0c1      	sub	sp, #260	; 0x104
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f7ff fa43 	bl	8001406 <lfs_tag_dsize>
 8001f80:	4602      	mov	r2, r0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	441a      	add	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d237      	bcs.n	8001ffe <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f7ff fa39 	bl	8001406 <lfs_tag_dsize>
 8001f94:	4602      	mov	r2, r0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001f9c:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	9203      	str	r2, [sp, #12]
 8001fa6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7fe fd2d 	bl	8000a18 <lfs_bd_read>
 8001fbe:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8001fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <lfs_dir_traverse+0x74>
                    return err;
 8001fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fce:	e3a5      	b.n	800271c <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fccc 	bl	8000970 <lfs_frombe32>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	4053      	eors	r3, r2
 8001fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fe2:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	e01b      	b.n	8002036 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002002:	2b00      	cmp	r3, #0
 8002004:	dd13      	ble.n	800202e <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8002006:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 800200e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8002018:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800201c:	3308      	adds	r3, #8
 800201e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8002022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002026:	3b01      	subs	r3, #1
 8002028:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800202c:	e003      	b.n	8002036 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8002034:	e2a1      	b.n	800257a <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002036:	4b7e      	ldr	r3, [pc, #504]	; (8002230 <lfs_dir_traverse+0x2d4>)
 8002038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800203c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800203e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002042:	405a      	eors	r2, r3
 8002044:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002048:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800204c:	400b      	ands	r3, r1
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8284 	bne.w	800255e <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8002056:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800205a:	f7ff f9b7 	bl	80013cc <lfs_tag_id>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80ef 	beq.w	8002244 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002066:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800206a:	2b02      	cmp	r3, #2
 800206c:	d906      	bls.n	800207c <lfs_dir_traverse+0x120>
 800206e:	4b71      	ldr	r3, [pc, #452]	; (8002234 <lfs_dir_traverse+0x2d8>)
 8002070:	4a71      	ldr	r2, [pc, #452]	; (8002238 <lfs_dir_traverse+0x2dc>)
 8002072:	f240 31c2 	movw	r1, #962	; 0x3c2
 8002076:	4871      	ldr	r0, [pc, #452]	; (800223c <lfs_dir_traverse+0x2e0>)
 8002078:	f006 fe40 	bl	8008cfc <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800207c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800207e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002082:	4613      	mov	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	33f0      	adds	r3, #240	; 0xf0
 800208c:	443b      	add	r3, r7
 800208e:	3b98      	subs	r3, #152	; 0x98
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002098:	4613      	mov	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	33f0      	adds	r3, #240	; 0xf0
 80020a2:	443b      	add	r3, r7
 80020a4:	3b94      	subs	r3, #148	; 0x94
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	33f0      	adds	r3, #240	; 0xf0
 80020b8:	443b      	add	r3, r7
 80020ba:	3b90      	subs	r3, #144	; 0x90
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	33f0      	adds	r3, #240	; 0xf0
 80020ce:	443b      	add	r3, r7
 80020d0:	3b8c      	subs	r3, #140	; 0x8c
 80020d2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	33f0      	adds	r3, #240	; 0xf0
 80020e6:	443b      	add	r3, r7
 80020e8:	3b88      	subs	r3, #136	; 0x88
 80020ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	33f0      	adds	r3, #240	; 0xf0
 80020fe:	443b      	add	r3, r7
 8002100:	3b84      	subs	r3, #132	; 0x84
 8002102:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	33f0      	adds	r3, #240	; 0xf0
 8002116:	443b      	add	r3, r7
 8002118:	3b80      	subs	r3, #128	; 0x80
 800211a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	33f0      	adds	r3, #240	; 0xf0
 800212e:	443b      	add	r3, r7
 8002130:	3b7c      	subs	r3, #124	; 0x7c
 8002132:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	33f0      	adds	r3, #240	; 0xf0
 8002146:	443b      	add	r3, r7
 8002148:	3b7a      	subs	r3, #122	; 0x7a
 800214a:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800214e:	801a      	strh	r2, [r3, #0]
 8002150:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	33f0      	adds	r3, #240	; 0xf0
 800215e:	443b      	add	r3, r7
 8002160:	3b78      	subs	r3, #120	; 0x78
 8002162:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	33f0      	adds	r3, #240	; 0xf0
 8002176:	443b      	add	r3, r7
 8002178:	3b74      	subs	r3, #116	; 0x74
 800217a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002184:	4613      	mov	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	33f0      	adds	r3, #240	; 0xf0
 800218e:	443b      	add	r3, r7
 8002190:	3b70      	subs	r3, #112	; 0x70
 8002192:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	33f0      	adds	r3, #240	; 0xf0
 80021a6:	443b      	add	r3, r7
 80021a8:	3b6c      	subs	r3, #108	; 0x6c
 80021aa:	6019      	str	r1, [r3, #0]
 80021ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	33f0      	adds	r3, #240	; 0xf0
 80021ba:	443b      	add	r3, r7
 80021bc:	3b68      	subs	r3, #104	; 0x68
 80021be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	33f0      	adds	r3, #240	; 0xf0
 80021d2:	443b      	add	r3, r7
 80021d4:	3b68      	subs	r3, #104	; 0x68
 80021d6:	3304      	adds	r3, #4
 80021d8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80021dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e0:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80021e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <lfs_dir_traverse+0x2e4>)
 800220e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8002212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3328      	adds	r3, #40	; 0x28
 8002226:	440b      	add	r3, r1
 8002228:	3304      	adds	r3, #4
 800222a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 800222e:	e19d      	b.n	800256c <lfs_dir_traverse+0x610>
 8002230:	7ff00000 	.word	0x7ff00000
 8002234:	08009ecc 	.word	0x08009ecc
 8002238:	0800aba4 	.word	0x0800aba4
 800223c:	08009d80 	.word	0x08009d80
 8002240:	08001ea5 	.word	0x08001ea5
            }
        }

popped:
 8002244:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8002246:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800224a:	f7ff f8bf 	bl	80013cc <lfs_tag_id>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f8b8 	bl	80013cc <lfs_tag_id>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002260:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8002264:	4293      	cmp	r3, r2
 8002266:	f200 817c 	bhi.w	8002562 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800226a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f8ad 	bl	80013cc <lfs_tag_id>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800227a:	4293      	cmp	r3, r2
 800227c:	f240 8171 	bls.w	8002562 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f878 	bl	8001378 <lfs_tag_type3>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f43f ae75 	beq.w	8001f7a <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f870 	bl	8001378 <lfs_tag_type3>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	f240 1301 	movw	r3, #257	; 0x101
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 80e0 	bne.w	8002466 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80022a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022aa:	4ab1      	ldr	r2, [pc, #708]	; (8002570 <lfs_dir_traverse+0x614>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f000 815a 	beq.w	8002566 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80022b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	33f0      	adds	r3, #240	; 0xf0
 80022c0:	443b      	add	r3, r7
 80022c2:	3b98      	subs	r3, #152	; 0x98
 80022c4:	4618      	mov	r0, r3
 80022c6:	233c      	movs	r3, #60	; 0x3c
 80022c8:	461a      	mov	r2, r3
 80022ca:	2100      	movs	r1, #0
 80022cc:	f006 ff29 	bl	8009122 <memset>
 80022d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	33f0      	adds	r3, #240	; 0xf0
 80022de:	443b      	add	r3, r7
 80022e0:	3b98      	subs	r3, #152	; 0x98
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	33f0      	adds	r3, #240	; 0xf0
 80022f4:	443b      	add	r3, r7
 80022f6:	3b94      	subs	r3, #148	; 0x94
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	33f0      	adds	r3, #240	; 0xf0
 800230a:	443b      	add	r3, r7
 800230c:	3b90      	subs	r3, #144	; 0x90
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	33f0      	adds	r3, #240	; 0xf0
 8002320:	443b      	add	r3, r7
 8002322:	3b8c      	subs	r3, #140	; 0x8c
 8002324:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	33f0      	adds	r3, #240	; 0xf0
 8002338:	443b      	add	r3, r7
 800233a:	3b88      	subs	r3, #136	; 0x88
 800233c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	33f0      	adds	r3, #240	; 0xf0
 8002350:	443b      	add	r3, r7
 8002352:	3b84      	subs	r3, #132	; 0x84
 8002354:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	33f0      	adds	r3, #240	; 0xf0
 8002368:	443b      	add	r3, r7
 800236a:	3b80      	subs	r3, #128	; 0x80
 800236c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	33f0      	adds	r3, #240	; 0xf0
 8002380:	443b      	add	r3, r7
 8002382:	3b7c      	subs	r3, #124	; 0x7c
 8002384:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	33f0      	adds	r3, #240	; 0xf0
 8002398:	443b      	add	r3, r7
 800239a:	3b7a      	subs	r3, #122	; 0x7a
 800239c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	33f0      	adds	r3, #240	; 0xf0
 80023b0:	443b      	add	r3, r7
 80023b2:	3b78      	subs	r3, #120	; 0x78
 80023b4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	33f0      	adds	r3, #240	; 0xf0
 80023c8:	443b      	add	r3, r7
 80023ca:	3b74      	subs	r3, #116	; 0x74
 80023cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	33f0      	adds	r3, #240	; 0xf0
 80023e0:	443b      	add	r3, r7
 80023e2:	3b70      	subs	r3, #112	; 0x70
 80023e4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80023e8:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80023ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023ee:	3301      	adds	r3, #1
 80023f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80023f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fff8 	bl	80013ec <lfs_tag_size>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe ffe1 	bl	80013cc <lfs_tag_id>
 800240a:	4603      	mov	r3, r0
 800240c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002414:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800242c:	4b51      	ldr	r3, [pc, #324]	; (8002574 <lfs_dir_traverse+0x618>)
 800242e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002432:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002436:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800243a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800243e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002442:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002446:	3301      	adds	r3, #1
 8002448:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 800244c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002450:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	b29a      	uxth	r2, r3
 8002458:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800245c:	4413      	add	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002464:	e589      	b.n	8001f7a <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe ff85 	bl	8001378 <lfs_tag_type3>
 800246e:	4603      	mov	r3, r0
 8002470:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002474:	d159      	bne.n	800252a <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800247c:	e04b      	b.n	8002516 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002486:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	461a      	mov	r2, r3
 8002494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80024a0:	051c      	lsls	r4, r3, #20
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe ff91 	bl	80013cc <lfs_tag_id>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80024b2:	4413      	add	r3, r2
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	ea44 0103 	orr.w	r1, r4, r3
 80024ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	461a      	mov	r2, r3
 80024c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024cc:	4413      	add	r3, r2
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80024d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	461a      	mov	r2, r3
 80024e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024e4:	4413      	add	r3, r2
 80024e6:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80024e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024ec:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80024f0:	4798      	blx	r3
 80024f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80024f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da02      	bge.n	8002504 <lfs_dir_traverse+0x5a8>
                    return res;
 80024fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002502:	e10b      	b.n	800271c <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 8002504:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d12e      	bne.n	800256a <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800250c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002510:	3301      	adds	r3, #1
 8002512:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ff67 	bl	80013ec <lfs_tag_size>
 800251e:	4602      	mov	r2, r0
 8002520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002524:	4293      	cmp	r3, r2
 8002526:	d3aa      	bcc.n	800247e <lfs_dir_traverse+0x522>
 8002528:	e527      	b.n	8001f7a <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800252a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800252e:	029a      	lsls	r2, r3, #10
 8002530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002532:	18d1      	adds	r1, r2, r3
 8002534:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002538:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800253c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002540:	4798      	blx	r3
 8002542:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8002546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800254a:	2b00      	cmp	r3, #0
 800254c:	da02      	bge.n	8002554 <lfs_dir_traverse+0x5f8>
                return res;
 800254e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002552:	e0e3      	b.n	800271c <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8002554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <lfs_dir_traverse+0x61c>
 800255c:	e50d      	b.n	8001f7a <lfs_dir_traverse+0x1e>
                continue;
 800255e:	bf00      	nop
 8002560:	e50b      	b.n	8001f7a <lfs_dir_traverse+0x1e>
            continue;
 8002562:	bf00      	nop
 8002564:	e509      	b.n	8001f7a <lfs_dir_traverse+0x1e>
                continue;
 8002566:	bf00      	nop
 8002568:	e507      	b.n	8001f7a <lfs_dir_traverse+0x1e>
                    break;
 800256a:	bf00      	nop
        {
 800256c:	e505      	b.n	8001f7a <lfs_dir_traverse+0x1e>
 800256e:	bf00      	nop
 8002570:	08001ea5 	.word	0x08001ea5
 8002574:	600ffc00 	.word	0x600ffc00
                break;
 8002578:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800257a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80ca 	beq.w	8002718 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002588:	1e5a      	subs	r2, r3, #1
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	33f0      	adds	r3, #240	; 0xf0
 8002594:	443b      	add	r3, r7
 8002596:	3b98      	subs	r3, #152	; 0x98
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800259c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025a0:	1e5a      	subs	r2, r3, #1
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	33f0      	adds	r3, #240	; 0xf0
 80025ac:	443b      	add	r3, r7
 80025ae:	3b94      	subs	r3, #148	; 0x94
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80025b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	33f0      	adds	r3, #240	; 0xf0
 80025c4:	443b      	add	r3, r7
 80025c6:	3b90      	subs	r3, #144	; 0x90
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80025cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	33f0      	adds	r3, #240	; 0xf0
 80025dc:	443b      	add	r3, r7
 80025de:	3b8c      	subs	r3, #140	; 0x8c
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80025e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	33f0      	adds	r3, #240	; 0xf0
 80025f6:	443b      	add	r3, r7
 80025f8:	3b88      	subs	r3, #136	; 0x88
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8002600:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	33f0      	adds	r3, #240	; 0xf0
 8002610:	443b      	add	r3, r7
 8002612:	3b84      	subs	r3, #132	; 0x84
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800261a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	33f0      	adds	r3, #240	; 0xf0
 800262a:	443b      	add	r3, r7
 800262c:	3b80      	subs	r3, #128	; 0x80
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002634:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	33f0      	adds	r3, #240	; 0xf0
 8002644:	443b      	add	r3, r7
 8002646:	3b7c      	subs	r3, #124	; 0x7c
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800264e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	33f0      	adds	r3, #240	; 0xf0
 800265e:	443b      	add	r3, r7
 8002660:	3b7a      	subs	r3, #122	; 0x7a
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8002668:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	33f0      	adds	r3, #240	; 0xf0
 8002678:	443b      	add	r3, r7
 800267a:	3b78      	subs	r3, #120	; 0x78
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002682:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	33f0      	adds	r3, #240	; 0xf0
 8002692:	443b      	add	r3, r7
 8002694:	3b74      	subs	r3, #116	; 0x74
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 800269c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	33f0      	adds	r3, #240	; 0xf0
 80026ac:	443b      	add	r3, r7
 80026ae:	3b70      	subs	r3, #112	; 0x70
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80026b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	33f0      	adds	r3, #240	; 0xf0
 80026c6:	443b      	add	r3, r7
 80026c8:	3b6c      	subs	r3, #108	; 0x6c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80026ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	33f0      	adds	r3, #240	; 0xf0
 80026de:	443b      	add	r3, r7
 80026e0:	3b68      	subs	r3, #104	; 0x68
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80026e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	33f0      	adds	r3, #240	; 0xf0
 80026f8:	443b      	add	r3, r7
 80026fa:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80026fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002702:	3204      	adds	r2, #4
 8002704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002708:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800270c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002710:	3b01      	subs	r3, #1
 8002712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002716:	e596      	b.n	8002246 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 8002718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800271c:	4618      	mov	r0, r3
 800271e:	37f4      	adds	r7, #244	; 0xf4
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}

08002724 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002726:	b0a5      	sub	sp, #148	; 0x94
 8002728:	af04      	add	r7, sp, #16
 800272a:	6178      	str	r0, [r7, #20]
 800272c:	6139      	str	r1, [r7, #16]
 800272e:	60fa      	str	r2, [r7, #12]
 8002730:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002748:	429a      	cmp	r2, r3
 800274a:	d206      	bcs.n	800275a <lfs_dir_fetchmatch+0x36>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3304      	adds	r3, #4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800275a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800275e:	e3a4      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002760:	2300      	movs	r3, #0
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
 8002764:	2300      	movs	r3, #0
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800276c:	2300      	movs	r3, #0
 800276e:	677b      	str	r3, [r7, #116]	; 0x74
 8002770:	e05a      	b.n	8002828 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8002772:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800277c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800277e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002782:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002788:	2104      	movs	r1, #4
 800278a:	9103      	str	r1, [sp, #12]
 800278c:	9202      	str	r2, [sp, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	9201      	str	r2, [sp, #4]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2304      	movs	r3, #4
 8002796:	4602      	mov	r2, r0
 8002798:	2100      	movs	r1, #0
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7fe f93c 	bl	8000a18 <lfs_bd_read>
 80027a0:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80027a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	3378      	adds	r3, #120	; 0x78
 80027a8:	f107 0208 	add.w	r2, r7, #8
 80027ac:	4413      	add	r3, r2
 80027ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe f8c5 	bl	8000942 <lfs_fromle32>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	3378      	adds	r3, #120	; 0x78
 80027c0:	f107 0108 	add.w	r1, r7, #8
 80027c4:	440b      	add	r3, r1
 80027c6:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <lfs_dir_fetchmatch+0xb8>
 80027d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80027d6:	d001      	beq.n	80027dc <lfs_dir_fetchmatch+0xb8>
            return err;
 80027d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027da:	e366      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 80027dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80027e2:	d01e      	beq.n	8002822 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80027e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	3378      	adds	r3, #120	; 0x78
 80027ea:	f107 0208 	add.w	r2, r7, #8
 80027ee:	4413      	add	r3, r2
 80027f0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80027f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f6:	3301      	adds	r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	bfb8      	it	lt
 8002800:	425b      	neglt	r3, r3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	3378      	adds	r3, #120	; 0x78
 8002806:	f107 0108 	add.w	r1, r7, #8
 800280a:	440b      	add	r3, r1
 800280c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f7fe f887 	bl	8000926 <lfs_scmp>
 8002818:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800281a:	2b00      	cmp	r3, #0
 800281c:	dd01      	ble.n	8002822 <lfs_dir_fetchmatch+0xfe>
            r = i;
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002824:	3301      	adds	r3, #1
 8002826:	677b      	str	r3, [r7, #116]	; 0x74
 8002828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282a:	2b01      	cmp	r3, #1
 800282c:	dda1      	ble.n	8002772 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800282e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002830:	2b00      	cmp	r3, #0
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	bfb8      	it	lt
 8002838:	425b      	neglt	r3, r3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8002846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002848:	3301      	adds	r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	bfb8      	it	lt
 8002852:	425b      	neglt	r3, r3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002862:	2b00      	cmp	r3, #0
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	bfb8      	it	lt
 800286a:	425b      	neglt	r3, r3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	3378      	adds	r3, #120	; 0x78
 8002870:	f107 0208 	add.w	r2, r7, #8
 8002874:	4413      	add	r3, r2
 8002876:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002884:	2300      	movs	r3, #0
 8002886:	673b      	str	r3, [r7, #112]	; 0x70
 8002888:	e2fb      	b.n	8002e82 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800289a:	4aa9      	ldr	r2, [pc, #676]	; (8002b40 <lfs_dir_fetchmatch+0x41c>)
 800289c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028a4:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80028ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028b0:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe f848 	bl	8000958 <lfs_tole32>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3308      	adds	r3, #8
 80028d2:	2204      	movs	r2, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	f04f 30ff 	mov.w	r0, #4294967295
 80028da:	f004 fe51 	bl	8007580 <lfs_crc>
 80028de:	4603      	mov	r3, r0
 80028e0:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe f82b 	bl	8000942 <lfs_fromle32>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80028f2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80028f4:	f7fe fd87 	bl	8001406 <lfs_tag_dsize>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	4413      	add	r3, r2
 80028fe:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002900:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002906:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2204      	movs	r2, #4
 800290e:	9203      	str	r2, [sp, #12]
 8002910:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002914:	9202      	str	r2, [sp, #8]
 8002916:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002918:	9201      	str	r2, [sp, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4603      	mov	r3, r0
 800291e:	460a      	mov	r2, r1
 8002920:	2100      	movs	r1, #0
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7fe f878 	bl	8000a18 <lfs_bd_read>
 8002928:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800292a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8002930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002932:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002936:	f000 81d6 	beq.w	8002ce6 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800293a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293c:	e2b5      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002944:	2204      	movs	r2, #4
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fe1a 	bl	8007580 <lfs_crc>
 800294c:	4603      	mov	r3, r0
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f80c 	bl	8000970 <lfs_frombe32>
 8002958:	4602      	mov	r2, r0
 800295a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295c:	4053      	eors	r3, r2
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fcc7 	bl	80012f6 <lfs_tag_isvalid>
 8002968:	4603      	mov	r3, r0
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8002974:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002976:	f7fe fcef 	bl	8001358 <lfs_tag_type2>
 800297a:	4603      	mov	r3, r0
 800297c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 800298a:	e1bb      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fd39 	bl	8001406 <lfs_tag_dsize>
 8002994:	4602      	mov	r2, r0
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	441a      	add	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f200 81a2 	bhi.w	8002cea <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fcd3 	bl	8001358 <lfs_tag_type2>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80029b8:	d15e      	bne.n	8002a78 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80029ba:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029c8:	3204      	adds	r2, #4
 80029ca:	2104      	movs	r1, #4
 80029cc:	9103      	str	r1, [sp, #12]
 80029ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029d2:	9102      	str	r1, [sp, #8]
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4623      	mov	r3, r4
 80029da:	4602      	mov	r2, r0
 80029dc:	2100      	movs	r1, #0
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7fe f81a 	bl	8000a18 <lfs_bd_read>
 80029e4:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80029e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 80029ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029f2:	f000 817c 	beq.w	8002cee <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 80029f8:	e257      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd ffa0 	bl	8000942 <lfs_fromle32>
 8002a02:	4603      	mov	r3, r0
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	f040 8171 	bne.w	8002cf2 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fcc0 	bl	8001398 <lfs_tag_chunk>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	07db      	lsls	r3, r3, #31
 8002a1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a1e:	4053      	eors	r3, r2
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 fda7 	bl	8007580 <lfs_crc>
 8002a32:	4602      	mov	r2, r0
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fce1 	bl	8001406 <lfs_tag_dsize>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	441a      	add	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a52:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a5a:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002a6e:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
 8002a76:	e73c      	b.n	80028f2 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002a78:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a88:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fcba 	bl	8001406 <lfs_tag_dsize>
 8002a92:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002a94:	3b04      	subs	r3, #4
 8002a96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a9a:	9203      	str	r2, [sp, #12]
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	9501      	str	r5, [sp, #4]
 8002aa0:	9400      	str	r4, [sp, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4632      	mov	r2, r6
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f7fe f952 	bl	8000d52 <lfs_bd_crc>
 8002aae:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8002ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002abc:	f000 811b 	beq.w	8002cf6 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8002ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac2:	e1f2      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fc36 	bl	8001338 <lfs_tag_type1>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d113      	bne.n	8002afa <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fc79 	bl	80013cc <lfs_tag_id>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	f200 80b6 	bhi.w	8002c54 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fc6e 	bl	80013cc <lfs_tag_id>
 8002af0:	4603      	mov	r3, r0
 8002af2:	3301      	adds	r3, #1
 8002af4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002af8:	e0ac      	b.n	8002c54 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fc1b 	bl	8001338 <lfs_tag_type1>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b08:	d13a      	bne.n	8002b80 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fc50 	bl	80013b2 <lfs_tag_splice>
 8002b12:	4603      	mov	r3, r0
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <lfs_dir_fetchmatch+0x420>)
 8002b24:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002b26:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002b2a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d109      	bne.n	8002b48 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8002b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b3c:	e08a      	b.n	8002c54 <lfs_dir_fetchmatch+0x530>
 8002b3e:	bf00      	nop
 8002b40:	08009f0c 	.word	0x08009f0c
 8002b44:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002b48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	f000 8081 	beq.w	8002c54 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fc39 	bl	80013cc <lfs_tag_id>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fc33 	bl	80013cc <lfs_tag_id>
 8002b66:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	d873      	bhi.n	8002c54 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fc1f 	bl	80013b2 <lfs_tag_splice>
 8002b74:	4603      	mov	r3, r0
 8002b76:	029a      	lsls	r2, r3, #10
 8002b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7a:	4413      	add	r3, r2
 8002b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7e:	e069      	b.n	8002c54 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fbd8 	bl	8001338 <lfs_tag_type1>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b8e:	d132      	bne.n	8002bf6 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fc00 	bl	8001398 <lfs_tag_chunk>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8002baa:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bb0:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bb8:	3204      	adds	r2, #4
 8002bba:	2108      	movs	r1, #8
 8002bbc:	9103      	str	r1, [sp, #12]
 8002bbe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002bc2:	9102      	str	r1, [sp, #8]
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4623      	mov	r3, r4
 8002bca:	4602      	mov	r2, r0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7fd ff22 	bl	8000a18 <lfs_bd_read>
 8002bd4:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8002bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bde:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002be2:	f000 808a 	beq.w	8002cfa <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8002be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be8:	e15f      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8002bea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fb4d 	bl	800128e <lfs_pair_fromle32>
 8002bf4:	e02e      	b.n	8002c54 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fbbd 	bl	8001378 <lfs_tag_type3>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d124      	bne.n	8002c54 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8002c0a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c10:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c18:	3204      	adds	r2, #4
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	9103      	str	r1, [sp, #12]
 8002c1e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c22:	9102      	str	r1, [sp, #8]
 8002c24:	9201      	str	r2, [sp, #4]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4623      	mov	r3, r4
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7fd fef2 	bl	8000a18 <lfs_bd_read>
 8002c34:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8002c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c42:	d05c      	beq.n	8002cfe <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002c44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fcd5 	bl	80015f8 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c5a:	405a      	eors	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f47f ae46 	bne.w	80028f2 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c6c:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c70:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	f107 0220 	add.w	r2, r7, #32
 8002c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c7c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002c80:	4798      	blx	r3
 8002c82:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da05      	bge.n	8002c96 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c90:	d037      	beq.n	8002d02 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8002c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002c94:	e109      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8002c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002ca0:	e627      	b.n	80028f2 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca6:	405a      	eors	r2, r3
 8002ca8:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <lfs_dir_fetchmatch+0x790>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb6:	e61c      	b.n	80028f2 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8002cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	f47f ae19 	bne.w	80028f2 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb82 	bl	80013cc <lfs_tag_id>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461c      	mov	r4, r3
 8002ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fb7c 	bl	80013cc <lfs_tag_id>
 8002cd4:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002cd6:	429c      	cmp	r4, r3
 8002cd8:	f63f ae0b 	bhi.w	80028f2 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce4:	e605      	b.n	80028f2 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8002ce6:	bf00      	nop
 8002ce8:	e00c      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                break;
 8002cea:	bf00      	nop
 8002cec:	e00a      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002cee:	bf00      	nop
 8002cf0:	e008      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002cf2:	bf00      	nop
 8002cf4:	e006      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002cf6:	bf00      	nop
 8002cf8:	e004      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002cfa:	bf00      	nop
 8002cfc:	e002      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002d02:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d000      	beq.n	8002d0e <lfs_dir_fetchmatch+0x5ea>
 8002d0c:	e017      	b.n	8002d3e <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fa35 	bl	8001180 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d18:	3301      	adds	r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	bfb8      	it	lt
 8002d22:	425b      	neglt	r3, r3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3378      	adds	r3, #120	; 0x78
 8002d28:	f107 0208 	add.w	r2, r7, #8
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d38:	3301      	adds	r3, #1
 8002d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d3c:	e0a1      	b.n	8002e82 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2200      	movs	r2, #0
 8002d42:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03a      	beq.n	8002dc2 <lfs_dir_fetchmatch+0x69e>
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d54:	6992      	ldr	r2, [r2, #24]
 8002d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d5a:	fb01 f202 	mul.w	r2, r1, r2
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12e      	bne.n	8002dc2 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002d64:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02a      	beq.n	8002dc2 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002d72:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d78:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d84:	f107 001c 	add.w	r0, r7, #28
 8002d88:	9003      	str	r0, [sp, #12]
 8002d8a:	9102      	str	r1, [sp, #8]
 8002d8c:	9201      	str	r2, [sp, #4]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	462b      	mov	r3, r5
 8002d92:	4622      	mov	r2, r4
 8002d94:	2100      	movs	r1, #0
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7fd ffdb 	bl	8000d52 <lfs_bd_crc>
 8002d9c:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <lfs_dir_fetchmatch+0x68c>
 8002da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002daa:	d001      	beq.n	8002db0 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8002dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dae:	e07c      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	333c      	adds	r3, #60	; 0x3c
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fbb4 	bl	8001538 <lfs_gstate_hasmovehere>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d028      	beq.n	8002e28 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe faf6 	bl	80013cc <lfs_tag_id>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461c      	mov	r4, r3
 8002de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe faf0 	bl	80013cc <lfs_tag_id>
 8002dec:	4603      	mov	r3, r0
 8002dee:	429c      	cmp	r4, r3
 8002df0:	d104      	bne.n	8002dfc <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8002df2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dfa:	e015      	b.n	8002e28 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8002dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d011      	beq.n	8002e28 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fadf 	bl	80013cc <lfs_tag_id>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fad9 	bl	80013cc <lfs_tag_id>
 8002e1a:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d203      	bcs.n	8002e28 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e22:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002e26:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe faca 	bl	80013cc <lfs_tag_id>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	8a9b      	ldrh	r3, [r3, #20]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f7fd fd0d 	bl	8000862 <lfs_min>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e50:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002e52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fa4e 	bl	80012f6 <lfs_tag_isvalid>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8002e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e62:	e022      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fab0 	bl	80013cc <lfs_tag_id>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	8a9b      	ldrh	r3, [r3, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d202      	bcs.n	8002e7e <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8002e78:	f06f 0301 	mvn.w	r3, #1
 8002e7c:	e015      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e013      	b.n	8002eaa <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8002e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f77f ad00 	ble.w	800288a <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4909      	ldr	r1, [pc, #36]	; (8002eb8 <lfs_dir_fetchmatch+0x794>)
 8002e94:	9101      	str	r1, [sp, #4]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	f240 5265 	movw	r2, #1381	; 0x565
 8002e9e:	4907      	ldr	r1, [pc, #28]	; (8002ebc <lfs_dir_fetchmatch+0x798>)
 8002ea0:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <lfs_dir_fetchmatch+0x79c>)
 8002ea2:	f006 f8d9 	bl	8009058 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002ea6:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3784      	adds	r7, #132	; 0x84
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	7ffffc00 	.word	0x7ffffc00
 8002eb8:	08009ec8 	.word	0x08009ec8
 8002ebc:	08009d80 	.word	0x08009d80
 8002ec0:	08009ed4 	.word	0x08009ed4

08002ec4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af04      	add	r7, sp, #16
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9303      	str	r3, [sp, #12]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff fc1a 	bl	8002724 <lfs_dir_fetchmatch>
 8002ef0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <lfs_dir_getgstate+0x5c>)
 8002f10:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <lfs_dir_getgstate+0x60>)
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7fe fecf 	bl	8001cb8 <lfs_dir_get>
 8002f1a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da05      	bge.n	8002f2e <lfs_dir_getgstate+0x32>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f113 0f02 	cmn.w	r3, #2
 8002f28:	d001      	beq.n	8002f2e <lfs_dir_getgstate+0x32>
        return res;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	e00f      	b.n	8002f4e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f113 0f02 	cmn.w	r3, #2
 8002f34:	d00a      	beq.n	8002f4c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002f36:	f107 0310 	add.w	r3, r7, #16
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fb1c 	bl	8001578 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fa71 	bl	800142e <lfs_gstate_xor>
    }

    return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	7ff0000c 	.word	0x7ff0000c
 8002f5c:	7ff00000 	.word	0x7ff00000

08002f60 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b08f      	sub	sp, #60	; 0x3c
 8002f64:	af04      	add	r7, sp, #16
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	689c      	ldr	r4, [r3, #8]
 8002f7e:	68b8      	ldr	r0, [r7, #8]
 8002f80:	f7fe fa34 	bl	80013ec <lfs_tag_size>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4619      	mov	r1, r3
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7fd fc6a 	bl	8000862 <lfs_min>
 8002f8e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002f90:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8002f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9c:	6849      	ldr	r1, [r1, #4]
 8002f9e:	69b8      	ldr	r0, [r7, #24]
 8002fa0:	9003      	str	r0, [sp, #12]
 8002fa2:	9102      	str	r1, [sp, #8]
 8002fa4:	9201      	str	r2, [sp, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4622      	mov	r2, r4
 8002fac:	2100      	movs	r1, #0
 8002fae:	6a38      	ldr	r0, [r7, #32]
 8002fb0:	f7fd fe7e 	bl	8000cb0 <lfs_bd_cmp>
 8002fb4:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <lfs_dir_find_match+0x60>
        return res;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	e014      	b.n	8002fea <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	689c      	ldr	r4, [r3, #8]
 8002fc4:	68b8      	ldr	r0, [r7, #8]
 8002fc6:	f7fe fa11 	bl	80013ec <lfs_tag_size>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	429c      	cmp	r4, r3
 8002fce:	d00b      	beq.n	8002fe8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	689c      	ldr	r4, [r3, #8]
 8002fd4:	68b8      	ldr	r0, [r7, #8]
 8002fd6:	f7fe fa09 	bl	80013ec <lfs_tag_size>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	d201      	bcs.n	8002fe4 <lfs_dir_find_match+0x84>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e002      	b.n	8002fea <lfs_dir_find_match+0x8a>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e000      	b.n	8002fea <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	372c      	adds	r7, #44	; 0x2c
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd90      	pop	{r4, r7, pc}
	...

08002ff4 <lfs_dir_find>:
// returns:
// - 0                  if file is found
// - LFS_ERR_NOENT      if file or parent is not found
// - LFS_ERR_NOTDIR     if parent is not a dir
static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b092      	sub	sp, #72	; 0x48
 8002ff8:	af04      	add	r7, sp, #16
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	637b      	str	r3, [r7, #52]	; 0x34

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8003008:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <lfs_dir_find+0x1f0>)
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	61da      	str	r2, [r3, #28]

    // empty paths are not allowed
    if (*name == '\0') {
 800301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <lfs_dir_find+0x36>
        return LFS_ERR_INVAL;
 8003024:	f06f 0315 	mvn.w	r3, #21
 8003028:	e0d7      	b.n	80031da <lfs_dir_find+0x1e6>
    }

    while (true) {
nextname:
 800302a:	bf00      	nop
        // skip slashes if we're a directory
        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f9a2 	bl	8001378 <lfs_tag_type3>
 8003034:	4603      	mov	r3, r0
 8003036:	2b02      	cmp	r3, #2
 8003038:	d107      	bne.n	800304a <lfs_dir_find+0x56>
            name += strspn(name, "/");
 800303a:	496b      	ldr	r1, [pc, #428]	; (80031e8 <lfs_dir_find+0x1f4>)
 800303c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800303e:	f006 f889 	bl	8009154 <strspn>
 8003042:	4602      	mov	r2, r0
 8003044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003046:	4413      	add	r3, r2
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
        }
        lfs_size_t namelen = strcspn(name, "/");
 800304a:	4967      	ldr	r1, [pc, #412]	; (80031e8 <lfs_dir_find+0x1f4>)
 800304c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800304e:	f006 f870 	bl	8009132 <strcspn>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.'
        if (namelen == 1 && memcmp(name, ".", 1) == 0) {
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10a      	bne.n	8003070 <lfs_dir_find+0x7c>
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	4b63      	ldr	r3, [pc, #396]	; (80031ec <lfs_dir_find+0x1f8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d104      	bne.n	8003070 <lfs_dir_find+0x7c>
            name += namelen;
 8003066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	4413      	add	r3, r2
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800306e:	e7dd      	b.n	800302c <lfs_dir_find+0x38>
        }

        // error on unmatched '..', trying to go above root?
        if (namelen == 2 && memcmp(name, "..", 2) == 0) {
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	2b02      	cmp	r3, #2
 8003074:	d10a      	bne.n	800308c <lfs_dir_find+0x98>
 8003076:	2202      	movs	r2, #2
 8003078:	495d      	ldr	r1, [pc, #372]	; (80031f0 <lfs_dir_find+0x1fc>)
 800307a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800307c:	f006 f841 	bl	8009102 <memcmp>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <lfs_dir_find+0x98>
            return LFS_ERR_INVAL;
 8003086:	f06f 0315 	mvn.w	r3, #21
 800308a:	e0a6      	b.n	80031da <lfs_dir_find+0x1e6>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800308c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	4413      	add	r3, r2
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8003094:	2301      	movs	r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8003098:	4953      	ldr	r1, [pc, #332]	; (80031e8 <lfs_dir_find+0x1f4>)
 800309a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800309c:	f006 f85a 	bl	8009154 <strspn>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	4413      	add	r3, r2
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 80030a8:	494f      	ldr	r1, [pc, #316]	; (80031e8 <lfs_dir_find+0x1f4>)
 80030aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ac:	f006 f841 	bl	8009132 <strcspn>
 80030b0:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d026      	beq.n	8003106 <lfs_dir_find+0x112>
                break;
            }

            if (sufflen == 1 && memcmp(suffix, ".", 1) == 0) {
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <lfs_dir_find+0xd6>
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <lfs_dir_find+0x1f8>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d018      	beq.n	80030fc <lfs_dir_find+0x108>
                // noop
            } else if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d112      	bne.n	80030f6 <lfs_dir_find+0x102>
 80030d0:	2202      	movs	r2, #2
 80030d2:	4947      	ldr	r1, [pc, #284]	; (80031f0 <lfs_dir_find+0x1fc>)
 80030d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d6:	f006 f814 	bl	8009102 <memcmp>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <lfs_dir_find+0x102>
                depth -= 1;
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <lfs_dir_find+0x108>
                    name = suffix + sufflen;
 80030ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	4413      	add	r3, r2
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80030f4:	e79a      	b.n	800302c <lfs_dir_find+0x38>
                }
            } else {
                depth += 1;
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	3301      	adds	r3, #1
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80030fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	4413      	add	r3, r2
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8003104:	e7c8      	b.n	8003098 <lfs_dir_find+0xa4>
                break;
 8003106:	bf00      	nop
        }

        // found path
        if (*name == '\0') {
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <lfs_dir_find+0x120>
            return tag;
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	e062      	b.n	80031da <lfs_dir_find+0x1e6>
        }

        // update what we've found so far
        *path = name;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003118:	601a      	str	r2, [r3, #0]

        // only continue if we're a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f92b 	bl	8001378 <lfs_tag_type3>
 8003122:	4603      	mov	r3, r0
 8003124:	2b02      	cmp	r3, #2
 8003126:	d002      	beq.n	800312e <lfs_dir_find+0x13a>
            return LFS_ERR_NOTDIR;
 8003128:	f06f 0313 	mvn.w	r3, #19
 800312c:	e055      	b.n	80031da <lfs_dir_find+0x1e6>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe f94b 	bl	80013cc <lfs_tag_id>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800313e:	429a      	cmp	r2, r3
 8003140:	d01c      	beq.n	800317c <lfs_dir_find+0x188>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe f941 	bl	80013cc <lfs_tag_id>
 800314a:	4603      	mov	r3, r0
 800314c:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800314e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003152:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800315a:	9200      	str	r2, [sp, #0]
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <lfs_dir_find+0x200>)
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7fe fda9 	bl	8001cb8 <lfs_dir_get>
 8003166:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	da01      	bge.n	8003172 <lfs_dir_find+0x17e>
                return res;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	e033      	b.n	80031da <lfs_dir_find+0x1e6>
            }
            lfs_pair_fromle32(dir->tail);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3318      	adds	r3, #24
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe f889 	bl	800128e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f103 0218 	add.w	r2, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                    id,
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	61bb      	str	r3, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	9303      	str	r3, [sp, #12]
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <lfs_dir_find+0x204>)
 8003196:	9302      	str	r3, [sp, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff fabc 	bl	8002724 <lfs_dir_fetchmatch>
 80031ac:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da01      	bge.n	80031b8 <lfs_dir_find+0x1c4>
                return tag;
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	e010      	b.n	80031da <lfs_dir_find+0x1e6>
            }

            if (tag) {
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <lfs_dir_find+0x1d4>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80031be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	4413      	add	r3, r2
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80031c6:	e731      	b.n	800302c <lfs_dir_find+0x38>
            if (!dir->split) {
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	7ddb      	ldrb	r3, [r3, #23]
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0d2      	beq.n	800317c <lfs_dir_find+0x188>
                return LFS_ERR_NOENT;
 80031d6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3738      	adds	r7, #56	; 0x38
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	002ffc00 	.word	0x002ffc00
 80031e8:	08009e98 	.word	0x08009e98
 80031ec:	08009f14 	.word	0x08009f14
 80031f0:	08009f18 	.word	0x08009f18
 80031f4:	700ffc00 	.word	0x700ffc00
 80031f8:	08002f61 	.word	0x08002f61

080031fc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b08b      	sub	sp, #44	; 0x2c
 8003200:	af04      	add	r7, sp, #16
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f103 0010 	add.w	r0, r3, #16
 8003210:	68fc      	ldr	r4, [r7, #12]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	6852      	ldr	r2, [r2, #4]
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	9103      	str	r1, [sp, #12]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	9102      	str	r1, [sp, #8]
 8003222:	9201      	str	r2, [sp, #4]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	4622      	mov	r2, r4
 800322a:	4601      	mov	r1, r0
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7fd fe85 	bl	8000f3c <lfs_bd_prog>
 8003232:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <lfs_dir_commitprog+0x42>
        return err;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	e010      	b.n	8003260 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	f004 f99a 	bl	8007580 <lfs_crc>
 800324c:	4602      	mov	r2, r0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	441a      	add	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	605a      	str	r2, [r3, #4]
    return 0;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b08f      	sub	sp, #60	; 0x3c
 800326c:	af04      	add	r7, sp, #16
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe f8c5 	bl	8001406 <lfs_tag_dsize>
 800327c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	441a      	add	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	429a      	cmp	r2, r3
 800328c:	d902      	bls.n	8003294 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800328e:	f06f 031b 	mvn.w	r3, #27
 8003292:	e065      	b.n	8003360 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4053      	eors	r3, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fb71 	bl	8000988 <lfs_tobe32>
 80032a6:	4603      	mov	r3, r0
 80032a8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80032aa:	f107 0214 	add.w	r2, r7, #20
 80032ae:	2304      	movs	r3, #4
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ffa2 	bl	80031fc <lfs_dir_commitprog>
 80032b8:	61f8      	str	r0, [r7, #28]
    if (err) {
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <lfs_dir_commitattr+0x5c>
        return err;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	e04d      	b.n	8003360 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	db0c      	blt.n	80032e4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	3b04      	subs	r3, #4
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff ff92 	bl	80031fc <lfs_dir_commitprog>
 80032d8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d039      	beq.n	8003354 <lfs_dir_commitattr+0xec>
            return err;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	e03d      	b.n	8003360 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	e02d      	b.n	800334a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80032ee:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80032f6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	440a      	add	r2, r1
 8003304:	2101      	movs	r1, #1
 8003306:	9103      	str	r1, [sp, #12]
 8003308:	f107 0113 	add.w	r1, r7, #19
 800330c:	9102      	str	r1, [sp, #8]
 800330e:	9201      	str	r2, [sp, #4]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4623      	mov	r3, r4
 8003314:	4602      	mov	r2, r0
 8003316:	2100      	movs	r1, #0
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7fd fb7d 	bl	8000a18 <lfs_bd_read>
 800331e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <lfs_dir_commitattr+0xc2>
                return err;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	e01a      	b.n	8003360 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800332a:	f107 0213 	add.w	r2, r7, #19
 800332e:	2301      	movs	r3, #1
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ff62 	bl	80031fc <lfs_dir_commitprog>
 8003338:	61f8      	str	r0, [r7, #28]
            if (err) {
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <lfs_dir_commitattr+0xdc>
                return err;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	e00d      	b.n	8003360 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	3301      	adds	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	3b04      	subs	r3, #4
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	429a      	cmp	r2, r3
 8003352:	d3cc      	bcc.n	80032ee <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]
    return 0;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	372c      	adds	r7, #44	; 0x2c
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}

08003368 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b097      	sub	sp, #92	; 0x5c
 800336c:	af04      	add	r7, sp, #16
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003376:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800337e:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f7fd fa6d 	bl	8000862 <lfs_min>
 8003388:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f7fd fa8a 	bl	80008ac <lfs_alignup>
 8003398:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80033a2:	e0fe      	b.n	80035a2 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	3b04      	subs	r3, #4
 80033ae:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fa55 	bl	8000862 <lfs_min>
 80033b8:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4413      	add	r3, r2
        lfs_off_t noff = (
 80033c0:	3304      	adds	r3, #4
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80033c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d206      	bcs.n	80033da <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	3b14      	subs	r3, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033d4:	f7fd fa45 	bl	8000862 <lfs_min>
 80033d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80033da:	23ff      	movs	r3, #255	; 0xff
 80033dc:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80033de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d35f      	bcc.n	80034a6 <lfs_dir_commitcrc+0x13e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d855      	bhi.n	80034a6 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80033fa:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003400:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	9203      	str	r2, [sp, #12]
 800340a:	f107 021b 	add.w	r2, r7, #27
 800340e:	9202      	str	r2, [sp, #8]
 8003410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003412:	9201      	str	r2, [sp, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4603      	mov	r3, r0
 8003418:	460a      	mov	r2, r1
 800341a:	2100      	movs	r1, #0
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd fafb 	bl	8000a18 <lfs_bd_read>
 8003422:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <lfs_dir_commitcrc+0xce>
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003430:	d001      	beq.n	8003436 <lfs_dir_commitcrc+0xce>
                return err;
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	e101      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003444:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344a:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	f107 0108 	add.w	r1, r7, #8
 8003456:	3104      	adds	r1, #4
 8003458:	9103      	str	r1, [sp, #12]
 800345a:	9202      	str	r2, [sp, #8]
 800345c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800345e:	9201      	str	r2, [sp, #4]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	4623      	mov	r3, r4
 8003464:	4602      	mov	r2, r0
 8003466:	2100      	movs	r1, #0
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fd fc72 	bl	8000d52 <lfs_bd_crc>
 800346e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <lfs_dir_commitcrc+0x11a>
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800347c:	d001      	beq.n	8003482 <lfs_dir_commitcrc+0x11a>
                    return err;
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	e0db      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8003482:	f107 0308 	add.w	r3, r7, #8
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe f8ce 	bl	8001628 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	4a6c      	ldr	r2, [pc, #432]	; (8003644 <lfs_dir_commitcrc+0x2dc>)
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fee7 	bl	8003268 <lfs_dir_commitattr>
 800349a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <lfs_dir_commitcrc+0x13e>
                    return err;
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	e0c9      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80034a6:	7efb      	ldrb	r3, [r7, #27]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	09db      	lsrs	r3, r3, #7
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b4:	051a      	lsls	r2, r3, #20
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034bc:	1acb      	subs	r3, r1, r3
 80034be:	3b04      	subs	r3, #4
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80034c6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	4053      	eors	r3, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd fa57 	bl	8000988 <lfs_tobe32>
 80034da:	4603      	mov	r3, r0
 80034dc:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f107 0110 	add.w	r1, r7, #16
 80034e6:	2204      	movs	r2, #4
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 f849 	bl	8007580 <lfs_crc>
 80034ee:	4602      	mov	r2, r0
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fa2d 	bl	8000958 <lfs_tole32>
 80034fe:	4603      	mov	r3, r0
 8003500:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f103 0010 	add.w	r0, r3, #16
 8003508:	687c      	ldr	r4, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	6852      	ldr	r2, [r2, #4]
 8003512:	2108      	movs	r1, #8
 8003514:	9103      	str	r1, [sp, #12]
 8003516:	f107 0110 	add.w	r1, r7, #16
 800351a:	9102      	str	r1, [sp, #8]
 800351c:	9201      	str	r2, [sp, #4]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2300      	movs	r3, #0
 8003522:	4622      	mov	r2, r4
 8003524:	4601      	mov	r1, r0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fd08 	bl	8000f3c <lfs_bd_prog>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	e080      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003550:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003552:	7efb      	ldrb	r3, [r7, #27]
 8003554:	43db      	mvns	r3, r3
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	405a      	eors	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f04f 32ff 	mov.w	r2, #4294967295
 800356a:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800356c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	429a      	cmp	r2, r3
 8003572:	d208      	bcs.n	8003586 <lfs_dir_commitcrc+0x21e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	4413      	add	r3, r2
 8003580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003582:	429a      	cmp	r2, r3
 8003584:	d30d      	bcc.n	80035a2 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f103 0110 	add.w	r1, r3, #16
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	2300      	movs	r3, #0
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fd fc9f 	bl	8000ed4 <lfs_bd_sync>
 8003596:	6238      	str	r0, [r7, #32]
            if (err) {
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <lfs_dir_commitcrc+0x23a>
                return err;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	e04b      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f63f aefb 	bhi.w	80033a4 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035be:	1d1c      	adds	r4, r3, #4
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035c8:	1a8a      	subs	r2, r1, r2
 80035ca:	f107 011c 	add.w	r1, r7, #28
 80035ce:	9103      	str	r1, [sp, #12]
 80035d0:	9202      	str	r2, [sp, #8]
 80035d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035d4:	9201      	str	r2, [sp, #4]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4623      	mov	r3, r4
 80035da:	4602      	mov	r2, r0
 80035dc:	2100      	movs	r1, #0
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fbb7 	bl	8000d52 <lfs_bd_crc>
 80035e4:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <lfs_dir_commitcrc+0x288>
        return err;
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	e024      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d002      	beq.n	80035fe <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80035f8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80035fc:	e01d      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f107 021c 	add.w	r2, r7, #28
 8003608:	9203      	str	r2, [sp, #12]
 800360a:	2204      	movs	r2, #4
 800360c:	9202      	str	r2, [sp, #8]
 800360e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003610:	9201      	str	r2, [sp, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2304      	movs	r3, #4
 8003616:	460a      	mov	r2, r1
 8003618:	2100      	movs	r1, #0
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fb99 	bl	8000d52 <lfs_bd_crc>
 8003620:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <lfs_dir_commitcrc+0x2c4>
        return err;
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	e006      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003632:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003636:	e000      	b.n	800363a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	374c      	adds	r7, #76	; 0x4c
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}
 8003642:	bf00      	nop
 8003644:	5ffffc08 	.word	0x5ffffc08

08003648 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af04      	add	r7, sp, #16
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e016      	b.n	8003686 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	bfb8      	it	lt
 8003664:	425b      	neglt	r3, r3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	4413      	add	r3, r2
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe f9a4 	bl	80019bc <lfs_alloc>
 8003674:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <lfs_dir_alloc+0x38>
            return err;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	e058      	b.n	8003732 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3301      	adds	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b01      	cmp	r3, #1
 800368a:	dde5      	ble.n	8003658 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800369c:	2004      	movs	r0, #4
 800369e:	9003      	str	r0, [sp, #12]
 80036a0:	9202      	str	r2, [sp, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9201      	str	r2, [sp, #4]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2304      	movs	r3, #4
 80036aa:	460a      	mov	r2, r1
 80036ac:	2100      	movs	r1, #0
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd f9b2 	bl	8000a18 <lfs_bd_read>
 80036b4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd f941 	bl	8000942 <lfs_fromle32>
 80036c0:	4602      	mov	r2, r0
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <lfs_dir_alloc+0x90>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80036d2:	d001      	beq.n	80036d8 <lfs_dir_alloc+0x90>
        return err;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	e02c      	b.n	8003732 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	dd0e      	ble.n	8003700 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7fd f8d9 	bl	80008ac <lfs_alignup>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2204      	movs	r2, #4
 8003704:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2200      	movs	r2, #0
 8003712:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f04f 32ff 	mov.w	r2, #4294967295
 8003722:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2200      	movs	r2, #0
 800372e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800373a:	b580      	push	{r7, lr}
 800373c:	b092      	sub	sp, #72	; 0x48
 800373e:	af04      	add	r7, sp, #16
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4619      	mov	r1, r3
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff ff7a 	bl	8003648 <lfs_dir_alloc>
 8003754:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <lfs_dir_split+0x26>
        return err;
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	e03c      	b.n	80037da <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	7ddb      	ldrb	r3, [r3, #23]
 8003764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003774:	f107 0110 	add.w	r1, r7, #16
 8003778:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f879 	bl	8003884 <lfs_dir_compact>
 8003792:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	2b00      	cmp	r3, #0
 8003798:	da01      	bge.n	800379e <lfs_dir_split+0x64>
        return res;
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	e01d      	b.n	80037da <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2201      	movs	r2, #1
 80037ae:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3320      	adds	r3, #32
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7fd fd11 	bl	80011e0 <lfs_pair_cmp>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <lfs_dir_split+0x9e>
 80037c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3738      	adds	r7, #56	; 0x38
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80037f2:	68b8      	ldr	r0, [r7, #8]
 80037f4:	f7fd fe07 	bl	8001406 <lfs_tag_dsize>
 80037f8:	4602      	mov	r2, r0
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	441a      	add	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	601a      	str	r2, [r3, #0]
    return 0;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	f7ff fd1d 	bl	8003268 <lfs_dir_commitattr>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003848:	2b00      	cmp	r3, #0
 800384a:	dd11      	ble.n	8003870 <lfs_dir_needsrelocation+0x38>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	3301      	adds	r3, #1
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003858:	3201      	adds	r2, #1
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003862:	fb01 f202 	mul.w	r2, r1, r2
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <lfs_dir_needsrelocation+0x38>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <lfs_dir_needsrelocation+0x3a>
 8003870:	2300      	movs	r3, #0
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b0a4      	sub	sp, #144	; 0x90
 8003888:	af0a      	add	r7, sp, #40	; 0x28
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff ffcc 	bl	8003838 <lfs_dir_needsrelocation>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80038b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00e      	beq.n	80038d6 <lfs_dir_compact+0x52>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	657a      	str	r2, [r7, #84]	; 0x54
 80038be:	2201      	movs	r2, #1
 80038c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80038c2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fc89 	bl	80011e0 <lfs_pair_cmp>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 8155 	bne.w	8003b80 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	2300      	movs	r3, #0
 80038de:	643b      	str	r3, [r7, #64]	; 0x40
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	647b      	str	r3, [r7, #68]	; 0x44
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ec:	2300      	movs	r3, #0
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <lfs_dir_compact+0x80>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	3b08      	subs	r3, #8
 8003902:	e003      	b.n	800390c <lfs_dir_compact+0x88>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800390c:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4619      	mov	r1, r3
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7fd fbbd 	bl	8001094 <lfs_bd_erase>
 800391a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d006      	beq.n	8003930 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003924:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003928:	f000 812c 	beq.w	8003b84 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800392c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800392e:	e188      	b.n	8003c42 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd f80f 	bl	8000958 <lfs_tole32>
 800393a:	4602      	mov	r2, r0
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003946:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800394a:	2304      	movs	r3, #4
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fc55 	bl	80031fc <lfs_dir_commitprog>
 8003952:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fff2 	bl	8000942 <lfs_fromle32>
 800395e:	4602      	mov	r2, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]
            if (err) {
 8003964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800396a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003970:	f000 810a 	beq.w	8003b88 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003976:	e164      	b.n	8003c42 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003978:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800397c:	425b      	negs	r3, r3
 800397e:	b29b      	uxth	r3, r3
 8003980:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	637a      	str	r2, [r7, #52]	; 0x34
 8003986:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800398a:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800398c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003990:	9208      	str	r2, [sp, #32]
 8003992:	4aae      	ldr	r2, [pc, #696]	; (8003c4c <lfs_dir_compact+0x3c8>)
 8003994:	9207      	str	r2, [sp, #28]
 8003996:	9306      	str	r3, [sp, #24]
 8003998:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800399c:	9305      	str	r3, [sp, #20]
 800399e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80039a2:	9304      	str	r3, [sp, #16]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	4ba9      	ldr	r3, [pc, #676]	; (8003c50 <lfs_dir_compact+0x3cc>)
 80039aa:	9302      	str	r3, [sp, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	2200      	movs	r2, #0
 80039ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7fe facd 	bl	8001f5c <lfs_dir_traverse>
 80039c2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80039c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d006      	beq.n	80039d8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80039ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80039d0:	f000 80dc 	beq.w	8003b8c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	e134      	b.n	8003c42 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3318      	adds	r3, #24
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd fbe4 	bl	80011aa <lfs_pair_isnull>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f083 0301 	eor.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d022      	beq.n	8003a34 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3318      	adds	r3, #24
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fc65 	bl	80012c2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	7ddb      	ldrb	r3, [r3, #23]
 80039fc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003a00:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003a02:	4a94      	ldr	r2, [pc, #592]	; (8003c54 <lfs_dir_compact+0x3d0>)
 8003a04:	431a      	orrs	r2, r3
                        dir->tail);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003a0a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff fc2a 	bl	8003268 <lfs_dir_commitattr>
 8003a14:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3318      	adds	r3, #24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fc37 	bl	800128e <lfs_pair_fromle32>
                if (err) {
 8003a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a2c:	f000 80b0 	beq.w	8003b90 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a32:	e106      	b.n	8003c42 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fce7 	bl	800142e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fd fcde 	bl	800142e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fcd5 	bl	800142e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a8a:	f023 0303 	bic.w	r3, r3, #3
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a94:	461a      	mov	r2, r3
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fa2f 	bl	8002efc <lfs_dir_getgstate>
 8003a9e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <lfs_dir_compact+0x226>
                return err;
 8003aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa8:	e0cb      	b.n	8003c42 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fcdd 	bl	800146e <lfs_gstate_iszero>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f083 0301 	eor.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d016      	beq.n	8003aee <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fd77 	bl	80015b8 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ace:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003ad2:	4a61      	ldr	r2, [pc, #388]	; (8003c58 <lfs_dir_compact+0x3d4>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fbc7 	bl	8003268 <lfs_dir_commitattr>
 8003ada:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003ae8:	d054      	beq.n	8003b94 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	e0a9      	b.n	8003c42 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003aee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003af2:	4619      	mov	r1, r3
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fc37 	bl	8003368 <lfs_dir_commitcrc>
 8003afa:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b04:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b08:	d046      	beq.n	8003b98 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0c:	e099      	b.n	8003c42 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b14:	6992      	ldr	r2, [r2, #24]
 8003b16:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b1a:	fb01 f202 	mul.w	r2, r1, r2
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <lfs_dir_compact+0x2ae>
 8003b24:	4b4d      	ldr	r3, [pc, #308]	; (8003c5c <lfs_dir_compact+0x3d8>)
 8003b26:	4a4e      	ldr	r2, [pc, #312]	; (8003c60 <lfs_dir_compact+0x3dc>)
 8003b28:	f640 0121 	movw	r1, #2081	; 0x821
 8003b2c:	484d      	ldr	r0, [pc, #308]	; (8003c64 <lfs_dir_compact+0x3e0>)
 8003b2e:	f005 f8e5 	bl	8008cfc <__assert_func>
            lfs_pair_swap(dir->pair);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fd fb23 	bl	8001180 <lfs_pair_swap>
            dir->count = end - begin;
 8003b3a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003b3e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3348      	adds	r3, #72	; 0x48
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003b62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d065      	beq.n	8003c3c <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	333c      	adds	r3, #60	; 0x3c
 8003b76:	3230      	adds	r2, #48	; 0x30
 8003b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003b7e:	e05d      	b.n	8003c3c <lfs_dir_compact+0x3b8>
        goto relocate;
 8003b80:	bf00      	nop
 8003b82:	e00a      	b.n	8003b9a <lfs_dir_compact+0x316>
                    goto relocate;
 8003b84:	bf00      	nop
 8003b86:	e008      	b.n	8003b9a <lfs_dir_compact+0x316>
                    goto relocate;
 8003b88:	bf00      	nop
 8003b8a:	e006      	b.n	8003b9a <lfs_dir_compact+0x316>
                    goto relocate;
 8003b8c:	bf00      	nop
 8003b8e:	e004      	b.n	8003b9a <lfs_dir_compact+0x316>
                        goto relocate;
 8003b90:	bf00      	nop
 8003b92:	e002      	b.n	8003b9a <lfs_dir_compact+0x316>
                        goto relocate;
 8003b94:	bf00      	nop
 8003b96:	e000      	b.n	8003b9a <lfs_dir_compact+0x316>
                    goto relocate;
 8003b98:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3310      	adds	r3, #16
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7fc ff11 	bl	80009ce <lfs_cache_drop>
        if (!tired) {
 8003bac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003bb0:	f083 0301 	eor.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <lfs_dir_compact+0x3e4>)
 8003bc0:	9200      	str	r2, [sp, #0]
 8003bc2:	f640 0233 	movw	r2, #2099	; 0x833
 8003bc6:	4927      	ldr	r1, [pc, #156]	; (8003c64 <lfs_dir_compact+0x3e0>)
 8003bc8:	4828      	ldr	r0, [pc, #160]	; (8003c6c <lfs_dir_compact+0x3e8>)
 8003bca:	f005 fa45 	bl	8009058 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	617a      	str	r2, [r7, #20]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	61ba      	str	r2, [r7, #24]
 8003bd8:	f107 0214 	add.w	r2, r7, #20
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fafe 	bl	80011e0 <lfs_pair_cmp>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <lfs_dir_compact+0x3e4>)
 8003bf0:	9200      	str	r2, [sp, #0]
 8003bf2:	f640 0238 	movw	r2, #2104	; 0x838
 8003bf6:	491b      	ldr	r1, [pc, #108]	; (8003c64 <lfs_dir_compact+0x3e0>)
 8003bf8:	481d      	ldr	r0, [pc, #116]	; (8003c70 <lfs_dir_compact+0x3ec>)
 8003bfa:	f005 fa2d 	bl	8009058 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003bfe:	f06f 031b 	mvn.w	r3, #27
 8003c02:	e01e      	b.n	8003c42 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7fd fed6 	bl	80019bc <lfs_alloc>
 8003c10:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <lfs_dir_compact+0x3ae>
 8003c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c1a:	f113 0f1c 	cmn.w	r3, #28
 8003c1e:	d106      	bne.n	8003c2e <lfs_dir_compact+0x3aa>
 8003c20:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003c24:	f083 0301 	eor.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <lfs_dir_compact+0x3ae>
            return err;
 8003c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c30:	e007      	b.n	8003c42 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8003c38:	bf00      	nop
    while (true) {
 8003c3a:	e64c      	b.n	80038d6 <lfs_dir_compact+0x52>
        break;
 8003c3c:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3768      	adds	r7, #104	; 0x68
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	0800380f 	.word	0x0800380f
 8003c50:	400ffc00 	.word	0x400ffc00
 8003c54:	000ffc08 	.word	0x000ffc08
 8003c58:	7ffffc0c 	.word	0x7ffffc0c
 8003c5c:	08009f1c 	.word	0x08009f1c
 8003c60:	0800abb8 	.word	0x0800abb8
 8003c64:	08009d80 	.word	0x08009d80
 8003c68:	08009ec8 	.word	0x08009ec8
 8003c6c:	08009f44 	.word	0x08009f44
 8003c70:	08009f68 	.word	0x08009f68

08003c74 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b099      	sub	sp, #100	; 0x64
 8003c78:	af0a      	add	r7, sp, #40	; 0x28
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003c82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
        while (end - split > 1) {
 8003c88:	e057      	b.n	8003d3a <lfs_dir_splittingcompact+0xc6>
            lfs_size_t size = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
            int err = lfs_dir_traverse(lfs,
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c94:	b292      	uxth	r2, r2
 8003c96:	4252      	negs	r2, r2
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	b212      	sxth	r2, r2
 8003c9c:	f107 011c 	add.w	r1, r7, #28
 8003ca0:	9108      	str	r1, [sp, #32]
 8003ca2:	4979      	ldr	r1, [pc, #484]	; (8003e88 <lfs_dir_splittingcompact+0x214>)
 8003ca4:	9107      	str	r1, [sp, #28]
 8003ca6:	9206      	str	r2, [sp, #24]
 8003ca8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003cac:	9205      	str	r2, [sp, #20]
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9303      	str	r3, [sp, #12]
 8003cb4:	4b75      	ldr	r3, [pc, #468]	; (8003e8c <lfs_dir_splittingcompact+0x218>)
 8003cb6:	9302      	str	r3, [sp, #8]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7fe f947 	bl	8001f5c <lfs_dir_traverse>
 8003cce:	6338      	str	r0, [r7, #48]	; 0x30
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <lfs_dir_splittingcompact+0x66>
                return err;
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	e0d1      	b.n	8003e7e <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    ? lfs->cfg->metadata_max
                    : lfs->cfg->block_size;
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <lfs_dir_splittingcompact+0x78>
                    ? lfs->cfg->metadata_max
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                    : lfs->cfg->block_size;
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	e002      	b.n	8003cf2 <lfs_dir_splittingcompact+0x7e>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf0:	69db      	ldr	r3, [r3, #28]
            lfs_size_t metadata_max = (lfs->cfg->metadata_max)
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (end - split < 0xff
 8003cf4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2bfe      	cmp	r3, #254	; 0xfe
 8003cfe:	d814      	bhi.n	8003d2a <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	085a      	lsrs	r2, r3, #1
                        metadata_max - 40,
                        lfs_alignup(
                            metadata_max/2,
                            lfs->cfg->prog_size))) {
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0e:	699b      	ldr	r3, [r3, #24]
                    && size <= lfs_min(
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fc fdca 	bl	80008ac <lfs_alignup>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7fc fda0 	bl	8000862 <lfs_min>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20e      	bcs.n	8003d48 <lfs_dir_splittingcompact+0xd4>
                break;
            }

            split = split + ((end - split) / 2);
 8003d2a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d36:	4413      	add	r3, r2
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
        while (end - split > 1) {
 8003d3a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d8a1      	bhi.n	8003c8a <lfs_dir_splittingcompact+0x16>
 8003d46:	e000      	b.n	8003d4a <lfs_dir_splittingcompact+0xd6>
                break;
 8003d48:	bf00      	nop
        }

        if (split == begin) {
 8003d4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d02d      	beq.n	8003db0 <lfs_dir_splittingcompact+0x13c>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003d5c:	9202      	str	r2, [sp, #8]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff fce5 	bl	800373a <lfs_dir_split>
 8003d70:	62b8      	str	r0, [r7, #40]	; 0x28
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <lfs_dir_splittingcompact+0x110>
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	f113 0f1c 	cmn.w	r3, #28
 8003d7e:	d001      	beq.n	8003d84 <lfs_dir_splittingcompact+0x110>
            return err;
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	e07c      	b.n	8003e7e <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <lfs_dir_splittingcompact+0x134>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	493f      	ldr	r1, [pc, #252]	; (8003e90 <lfs_dir_splittingcompact+0x21c>)
 8003d94:	9101      	str	r1, [sp, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	f640 028c 	movw	r2, #2188	; 0x88c
 8003d9e:	493d      	ldr	r1, [pc, #244]	; (8003e94 <lfs_dir_splittingcompact+0x220>)
 8003da0:	483d      	ldr	r0, [pc, #244]	; (8003e98 <lfs_dir_splittingcompact+0x224>)
 8003da2:	f005 f959 	bl	8009058 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003da6:	e004      	b.n	8003db2 <lfs_dir_splittingcompact+0x13e>
        } else {
            end = split;
 8003da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003daa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    while (true) {
 8003dae:	e768      	b.n	8003c82 <lfs_dir_splittingcompact+0xe>
            break;
 8003db0:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff fd3f 	bl	8003838 <lfs_dir_needsrelocation>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04f      	beq.n	8003e60 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	617a      	str	r2, [r7, #20]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	61ba      	str	r2, [r7, #24]
 8003dca:	f107 0214 	add.w	r2, r7, #20
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fa05 	bl	80011e0 <lfs_pair_cmp>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d141      	bne.n	8003e60 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f003 faf9 	bl	80073d4 <lfs_fs_size_>
 8003de2:	6278      	str	r0, [r7, #36]	; 0x24
        if (size < 0) {
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da01      	bge.n	8003dee <lfs_dir_splittingcompact+0x17a>
            return size;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	e047      	b.n	8003e7e <lfs_dir_splittingcompact+0x20a>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	1ad2      	subs	r2, r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d92f      	bls.n	8003e60 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <lfs_dir_splittingcompact+0x21c>)
 8003e06:	9200      	str	r2, [sp, #0]
 8003e08:	f640 02a2 	movw	r2, #2210	; 0x8a2
 8003e0c:	4921      	ldr	r1, [pc, #132]	; (8003e94 <lfs_dir_splittingcompact+0x220>)
 8003e0e:	4823      	ldr	r0, [pc, #140]	; (8003e9c <lfs_dir_splittingcompact+0x228>)
 8003e10:	f005 f922 	bl	8009058 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003e14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e18:	9302      	str	r3, [sp, #8]
 8003e1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fc85 	bl	800373a <lfs_dir_split>
 8003e30:	6238      	str	r0, [r7, #32]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <lfs_dir_splittingcompact+0x1d0>
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	f113 0f1c 	cmn.w	r3, #28
 8003e3e:	d001      	beq.n	8003e44 <lfs_dir_splittingcompact+0x1d0>
                return err;
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	e01c      	b.n	8003e7e <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <lfs_dir_splittingcompact+0x1e6>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <lfs_dir_splittingcompact+0x21c>)
 8003e4c:	f640 02ac 	movw	r2, #2220	; 0x8ac
 8003e50:	4910      	ldr	r1, [pc, #64]	; (8003e94 <lfs_dir_splittingcompact+0x220>)
 8003e52:	4813      	ldr	r0, [pc, #76]	; (8003ea0 <lfs_dir_splittingcompact+0x22c>)
 8003e54:	f005 f900 	bl	8009058 <iprintf>
 8003e58:	e002      	b.n	8003e60 <lfs_dir_splittingcompact+0x1ec>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff fd04 	bl	8003884 <lfs_dir_compact>
 8003e7c:	4603      	mov	r3, r0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	373c      	adds	r7, #60	; 0x3c
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd90      	pop	{r4, r7, pc}
 8003e86:	bf00      	nop
 8003e88:	080037e3 	.word	0x080037e3
 8003e8c:	400ffc00 	.word	0x400ffc00
 8003e90:	08009ec8 	.word	0x08009ec8
 8003e94:	08009d80 	.word	0x08009d80
 8003e98:	08009fa0 	.word	0x08009fa0
 8003e9c:	08009fd0 	.word	0x08009fd0
 8003ea0:	0800a000 	.word	0x0800a000

08003ea4 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003ea4:	b5b0      	push	{r4, r5, r7, lr}
 8003ea6:	b0a6      	sub	sp, #152	; 0x98
 8003ea8:	af0a      	add	r7, sp, #40	; 0x28
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec0:	e06d      	b.n	8003f9e <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4413      	add	r3, r2
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd fa53 	bl	8001378 <lfs_tag_type3>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f240 4301 	movw	r3, #1025	; 0x401
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d106      	bne.n	8003eec <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	8a9b      	ldrh	r3, [r3, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	829a      	strh	r2, [r3, #20]
 8003eea:	e055      	b.n	8003f98 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd fa3e 	bl	8001378 <lfs_tag_type3>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d114      	bne.n	8003f32 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	8a9b      	ldrh	r3, [r3, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <lfs_dir_relocatingcommit+0x7a>
 8003f10:	4ba4      	ldr	r3, [pc, #656]	; (80041a4 <lfs_dir_relocatingcommit+0x300>)
 8003f12:	4aa5      	ldr	r2, [pc, #660]	; (80041a8 <lfs_dir_relocatingcommit+0x304>)
 8003f14:	f640 01c5 	movw	r1, #2245	; 0x8c5
 8003f18:	48a4      	ldr	r0, [pc, #656]	; (80041ac <lfs_dir_relocatingcommit+0x308>)
 8003f1a:	f004 feef 	bl	8008cfc <__assert_func>
            dir->count -= 1;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	8a9b      	ldrh	r3, [r3, #20]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003f30:	e032      	b.n	8003f98 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd f9fb 	bl	8001338 <lfs_tag_type1>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f48:	d126      	bne.n	8003f98 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4413      	add	r3, r2
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fd fa0f 	bl	8001398 <lfs_tag_chunk>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3318      	adds	r3, #24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd f97b 	bl	800128e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	db8c      	blt.n	8003ec2 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003fa8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d02b      	beq.n	8004008 <lfs_dir_relocatingcommit+0x164>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	8a9b      	ldrh	r3, [r3, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d127      	bne.n	8004008 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <lfs_dir_relocatingcommit+0x12a>
 8003fc0:	4b7b      	ldr	r3, [pc, #492]	; (80041b0 <lfs_dir_relocatingcommit+0x30c>)
 8003fc2:	4a79      	ldr	r2, [pc, #484]	; (80041a8 <lfs_dir_relocatingcommit+0x304>)
 8003fc4:	f640 01d2 	movw	r1, #2258	; 0x8d2
 8003fc8:	4878      	ldr	r0, [pc, #480]	; (80041ac <lfs_dir_relocatingcommit+0x308>)
 8003fca:	f004 fe97 	bl	8008cfc <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f002 fd9e 	bl	8006b18 <lfs_fs_pred>
 8003fdc:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <lfs_dir_relocatingcommit+0x14c>
 8003fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe6:	f113 0f02 	cmn.w	r3, #2
 8003fea:	d001      	beq.n	8003ff0 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fee:	e214      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff2:	f113 0f02 	cmn.w	r3, #2
 8003ff6:	d007      	beq.n	8004008 <lfs_dir_relocatingcommit+0x164>
 8003ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ffc:	7ddb      	ldrb	r3, [r3, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8004002:	2302      	movs	r3, #2
 8004004:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8004006:	e121      	b.n	800424c <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	7d9b      	ldrb	r3, [r3, #22]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80fb 	beq.w	8004208 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004016:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <lfs_dir_relocatingcommit+0x1a0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004040:	3b08      	subs	r3, #8
 8004042:	e003      	b.n	800404c <lfs_dir_relocatingcommit+0x1a8>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800404c:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3318      	adds	r3, #24
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f935 	bl	80012c2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
 8004064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 800406a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406e:	9308      	str	r3, [sp, #32]
 8004070:	4b50      	ldr	r3, [pc, #320]	; (80041b4 <lfs_dir_relocatingcommit+0x310>)
 8004072:	9307      	str	r3, [sp, #28]
 8004074:	2300      	movs	r3, #0
 8004076:	9306      	str	r3, [sp, #24]
 8004078:	2300      	movs	r3, #0
 800407a:	9305      	str	r3, [sp, #20]
 800407c:	2300      	movs	r3, #0
 800407e:	9304      	str	r3, [sp, #16]
 8004080:	2300      	movs	r3, #0
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	2300      	movs	r3, #0
 8004086:	9302      	str	r3, [sp, #8]
 8004088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	460b      	mov	r3, r1
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7fd ff60 	bl	8001f5c <lfs_dir_traverse>
 800409c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd f8f3 	bl	800128e <lfs_pair_fromle32>
        if (err) {
 80040a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	f113 0f1c 	cmn.w	r3, #28
 80040b4:	f000 80aa 	beq.w	800420c <lfs_dir_relocatingcommit+0x368>
 80040b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80040be:	f000 80a5 	beq.w	800420c <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80040c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c4:	e1a9      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80040c6:	f107 031c 	add.w	r3, r7, #28
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80040d8:	f107 031c 	add.w	r3, r7, #28
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd f9a5 	bl	800142e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80040ea:	f107 031c 	add.w	r3, r7, #28
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd f99c 	bl	800142e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80040fc:	f107 031c 	add.w	r3, r7, #28
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7fd f993 	bl	800142e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004114:	f107 031c 	add.w	r3, r7, #28
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd f9a8 	bl	800146e <lfs_gstate_iszero>
 800411e:	4603      	mov	r3, r0
 8004120:	f083 0301 	eor.w	r3, r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d027      	beq.n	800417a <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800412a:	f107 031c 	add.w	r3, r7, #28
 800412e:	461a      	mov	r2, r3
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7fe fee2 	bl	8002efc <lfs_dir_getgstate>
 8004138:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 800413a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004142:	e16a      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
            }

            lfs_gstate_tole32(&delta);
 8004144:	f107 031c 	add.w	r3, r7, #28
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd fa35 	bl	80015b8 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800414e:	f107 031c 	add.w	r3, r7, #28
 8004152:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004156:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <lfs_dir_relocatingcommit+0x314>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff f885 	bl	8003268 <lfs_dir_commitattr>
 800415e:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8004160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004168:	f113 0f1c 	cmn.w	r3, #28
 800416c:	d050      	beq.n	8004210 <lfs_dir_relocatingcommit+0x36c>
 800416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004170:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004174:	d04c      	beq.n	8004210 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	e14f      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800417a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800417e:	4619      	mov	r1, r3
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff f8f1 	bl	8003368 <lfs_dir_commitcrc>
 8004186:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8004188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800418e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004190:	f113 0f1c 	cmn.w	r3, #28
 8004194:	d03e      	beq.n	8004214 <lfs_dir_relocatingcommit+0x370>
 8004196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004198:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800419c:	d03a      	beq.n	8004214 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a0:	e13b      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
 80041a2:	bf00      	nop
 80041a4:	0800a02c 	.word	0x0800a02c
 80041a8:	0800abc8 	.word	0x0800abc8
 80041ac:	08009d80 	.word	0x08009d80
 80041b0:	0800a03c 	.word	0x0800a03c
 80041b4:	0800380f 	.word	0x0800380f
 80041b8:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041c2:	6992      	ldr	r2, [r2, #24]
 80041c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80041c8:	fb01 f202 	mul.w	r2, r1, r2
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <lfs_dir_relocatingcommit+0x33c>
 80041d2:	4b94      	ldr	r3, [pc, #592]	; (8004424 <lfs_dir_relocatingcommit+0x580>)
 80041d4:	4a94      	ldr	r2, [pc, #592]	; (8004428 <lfs_dir_relocatingcommit+0x584>)
 80041d6:	f640 111c 	movw	r1, #2332	; 0x91c
 80041da:	4894      	ldr	r0, [pc, #592]	; (800442c <lfs_dir_relocatingcommit+0x588>)
 80041dc:	f004 fd8e 	bl	8008cfc <__assert_func>
        dir->off = commit.off;
 80041e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80041e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	333c      	adds	r3, #60	; 0x3c
 80041f2:	3230      	adds	r2, #48	; 0x30
 80041f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80041f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3348      	adds	r3, #72	; 0x48
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	e021      	b.n	800424c <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004208:	bf00      	nop
 800420a:	e004      	b.n	8004216 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800420c:	bf00      	nop
 800420e:	e002      	b.n	8004216 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004214:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3310      	adds	r3, #16
 800421a:	4619      	mov	r1, r3
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7fc fbd6 	bl	80009ce <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	8a9b      	ldrh	r3, [r3, #20]
 8004226:	9302      	str	r3, [sp, #8]
 8004228:	2300      	movs	r3, #0
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fd1b 	bl	8003c74 <lfs_dir_splittingcompact>
 800423e:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004242:	2b00      	cmp	r3, #0
 8004244:	da01      	bge.n	800424a <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	e0e7      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
    }

    goto fixmlist;
 800424a:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	663b      	str	r3, [r7, #96]	; 0x60
 8004260:	e0d6      	b.n	8004410 <lfs_dir_relocatingcommit+0x56c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8004262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004264:	3308      	adds	r3, #8
 8004266:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc ffb7 	bl	80011e0 <lfs_pair_cmp>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 80c8 	bne.w	800440a <lfs_dir_relocatingcommit+0x566>
            d->m = *dir;
 800427a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	f103 0408 	add.w	r4, r3, #8
 8004282:	4615      	mov	r5, r2
 8004284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800428c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004292:	3308      	adds	r3, #8
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	f000 80ad 	beq.w	80043f6 <lfs_dir_relocatingcommit+0x552>
                for (int i = 0; i < attrcount; i++) {
 800429c:	2300      	movs	r3, #0
 800429e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a0:	e07f      	b.n	80043a2 <lfs_dir_relocatingcommit+0x4fe>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fd f863 	bl	8001378 <lfs_tag_type3>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d119      	bne.n	80042f2 <lfs_dir_relocatingcommit+0x44e>
                            d->id == lfs_tag_id(attrs[i].tag) &&
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c0:	889c      	ldrh	r4, [r3, #4]
 80042c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd f87d 	bl	80013cc <lfs_tag_id>
 80042d2:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042d4:	429c      	cmp	r4, r3
 80042d6:	d10c      	bne.n	80042f2 <lfs_dir_relocatingcommit+0x44e>
                            d->type != LFS_TYPE_DIR) {
 80042d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042da:	799b      	ldrb	r3, [r3, #6]
                            d->id == lfs_tag_id(attrs[i].tag) &&
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d008      	beq.n	80042f2 <lfs_dir_relocatingcommit+0x44e>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80042e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80042e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ea:	f04f 32ff 	mov.w	r2, #4294967295
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e054      	b.n	800439c <lfs_dir_relocatingcommit+0x4f8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	4413      	add	r3, r2
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd f83b 	bl	8001378 <lfs_tag_type3>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800430a:	429a      	cmp	r2, r3
 800430c:	d11c      	bne.n	8004348 <lfs_dir_relocatingcommit+0x4a4>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800430e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004310:	889c      	ldrh	r4, [r3, #4]
 8004312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	4413      	add	r3, r2
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd f855 	bl	80013cc <lfs_tag_id>
 8004322:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004324:	429c      	cmp	r4, r3
 8004326:	d90f      	bls.n	8004348 <lfs_dir_relocatingcommit+0x4a4>
                        d->id -= 1;
 8004328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800432a:	889b      	ldrh	r3, [r3, #4]
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004332:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004336:	799b      	ldrb	r3, [r3, #6]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d12f      	bne.n	800439c <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos -= 1;
 800433c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004346:	e029      	b.n	800439c <lfs_dir_relocatingcommit+0x4f8>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4413      	add	r3, r2
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd f810 	bl	8001378 <lfs_tag_type3>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	f240 4301 	movw	r3, #1025	; 0x401
 8004360:	429a      	cmp	r2, r3
 8004362:	d11b      	bne.n	800439c <lfs_dir_relocatingcommit+0x4f8>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004366:	889c      	ldrh	r4, [r3, #4]
 8004368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	4413      	add	r3, r2
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fd f82a 	bl	80013cc <lfs_tag_id>
 8004378:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800437a:	429c      	cmp	r4, r3
 800437c:	d30e      	bcc.n	800439c <lfs_dir_relocatingcommit+0x4f8>
                        d->id += 1;
 800437e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004380:	889b      	ldrh	r3, [r3, #4]
 8004382:	3301      	adds	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004388:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800438a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800438c:	799b      	ldrb	r3, [r3, #6]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d104      	bne.n	800439c <lfs_dir_relocatingcommit+0x4f8>
                            ((lfs_dir_t*)d)->pos += 1;
 8004392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439e:	3301      	adds	r3, #1
 80043a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043a8:	429a      	cmp	r2, r3
 80043aa:	f6ff af7a 	blt.w	80042a2 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80043ae:	e022      	b.n	80043f6 <lfs_dir_relocatingcommit+0x552>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80043b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b2:	f103 0220 	add.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3320      	adds	r3, #32
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fc ff0f 	bl	80011e0 <lfs_pair_cmp>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <lfs_dir_relocatingcommit+0x534>
                    d->id -= d->m.count;
 80043c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ca:	889a      	ldrh	r2, [r3, #4]
 80043cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ce:	8b9b      	ldrh	r3, [r3, #28]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d6:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80043d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043da:	f103 0108 	add.w	r1, r3, #8
 80043de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e0:	3320      	adds	r3, #32
 80043e2:	461a      	mov	r2, r3
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7fe fd6d 	bl	8002ec4 <lfs_dir_fetch>
 80043ea:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80043ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <lfs_dir_relocatingcommit+0x552>
                    return err;
 80043f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f4:	e011      	b.n	800441a <lfs_dir_relocatingcommit+0x576>
            while (d->id >= d->m.count && d->m.split) {
 80043f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f8:	889a      	ldrh	r2, [r3, #4]
 80043fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fc:	8b9b      	ldrh	r3, [r3, #28]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d303      	bcc.n	800440a <lfs_dir_relocatingcommit+0x566>
 8004402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004404:	7fdb      	ldrb	r3, [r3, #31]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1d2      	bne.n	80043b0 <lfs_dir_relocatingcommit+0x50c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800440a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	663b      	str	r3, [r7, #96]	; 0x60
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	2b00      	cmp	r3, #0
 8004414:	f47f af25 	bne.w	8004262 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8004418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800441a:	4618      	mov	r0, r3
 800441c:	3770      	adds	r7, #112	; 0x70
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	08009f1c 	.word	0x08009f1c
 8004428:	0800abc8 	.word	0x0800abc8
 800442c:	08009d80 	.word	0x08009d80

08004430 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b0bc      	sub	sp, #240	; 0xf0
 8004434:	af04      	add	r7, sp, #16
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004446:	e045      	b.n	80044d4 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800444c:	3308      	adds	r3, #8
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d03a      	beq.n	80044ca <lfs_dir_orphaningcommit+0x9a>
 8004454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004458:	3308      	adds	r3, #8
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc febe 	bl	80011e0 <lfs_pair_cmp>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d12f      	bne.n	80044ca <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800446a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800446e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004470:	2b01      	cmp	r3, #1
 8004472:	d12a      	bne.n	80044ca <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d023      	beq.n	80044ca <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8004482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800448e:	429a      	cmp	r2, r3
 8004490:	d91b      	bls.n	80044ca <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8004492:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f001 f800 	bl	800549c <lfs_file_outline>
 800449c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80044a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <lfs_dir_orphaningcommit+0x7e>
                return err;
 80044a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044ac:	e2ad      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80044ae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f001 f814 	bl	80054e0 <lfs_file_flush>
 80044b8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80044bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <lfs_dir_orphaningcommit+0x9a>
                return err;
 80044c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044c8:	e29f      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80044ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80044d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1b5      	bne.n	8004448 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80044f2:	461d      	mov	r5, r3
 80044f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004506:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff fcc6 	bl	8003ea4 <lfs_dir_relocatingcommit>
 8004518:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800451c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004520:	2b00      	cmp	r3, #0
 8004522:	da02      	bge.n	800452a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004528:	e26f      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc fe54 	bl	80011e0 <lfs_pair_cmp>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	461d      	mov	r5, r3
 8004542:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800454a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800454e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004556:	2b02      	cmp	r3, #2
 8004558:	d14a      	bne.n	80045f0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3348      	adds	r3, #72	; 0x48
 800455e:	461a      	mov	r2, r3
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fe fcca 	bl	8002efc <lfs_dir_getgstate>
 8004568:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 800456c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8004574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004578:	e247      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3318      	adds	r3, #24
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fe99 	bl	80012c2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	7ddb      	ldrb	r3, [r3, #23]
 8004594:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004598:	051a      	lsls	r2, r3, #20
 800459a:	4bc2      	ldr	r3, [pc, #776]	; (80048a4 <lfs_dir_orphaningcommit+0x474>)
 800459c:	4313      	orrs	r3, r2
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3318      	adds	r3, #24
 80045a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045aa:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80045ae:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80045b2:	2000      	movs	r0, #0
 80045b4:	9001      	str	r0, [sp, #4]
 80045b6:	2001      	movs	r0, #1
 80045b8:	9000      	str	r0, [sp, #0]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fc72 	bl	8003ea4 <lfs_dir_relocatingcommit>
 80045c0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3318      	adds	r3, #24
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fe60 	bl	800128e <lfs_pair_fromle32>
        if (state < 0) {
 80045ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da02      	bge.n	80045dc <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80045d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045da:	e216      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80045dc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80045e0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80045e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80045f6:	e1fc      	b.n	80049f2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80045f8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80045fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004600:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004604:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004608:	4ca7      	ldr	r4, [pc, #668]	; (80048a8 <lfs_dir_orphaningcommit+0x478>)
 800460a:	9403      	str	r4, [sp, #12]
 800460c:	9102      	str	r1, [sp, #8]
 800460e:	9201      	str	r2, [sp, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4603      	mov	r3, r0
 8004614:	f640 12a9 	movw	r2, #2473	; 0x9a9
 8004618:	49a4      	ldr	r1, [pc, #656]	; (80048ac <lfs_dir_orphaningcommit+0x47c>)
 800461a:	48a5      	ldr	r0, [pc, #660]	; (80048b0 <lfs_dir_orphaningcommit+0x480>)
 800461c:	f004 fd1c 	bl	8009058 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f103 0220 	add.w	r2, r3, #32
 800462c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fdd4 	bl	80011e0 <lfs_pair_cmp>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800463e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004646:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004656:	e037      	b.n	80046c8 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004658:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800465c:	f103 0208 	add.w	r2, r3, #8
 8004660:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fdba 	bl	80011e0 <lfs_pair_cmp>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8004672:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004676:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800467a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800467c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004680:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004684:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8004686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800468a:	799b      	ldrb	r3, [r3, #6]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d116      	bne.n	80046be <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004690:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004694:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004698:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fc fd9e 	bl	80011e0 <lfs_pair_cmp>
 80046a4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80046aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80046ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80046b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80046be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1c3      	bne.n	8004658 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80046d0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80046d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046d8:	4619      	mov	r1, r3
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f002 faac 	bl	8006c38 <lfs_fs_parent>
 80046e0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80046e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da07      	bge.n	80046fc <lfs_dir_orphaningcommit+0x2cc>
 80046ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046f0:	f113 0f02 	cmn.w	r3, #2
 80046f4:	d002      	beq.n	80046fc <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80046f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046fa:	e186      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80046fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004700:	f113 0f02 	cmn.w	r3, #2
 8004704:	bf14      	ite	ne
 8004706:	2301      	movne	r3, #1
 8004708:	2300      	moveq	r3, #0
 800470a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800470e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004712:	f113 0f02 	cmn.w	r3, #2
 8004716:	f000 809e 	beq.w	8004856 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800471a:	2101      	movs	r1, #1
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f002 faff 	bl	8006d20 <lfs_fs_preporphans>
 8004722:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004726:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <lfs_dir_orphaningcommit+0x304>
                return err;
 800472e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004732:	e16a      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004734:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004738:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3330      	adds	r3, #48	; 0x30
 8004740:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc fef6 	bl	8001538 <lfs_gstate_hasmovehere>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02d      	beq.n	80047ae <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc fe38 	bl	80013cc <lfs_tag_id>
 800475c:	4603      	mov	r3, r0
 800475e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004762:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004766:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800476a:	484f      	ldr	r0, [pc, #316]	; (80048a8 <lfs_dir_orphaningcommit+0x478>)
 800476c:	9002      	str	r0, [sp, #8]
 800476e:	9201      	str	r2, [sp, #4]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	460b      	mov	r3, r1
 8004774:	f640 12d6 	movw	r2, #2518	; 0x9d6
 8004778:	494c      	ldr	r1, [pc, #304]	; (80048ac <lfs_dir_orphaningcommit+0x47c>)
 800477a:	484e      	ldr	r0, [pc, #312]	; (80048b4 <lfs_dir_orphaningcommit+0x484>)
 800477c:	f004 fc6c 	bl	8009058 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004780:	2200      	movs	r2, #0
 8004782:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f002 fb1a 	bl	8006dc0 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800478c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004790:	4618      	mov	r0, r3
 8004792:	f7fc fe1b 	bl	80013cc <lfs_tag_id>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800479e:	4293      	cmp	r3, r2
 80047a0:	d205      	bcs.n	80047ae <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80047a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80047aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	657b      	str	r3, [r7, #84]	; 0x54
 80047b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b4:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80047b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc fd81 	bl	80012c2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80047c0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80047c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <lfs_dir_orphaningcommit+0x3ac>
 80047cc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80047d0:	029b      	lsls	r3, r3, #10
 80047d2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80047d6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80047da:	e000      	b.n	80047de <lfs_dir_orphaningcommit+0x3ae>
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	2300      	movs	r3, #0
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047ee:	653b      	str	r3, [r7, #80]	; 0x50
 80047f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047f4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80047f8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80047fc:	2000      	movs	r0, #0
 80047fe:	9001      	str	r0, [sp, #4]
 8004800:	2002      	movs	r0, #2
 8004802:	9000      	str	r0, [sp, #0]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff fb4d 	bl	8003ea4 <lfs_dir_relocatingcommit>
 800480a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800480e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fd3b 	bl	800128e <lfs_pair_fromle32>
            if (state < 0) {
 8004818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800481c:	2b00      	cmp	r3, #0
 800481e:	da02      	bge.n	8004826 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004824:	e0f1      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800482a:	2b01      	cmp	r3, #1
 800482c:	d113      	bne.n	8004856 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800482e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800483a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800483e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004846:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800484a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004854:	e0cd      	b.n	80049f2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004856:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800485a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800485e:	4619      	mov	r1, r3
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f002 f959 	bl	8006b18 <lfs_fs_pred>
 8004866:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800486a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <lfs_dir_orphaningcommit+0x452>
 8004872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004876:	f113 0f02 	cmn.w	r3, #2
 800487a:	d002      	beq.n	8004882 <lfs_dir_orphaningcommit+0x452>
            return err;
 800487c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004880:	e0c3      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8004882:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01a      	beq.n	80048c0 <lfs_dir_orphaningcommit+0x490>
 800488a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800488e:	f113 0f02 	cmn.w	r3, #2
 8004892:	d115      	bne.n	80048c0 <lfs_dir_orphaningcommit+0x490>
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <lfs_dir_orphaningcommit+0x488>)
 8004896:	4a09      	ldr	r2, [pc, #36]	; (80048bc <lfs_dir_orphaningcommit+0x48c>)
 8004898:	f640 11f9 	movw	r1, #2553	; 0x9f9
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <lfs_dir_orphaningcommit+0x47c>)
 800489e:	f004 fa2d 	bl	8008cfc <__assert_func>
 80048a2:	bf00      	nop
 80048a4:	000ffc08 	.word	0x000ffc08
 80048a8:	08009ec8 	.word	0x08009ec8
 80048ac:	08009d80 	.word	0x08009d80
 80048b0:	0800a044 	.word	0x0800a044
 80048b4:	0800a080 	.word	0x0800a080
 80048b8:	0800a0c4 	.word	0x0800a0c4
 80048bc:	0800abe4 	.word	0x0800abe4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80048c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c4:	f113 0f02 	cmn.w	r3, #2
 80048c8:	f000 8093 	beq.w	80049f2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3330      	adds	r3, #48	; 0x30
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fc fde8 	bl	80014a6 <lfs_gstate_hasorphans>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d011      	beq.n	8004900 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);
 80048dc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80048e0:	425b      	negs	r3, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f002 fa19 	bl	8006d20 <lfs_fs_preporphans>
 80048ee:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80048f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80048fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048fe:	e084      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004900:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004904:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3330      	adds	r3, #48	; 0x30
 800490c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fe10 	bl	8001538 <lfs_gstate_hasmovehere>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01c      	beq.n	8004958 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fd52 	bl	80013cc <lfs_tag_id>
 8004928:	4603      	mov	r3, r0
 800492a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800492e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004932:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004936:	4837      	ldr	r0, [pc, #220]	; (8004a14 <lfs_dir_orphaningcommit+0x5e4>)
 8004938:	9002      	str	r0, [sp, #8]
 800493a:	9201      	str	r2, [sp, #4]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	460b      	mov	r3, r1
 8004940:	f640 220a 	movw	r2, #2570	; 0xa0a
 8004944:	4934      	ldr	r1, [pc, #208]	; (8004a18 <lfs_dir_orphaningcommit+0x5e8>)
 8004946:	4835      	ldr	r0, [pc, #212]	; (8004a1c <lfs_dir_orphaningcommit+0x5ec>)
 8004948:	f004 fb86 	bl	8009058 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800494c:	2200      	movs	r2, #0
 800494e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f002 fa34 	bl	8006dc0 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800495e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004964:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004968:	4618      	mov	r0, r3
 800496a:	f7fc fcaa 	bl	80012c2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800496e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004972:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004976:	4293      	cmp	r3, r2
 8004978:	d007      	beq.n	800498a <lfs_dir_orphaningcommit+0x55a>
 800497a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800497e:	029b      	lsls	r3, r3, #10
 8004980:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004984:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004988:	e000      	b.n	800498c <lfs_dir_orphaningcommit+0x55c>
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	2300      	movs	r3, #0
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004996:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800499a:	051a      	lsls	r2, r3, #20
 800499c:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <lfs_dir_orphaningcommit+0x5f0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
 80049a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80049b0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80049b4:	2000      	movs	r0, #0
 80049b6:	9001      	str	r0, [sp, #4]
 80049b8:	2002      	movs	r0, #2
 80049ba:	9000      	str	r0, [sp, #0]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fa71 	bl	8003ea4 <lfs_dir_relocatingcommit>
 80049c2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80049c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc fc5f 	bl	800128e <lfs_pair_fromle32>
            if (state < 0) {
 80049d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	da02      	bge.n	80049de <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80049d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049dc:	e015      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80049de:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80049e2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80049e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80049ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80049f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	f43f adfe 	beq.w	80045f8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80049fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <lfs_dir_orphaningcommit+0x5d8>
 8004a04:	2303      	movs	r3, #3
 8004a06:	e000      	b.n	8004a0a <lfs_dir_orphaningcommit+0x5da>
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	37e0      	adds	r7, #224	; 0xe0
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bdb0      	pop	{r4, r5, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	08009ec8 	.word	0x08009ec8
 8004a18:	08009d80 	.word	0x08009d80
 8004a1c:	0800a080 	.word	0x0800a080
 8004a20:	000ffc08 	.word	0x000ffc08

08004a24 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff fcf9 	bl	8004430 <lfs_dir_orphaningcommit>
 8004a3e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da01      	bge.n	8004a4a <lfs_dir_commit+0x26>
        return orphans;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	e00d      	b.n	8004a66 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004a50:	2100      	movs	r1, #0
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f002 fad6 	bl	8007004 <lfs_fs_deorphan>
 8004a58:	6138      	str	r0, [r7, #16]
        if (err) {
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <lfs_dir_commit+0x40>
            return err;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	e000      	b.n	8004a66 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004a6e:	b590      	push	{r4, r7, lr}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	3b08      	subs	r3, #8
 8004a86:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <lfs_ctz_index+0x2e>
        return 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e01c      	b.n	8004ad6 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fb ff34 	bl	800090e <lfs_popc>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	1ad2      	subs	r2, r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	fb02 f303 	mul.w	r3, r2, r3
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	1ad4      	subs	r4, r2, r3
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7fb ff22 	bl	800090e <lfs_popc>
 8004aca:	4603      	mov	r3, r0
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	1ae2      	subs	r2, r4, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	601a      	str	r2, [r3, #0]
    return i;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}

08004ade <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004ade:	b590      	push	{r4, r7, lr}
 8004ae0:	b08f      	sub	sp, #60	; 0x3c
 8004ae2:	af04      	add	r7, sp, #16
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af4:	f04f 32ff 	mov.w	r2, #4294967295
 8004af8:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
        return 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e053      	b.n	8004bac <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	3b01      	subs	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	4619      	mov	r1, r3
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff ffac 	bl	8004a6e <lfs_ctz_index>
 8004b16:	4603      	mov	r3, r0
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004b1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ffa4 	bl	8004a6e <lfs_ctz_index>
 8004b26:	4603      	mov	r3, r0
 8004b28:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004b2a:	e034      	b.n	8004b96 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	3301      	adds	r3, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fb fecb 	bl	80008d0 <lfs_npw2>
 8004b3a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004b3c:	1e5c      	subs	r4, r3, #1
 8004b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b40:	f7fb fed6 	bl	80008f0 <lfs_ctz>
 8004b44:	4603      	mov	r3, r0
 8004b46:	4619      	mov	r1, r3
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7fb fe8a 	bl	8000862 <lfs_min>
 8004b4e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	0092      	lsls	r2, r2, #2
 8004b56:	2104      	movs	r1, #4
 8004b58:	9103      	str	r1, [sp, #12]
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	9102      	str	r1, [sp, #8]
 8004b5e:	9201      	str	r2, [sp, #4]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2304      	movs	r3, #4
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7fb ff55 	bl	8000a18 <lfs_bd_read>
 8004b6e:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb fee5 	bl	8000942 <lfs_fromle32>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	603b      	str	r3, [r7, #0]
        if (err) {
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <lfs_ctz_find+0xa8>
            return err;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	e012      	b.n	8004bac <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004b86:	2201      	movs	r2, #1
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d8c6      	bhi.n	8004b2c <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba2:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba8:	601a      	str	r2, [r3, #0]
    return 0;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	372c      	adds	r7, #44	; 0x2c
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b092      	sub	sp, #72	; 0x48
 8004bb8:	af04      	add	r7, sp, #16
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004bc2:	f107 0320 	add.w	r3, r7, #32
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7fc fef7 	bl	80019bc <lfs_alloc>
 8004bce:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <lfs_ctz_extend+0x26>
            return err;
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	e0e9      	b.n	8004dae <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7fc fa58 	bl	8001094 <lfs_bd_erase>
 8004be4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004bf2:	f000 80cb 	beq.w	8004d8c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	e0d9      	b.n	8004dae <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
                return 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	e0ce      	b.n	8004dae <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c12:	3b01      	subs	r3, #1
 8004c14:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004c16:	f107 031c 	add.w	r3, r7, #28
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff ff26 	bl	8004a6e <lfs_ctz_index>
 8004c22:	4603      	mov	r3, r0
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d044      	beq.n	8004cc2 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004c38:	2300      	movs	r3, #0
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3c:	e035      	b.n	8004caa <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	2301      	movs	r3, #1
 8004c46:	9303      	str	r3, [sp, #12]
 8004c48:	f107 0317 	add.w	r3, r7, #23
 8004c4c:	9302      	str	r3, [sp, #8]
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4613      	mov	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7fb fedb 	bl	8000a18 <lfs_bd_read>
 8004c62:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <lfs_ctz_extend+0xba>
                        return err;
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	e09f      	b.n	8004dae <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	2201      	movs	r2, #1
 8004c72:	9203      	str	r2, [sp, #12]
 8004c74:	f107 0217 	add.w	r2, r7, #23
 8004c78:	9202      	str	r2, [sp, #8]
 8004c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c7c:	9201      	str	r2, [sp, #4]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7fc f958 	bl	8000f3c <lfs_bd_prog>
 8004c8c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004c9a:	d101      	bne.n	8004ca0 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004c9c:	bf00      	nop
                    goto relocate;
 8004c9e:	e075      	b.n	8004d8c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004ca2:	e084      	b.n	8004dae <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3c5      	bcc.n	8004c3e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004cb2:	6a3a      	ldr	r2, [r7, #32]
 8004cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb6:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbc:	601a      	str	r2, [r3, #0]
                return 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e075      	b.n	8004dae <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cca:	f7fb fe11 	bl	80008f0 <lfs_ctz>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004cd8:	2300      	movs	r3, #0
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	e049      	b.n	8004d72 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fb fe39 	bl	8000958 <lfs_tole32>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cee:	0092      	lsls	r2, r2, #2
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	9103      	str	r1, [sp, #12]
 8004cf4:	f107 0118 	add.w	r1, r7, #24
 8004cf8:	9102      	str	r1, [sp, #8]
 8004cfa:	9201      	str	r2, [sp, #4]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2301      	movs	r3, #1
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7fc f919 	bl	8000f3c <lfs_bd_prog>
 8004d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fe17 	bl	8000942 <lfs_fromle32>
 8004d14:	4603      	mov	r3, r0
 8004d16:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d24:	d034      	beq.n	8004d90 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	e041      	b.n	8004dae <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d01b      	beq.n	8004d6c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	9103      	str	r1, [sp, #12]
 8004d3e:	f107 0118 	add.w	r1, r7, #24
 8004d42:	9102      	str	r1, [sp, #8]
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2304      	movs	r3, #4
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7fb fe62 	bl	8000a18 <lfs_bd_read>
 8004d54:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fb fdf2 	bl	8000942 <lfs_fromle32>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <lfs_ctz_extend+0x1b8>
                        return err;
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	e020      	b.n	8004dae <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	3301      	adds	r3, #1
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
 8004d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3b1      	bcc.n	8004cde <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004d7a:	6a3a      	ldr	r2, [r7, #32]
 8004d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	009a      	lsls	r2, r3, #2
 8004d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d86:	601a      	str	r2, [r3, #0]
            return 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e010      	b.n	8004dae <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004d8c:	bf00      	nop
 8004d8e:	e000      	b.n	8004d92 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004d90:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <lfs_ctz_extend+0x204>)
 8004d96:	9200      	str	r2, [sp, #0]
 8004d98:	f640 32c3 	movw	r2, #3011	; 0xbc3
 8004d9c:	4907      	ldr	r1, [pc, #28]	; (8004dbc <lfs_ctz_extend+0x208>)
 8004d9e:	4808      	ldr	r0, [pc, #32]	; (8004dc0 <lfs_ctz_extend+0x20c>)
 8004da0:	f004 f95a 	bl	8009058 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7fb fe11 	bl	80009ce <lfs_cache_drop>
    while (true) {
 8004dac:	e709      	b.n	8004bc2 <lfs_ctz_extend+0xe>
    }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3738      	adds	r7, #56	; 0x38
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	08009ec8 	.word	0x08009ec8
 8004dbc:	08009d80 	.word	0x08009d80
 8004dc0:	08009f44 	.word	0x08009f44

08004dc4 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b090      	sub	sp, #64	; 0x40
 8004dc8:	af04      	add	r7, sp, #16
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <lfs_ctz_traverse+0x18>
        return 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e06b      	b.n	8004eb4 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	3b01      	subs	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	f107 031c 	add.w	r3, r7, #28
 8004de6:	4619      	mov	r1, r3
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff fe40 	bl	8004a6e <lfs_ctz_index>
 8004dee:	4603      	mov	r3, r0
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004df8:	4798      	blx	r3
 8004dfa:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <lfs_ctz_traverse+0x42>
            return err;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	e056      	b.n	8004eb4 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <lfs_ctz_traverse+0x4c>
            return 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e051      	b.n	8004eb4 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	f1c3 0302 	rsb	r3, r3, #2
 8004e1a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004e1e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004e20:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004e22:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004e24:	9303      	str	r3, [sp, #12]
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7fb fdec 	bl	8000a18 <lfs_bd_read>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb fd7c 	bl	8000942 <lfs_fromle32>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fb fd76 	bl	8000942 <lfs_fromle32>
 8004e56:	4603      	mov	r3, r0
 8004e58:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <lfs_ctz_traverse+0xa0>
            return err;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	e027      	b.n	8004eb4 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004e64:	2300      	movs	r3, #0
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e68:	e012      	b.n	8004e90 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	3330      	adds	r3, #48	; 0x30
 8004e70:	443b      	add	r3, r7
 8004e72:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e78:	4611      	mov	r1, r2
 8004e7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e7c:	4798      	blx	r3
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <lfs_ctz_traverse+0xc6>
                return err;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	e014      	b.n	8004eb4 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e96:	429a      	cmp	r2, r3
 8004e98:	dbe7      	blt.n	8004e6a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	3330      	adds	r3, #48	; 0x30
 8004ea2:	443b      	add	r3, r7
 8004ea4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004ea8:	603b      	str	r3, [r7, #0]
        index -= count;
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004eb2:	e79e      	b.n	8004df2 <lfs_ctz_traverse+0x2e>
    }
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3730      	adds	r7, #48	; 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	b09a      	sub	sp, #104	; 0x68
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f002 fa45 	bl	8007364 <lfs_fs_forceconsistency>
 8004eda:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <lfs_file_opencfg_+0x2a>
            return err;
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	e1bf      	b.n	8005266 <lfs_file_opencfg_+0x3aa>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004eea:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2200      	movs	r2, #0
 8004efc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f103 0108 	add.w	r1, r3, #8
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	1d3a      	adds	r2, r7, #4
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7fe f86f 	bl	8002ff4 <lfs_dir_find>
 8004f16:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && lfs_path_islast(path))) {
 8004f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da10      	bge.n	8004f40 <lfs_file_opencfg_+0x84>
 8004f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f20:	f113 0f02 	cmn.w	r3, #2
 8004f24:	d109      	bne.n	8004f3a <lfs_file_opencfg_+0x7e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc f8f5 	bl	8001118 <lfs_path_islast>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f083 0301 	eor.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <lfs_file_opencfg_+0x84>
        err = tag;
 8004f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004f3e:	e187      	b.n	8005250 <lfs_file_opencfg_+0x394>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2201      	movs	r2, #1
 8004f44:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7fc fc64 	bl	8001816 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f50:	f113 0f02 	cmn.w	r3, #2
 8004f54:	d159      	bne.n	800500a <lfs_file_opencfg_+0x14e>
        if (!(flags & LFS_O_CREAT)) {
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <lfs_file_opencfg_+0xac>
            err = LFS_ERR_NOENT;
 8004f60:	f06f 0301 	mvn.w	r3, #1
 8004f64:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004f66:	e173      	b.n	8005250 <lfs_file_opencfg_+0x394>
        }

        // don't allow trailing slashes
        if (lfs_path_isdir(path)) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc f8f4 	bl	8001158 <lfs_path_isdir>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <lfs_file_opencfg_+0xc2>
            err = LFS_ERR_NOTDIR;
 8004f76:	f06f 0313 	mvn.w	r3, #19
 8004f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004f7c:	e168      	b.n	8005250 <lfs_file_opencfg_+0x394>
        }

        // check that name fits
        lfs_size_t nlen = lfs_path_namelen(path);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fc f8b9 	bl	80010f8 <lfs_path_namelen>
 8004f86:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d903      	bls.n	8004f9a <lfs_file_opencfg_+0xde>
            err = LFS_ERR_NAMETOOLONG;
 8004f92:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004f96:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004f98:	e15a      	b.n	8005250 <lfs_file_opencfg_+0x394>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f103 0108 	add.w	r1, r3, #8
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	889b      	ldrh	r3, [r3, #4]
 8004fa4:	029b      	lsls	r3, r3, #10
 8004fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	889b      	ldrh	r3, [r3, #4]
 8004fb8:	029a      	lsls	r2, r3, #10
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	889b      	ldrh	r3, [r3, #4]
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd8:	2300      	movs	r3, #0
 8004fda:	643b      	str	r3, [r7, #64]	; 0x40
 8004fdc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff fd1e 	bl	8004a24 <lfs_dir_commit>
 8004fe8:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fec:	f113 0f1c 	cmn.w	r3, #28
 8004ff0:	d001      	beq.n	8004ff6 <lfs_file_opencfg_+0x13a>
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff4:	e001      	b.n	8004ffa <lfs_file_opencfg_+0x13e>
 8004ff6:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8004ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 8125 	bne.w	800524e <lfs_file_opencfg_+0x392>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8005004:	4b9a      	ldr	r3, [pc, #616]	; (8005270 <lfs_file_opencfg_+0x3b4>)
 8005006:	65bb      	str	r3, [r7, #88]	; 0x58
 8005008:	e044      	b.n	8005094 <lfs_file_opencfg_+0x1d8>
    } else if (flags & LFS_O_EXCL) {
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <lfs_file_opencfg_+0x160>
        err = LFS_ERR_EXIST;
 8005014:	f06f 0310 	mvn.w	r3, #16
 8005018:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800501a:	e119      	b.n	8005250 <lfs_file_opencfg_+0x394>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800501c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc f9aa 	bl	8001378 <lfs_tag_type3>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d003      	beq.n	8005032 <lfs_file_opencfg_+0x176>
        err = LFS_ERR_ISDIR;
 800502a:	f06f 0314 	mvn.w	r3, #20
 800502e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005030:	e10e      	b.n	8005250 <lfs_file_opencfg_+0x394>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <lfs_file_opencfg_+0x19e>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	889b      	ldrh	r3, [r3, #4]
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800504a:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
 8005058:	e01c      	b.n	8005094 <lfs_file_opencfg_+0x1d8>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	889b      	ldrh	r3, [r3, #4]
 8005064:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506a:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005072:	9200      	str	r2, [sp, #0]
 8005074:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <lfs_file_opencfg_+0x3b8>)
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7fc fe1e 	bl	8001cb8 <lfs_dir_get>
 800507c:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 800507e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005080:	2b00      	cmp	r3, #0
 8005082:	da02      	bge.n	800508a <lfs_file_opencfg_+0x1ce>
            err = tag;
 8005084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005086:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005088:	e0e2      	b.n	8005250 <lfs_file_opencfg_+0x394>
        }
        lfs_ctz_fromle32(&file->ctz);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	3328      	adds	r3, #40	; 0x28
 800508e:	4618      	mov	r0, r3
 8005090:	f7fc fae2 	bl	8001658 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005094:	2300      	movs	r3, #0
 8005096:	657b      	str	r3, [r7, #84]	; 0x54
 8005098:	e063      	b.n	8005162 <lfs_file_opencfg_+0x2a6>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d03c      	beq.n	8005120 <lfs_file_opencfg_+0x264>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	6859      	ldr	r1, [r3, #4]
 80050b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80050c4:	051a      	lsls	r2, r3, #20
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	889b      	ldrh	r3, [r3, #4]
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	ea42 0103 	orr.w	r1, r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d4:	6858      	ldr	r0, [r3, #4]
 80050d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4403      	add	r3, r0
 80050e2:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050e4:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	6859      	ldr	r1, [r3, #4]
 80050ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4603      	mov	r3, r0
 8005100:	4a5d      	ldr	r2, [pc, #372]	; (8005278 <lfs_file_opencfg_+0x3bc>)
 8005102:	4621      	mov	r1, r4
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7fc fdd7 	bl	8001cb8 <lfs_dir_get>
 800510a:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510e:	2b00      	cmp	r3, #0
 8005110:	da06      	bge.n	8005120 <lfs_file_opencfg_+0x264>
 8005112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005114:	f113 0f02 	cmn.w	r3, #2
 8005118:	d002      	beq.n	8005120 <lfs_file_opencfg_+0x264>
                err = res;
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800511e:	e097      	b.n	8005250 <lfs_file_opencfg_+0x394>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d017      	beq.n	800515c <lfs_file_opencfg_+0x2a0>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005134:	4613      	mov	r3, r2
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005144:	429a      	cmp	r2, r3
 8005146:	d903      	bls.n	8005150 <lfs_file_opencfg_+0x294>
                err = LFS_ERR_NOSPC;
 8005148:	f06f 031b 	mvn.w	r3, #27
 800514c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800514e:	e07f      	b.n	8005250 <lfs_file_opencfg_+0x394>
            }

            file->flags |= LFS_F_DIRTY;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800515c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515e:	3301      	adds	r3, #1
 8005160:	657b      	str	r3, [r7, #84]	; 0x54
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800516a:	429a      	cmp	r2, r3
 800516c:	d395      	bcc.n	800509a <lfs_file_opencfg_+0x1de>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <lfs_file_opencfg_+0x2c8>
        file->cache.buffer = file->cfg->buffer;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	64da      	str	r2, [r3, #76]	; 0x4c
 8005182:	e010      	b.n	80051a6 <lfs_file_opencfg_+0x2ea>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb fc08 	bl	80009a0 <lfs_malloc>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <lfs_file_opencfg_+0x2ea>
            err = LFS_ERR_NOMEM;
 800519e:	f06f 030b 	mvn.w	r3, #11
 80051a2:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80051a4:	e054      	b.n	8005250 <lfs_file_opencfg_+0x394>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3340      	adds	r3, #64	; 0x40
 80051aa:	4619      	mov	r1, r3
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7fb fc1d 	bl	80009ec <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80051b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fc f8df 	bl	8001378 <lfs_tag_type3>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	f240 2301 	movw	r3, #513	; 0x201
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d141      	bne.n	800524a <lfs_file_opencfg_+0x38e>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f06f 0201 	mvn.w	r2, #1
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80051ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fc f90b 	bl	80013ec <lfs_tag_size>
 80051d6:	4602      	mov	r2, r0
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d020      	beq.n	800524a <lfs_file_opencfg_+0x38e>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	889b      	ldrh	r3, [r3, #4]
 8005212:	029c      	lsls	r4, r3, #10
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005218:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb fb20 	bl	8000862 <lfs_min>
 8005222:	4603      	mov	r3, r0
 8005224:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	4a10      	ldr	r2, [pc, #64]	; (8005274 <lfs_file_opencfg_+0x3b8>)
 8005234:	4629      	mov	r1, r5
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7fc fd3e 	bl	8001cb8 <lfs_dir_get>
 800523c:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005240:	2b00      	cmp	r3, #0
 8005242:	da02      	bge.n	800524a <lfs_file_opencfg_+0x38e>
                err = res;
 8005244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005246:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005248:	e002      	b.n	8005250 <lfs_file_opencfg_+0x394>
            }
        }
    }

    return 0;
 800524a:	2300      	movs	r3, #0
 800524c:	e00b      	b.n	8005266 <lfs_file_opencfg_+0x3aa>
            goto cleanup;
 800524e:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_close_(lfs, file);
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f824 	bl	80052ac <lfs_file_close_>
    return err;
 8005264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8005266:	4618      	mov	r0, r3
 8005268:	3760      	adds	r7, #96	; 0x60
 800526a:	46bd      	mov	sp, r7
 800526c:	bdb0      	pop	{r4, r5, r7, pc}
 800526e:	bf00      	nop
 8005270:	20100000 	.word	0x20100000
 8005274:	700ffc00 	.word	0x700ffc00
 8005278:	7ffffc00 	.word	0x7ffffc00

0800527c <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <lfs_file_open_+0x2c>)
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fe11 	bl	8004ebc <lfs_file_opencfg_>
 800529a:	6178      	str	r0, [r7, #20]
    return err;
 800529c:	697b      	ldr	r3, [r7, #20]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	0800abfc 	.word	0x0800abfc

080052ac <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f9e5 	bl	8005688 <lfs_file_sync_>
 80052be:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc fa85 	bl	80017d2 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb fb6e 	bl	80009b8 <lfs_free>
    }

    return err;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b08d      	sub	sp, #52	; 0x34
 80052ec:	af06      	add	r7, sp, #24
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80052f2:	f107 030c 	add.w	r3, r7, #12
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fc fb5f 	bl	80019bc <lfs_alloc>
 80052fe:	6138      	str	r0, [r7, #16]
        if (err) {
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <lfs_file_relocate+0x22>
            return err;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	e0bb      	b.n	8005482 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fb fec0 	bl	8001094 <lfs_bd_erase>
 8005314:	6138      	str	r0, [r7, #16]
        if (err) {
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005322:	f000 809b 	beq.w	800545c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	e0ab      	b.n	8005482 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e069      	b.n	8005404 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d027      	beq.n	800538c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f103 0008 	add.w	r0, r3, #8
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	889b      	ldrh	r3, [r3, #4]
 8005354:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8005356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800535a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535e:	2101      	movs	r1, #1
 8005360:	9105      	str	r1, [sp, #20]
 8005362:	f107 010b 	add.w	r1, r7, #11
 8005366:	9104      	str	r1, [sp, #16]
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	9103      	str	r1, [sp, #12]
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	4b47      	ldr	r3, [pc, #284]	; (800548c <lfs_file_relocate+0x1a4>)
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	9200      	str	r2, [sp, #0]
 8005374:	4623      	mov	r3, r4
 8005376:	2200      	movs	r2, #0
 8005378:	4601      	mov	r1, r0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fc fcb7 	bl	8001cee <lfs_dir_getread>
 8005380:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01e      	beq.n	80053c6 <lfs_file_relocate+0xde>
                    return err;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	e07a      	b.n	8005482 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8005392:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad4      	subs	r4, r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2201      	movs	r2, #1
 80053a2:	9203      	str	r2, [sp, #12]
 80053a4:	f107 020b 	add.w	r2, r7, #11
 80053a8:	9202      	str	r2, [sp, #8]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	9201      	str	r2, [sp, #4]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	4623      	mov	r3, r4
 80053b2:	4602      	mov	r2, r0
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fb fb2f 	bl	8000a18 <lfs_bd_read>
 80053ba:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <lfs_file_relocate+0xde>
                    return err;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	e05d      	b.n	8005482 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f103 0110 	add.w	r1, r3, #16
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	9203      	str	r2, [sp, #12]
 80053d4:	f107 020b 	add.w	r2, r7, #11
 80053d8:	9202      	str	r2, [sp, #8]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	9201      	str	r2, [sp, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2301      	movs	r3, #1
 80053e2:	4602      	mov	r2, r0
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fb fda9 	bl	8000f3c <lfs_bd_prog>
 80053ea:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80053f8:	d032      	beq.n	8005460 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	e041      	b.n	8005482 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3301      	adds	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	429a      	cmp	r2, r3
 800540c:	d390      	bcc.n	8005330 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69d9      	ldr	r1, [r3, #28]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	461a      	mov	r2, r3
 800541e:	f003 ff2c 	bl	800927a <memcpy>
        file->cache.block = lfs->pcache.block;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3310      	adds	r3, #16
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fb fad3 	bl	80009ec <lfs_cache_zero>

        file->block = nblock;
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005458:	2300      	movs	r3, #0
 800545a:	e012      	b.n	8005482 <lfs_file_relocate+0x19a>
                goto relocate;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005460:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <lfs_file_relocate+0x1a8>)
 8005466:	9200      	str	r2, [sp, #0]
 8005468:	f640 42ff 	movw	r2, #3327	; 0xcff
 800546c:	4909      	ldr	r1, [pc, #36]	; (8005494 <lfs_file_relocate+0x1ac>)
 800546e:	480a      	ldr	r0, [pc, #40]	; (8005498 <lfs_file_relocate+0x1b0>)
 8005470:	f003 fdf2 	bl	8009058 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3310      	adds	r3, #16
 8005478:	4619      	mov	r1, r3
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fb faa7 	bl	80009ce <lfs_cache_drop>
    while (true) {
 8005480:	e737      	b.n	80052f2 <lfs_file_relocate+0xa>
    }
}
 8005482:	4618      	mov	r0, r3
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}
 800548a:	bf00      	nop
 800548c:	fff7fc00 	.word	0xfff7fc00
 8005490:	08009ec8 	.word	0x08009ec8
 8005494:	08009d80 	.word	0x08009d80
 8005498:	08009f44 	.word	0x08009f44

0800549c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ckpoint(lfs);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fc f9ed 	bl	800188e <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ff16 	bl	80052e8 <lfs_file_relocate>
 80054bc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <lfs_file_outline+0x2c>
        return err;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	e006      	b.n	80054d6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b09f      	sub	sp, #124	; 0x7c
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d011      	beq.n	800551a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3340      	adds	r3, #64	; 0x40
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fb fa60 	bl	80009ce <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80a4 	beq.w	8005670 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d176      	bne.n	8005628 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800553a:	f107 030c 	add.w	r3, r7, #12
 800553e:	2254      	movs	r2, #84	; 0x54
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f003 fded 	bl	8009122 <memset>
                .ctz.head = file->ctz.head,
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
 8005554:	2301      	movs	r3, #1
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800555c:	643b      	str	r3, [r7, #64]	; 0x40
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fb fa2d 	bl	80009ce <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005574:	e02b      	b.n	80055ce <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8005576:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800557a:	f107 010c 	add.w	r1, r7, #12
 800557e:	2301      	movs	r3, #1
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f921 	bl	80057c8 <lfs_file_flushedread>
 8005586:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800558a:	2b00      	cmp	r3, #0
 800558c:	da01      	bge.n	8005592 <lfs_file_flush+0xb2>
                    return res;
 800558e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005590:	e06f      	b.n	8005672 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005592:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005596:	2301      	movs	r3, #1
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9e6 	bl	800596c <lfs_file_flushedwrite>
 80055a0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80055a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da01      	bge.n	80055ac <lfs_file_flush+0xcc>
                    return res;
 80055a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055aa:	e062      	b.n	8005672 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d00b      	beq.n	80055ce <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	3340      	adds	r3, #64	; 0x40
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fa05 	bl	80009ce <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb fa00 	bl	80009ce <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3cd      	bcc.n	8005576 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	2301      	movs	r3, #1
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fb fbfb 	bl	8000de0 <lfs_bd_flush>
 80055ea:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80055ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d026      	beq.n	8005640 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80055f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055f8:	d001      	beq.n	80055fe <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80055fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fc:	e039      	b.n	8005672 <lfs_file_flush+0x192>
                        goto relocate;
 80055fe:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	4a1d      	ldr	r2, [pc, #116]	; (800567c <lfs_file_flush+0x19c>)
 8005606:	9200      	str	r2, [sp, #0]
 8005608:	f640 524e 	movw	r2, #3406	; 0xd4e
 800560c:	491c      	ldr	r1, [pc, #112]	; (8005680 <lfs_file_flush+0x1a0>)
 800560e:	481d      	ldr	r0, [pc, #116]	; (8005684 <lfs_file_flush+0x1a4>)
 8005610:	f003 fd22 	bl	8009058 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fe66 	bl	80052e8 <lfs_file_relocate>
 800561c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0da      	beq.n	80055da <lfs_file_flush+0xfa>
                    return err;
 8005624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005626:	e024      	b.n	8005672 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7fb f905 	bl	8000842 <lfs_max>
 8005638:	4602      	mov	r2, r0
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34
 800563e:	e000      	b.n	8005642 <lfs_file_flush+0x162>
                break;
 8005640:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800566e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3774      	adds	r7, #116	; 0x74
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}
 800567a:	bf00      	nop
 800567c:	08009ec8 	.word	0x08009ec8
 8005680:	08009d80 	.word	0x08009d80
 8005684:	08009f44 	.word	0x08009f44

08005688 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b090      	sub	sp, #64	; 0x40
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800569e:	2300      	movs	r3, #0
 80056a0:	e08e      	b.n	80057c0 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff1b 	bl	80054e0 <lfs_file_flush>
 80056aa:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	e07e      	b.n	80057c0 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d077      	beq.n	80057be <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	3308      	adds	r3, #8
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb fd69 	bl	80011aa <lfs_pair_isnull>
 80056d8:	4603      	mov	r3, r0
 80056da:	f083 0301 	eor.w	r3, r3, #1
 80056de:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d06c      	beq.n	80057be <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f103 0110 	add.w	r1, r3, #16
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	2300      	movs	r3, #0
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fb fbea 	bl	8000ed4 <lfs_bd_sync>
 8005700:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <lfs_file_sync_+0x84>
                return err;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	e059      	b.n	80057c0 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005718:	f240 2301 	movw	r3, #513	; 0x201
 800571c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
 800572a:	e014      	b.n	8005756 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800572c:	f240 2302 	movw	r3, #514	; 0x202
 8005730:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005738:	3228      	adds	r2, #40	; 0x28
 800573a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800573e:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb ff9e 	bl	8001688 <lfs_ctz_tole32>
            buffer = &ctz;
 800574c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005750:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8005752:	2308      	movs	r3, #8
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f103 0108 	add.w	r1, r3, #8
 800575c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800575e:	051a      	lsls	r2, r3, #20
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	889b      	ldrh	r3, [r3, #4]
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	431a      	orrs	r2, r3
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	4313      	orrs	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	889b      	ldrh	r3, [r3, #4]
 8005776:	029a      	lsls	r2, r3, #10
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	f107 0218 	add.w	r2, r7, #24
 8005792:	2302      	movs	r3, #2
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff f945 	bl	8004a24 <lfs_dir_commit>
 800579a:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	e006      	b.n	80057c0 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3740      	adds	r7, #64	; 0x40
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80057c8:	b5b0      	push	{r4, r5, r7, lr}
 80057ca:	b090      	sub	sp, #64	; 0x40
 80057cc:	af06      	add	r7, sp, #24
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d301      	bcc.n	80057ee <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e0b7      	b.n	800595e <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6838      	ldr	r0, [r7, #0]
 80057fc:	f7fb f831 	bl	8000862 <lfs_min>
 8005800:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005806:	e0a5      	b.n	8005954 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581c:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d130      	bne.n	8005884 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11c      	bne.n	8005868 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	3138      	adds	r1, #56	; 0x38
 8005844:	68b8      	ldr	r0, [r7, #8]
 8005846:	303c      	adds	r0, #60	; 0x3c
 8005848:	9003      	str	r0, [sp, #12]
 800584a:	9102      	str	r1, [sp, #8]
 800584c:	9201      	str	r2, [sp, #4]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	462b      	mov	r3, r5
 8005852:	4622      	mov	r2, r4
 8005854:	2100      	movs	r1, #0
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff f941 	bl	8004ade <lfs_ctz_find>
 800585c:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <lfs_file_flushedread+0xb0>
                    return err;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	e07a      	b.n	800595e <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f06f 0201 	mvn.w	r2, #1
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	4619      	mov	r1, r3
 8005892:	6a38      	ldr	r0, [r7, #32]
 8005894:	f7fa ffe5 	bl	8000862 <lfs_min>
 8005898:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d026      	beq.n	80058f4 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f103 0408 	add.w	r4, r3, #8
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b6:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	889b      	ldrh	r3, [r3, #4]
 80058bc:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80058be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	9005      	str	r0, [sp, #20]
 80058ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058d0:	9004      	str	r0, [sp, #16]
 80058d2:	9103      	str	r1, [sp, #12]
 80058d4:	9302      	str	r3, [sp, #8]
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <lfs_file_flushedread+0x1a0>)
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	9200      	str	r2, [sp, #0]
 80058dc:	462b      	mov	r3, r5
 80058de:	2200      	movs	r2, #0
 80058e0:	4621      	mov	r1, r4
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7fc fa03 	bl	8001cee <lfs_dir_getread>
 80058e8:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01d      	beq.n	800592c <lfs_file_flushedread+0x164>
                return err;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	e034      	b.n	800595e <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fe:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	9103      	str	r1, [sp, #12]
 800590c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800590e:	9102      	str	r1, [sp, #8]
 8005910:	9201      	str	r2, [sp, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4623      	mov	r3, r4
 8005916:	4602      	mov	r2, r0
 8005918:	2100      	movs	r1, #0
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fb f87c 	bl	8000a18 <lfs_bd_read>
 8005920:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <lfs_file_flushedread+0x164>
                return err;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	e018      	b.n	800595e <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	441a      	add	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	441a      	add	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	4413      	add	r3, r2
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f47f af56 	bne.w	8005808 <lfs_file_flushedread+0x40>
    }

    return size;
 800595c:	683b      	ldr	r3, [r7, #0]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3728      	adds	r7, #40	; 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bdb0      	pop	{r4, r5, r7, pc}
 8005966:	bf00      	nop
 8005968:	fff7fc00 	.word	0xfff7fc00

0800596c <lfs_file_flushedwrite>:
}


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800596c:	b5b0      	push	{r4, r5, r7, lr}
 800596e:	b090      	sub	sp, #64	; 0x40
 8005970:	af04      	add	r7, sp, #16
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80f4 	beq.w	8005b78 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	441a      	add	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7fa ff4f 	bl	8000842 <lfs_max>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80059aa:	429a      	cmp	r2, r3
 80059ac:	f240 80e4 	bls.w	8005b78 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fd72 	bl	800549c <lfs_file_outline>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80db 	beq.w	8005b78 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	e0d7      	b.n	8005b82 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d006      	beq.n	80059ec <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e6:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d16d      	bne.n	8005ac8 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d159      	bne.n	8005aac <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d12f      	bne.n	8005a64 <lfs_file_flushedwrite+0xf8>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02b      	beq.n	8005a64 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005a24:	2000      	movs	r0, #0
 8005a26:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a28:	f107 0010 	add.w	r0, r7, #16
 8005a2c:	9003      	str	r0, [sp, #12]
 8005a2e:	9102      	str	r1, [sp, #8]
 8005a30:	9201      	str	r2, [sp, #4]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	462b      	mov	r3, r5
 8005a36:	4622      	mov	r2, r4
 8005a38:	2100      	movs	r1, #0
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7ff f84f 	bl	8004ade <lfs_ctz_find>
 8005a40:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	e094      	b.n	8005b82 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	3340      	adds	r3, #64	; 0x40
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7fa ffc4 	bl	80009ec <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7fb ff12 	bl	800188e <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005a70:	68fc      	ldr	r4, [r7, #12]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	3238      	adds	r2, #56	; 0x38
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	313c      	adds	r1, #60	; 0x3c
 8005a82:	9102      	str	r1, [sp, #8]
 8005a84:	9201      	str	r2, [sp, #4]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	462b      	mov	r3, r5
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff f890 	bl	8004bb4 <lfs_ctz_extend>
 8005a94:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00f      	beq.n	8005abc <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	e06a      	b.n	8005b82 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f06f 0201 	mvn.w	r2, #1
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005acc:	69da      	ldr	r2, [r3, #28]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad8:	f7fa fec3 	bl	8000862 <lfs_min>
 8005adc:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005ae4:	68fc      	ldr	r4, [r7, #12]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aee:	69b9      	ldr	r1, [r7, #24]
 8005af0:	9103      	str	r1, [sp, #12]
 8005af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af4:	9102      	str	r1, [sp, #8]
 8005af6:	9201      	str	r2, [sp, #4]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2301      	movs	r3, #1
 8005afc:	4622      	mov	r2, r4
 8005afe:	4601      	mov	r1, r0
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7fb fa1b 	bl	8000f3c <lfs_bd_prog>
 8005b06:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01c      	beq.n	8005b48 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b14:	d007      	beq.n	8005b26 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	e02d      	b.n	8005b82 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8005b26:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fbdc 	bl	80052e8 <lfs_file_relocate>
 8005b30:	6178      	str	r0, [r7, #20]
            if (err) {
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0d2      	beq.n	8005ade <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	e01c      	b.n	8005b82 <lfs_file_flushedwrite+0x216>
            break;
 8005b48:	bf00      	nop
            }
        }

        file->pos += diff;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	441a      	add	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	4413      	add	r3, r2
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ckpoint(lfs);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7fb fe8b 	bl	800188e <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f47f af29 	bne.w	80059d2 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8005b80:	683b      	ldr	r3, [r7, #0]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3730      	adds	r7, #48	; 0x30
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b8c <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <lfs_file_write_+0x28>
 8005ba6:	4b38      	ldr	r3, [pc, #224]	; (8005c88 <lfs_file_write_+0xfc>)
 8005ba8:	4a38      	ldr	r2, [pc, #224]	; (8005c8c <lfs_file_write_+0x100>)
 8005baa:	f640 6149 	movw	r1, #3657	; 0xe49
 8005bae:	4838      	ldr	r0, [pc, #224]	; (8005c90 <lfs_file_write_+0x104>)
 8005bb0:	f003 f8a4 	bl	8008cfc <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff fc8c 	bl	80054e0 <lfs_file_flush>
 8005bc8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <lfs_file_write_+0x48>
            return err;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	e055      	b.n	8005c80 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <lfs_file_write_+0x68>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d203      	bcs.n	8005bf4 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	441a      	add	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d902      	bls.n	8005c0a <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005c04:	f06f 031a 	mvn.w	r3, #26
 8005c08:	e03a      	b.n	8005c80 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d121      	bne.n	8005c5a <lfs_file_write_+0xce>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d91b      	bls.n	8005c5a <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c26:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005c30:	e00e      	b.n	8005c50 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005c32:	2300      	movs	r3, #0
 8005c34:	75fb      	strb	r3, [r7, #23]
 8005c36:	f107 0217 	add.w	r2, r7, #23
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fe94 	bl	800596c <lfs_file_flushedwrite>
 8005c44:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	da01      	bge.n	8005c50 <lfs_file_write_+0xc4>
                return res;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	e017      	b.n	8005c80 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	6a3a      	ldr	r2, [r7, #32]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d8eb      	bhi.n	8005c32 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff fe83 	bl	800596c <lfs_file_flushedwrite>
 8005c66:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da01      	bge.n	8005c72 <lfs_file_write_+0xe6>
        return nsize;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	e006      	b.n	8005c80 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005c7e:	69bb      	ldr	r3, [r7, #24]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	; 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0800a11c 	.word	0x0800a11c
 8005c8c:	0800ac08 	.word	0x0800ac08
 8005c90:	08009d80 	.word	0x08009d80

08005c94 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b08d      	sub	sp, #52	; 0x34
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6a1a      	ldr	r2, [r3, #32]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    // note the most common reason for this failure is a before-c99 compiler,
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // check that the required io functions are provided
    LFS_ASSERT(lfs->cfg->read != NULL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <lfs_init+0x34>
 8005cba:	4b98      	ldr	r3, [pc, #608]	; (8005f1c <lfs_init+0x288>)
 8005cbc:	4a98      	ldr	r2, [pc, #608]	; (8005f20 <lfs_init+0x28c>)
 8005cbe:	f241 0176 	movw	r1, #4214	; 0x1076
 8005cc2:	4898      	ldr	r0, [pc, #608]	; (8005f24 <lfs_init+0x290>)
 8005cc4:	f003 f81a 	bl	8008cfc <__assert_func>
#ifndef LFS_READONLY
    LFS_ASSERT(lfs->cfg->prog != NULL);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <lfs_init+0x4c>
 8005cd2:	4b95      	ldr	r3, [pc, #596]	; (8005f28 <lfs_init+0x294>)
 8005cd4:	4a92      	ldr	r2, [pc, #584]	; (8005f20 <lfs_init+0x28c>)
 8005cd6:	f241 0178 	movw	r1, #4216	; 0x1078
 8005cda:	4892      	ldr	r0, [pc, #584]	; (8005f24 <lfs_init+0x290>)
 8005cdc:	f003 f80e 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs->cfg->erase != NULL);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <lfs_init+0x64>
 8005cea:	4b90      	ldr	r3, [pc, #576]	; (8005f2c <lfs_init+0x298>)
 8005cec:	4a8c      	ldr	r2, [pc, #560]	; (8005f20 <lfs_init+0x28c>)
 8005cee:	f241 0179 	movw	r1, #4217	; 0x1079
 8005cf2:	488c      	ldr	r0, [pc, #560]	; (8005f24 <lfs_init+0x290>)
 8005cf4:	f003 f802 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs->cfg->sync != NULL);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <lfs_init+0x7c>
 8005d02:	4b8b      	ldr	r3, [pc, #556]	; (8005f30 <lfs_init+0x29c>)
 8005d04:	4a86      	ldr	r2, [pc, #536]	; (8005f20 <lfs_init+0x28c>)
 8005d06:	f241 017a 	movw	r1, #4218	; 0x107a
 8005d0a:	4886      	ldr	r0, [pc, #536]	; (8005f24 <lfs_init+0x290>)
 8005d0c:	f002 fff6 	bl	8008cfc <__assert_func>
#endif

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <lfs_init+0x94>
 8005d1a:	4b86      	ldr	r3, [pc, #536]	; (8005f34 <lfs_init+0x2a0>)
 8005d1c:	4a80      	ldr	r2, [pc, #512]	; (8005f20 <lfs_init+0x28c>)
 8005d1e:	f241 017f 	movw	r1, #4223	; 0x107f
 8005d22:	4880      	ldr	r0, [pc, #512]	; (8005f24 <lfs_init+0x290>)
 8005d24:	f002 ffea 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <lfs_init+0xac>
 8005d32:	4b81      	ldr	r3, [pc, #516]	; (8005f38 <lfs_init+0x2a4>)
 8005d34:	4a7a      	ldr	r2, [pc, #488]	; (8005f20 <lfs_init+0x28c>)
 8005d36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8005d3a:	487a      	ldr	r0, [pc, #488]	; (8005f24 <lfs_init+0x290>)
 8005d3c:	f002 ffde 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <lfs_init+0xc4>
 8005d4a:	4b7c      	ldr	r3, [pc, #496]	; (8005f3c <lfs_init+0x2a8>)
 8005d4c:	4a74      	ldr	r2, [pc, #464]	; (8005f20 <lfs_init+0x28c>)
 8005d4e:	f241 0181 	movw	r1, #4225	; 0x1081
 8005d52:	4874      	ldr	r0, [pc, #464]	; (8005f24 <lfs_init+0x290>)
 8005d54:	f002 ffd2 	bl	8008cfc <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d62:	6952      	ldr	r2, [r2, #20]
 8005d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d68:	fb01 f202 	mul.w	r2, r1, r2
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <lfs_init+0xec>
 8005d72:	4b73      	ldr	r3, [pc, #460]	; (8005f40 <lfs_init+0x2ac>)
 8005d74:	4a6a      	ldr	r2, [pc, #424]	; (8005f20 <lfs_init+0x28c>)
 8005d76:	f241 0185 	movw	r1, #4229	; 0x1085
 8005d7a:	486a      	ldr	r0, [pc, #424]	; (8005f24 <lfs_init+0x290>)
 8005d7c:	f002 ffbe 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d8a:	6992      	ldr	r2, [r2, #24]
 8005d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d90:	fb01 f202 	mul.w	r2, r1, r2
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d006      	beq.n	8005da8 <lfs_init+0x114>
 8005d9a:	4b6a      	ldr	r3, [pc, #424]	; (8005f44 <lfs_init+0x2b0>)
 8005d9c:	4a60      	ldr	r2, [pc, #384]	; (8005f20 <lfs_init+0x28c>)
 8005d9e:	f241 0186 	movw	r1, #4230	; 0x1086
 8005da2:	4860      	ldr	r0, [pc, #384]	; (8005f24 <lfs_init+0x290>)
 8005da4:	f002 ffaa 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005db2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005db8:	fb01 f202 	mul.w	r2, r1, r2
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d006      	beq.n	8005dd0 <lfs_init+0x13c>
 8005dc2:	4b61      	ldr	r3, [pc, #388]	; (8005f48 <lfs_init+0x2b4>)
 8005dc4:	4a56      	ldr	r2, [pc, #344]	; (8005f20 <lfs_init+0x28c>)
 8005dc6:	f241 0187 	movw	r1, #4231	; 0x1087
 8005dca:	4856      	ldr	r0, [pc, #344]	; (8005f24 <lfs_init+0x290>)
 8005dcc:	f002 ff96 	bl	8008cfc <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd8:	d806      	bhi.n	8005de8 <lfs_init+0x154>
 8005dda:	4b5c      	ldr	r3, [pc, #368]	; (8005f4c <lfs_init+0x2b8>)
 8005ddc:	4a50      	ldr	r2, [pc, #320]	; (8005f20 <lfs_init+0x28c>)
 8005dde:	f241 018a 	movw	r1, #4234	; 0x108a
 8005de2:	4850      	ldr	r0, [pc, #320]	; (8005f24 <lfs_init+0x290>)
 8005de4:	f002 ff8a 	bl	8008cfc <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	3b08      	subs	r3, #8
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fa fd69 	bl	80008d0 <lfs_npw2>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	009a      	lsls	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d906      	bls.n	8005e1a <lfs_init+0x186>
 8005e0c:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <lfs_init+0x2bc>)
 8005e0e:	4a44      	ldr	r2, [pc, #272]	; (8005f20 <lfs_init+0x28c>)
 8005e10:	f241 018d 	movw	r1, #4237	; 0x108d
 8005e14:	4843      	ldr	r0, [pc, #268]	; (8005f24 <lfs_init+0x290>)
 8005e16:	f002 ff71 	bl	8008cfc <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <lfs_init+0x19e>
 8005e24:	4b4b      	ldr	r3, [pc, #300]	; (8005f54 <lfs_init+0x2c0>)
 8005e26:	4a3e      	ldr	r2, [pc, #248]	; (8005f20 <lfs_init+0x28c>)
 8005e28:	f241 0196 	movw	r1, #4246	; 0x1096
 8005e2c:	483d      	ldr	r0, [pc, #244]	; (8005f24 <lfs_init+0x290>)
 8005e2e:	f002 ff65 	bl	8008cfc <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00f      	beq.n	8005e5c <lfs_init+0x1c8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d206      	bcs.n	8005e5c <lfs_init+0x1c8>
 8005e4e:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <lfs_init+0x2c4>)
 8005e50:	4a33      	ldr	r2, [pc, #204]	; (8005f20 <lfs_init+0x28c>)
 8005e52:	f241 019c 	movw	r1, #4252	; 0x109c
 8005e56:	4833      	ldr	r0, [pc, #204]	; (8005f24 <lfs_init+0x290>)
 8005e58:	f002 ff50 	bl	8008cfc <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d00e      	beq.n	8005e86 <lfs_init+0x1f2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d906      	bls.n	8005e86 <lfs_init+0x1f2>
 8005e78:	4b38      	ldr	r3, [pc, #224]	; (8005f5c <lfs_init+0x2c8>)
 8005e7a:	4a29      	ldr	r2, [pc, #164]	; (8005f20 <lfs_init+0x28c>)
 8005e7c:	f241 019e 	movw	r1, #4254	; 0x109e
 8005e80:	4828      	ldr	r0, [pc, #160]	; (8005f24 <lfs_init+0x290>)
 8005e82:	f002 ff3b 	bl	8008cfc <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // check that metadata_max is a multiple of read_size and prog_size,
    // and a factor of the block_size
    LFS_ASSERT(!lfs->cfg->metadata_max
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <lfs_init+0x224>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e9a:	6952      	ldr	r2, [r2, #20]
 8005e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ea0:	fb01 f202 	mul.w	r2, r1, r2
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <lfs_init+0x224>
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <lfs_init+0x2cc>)
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <lfs_init+0x28c>)
 8005eae:	f241 01a3 	movw	r1, #4259	; 0x10a3
 8005eb2:	481c      	ldr	r0, [pc, #112]	; (8005f24 <lfs_init+0x290>)
 8005eb4:	f002 ff22 	bl	8008cfc <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->read_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d013      	beq.n	8005eea <lfs_init+0x256>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ecc:	6992      	ldr	r2, [r2, #24]
 8005ece:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ed2:	fb01 f202 	mul.w	r2, r1, r2
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <lfs_init+0x256>
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <lfs_init+0x2d0>)
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <lfs_init+0x28c>)
 8005ee0:	f241 01a5 	movw	r1, #4261	; 0x10a5
 8005ee4:	480f      	ldr	r0, [pc, #60]	; (8005f24 <lfs_init+0x290>)
 8005ee6:	f002 ff09 	bl	8008cfc <__assert_func>
            || lfs->cfg->metadata_max % lfs->cfg->prog_size == 0);
    LFS_ASSERT(!lfs->cfg->metadata_max
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d03b      	beq.n	8005f6c <lfs_init+0x2d8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005efe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f04:	fb01 f202 	mul.w	r2, r1, r2
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d02e      	beq.n	8005f6c <lfs_init+0x2d8>
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <lfs_init+0x2d4>)
 8005f10:	4a03      	ldr	r2, [pc, #12]	; (8005f20 <lfs_init+0x28c>)
 8005f12:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8005f16:	4803      	ldr	r0, [pc, #12]	; (8005f24 <lfs_init+0x290>)
 8005f18:	f002 fef0 	bl	8008cfc <__assert_func>
 8005f1c:	0800a14c 	.word	0x0800a14c
 8005f20:	0800ac18 	.word	0x0800ac18
 8005f24:	08009d80 	.word	0x08009d80
 8005f28:	0800a16c 	.word	0x0800a16c
 8005f2c:	0800a18c 	.word	0x0800a18c
 8005f30:	0800a1ac 	.word	0x0800a1ac
 8005f34:	0800a1cc 	.word	0x0800a1cc
 8005f38:	0800a1e8 	.word	0x0800a1e8
 8005f3c:	0800a204 	.word	0x0800a204
 8005f40:	0800a220 	.word	0x0800a220
 8005f44:	0800a250 	.word	0x0800a250
 8005f48:	0800a280 	.word	0x0800a280
 8005f4c:	0800a2b4 	.word	0x0800a2b4
 8005f50:	0800a2d0 	.word	0x0800a2d0
 8005f54:	0800a31c 	.word	0x0800a31c
 8005f58:	0800a338 	.word	0x0800a338
 8005f5c:	0800a38c 	.word	0x0800a38c
 8005f60:	0800a3ec 	.word	0x0800a3ec
 8005f64:	0800a43c 	.word	0x0800a43c
 8005f68:	0800a48c 	.word	0x0800a48c
            || lfs->cfg->block_size % lfs->cfg->metadata_max == 0);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <lfs_init+0x2ee>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	e010      	b.n	8005fa4 <lfs_init+0x310>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fd09 	bl	80009a0 <lfs_malloc>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d103      	bne.n	8005fa4 <lfs_init+0x310>
            err = LFS_ERR_NOMEM;
 8005f9c:	f06f 030b 	mvn.w	r3, #11
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005fa2:	e145      	b.n	8006230 <lfs_init+0x59c>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <lfs_init+0x326>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	61da      	str	r2, [r3, #28]
 8005fb8:	e010      	b.n	8005fdc <lfs_init+0x348>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fa fced 	bl	80009a0 <lfs_malloc>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d103      	bne.n	8005fdc <lfs_init+0x348>
            err = LFS_ERR_NOMEM;
 8005fd4:	f06f 030b 	mvn.w	r3, #11
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005fda:	e129      	b.n	8006230 <lfs_init+0x59c>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fa fd03 	bl	80009ec <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3310      	adds	r3, #16
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fa fcfd 	bl	80009ec <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <lfs_init+0x376>
 8005ffc:	4b90      	ldr	r3, [pc, #576]	; (8006240 <lfs_init+0x5ac>)
 8005ffe:	4a91      	ldr	r2, [pc, #580]	; (8006244 <lfs_init+0x5b0>)
 8006000:	f241 01c6 	movw	r1, #4294	; 0x10c6
 8006004:	4890      	ldr	r0, [pc, #576]	; (8006248 <lfs_init+0x5b4>)
 8006006:	f002 fe79 	bl	8008cfc <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <lfs_init+0x38c>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	665a      	str	r2, [r3, #100]	; 0x64
 800601e:	e010      	b.n	8006042 <lfs_init+0x3ae>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	4618      	mov	r0, r3
 8006028:	f7fa fcba 	bl	80009a0 <lfs_malloc>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->lookahead.buffer) {
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <lfs_init+0x3ae>
            err = LFS_ERR_NOMEM;
 800603a:	f06f 030b 	mvn.w	r3, #11
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006040:	e0f6      	b.n	8006230 <lfs_init+0x59c>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	2bff      	cmp	r3, #255	; 0xff
 800604a:	d906      	bls.n	800605a <lfs_init+0x3c6>
 800604c:	4b7f      	ldr	r3, [pc, #508]	; (800624c <lfs_init+0x5b8>)
 800604e:	4a7d      	ldr	r2, [pc, #500]	; (8006244 <lfs_init+0x5b0>)
 8006050:	f241 01d2 	movw	r1, #4306	; 0x10d2
 8006054:	487c      	ldr	r0, [pc, #496]	; (8006248 <lfs_init+0x5b4>)
 8006056:	f002 fe51 	bl	8008cfc <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <lfs_init+0x3de>
        lfs->name_max = LFS_NAME_MAX;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	2b00      	cmp	r3, #0
 800607a:	da06      	bge.n	800608a <lfs_init+0x3f6>
 800607c:	4b74      	ldr	r3, [pc, #464]	; (8006250 <lfs_init+0x5bc>)
 800607e:	4a71      	ldr	r2, [pc, #452]	; (8006244 <lfs_init+0x5b0>)
 8006080:	f241 01d8 	movw	r1, #4312	; 0x10d8
 8006084:	4870      	ldr	r0, [pc, #448]	; (8006248 <lfs_init+0x5b4>)
 8006086:	f002 fe39 	bl	8008cfc <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800608e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <lfs_init+0x410>
        lfs->file_max = LFS_FILE_MAX;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80060a2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060aa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d906      	bls.n	80060c0 <lfs_init+0x42c>
 80060b2:	4b68      	ldr	r3, [pc, #416]	; (8006254 <lfs_init+0x5c0>)
 80060b4:	4a63      	ldr	r2, [pc, #396]	; (8006244 <lfs_init+0x5b0>)
 80060b6:	f241 01de 	movw	r1, #4318	; 0x10de
 80060ba:	4863      	ldr	r0, [pc, #396]	; (8006248 <lfs_init+0x5b4>)
 80060bc:	f002 fe1e 	bl	8008cfc <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <lfs_init+0x446>
        lfs->attr_max = LFS_ATTR_MAX;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80060d8:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d906      	bls.n	80060f8 <lfs_init+0x464>
 80060ea:	4b5b      	ldr	r3, [pc, #364]	; (8006258 <lfs_init+0x5c4>)
 80060ec:	4a55      	ldr	r2, [pc, #340]	; (8006244 <lfs_init+0x5b0>)
 80060ee:	f241 01e4 	movw	r1, #4324	; 0x10e4
 80060f2:	4855      	ldr	r0, [pc, #340]	; (8006248 <lfs_init+0x5b4>)
 80060f4:	f002 fe02 	bl	8008cfc <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d00e      	beq.n	8006122 <lfs_init+0x48e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	429a      	cmp	r2, r3
 8006112:	d906      	bls.n	8006122 <lfs_init+0x48e>
 8006114:	4b51      	ldr	r3, [pc, #324]	; (800625c <lfs_init+0x5c8>)
 8006116:	4a4b      	ldr	r2, [pc, #300]	; (8006244 <lfs_init+0x5b0>)
 8006118:	f241 01e6 	movw	r1, #4326	; 0x10e6
 800611c:	484a      	ldr	r0, [pc, #296]	; (8006248 <lfs_init+0x5b4>)
 800611e:	f002 fded 	bl	8008cfc <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d00d      	beq.n	800614a <lfs_init+0x4b6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006138:	429a      	cmp	r2, r3
 800613a:	d906      	bls.n	800614a <lfs_init+0x4b6>
 800613c:	4b48      	ldr	r3, [pc, #288]	; (8006260 <lfs_init+0x5cc>)
 800613e:	4a41      	ldr	r2, [pc, #260]	; (8006244 <lfs_init+0x5b0>)
 8006140:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8006144:	4840      	ldr	r0, [pc, #256]	; (8006248 <lfs_init+0x5b4>)
 8006146:	f002 fdd9 	bl	8008cfc <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d019      	beq.n	800618a <lfs_init+0x4f6>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <lfs_init+0x4dc>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616c:	08db      	lsrs	r3, r3, #3
 800616e:	e003      	b.n	8006178 <lfs_init+0x4e4>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	4293      	cmp	r3, r2
 800617a:	d206      	bcs.n	800618a <lfs_init+0x4f6>
 800617c:	4b39      	ldr	r3, [pc, #228]	; (8006264 <lfs_init+0x5d0>)
 800617e:	4a31      	ldr	r2, [pc, #196]	; (8006244 <lfs_init+0x5b0>)
 8006180:	f241 01ea 	movw	r1, #4330	; 0x10ea
 8006184:	4830      	ldr	r0, [pc, #192]	; (8006248 <lfs_init+0x5b4>)
 8006186:	f002 fdb9 	bl	8008cfc <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	67da      	str	r2, [r3, #124]	; 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d103      	bne.n	80061a6 <lfs_init+0x512>
        lfs->inline_max = 0;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80061a4:	e022      	b.n	80061ec <lfs_init+0x558>
    } else if (lfs->inline_max == 0) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11e      	bne.n	80061ec <lfs_init+0x558>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        lfs->inline_max = lfs_min(
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <lfs_init+0x538>
                        ? lfs->cfg->metadata_max
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 80061c8:	08db      	lsrs	r3, r3, #3
 80061ca:	e003      	b.n	80061d4 <lfs_init+0x540>
                        : lfs->cfg->block_size)/8));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d0:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fa fb43 	bl	8000862 <lfs_min>
 80061dc:	4603      	mov	r3, r0
 80061de:	4619      	mov	r1, r3
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7fa fb3e 	bl	8000862 <lfs_min>
 80061e6:	4602      	mov	r2, r0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f04f 32ff 	mov.w	r2, #4294967295
 80061f2:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f04f 32ff 	mov.w	r2, #4294967295
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	333c      	adds	r3, #60	; 0x3c
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3330      	adds	r3, #48	; 0x30
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3348      	adds	r3, #72	; 0x48
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800622c:	2300      	movs	r3, #0
 800622e:	e003      	b.n	8006238 <lfs_init+0x5a4>

cleanup:
    lfs_deinit(lfs);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f819 	bl	8006268 <lfs_deinit>
    return err;
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006238:	4618      	mov	r0, r3
 800623a:	3734      	adds	r7, #52	; 0x34
 800623c:	46bd      	mov	sp, r7
 800623e:	bd90      	pop	{r4, r7, pc}
 8006240:	0800a4dc 	.word	0x0800a4dc
 8006244:	0800ac18 	.word	0x0800ac18
 8006248:	08009d80 	.word	0x08009d80
 800624c:	0800a4fc 	.word	0x0800a4fc
 8006250:	0800a518 	.word	0x0800a518
 8006254:	0800a53c 	.word	0x0800a53c
 8006258:	0800a558 	.word	0x0800a558
 800625c:	0800a588 	.word	0x0800a588
 8006260:	0800a5e0 	.word	0x0800a5e0
 8006264:	0800a630 	.word	0x0800a630

08006268 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fa fb9a 	bl	80009b8 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa fb90 	bl	80009b8 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d104      	bne.n	80062ac <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fa fb86 	bl	80009b8 <lfs_free>
    }

    return 0;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b0a0      	sub	sp, #128	; 0x80
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
    int err = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fce3 	bl	8005c94 <lfs_init>
 80062ce:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80062d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <lfs_format_+0x22>
            return err;
 80062d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062d8:	e08d      	b.n	80063f6 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <lfs_format_+0x38>
 80062e2:	4b47      	ldr	r3, [pc, #284]	; (8006400 <lfs_format_+0x148>)
 80062e4:	4a47      	ldr	r2, [pc, #284]	; (8006404 <lfs_format_+0x14c>)
 80062e6:	f241 112a 	movw	r1, #4394	; 0x112a
 80062ea:	4847      	ldr	r0, [pc, #284]	; (8006408 <lfs_format_+0x150>)
 80062ec:	f002 fd06 	bl	8008cfc <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	461a      	mov	r2, r3
 80062fc:	2100      	movs	r1, #0
 80062fe:	f002 ff10 	bl	8009122 <memset>
        lfs->lookahead.start = 0;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	00da      	lsls	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fa faa3 	bl	8000862 <lfs_min>
 800631c:	4602      	mov	r2, r0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ckpoint(lfs);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fb fab0 	bl	800188e <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800632e:	f107 030c 	add.w	r3, r7, #12
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fd f987 	bl	8003648 <lfs_dir_alloc>
 800633a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800633c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d150      	bne.n	80063e4 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fa7a 	bl	800183c <lfs_fs_disk_version>
 8006348:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 800634a:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006350:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8006352:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8006358:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800635e:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8006364:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 800636a:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800636c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006370:	4618      	mov	r0, r3
 8006372:	f7fb f9d9 	bl	8001728 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006376:	4b25      	ldr	r3, [pc, #148]	; (800640c <lfs_format_+0x154>)
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637a:	2300      	movs	r3, #0
 800637c:	653b      	str	r3, [r7, #80]	; 0x50
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <lfs_format_+0x158>)
 8006380:	657b      	str	r3, [r7, #84]	; 0x54
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <lfs_format_+0x15c>)
 8006384:	65bb      	str	r3, [r7, #88]	; 0x58
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <lfs_format_+0x160>)
 8006388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800638e:	663b      	str	r3, [r7, #96]	; 0x60
 8006390:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006394:	f107 010c 	add.w	r1, r7, #12
 8006398:	2303      	movs	r3, #3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fe fb42 	bl	8004a24 <lfs_dir_commit>
 80063a0:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80063a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11f      	bne.n	80063e8 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80063a8:	2300      	movs	r3, #0
 80063aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80063ae:	f107 010c 	add.w	r1, r7, #12
 80063b2:	2300      	movs	r3, #0
 80063b4:	2200      	movs	r2, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fe fb34 	bl	8004a24 <lfs_dir_commit>
 80063bc:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80063be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d113      	bne.n	80063ec <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80063c4:	2300      	movs	r3, #0
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c8:	2301      	movs	r3, #1
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
 80063cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80063d0:	f107 030c 	add.w	r3, r7, #12
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fc fd74 	bl	8002ec4 <lfs_dir_fetch>
 80063dc:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80063de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	e004      	b.n	80063ee <lfs_format_+0x136>
            goto cleanup;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <lfs_format_+0x136>
            goto cleanup;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <lfs_format_+0x136>
            goto cleanup;
 80063ec:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff ff3a 	bl	8006268 <lfs_deinit>
    return err;
 80063f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3780      	adds	r7, #128	; 0x80
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	0800a6c0 	.word	0x0800a6c0
 8006404:	0800ac24 	.word	0x0800ac24
 8006408:	08009d80 	.word	0x08009d80
 800640c:	40100000 	.word	0x40100000
 8006410:	0ff00008 	.word	0x0ff00008
 8006414:	0800a6d8 	.word	0x0800a6d8
 8006418:	20100018 	.word	0x20100018

0800641c <lfs_tortoise_detectcycles>:
    lfs_size_t i;
    lfs_size_t period;
};

static int lfs_tortoise_detectcycles(
    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
    // detect cycles with Brent's algorithm
    if (lfs_pair_issync(dir->tail, tortoise->pair)) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3318      	adds	r3, #24
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	4611      	mov	r1, r2
 800642e:	4618      	mov	r0, r3
 8006430:	f7fa ff00 	bl	8001234 <lfs_pair_issync>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <lfs_tortoise_detectcycles+0x32>
        LFS_WARN("Cycle detected in tail list");
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <lfs_tortoise_detectcycles+0x74>)
 800643c:	f241 126f 	movw	r2, #4463	; 0x116f
 8006440:	4914      	ldr	r1, [pc, #80]	; (8006494 <lfs_tortoise_detectcycles+0x78>)
 8006442:	4815      	ldr	r0, [pc, #84]	; (8006498 <lfs_tortoise_detectcycles+0x7c>)
 8006444:	f002 fe08 	bl	8009058 <iprintf>
        return LFS_ERR_CORRUPT;
 8006448:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800644c:	e01b      	b.n	8006486 <lfs_tortoise_detectcycles+0x6a>
    }
    if (tortoise->i == tortoise->period) {
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	429a      	cmp	r2, r3
 8006458:	d10f      	bne.n	800647a <lfs_tortoise_detectcycles+0x5e>
        tortoise->pair[0] = dir->tail[0];
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	601a      	str	r2, [r3, #0]
        tortoise->pair[1] = dir->tail[1];
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	605a      	str	r2, [r3, #4]
        tortoise->i = 0;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2200      	movs	r2, #0
 800646e:	609a      	str	r2, [r3, #8]
        tortoise->period *= 2;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	005a      	lsls	r2, r3, #1
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	60da      	str	r2, [r3, #12]
    }
    tortoise->i += 1;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	609a      	str	r2, [r3, #8]

    return LFS_ERR_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	08009ec8 	.word	0x08009ec8
 8006494:	08009d80 	.word	0x08009d80
 8006498:	0800a6e4 	.word	0x0800a6e4

0800649c <lfs_mount_>:

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649e:	b0a1      	sub	sp, #132	; 0x84
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fbf3 	bl	8005c94 <lfs_init>
 80064ae:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err) {
 80064b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <lfs_mount_+0x1e>
        return err;
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	e1e5      	b.n	8006886 <lfs_mount_+0x3ea>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80064ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064be:	2220      	movs	r2, #32
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f002 fe2d 	bl	8009122 <memset>
 80064c8:	2301      	movs	r3, #1
 80064ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    struct lfs_tortoise_t tortoise = {
 80064cc:	4ba0      	ldr	r3, [pc, #640]	; (8006750 <lfs_mount_+0x2b4>)
 80064ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80064d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    while (!lfs_pair_isnull(dir.tail)) {
 80064d8:	e17f      	b.n	80067da <lfs_mount_+0x33e>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 80064da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80064de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ff99 	bl	800641c <lfs_tortoise_detectcycles>
 80064ea:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err < 0) {
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f2c0 81c2 	blt.w	8006878 <lfs_mount_+0x3dc>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
 80064f8:	4b96      	ldr	r3, [pc, #600]	; (8006754 <lfs_mount_+0x2b8>)
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fc:	2308      	movs	r3, #8
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8006500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006504:	f103 0218 	add.w	r2, r3, #24
 8006508:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800650c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	4b91      	ldr	r3, [pc, #580]	; (8006758 <lfs_mount_+0x2bc>)
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	2300      	movs	r3, #0
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	4b90      	ldr	r3, [pc, #576]	; (800675c <lfs_mount_+0x2c0>)
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	4b90      	ldr	r3, [pc, #576]	; (8006760 <lfs_mount_+0x2c4>)
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fc f8ff 	bl	8002724 <lfs_dir_fetchmatch>
 8006526:	6678      	str	r0, [r7, #100]	; 0x64
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652a:	2b00      	cmp	r3, #0
 800652c:	da02      	bge.n	8006534 <lfs_mount_+0x98>
            err = tag;
 800652e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006530:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 8006532:	e1a4      	b.n	800687e <lfs_mount_+0x3e2>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8006534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 8142 	beq.w	80067c0 <lfs_mount_+0x324>
 800653c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800653e:	4618      	mov	r0, r3
 8006540:	f7fa fee7 	bl	8001312 <lfs_tag_isdelete>
 8006544:	4603      	mov	r3, r0
 8006546:	f083 0301 	eor.w	r3, r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8137 	beq.w	80067c0 <lfs_mount_+0x324>
            // update root
            lfs->root[0] = dir.pair[0];
 8006552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800655e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	4b7e      	ldr	r3, [pc, #504]	; (8006764 <lfs_mount_+0x2c8>)
 800656a:	4a7d      	ldr	r2, [pc, #500]	; (8006760 <lfs_mount_+0x2c4>)
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fb fba3 	bl	8001cb8 <lfs_dir_get>
 8006572:	6678      	str	r0, [r7, #100]	; 0x64
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006576:	2b00      	cmp	r3, #0
 8006578:	da02      	bge.n	8006580 <lfs_mount_+0xe4>
                err = tag;
 800657a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657c:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 800657e:	e17e      	b.n	800687e <lfs_mount_+0x3e2>
            }
            lfs_superblock_fromle32(&superblock);
 8006580:	f107 030c 	add.w	r3, r7, #12
 8006584:	4618      	mov	r0, r3
 8006586:	f7fb f897 	bl	80016b8 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0c1b      	lsrs	r3, r3, #16
 800658e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fb f95d 	bl	8001858 <lfs_fs_disk_version_major>
 800659e:	4603      	mov	r3, r0
 80065a0:	461a      	mov	r2, r3
 80065a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d108      	bne.n	80065bc <lfs_mount_+0x120>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb f962 	bl	8001874 <lfs_fs_disk_version_minor>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d91d      	bls.n	80065f8 <lfs_mount_+0x15c>
                LFS_ERROR("Invalid version "
 80065bc:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
 80065c0:	f8b7 4060 	ldrh.w	r4, [r7, #96]	; 0x60
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fb f947 	bl	8001858 <lfs_fs_disk_version_major>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461e      	mov	r6, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb f950 	bl	8001874 <lfs_fs_disk_version_minor>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b63      	ldr	r3, [pc, #396]	; (8006768 <lfs_mount_+0x2cc>)
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	9601      	str	r6, [sp, #4]
 80065e0:	9400      	str	r4, [sp, #0]
 80065e2:	462b      	mov	r3, r5
 80065e4:	f241 12b2 	movw	r2, #4530	; 0x11b2
 80065e8:	4960      	ldr	r1, [pc, #384]	; (800676c <lfs_mount_+0x2d0>)
 80065ea:	4861      	ldr	r0, [pc, #388]	; (8006770 <lfs_mount_+0x2d4>)
 80065ec:	f002 fd34 	bl	8009058 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80065f0:	f06f 0315 	mvn.w	r3, #21
 80065f4:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 80065f6:	e0e2      	b.n	80067be <lfs_mount_+0x322>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fb f938 	bl	8001874 <lfs_fs_disk_version_minor>
 8006604:	4603      	mov	r3, r0
 8006606:	461a      	mov	r2, r3
 8006608:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800660c:	4293      	cmp	r3, r2
 800660e:	d21c      	bcs.n	800664a <lfs_mount_+0x1ae>
                LFS_DEBUG("Found older minor version "
 8006610:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
 8006614:	f8b7 4060 	ldrh.w	r4, [r7, #96]	; 0x60
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7fb f91d 	bl	8001858 <lfs_fs_disk_version_major>
 800661e:	4603      	mov	r3, r0
 8006620:	461e      	mov	r6, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fb f926 	bl	8001874 <lfs_fs_disk_version_minor>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	4b4e      	ldr	r3, [pc, #312]	; (8006768 <lfs_mount_+0x2cc>)
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	9202      	str	r2, [sp, #8]
 8006632:	9601      	str	r6, [sp, #4]
 8006634:	9400      	str	r4, [sp, #0]
 8006636:	462b      	mov	r3, r5
 8006638:	f241 12c1 	movw	r2, #4545	; 0x11c1
 800663c:	494b      	ldr	r1, [pc, #300]	; (800676c <lfs_mount_+0x2d0>)
 800663e:	484d      	ldr	r0, [pc, #308]	; (8006774 <lfs_mount_+0x2d8>)
 8006640:	f002 fd0a 	bl	8009058 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 800664a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb4f 	bl	8006cf4 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d018      	beq.n	800668e <lfs_mount_+0x1f2>
                if (superblock.name_max > lfs->name_max) {
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006662:	429a      	cmp	r2, r3
 8006664:	d910      	bls.n	8006688 <lfs_mount_+0x1ec>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	493e      	ldr	r1, [pc, #248]	; (8006768 <lfs_mount_+0x2cc>)
 800666e:	9101      	str	r1, [sp, #4]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	4613      	mov	r3, r2
 8006674:	f241 12d0 	movw	r2, #4560	; 0x11d0
 8006678:	493c      	ldr	r1, [pc, #240]	; (800676c <lfs_mount_+0x2d0>)
 800667a:	483f      	ldr	r0, [pc, #252]	; (8006778 <lfs_mount_+0x2dc>)
 800667c:	f002 fcec 	bl	8009058 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006680:	f06f 0315 	mvn.w	r3, #21
 8006684:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8006686:	e09a      	b.n	80067be <lfs_mount_+0x322>
                }

                lfs->name_max = superblock.name_max;
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d018      	beq.n	80066c6 <lfs_mount_+0x22a>
                if (superblock.file_max > lfs->file_max) {
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669a:	429a      	cmp	r2, r3
 800669c:	d910      	bls.n	80066c0 <lfs_mount_+0x224>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a4:	4930      	ldr	r1, [pc, #192]	; (8006768 <lfs_mount_+0x2cc>)
 80066a6:	9101      	str	r1, [sp, #4]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	f241 12db 	movw	r2, #4571	; 0x11db
 80066b0:	492e      	ldr	r1, [pc, #184]	; (800676c <lfs_mount_+0x2d0>)
 80066b2:	4832      	ldr	r0, [pc, #200]	; (800677c <lfs_mount_+0x2e0>)
 80066b4:	f002 fcd0 	bl	8009058 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80066b8:	f06f 0315 	mvn.w	r3, #21
 80066bc:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 80066be:	e07e      	b.n	80067be <lfs_mount_+0x322>
                }

                lfs->file_max = superblock.file_max;
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d023      	beq.n	8006714 <lfs_mount_+0x278>
                if (superblock.attr_max > lfs->attr_max) {
 80066cc:	6a3a      	ldr	r2, [r7, #32]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d910      	bls.n	80066f8 <lfs_mount_+0x25c>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066dc:	4922      	ldr	r1, [pc, #136]	; (8006768 <lfs_mount_+0x2cc>)
 80066de:	9101      	str	r1, [sp, #4]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	f241 12e6 	movw	r2, #4582	; 0x11e6
 80066e8:	4920      	ldr	r1, [pc, #128]	; (800676c <lfs_mount_+0x2d0>)
 80066ea:	4825      	ldr	r0, [pc, #148]	; (8006780 <lfs_mount_+0x2e4>)
 80066ec:	f002 fcb4 	bl	8009058 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80066f0:	f06f 0315 	mvn.w	r3, #21
 80066f4:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 80066f6:	e062      	b.n	80067be <lfs_mount_+0x322>
                }

                lfs->attr_max = superblock.attr_max;
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	679a      	str	r2, [r3, #120]	; 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fa f8aa 	bl	8000862 <lfs_min>
 800670e:	4602      	mov	r2, r0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	67da      	str	r2, [r3, #124]	; 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d034      	beq.n	8006788 <lfs_mount_+0x2ec>
                    && superblock.block_count != lfs->cfg->block_count) {
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	429a      	cmp	r2, r3
 8006728:	d02e      	beq.n	8006788 <lfs_mount_+0x2ec>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	490d      	ldr	r1, [pc, #52]	; (8006768 <lfs_mount_+0x2cc>)
 8006734:	9101      	str	r1, [sp, #4]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	f241 12f5 	movw	r2, #4597	; 0x11f5
 800673e:	490b      	ldr	r1, [pc, #44]	; (800676c <lfs_mount_+0x2d0>)
 8006740:	4810      	ldr	r0, [pc, #64]	; (8006784 <lfs_mount_+0x2e8>)
 8006742:	f002 fc89 	bl	8009058 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006746:	f06f 0315 	mvn.w	r3, #21
 800674a:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 800674c:	e037      	b.n	80067be <lfs_mount_+0x322>
 800674e:	bf00      	nop
 8006750:	0800a8c0 	.word	0x0800a8c0
 8006754:	0800a6d8 	.word	0x0800a6d8
 8006758:	08002f61 	.word	0x08002f61
 800675c:	0ff00008 	.word	0x0ff00008
 8006760:	7ffffc00 	.word	0x7ffffc00
 8006764:	20100018 	.word	0x20100018
 8006768:	08009ec8 	.word	0x08009ec8
 800676c:	08009d80 	.word	0x08009d80
 8006770:	0800a710 	.word	0x0800a710
 8006774:	0800a748 	.word	0x0800a748
 8006778:	0800a788 	.word	0x0800a788
 800677c:	0800a7bc 	.word	0x0800a7bc
 8006780:	0800a7f0 	.word	0x0800a7f0
 8006784:	0800a824 	.word	0x0800a824
            }

            lfs->block_count = superblock.block_count;
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	429a      	cmp	r2, r3
 8006798:	d012      	beq.n	80067c0 <lfs_mount_+0x324>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	493b      	ldr	r1, [pc, #236]	; (8006890 <lfs_mount_+0x3f4>)
 80067a4:	9101      	str	r1, [sp, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4613      	mov	r3, r2
 80067aa:	f241 12fe 	movw	r2, #4606	; 0x11fe
 80067ae:	4939      	ldr	r1, [pc, #228]	; (8006894 <lfs_mount_+0x3f8>)
 80067b0:	4839      	ldr	r0, [pc, #228]	; (8006898 <lfs_mount_+0x3fc>)
 80067b2:	f002 fc51 	bl	8009058 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80067b6:	f06f 0315 	mvn.w	r3, #21
 80067ba:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 80067bc:	bf00      	nop
            goto cleanup;
 80067be:	e05b      	b.n	8006878 <lfs_mount_+0x3dc>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fc fb95 	bl	8002efc <lfs_dir_getgstate>
 80067d2:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 80067d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d150      	bne.n	800687c <lfs_mount_+0x3e0>
    while (!lfs_pair_isnull(dir.tail)) {
 80067da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067de:	3318      	adds	r3, #24
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fa fce2 	bl	80011aa <lfs_pair_isnull>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f083 0301 	eor.w	r3, r3, #1
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f47f ae73 	bne.w	80064da <lfs_mount_+0x3e>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3330      	adds	r3, #48	; 0x30
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fa fe38 	bl	800146e <lfs_gstate_iszero>
 80067fe:	4603      	mov	r3, r0
 8006800:	f083 0301 	eor.w	r3, r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <lfs_mount_+0x390>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006816:	481e      	ldr	r0, [pc, #120]	; (8006890 <lfs_mount_+0x3f4>)
 8006818:	9002      	str	r0, [sp, #8]
 800681a:	9201      	str	r2, [sp, #4]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	460b      	mov	r3, r1
 8006820:	f241 220e 	movw	r2, #4622	; 0x120e
 8006824:	491b      	ldr	r1, [pc, #108]	; (8006894 <lfs_mount_+0x3f8>)
 8006826:	481d      	ldr	r0, [pc, #116]	; (800689c <lfs_mount_+0x400>)
 8006828:	f002 fc16 	bl	8009058 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	4618      	mov	r0, r3
 8006832:	f7fa fd60 	bl	80012f6 <lfs_tag_isvalid>
 8006836:	4603      	mov	r3, r0
 8006838:	f083 0301 	eor.w	r3, r3, #1
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	333c      	adds	r3, #60	; 0x3c
 8006850:	3230      	adds	r2, #48	; 0x30
 8006852:	ca07      	ldmia	r2, {r0, r1, r2}
 8006854:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006860:	fbb3 f1f2 	udiv	r1, r3, r2
 8006864:	fb01 f202 	mul.w	r2, r1, r2
 8006868:	1a9a      	subs	r2, r3, r2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb f81b 	bl	80018aa <lfs_alloc_drop>

    return 0;
 8006874:	2300      	movs	r3, #0
 8006876:	e006      	b.n	8006886 <lfs_mount_+0x3ea>
            goto cleanup;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <lfs_mount_+0x3e2>
            goto cleanup;
 800687c:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f80e 	bl	80068a0 <lfs_unmount_>
    return err;
 8006884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8006886:	4618      	mov	r0, r3
 8006888:	3774      	adds	r7, #116	; 0x74
 800688a:	46bd      	mov	sp, r7
 800688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688e:	bf00      	nop
 8006890:	08009ec8 	.word	0x08009ec8
 8006894:	08009d80 	.word	0x08009d80
 8006898:	0800a858 	.word	0x0800a858
 800689c:	0800a888 	.word	0x0800a888

080068a0 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff fcdd 	bl	8006268 <lfs_deinit>
 80068ae:	4603      	mov	r3, r0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b0a1      	sub	sp, #132	; 0x84
 80068bc:	af04      	add	r7, sp, #16
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80068c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068ca:	2220      	movs	r2, #32
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 fc27 	bl	8009122 <memset>
 80068d4:	2301      	movs	r3, #1
 80068d6:	647b      	str	r3, [r7, #68]	; 0x44
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    struct lfs_tortoise_t tortoise = {
 80068d8:	4b8d      	ldr	r3, [pc, #564]	; (8006b10 <lfs_fs_traverse_+0x258>)
 80068da:	f107 0418 	add.w	r4, r7, #24
 80068de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80068e8:	e0a9      	b.n	8006a3e <lfs_fs_traverse_+0x186>
        err = lfs_tortoise_detectcycles(&dir, &tortoise);
 80068ea:	f107 0218 	add.w	r2, r7, #24
 80068ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fd91 	bl	800641c <lfs_tortoise_detectcycles>
 80068fa:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err < 0) {
 80068fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da02      	bge.n	8006908 <lfs_fs_traverse_+0x50>
            return LFS_ERR_CORRUPT;
 8006902:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006906:	e0ff      	b.n	8006b08 <lfs_fs_traverse_+0x250>
        }

        for (int i = 0; i < 2; i++) {
 8006908:	2300      	movs	r3, #0
 800690a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800690c:	e013      	b.n	8006936 <lfs_fs_traverse_+0x7e>
            int err = cb(data, dir.tail[i]);
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	3306      	adds	r3, #6
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	3370      	adds	r3, #112	; 0x70
 8006916:	443b      	add	r3, r7
 8006918:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4611      	mov	r1, r2
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
 8006924:	64b8      	str	r0, [r7, #72]	; 0x48
            if (err) {
 8006926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <lfs_fs_traverse_+0x78>
                return err;
 800692c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692e:	e0eb      	b.n	8006b08 <lfs_fs_traverse_+0x250>
        for (int i = 0; i < 2; i++) {
 8006930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006932:	3301      	adds	r3, #1
 8006934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	2b01      	cmp	r3, #1
 800693a:	dde8      	ble.n	800690e <lfs_fs_traverse_+0x56>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800693c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006940:	f103 0218 	add.w	r2, r3, #24
 8006944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006948:	4619      	mov	r1, r3
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7fc faba 	bl	8002ec4 <lfs_dir_fetch>
 8006950:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8006952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <lfs_fs_traverse_+0xa4>
            return err;
 8006958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695a:	e0d5      	b.n	8006b08 <lfs_fs_traverse_+0x250>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800695c:	2300      	movs	r3, #0
 800695e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006962:	e067      	b.n	8006a34 <lfs_fs_traverse_+0x17c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006964:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006968:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800696a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800696e:	f043 0308 	orr.w	r3, r3, #8
 8006972:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006976:	f107 0210 	add.w	r2, r7, #16
 800697a:	9200      	str	r2, [sp, #0]
 800697c:	4a65      	ldr	r2, [pc, #404]	; (8006b14 <lfs_fs_traverse_+0x25c>)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f7fb f99a 	bl	8001cb8 <lfs_dir_get>
 8006984:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (tag < 0) {
 8006986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006988:	2b00      	cmp	r3, #0
 800698a:	da05      	bge.n	8006998 <lfs_fs_traverse_+0xe0>
                if (tag == LFS_ERR_NOENT) {
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	f113 0f02 	cmn.w	r3, #2
 8006992:	d049      	beq.n	8006a28 <lfs_fs_traverse_+0x170>
                    continue;
                }
                return tag;
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	e0b7      	b.n	8006b08 <lfs_fs_traverse_+0x250>
            }
            lfs_ctz_fromle32(&ctz);
 8006998:	f107 0310 	add.w	r3, r7, #16
 800699c:	4618      	mov	r0, r3
 800699e:	f7fa fe5b 	bl	8001658 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fa fce7 	bl	8001378 <lfs_tag_type3>
 80069aa:	4603      	mov	r3, r0
 80069ac:	461a      	mov	r2, r3
 80069ae:	f240 2302 	movw	r3, #514	; 0x202
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d113      	bne.n	80069de <lfs_fs_traverse_+0x126>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	6938      	ldr	r0, [r7, #16]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	9202      	str	r2, [sp, #8]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	9201      	str	r2, [sp, #4]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4603      	mov	r3, r0
 80069c8:	460a      	mov	r2, r1
 80069ca:	2100      	movs	r1, #0
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7fe f9f9 	bl	8004dc4 <lfs_ctz_traverse>
 80069d2:	6538      	str	r0, [r7, #80]	; 0x50
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80069d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d027      	beq.n	8006a2a <lfs_fs_traverse_+0x172>
                    return err;
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	e094      	b.n	8006b08 <lfs_fs_traverse_+0x250>
                }
            } else if (includeorphans &&
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d022      	beq.n	8006a2a <lfs_fs_traverse_+0x172>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fa fcc6 	bl	8001378 <lfs_tag_type3>
 80069ec:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80069ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f2:	d11a      	bne.n	8006a2a <lfs_fs_traverse_+0x172>
                for (int i = 0; i < 2; i++) {
 80069f4:	2300      	movs	r3, #0
 80069f6:	667b      	str	r3, [r7, #100]	; 0x64
 80069f8:	e012      	b.n	8006a20 <lfs_fs_traverse_+0x168>
                    err = cb(data, (&ctz.head)[i]);
 80069fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	f107 0210 	add.w	r2, r7, #16
 8006a02:	4413      	add	r3, r2
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
 8006a0e:	6538      	str	r0, [r7, #80]	; 0x50
                    if (err) {
 8006a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <lfs_fs_traverse_+0x162>
                        return err;
 8006a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a18:	e076      	b.n	8006b08 <lfs_fs_traverse_+0x250>
                for (int i = 0; i < 2; i++) {
 8006a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8006a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	dde9      	ble.n	80069fa <lfs_fs_traverse_+0x142>
 8006a26:	e000      	b.n	8006a2a <lfs_fs_traverse_+0x172>
                    continue;
 8006a28:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006a2a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006a34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a36:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d392      	bcc.n	8006964 <lfs_fs_traverse_+0xac>
    while (!lfs_pair_isnull(dir.tail)) {
 8006a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a42:	3318      	adds	r3, #24
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fa fbb0 	bl	80011aa <lfs_pair_isnull>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f083 0301 	eor.w	r3, r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f47f af49 	bne.w	80068ea <lfs_fs_traverse_+0x32>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a5e:	e04f      	b.n	8006b00 <lfs_fs_traverse_+0x248>
        if (f->type != LFS_TYPE_REG) {
 8006a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a62:	799b      	ldrb	r3, [r3, #6]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d147      	bne.n	8006af8 <lfs_fs_traverse_+0x240>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01d      	beq.n	8006ab0 <lfs_fs_traverse_+0x1f8>
 8006a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d117      	bne.n	8006ab0 <lfs_fs_traverse_+0x1f8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a82:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a8a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	9202      	str	r2, [sp, #8]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	9201      	str	r2, [sp, #4]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7fe f990 	bl	8004dc4 <lfs_ctz_traverse>
 8006aa4:	65b8      	str	r0, [r7, #88]	; 0x58
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <lfs_fs_traverse_+0x1f8>
                return err;
 8006aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aae:	e02b      	b.n	8006b08 <lfs_fs_traverse_+0x250>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01e      	beq.n	8006afa <lfs_fs_traverse_+0x242>
 8006abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d118      	bne.n	8006afa <lfs_fs_traverse_+0x242>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aca:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	9202      	str	r2, [sp, #8]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	9201      	str	r2, [sp, #4]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7fe f96c 	bl	8004dc4 <lfs_ctz_traverse>
 8006aec:	6578      	str	r0, [r7, #84]	; 0x54
                    f->block, f->pos, cb, data);
            if (err) {
 8006aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <lfs_fs_traverse_+0x242>
                return err;
 8006af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af6:	e007      	b.n	8006b08 <lfs_fs_traverse_+0x250>
            continue;
 8006af8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	663b      	str	r3, [r7, #96]	; 0x60
 8006b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1ac      	bne.n	8006a60 <lfs_fs_traverse_+0x1a8>
            }
        }
    }
#endif

    return 0;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3774      	adds	r7, #116	; 0x74
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd90      	pop	{r4, r7, pc}
 8006b10:	0800a8c0 	.word	0x0800a8c0
 8006b14:	700ffc00 	.word	0x700ffc00

08006b18 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b08b      	sub	sp, #44	; 0x2c
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8006b30:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <lfs_fs_pred+0x98>)
 8006b32:	f107 0410 	add.w	r4, r7, #16
 8006b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(pdir->tail)) {
 8006b40:	e024      	b.n	8006b8c <lfs_fs_pred+0x74>
        err = lfs_tortoise_detectcycles(pdir, &tortoise);
 8006b42:	f107 0310 	add.w	r3, r7, #16
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff fc67 	bl	800641c <lfs_tortoise_detectcycles>
 8006b4e:	6278      	str	r0, [r7, #36]	; 0x24
        if (err < 0) {
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da02      	bge.n	8006b5c <lfs_fs_pred+0x44>
            return LFS_ERR_CORRUPT;
 8006b56:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006b5a:	e024      	b.n	8006ba6 <lfs_fs_pred+0x8e>
        }

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3318      	adds	r3, #24
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fa fb3c 	bl	80011e0 <lfs_pair_cmp>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <lfs_fs_pred+0x5a>
            return 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e019      	b.n	8006ba6 <lfs_fs_pred+0x8e>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3318      	adds	r3, #24
 8006b76:	461a      	mov	r2, r3
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7fc f9a2 	bl	8002ec4 <lfs_dir_fetch>
 8006b80:	6238      	str	r0, [r7, #32]
        if (err) {
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <lfs_fs_pred+0x74>
            return err;
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	e00c      	b.n	8006ba6 <lfs_fs_pred+0x8e>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fa fb0a 	bl	80011aa <lfs_pair_isnull>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1cf      	bne.n	8006b42 <lfs_fs_pred+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8006ba2:	f06f 0301 	mvn.w	r3, #1
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	372c      	adds	r7, #44	; 0x2c
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd90      	pop	{r4, r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	0800a8c0 	.word	0x0800a8c0

08006bb4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006bb4:	b5b0      	push	{r4, r5, r7, lr}
 8006bb6:	b08e      	sub	sp, #56	; 0x38
 8006bb8:	af04      	add	r7, sp, #16
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006bd4:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bda:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8006be4:	2108      	movs	r1, #8
 8006be6:	9103      	str	r1, [sp, #12]
 8006be8:	f107 0110 	add.w	r1, r7, #16
 8006bec:	9102      	str	r1, [sp, #8]
 8006bee:	9201      	str	r2, [sp, #4]
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	6a38      	ldr	r0, [r7, #32]
 8006bfa:	f7f9 ff0d 	bl	8000a18 <lfs_bd_read>
 8006bfe:	61b8      	str	r0, [r7, #24]
    if (err) {
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <lfs_fs_parent_match+0x56>
        return err;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	e012      	b.n	8006c30 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006c0a:	f107 0310 	add.w	r3, r7, #16
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fa fb3d 	bl	800128e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	f107 0310 	add.w	r3, r7, #16
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fa fade 	bl	80011e0 <lfs_pair_cmp>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf14      	ite	ne
 8006c2a:	2301      	movne	r3, #1
 8006c2c:	2300      	moveq	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3728      	adds	r7, #40	; 0x28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bdb0      	pop	{r4, r5, r7, pc}

08006c38 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b093      	sub	sp, #76	; 0x4c
 8006c3c:	af04      	add	r7, sp, #16
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	61da      	str	r2, [r3, #28]
    struct lfs_tortoise_t tortoise = {
 8006c50:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <lfs_fs_parent+0xac>)
 8006c52:	f107 0420 	add.w	r4, r7, #32
 8006c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},
        .i = 1,
        .period = 1,
    };
    int err = LFS_ERR_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (!lfs_pair_isnull(parent->tail)) {
 8006c60:	e02f      	b.n	8006cc2 <lfs_fs_parent+0x8a>
        err = lfs_tortoise_detectcycles(parent, &tortoise);
 8006c62:	f107 0320 	add.w	r3, r7, #32
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fbd7 	bl	800641c <lfs_tortoise_detectcycles>
 8006c6e:	6378      	str	r0, [r7, #52]	; 0x34
        if (err < 0) {
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da01      	bge.n	8006c7a <lfs_fs_parent+0x42>
            return err;
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	e030      	b.n	8006cdc <lfs_fs_parent+0xa4>
        }

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006c88:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006c90:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006c92:	f107 0314 	add.w	r3, r7, #20
 8006c96:	9303      	str	r3, [sp, #12]
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <lfs_fs_parent+0xb0>)
 8006c9a:	9302      	str	r3, [sp, #8]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	4b12      	ldr	r3, [pc, #72]	; (8006cec <lfs_fs_parent+0xb4>)
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <lfs_fs_parent+0xb8>)
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fb fd3b 	bl	8002724 <lfs_dir_fetchmatch>
 8006cae:	6338      	str	r0, [r7, #48]	; 0x30
        if (tag && tag != LFS_ERR_NOENT) {
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <lfs_fs_parent+0x8a>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	f113 0f02 	cmn.w	r3, #2
 8006cbc:	d001      	beq.n	8006cc2 <lfs_fs_parent+0x8a>
            return tag;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	e00c      	b.n	8006cdc <lfs_fs_parent+0xa4>
    while (!lfs_pair_isnull(parent->tail)) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3318      	adds	r3, #24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fa fa6f 	bl	80011aa <lfs_pair_isnull>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f083 0301 	eor.w	r3, r3, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1c4      	bne.n	8006c62 <lfs_fs_parent+0x2a>
        }
    }

    return LFS_ERR_NOENT;
 8006cd8:	f06f 0301 	mvn.w	r3, #1
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	373c      	adds	r7, #60	; 0x3c
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd90      	pop	{r4, r7, pc}
 8006ce4:	0800a8c0 	.word	0x0800a8c0
 8006ce8:	08006bb5 	.word	0x08006bb5
 8006cec:	20000008 	.word	0x20000008
 8006cf0:	7ff003ff 	.word	0x7ff003ff

08006cf4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	025b      	lsls	r3, r3, #9
 8006d0c:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
	...

08006d20 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fa fb5b 	bl	80013ec <lfs_tag_size>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <lfs_fs_preporphans+0x32>
 8006d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da06      	bge.n	8006d52 <lfs_fs_preporphans+0x32>
 8006d44:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <lfs_fs_preporphans+0x90>)
 8006d46:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <lfs_fs_preporphans+0x94>)
 8006d48:	f241 311a 	movw	r1, #4890	; 0x131a
 8006d4c:	481a      	ldr	r0, [pc, #104]	; (8006db8 <lfs_fs_preporphans+0x98>)
 8006d4e:	f001 ffd5 	bl	8008cfc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fb48 	bl	80013ec <lfs_tag_size>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8006d62:	d90a      	bls.n	8006d7a <lfs_fs_preporphans+0x5a>
 8006d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dd06      	ble.n	8006d7a <lfs_fs_preporphans+0x5a>
 8006d6c:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <lfs_fs_preporphans+0x9c>)
 8006d6e:	4a11      	ldr	r2, [pc, #68]	; (8006db4 <lfs_fs_preporphans+0x94>)
 8006d70:	f241 311b 	movw	r1, #4891	; 0x131b
 8006d74:	4810      	ldr	r0, [pc, #64]	; (8006db8 <lfs_fs_preporphans+0x98>)
 8006d76:	f001 ffc1 	bl	8008cfc <__assert_func>
    lfs->gstate.tag += orphans;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d82:	441a      	add	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3330      	adds	r3, #48	; 0x30
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fa fb86 	bl	80014a6 <lfs_gstate_hasorphans>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006d9e:	ea44 0203 	orr.w	r2, r4, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd90      	pop	{r4, r7, pc}
 8006db0:	0800a8d0 	.word	0x0800a8d0
 8006db4:	0800ac30 	.word	0x0800ac30
 8006db8:	08009d80 	.word	0x08009d80
 8006dbc:	0800a908 	.word	0x0800a908

08006dc0 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <lfs_fs_prepmove+0x70>)
 8006dd4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006dd6:	897b      	ldrh	r3, [r7, #10]
 8006dd8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	d006      	beq.n	8006dee <lfs_fs_prepmove+0x2e>
 8006de0:	897b      	ldrh	r3, [r7, #10]
 8006de2:	029b      	lsls	r3, r3, #10
 8006de4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006de8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006dec:	e000      	b.n	8006df0 <lfs_fs_prepmove+0x30>
 8006dee:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006df0:	431a      	orrs	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006df6:	897b      	ldrh	r3, [r7, #10]
 8006df8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d002      	beq.n	8006e06 <lfs_fs_prepmove+0x46>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	e000      	b.n	8006e08 <lfs_fs_prepmove+0x48>
 8006e06:	2300      	movs	r3, #0
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006e0c:	897b      	ldrh	r3, [r7, #10]
 8006e0e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d003      	beq.n	8006e1e <lfs_fs_prepmove+0x5e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	e000      	b.n	8006e20 <lfs_fs_prepmove+0x60>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	800003ff 	.word	0x800003ff

08006e34 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b098      	sub	sp, #96	; 0x60
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3330      	adds	r3, #48	; 0x30
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fa fb65 	bl	8001510 <lfs_gstate_needssuperblock>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f083 0301 	eor.w	r3, r3, #1
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <lfs_fs_desuperblock+0x22>
        return 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e04e      	b.n	8006ef4 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	4927      	ldr	r1, [pc, #156]	; (8006efc <lfs_fs_desuperblock+0xc8>)
 8006e60:	9101      	str	r1, [sp, #4]
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	f241 3234 	movw	r2, #4916	; 0x1334
 8006e6a:	4925      	ldr	r1, [pc, #148]	; (8006f00 <lfs_fs_desuperblock+0xcc>)
 8006e6c:	4825      	ldr	r0, [pc, #148]	; (8006f04 <lfs_fs_desuperblock+0xd0>)
 8006e6e:	f002 f8f3 	bl	8009058 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f103 0220 	add.w	r2, r3, #32
 8006e78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fc f820 	bl	8002ec4 <lfs_dir_fetch>
 8006e84:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8006e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <lfs_fs_desuperblock+0x5c>
        return err;
 8006e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8e:	e031      	b.n	8006ef4 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fa fcd3 	bl	800183c <lfs_fs_disk_version>
 8006e96:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006e98:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006ea0:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006eba:	f107 031c 	add.w	r3, r7, #28
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fa fc32 	bl	8001728 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <lfs_fs_desuperblock+0xd4>)
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	f107 031c 	add.w	r3, r7, #28
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	f107 0214 	add.w	r2, r7, #20
 8006ed2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fd fda3 	bl	8004a24 <lfs_dir_commit>
 8006ede:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <lfs_fs_desuperblock+0xb6>
        return err;
 8006ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee8:	e004      	b.n	8006ef4 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006eea:	2100      	movs	r1, #0
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff01 	bl	8006cf4 <lfs_fs_prepsuperblock>
    return 0;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3758      	adds	r7, #88	; 0x58
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	08009ec8 	.word	0x08009ec8
 8006f00:	08009d80 	.word	0x08009d80
 8006f04:	0800a940 	.word	0x0800a940
 8006f08:	20100018 	.word	0x20100018

08006f0c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006f0c:	b5b0      	push	{r4, r5, r7, lr}
 8006f0e:	b094      	sub	sp, #80	; 0x50
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	333c      	adds	r3, #60	; 0x3c
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fa fae6 	bl	80014ea <lfs_gstate_hasmove>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f083 0301 	eor.w	r3, r3, #1
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <lfs_fs_demove+0x22>
        return 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e05b      	b.n	8006fe6 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fa fa46 	bl	80013cc <lfs_tag_id>
 8006f40:	4603      	mov	r3, r0
 8006f42:	461a      	mov	r2, r3
 8006f44:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <lfs_fs_demove+0xe4>)
 8006f46:	9302      	str	r3, [sp, #8]
 8006f48:	9201      	str	r2, [sp, #4]
 8006f4a:	9400      	str	r4, [sp, #0]
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	f241 325c 	movw	r2, #4956	; 0x135c
 8006f52:	4928      	ldr	r1, [pc, #160]	; (8006ff4 <lfs_fs_demove+0xe8>)
 8006f54:	4828      	ldr	r0, [pc, #160]	; (8006ff8 <lfs_fs_demove+0xec>)
 8006f56:	f002 f87f 	bl	8009058 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fa fa0a 	bl	8001378 <lfs_tag_type3>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d006      	beq.n	8006f7e <lfs_fs_demove+0x72>
 8006f70:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <lfs_fs_demove+0xf0>)
 8006f72:	4a23      	ldr	r2, [pc, #140]	; (8007000 <lfs_fs_demove+0xf4>)
 8006f74:	f241 3163 	movw	r1, #4963	; 0x1363
 8006f78:	481e      	ldr	r0, [pc, #120]	; (8006ff4 <lfs_fs_demove+0xe8>)
 8006f7a:	f001 febf 	bl	8008cfc <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006f84:	f107 0318 	add.w	r3, r7, #24
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fb ff9a 	bl	8002ec4 <lfs_dir_fetch>
 8006f90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <lfs_fs_demove+0x90>
        return err;
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	e024      	b.n	8006fe6 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fa fa13 	bl	80013cc <lfs_tag_id>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006faa:	2200      	movs	r2, #0
 8006fac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff ff05 	bl	8006dc0 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006fb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006fb8:	029b      	lsls	r3, r3, #10
 8006fba:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006fbe:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	f107 0210 	add.w	r2, r7, #16
 8006fcc:	f107 0118 	add.w	r1, r7, #24
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fd fd26 	bl	8004a24 <lfs_dir_commit>
 8006fd8:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <lfs_fs_demove+0xd8>
        return err;
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe2:	e000      	b.n	8006fe6 <lfs_fs_demove+0xda>
    }

    return 0;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3740      	adds	r7, #64	; 0x40
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bdb0      	pop	{r4, r5, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	08009ec8 	.word	0x08009ec8
 8006ff4:	08009d80 	.word	0x08009d80
 8006ff8:	0800a974 	.word	0x0800a974
 8006ffc:	0800a9a8 	.word	0x0800a9a8
 8007000:	0800ac44 	.word	0x0800ac44

08007004 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8007004:	b5b0      	push	{r4, r5, r7, lr}
 8007006:	b0b2      	sub	sp, #200	; 0xc8
 8007008:	af04      	add	r7, sp, #16
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3330      	adds	r3, #48	; 0x30
 8007014:	4618      	mov	r0, r3
 8007016:	f7fa fa46 	bl	80014a6 <lfs_gstate_hasorphans>
 800701a:	4603      	mov	r3, r0
 800701c:	f083 0301 	eor.w	r3, r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <lfs_fs_deorphan+0x26>
        return 0;
 8007026:	2300      	movs	r3, #0
 8007028:	e187      	b.n	800733a <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007030:	e170      	b.n	8007314 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8007032:	f107 0308 	add.w	r3, r7, #8
 8007036:	2220      	movs	r2, #32
 8007038:	2100      	movs	r1, #0
 800703a:	4618      	mov	r0, r3
 800703c:	f002 f871 	bl	8009122 <memset>
 8007040:	2301      	movs	r3, #1
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	2301      	movs	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8007048:	2300      	movs	r3, #0
 800704a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800704e:	e149      	b.n	80072e4 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8007050:	f107 0308 	add.w	r3, r7, #8
 8007054:	f103 0218 	add.w	r2, r3, #24
 8007058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fb ff30 	bl	8002ec4 <lfs_dir_fetch>
 8007064:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8007068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <lfs_fs_deorphan+0x72>
                return err;
 8007070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007074:	e161      	b.n	800733a <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	f083 0301 	eor.w	r3, r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8126 	beq.w	80072d0 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8007084:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007088:	f107 0308 	add.w	r3, r7, #8
 800708c:	3318      	adds	r3, #24
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fdd1 	bl	8006c38 <lfs_fs_parent>
 8007096:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800709a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da07      	bge.n	80070b2 <lfs_fs_deorphan+0xae>
 80070a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070a6:	f113 0f02 	cmn.w	r3, #2
 80070aa:	d002      	beq.n	80070b2 <lfs_fs_deorphan+0xae>
                    return tag;
 80070ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070b0:	e143      	b.n	800733a <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80070b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 80ac 	bne.w	8007214 <lfs_fs_deorphan+0x210>
 80070bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070c0:	f113 0f02 	cmn.w	r3, #2
 80070c4:	f000 80a6 	beq.w	8007214 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 80070c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070cc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80070d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	4613      	mov	r3, r2
 80070d8:	4a9a      	ldr	r2, [pc, #616]	; (8007344 <lfs_fs_deorphan+0x340>)
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa fdec 	bl	8001cb8 <lfs_dir_get>
 80070e0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80070e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	da02      	bge.n	80070f2 <lfs_fs_deorphan+0xee>
                        return state;
 80070ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070f0:	e0eb      	b.n	80072ca <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 80070f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fa f8c9 	bl	800128e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	f103 0218 	add.w	r2, r3, #24
 8007104:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fa f892 	bl	8001234 <lfs_pair_issync>
 8007110:	4603      	mov	r3, r0
 8007112:	f083 0301 	eor.w	r3, r3, #1
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d07b      	beq.n	8007214 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800711c:	6a38      	ldr	r0, [r7, #32]
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007124:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8007128:	4c87      	ldr	r4, [pc, #540]	; (8007348 <lfs_fs_deorphan+0x344>)
 800712a:	9403      	str	r4, [sp, #12]
 800712c:	9102      	str	r1, [sp, #8]
 800712e:	9201      	str	r2, [sp, #4]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4603      	mov	r3, r0
 8007134:	f241 32a9 	movw	r2, #5033	; 0x13a9
 8007138:	4984      	ldr	r1, [pc, #528]	; (800734c <lfs_fs_deorphan+0x348>)
 800713a:	4885      	ldr	r0, [pc, #532]	; (8007350 <lfs_fs_deorphan+0x34c>)
 800713c:	f001 ff8c 	bl	8009058 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007140:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007144:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3330      	adds	r3, #48	; 0x30
 800714c:	f107 0208 	add.w	r2, r7, #8
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f7fa f9f0 	bl	8001538 <lfs_gstate_hasmovehere>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01c      	beq.n	8007198 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	4618      	mov	r0, r3
 8007164:	f7fa f932 	bl	80013cc <lfs_tag_id>
 8007168:	4603      	mov	r3, r0
 800716a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8007176:	4874      	ldr	r0, [pc, #464]	; (8007348 <lfs_fs_deorphan+0x344>)
 8007178:	9002      	str	r0, [sp, #8]
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	460b      	mov	r3, r1
 8007180:	f241 32b4 	movw	r2, #5044	; 0x13b4
 8007184:	4971      	ldr	r1, [pc, #452]	; (800734c <lfs_fs_deorphan+0x348>)
 8007186:	4873      	ldr	r0, [pc, #460]	; (8007354 <lfs_fs_deorphan+0x350>)
 8007188:	f001 ff66 	bl	8009058 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800718c:	2200      	movs	r2, #0
 800718e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fe14 	bl	8006dc0 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8007198:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800719c:	4618      	mov	r0, r3
 800719e:	f7fa f890 	bl	80012c2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80071a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80071a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d007      	beq.n	80071be <lfs_fs_deorphan+0x1ba>
 80071ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80071b8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80071bc:	e000      	b.n	80071c0 <lfs_fs_deorphan+0x1bc>
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071ca:	4b63      	ldr	r3, [pc, #396]	; (8007358 <lfs_fs_deorphan+0x354>)
 80071cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	2302      	movs	r3, #2
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fd f924 	bl	8004430 <lfs_dir_orphaningcommit>
 80071e8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80071ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fa f84c 	bl	800128e <lfs_pair_fromle32>
                        if (state < 0) {
 80071f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da02      	bge.n	8007204 <lfs_fs_deorphan+0x200>
                            return state;
 80071fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8007202:	e062      	b.n	80072ca <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8007204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007208:	2b03      	cmp	r3, #3
 800720a:	d16b      	bne.n	80072e4 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800720c:	2301      	movs	r3, #1
 800720e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007212:	e067      	b.n	80072e4 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8007214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007218:	2b01      	cmp	r3, #1
 800721a:	d159      	bne.n	80072d0 <lfs_fs_deorphan+0x2cc>
 800721c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007220:	f113 0f02 	cmn.w	r3, #2
 8007224:	d154      	bne.n	80072d0 <lfs_fs_deorphan+0x2cc>
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d051      	beq.n	80072d0 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800722c:	6a3a      	ldr	r2, [r7, #32]
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	4945      	ldr	r1, [pc, #276]	; (8007348 <lfs_fs_deorphan+0x344>)
 8007232:	9101      	str	r1, [sp, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	4613      	mov	r3, r2
 8007238:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800723c:	4943      	ldr	r1, [pc, #268]	; (800734c <lfs_fs_deorphan+0x348>)
 800723e:	4847      	ldr	r0, [pc, #284]	; (800735c <lfs_fs_deorphan+0x358>)
 8007240:	f001 ff0a 	bl	8009058 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800724a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fb fe53 	bl	8002efc <lfs_dir_getgstate>
 8007256:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800725a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <lfs_fs_deorphan+0x264>
                        return err;
 8007262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007266:	e030      	b.n	80072ca <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8007268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800726c:	3318      	adds	r3, #24
 800726e:	4618      	mov	r0, r3
 8007270:	f7fa f827 	bl	80012c2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007274:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007278:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800727c:	051a      	lsls	r2, r3, #20
 800727e:	4b38      	ldr	r3, [pc, #224]	; (8007360 <lfs_fs_deorphan+0x35c>)
 8007280:	4313      	orrs	r3, r2
 8007282:	673b      	str	r3, [r7, #112]	; 0x70
 8007284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007288:	3318      	adds	r3, #24
 800728a:	677b      	str	r3, [r7, #116]	; 0x74
 800728c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	2301      	movs	r3, #1
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fd f8ca 	bl	8004430 <lfs_dir_orphaningcommit>
 800729c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80072a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072a4:	3318      	adds	r3, #24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7f9 fff1 	bl	800128e <lfs_pair_fromle32>
                    if (state < 0) {
 80072ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da02      	bge.n	80072ba <lfs_fs_deorphan+0x2b6>
                        return state;
 80072b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 80072b8:	e03f      	b.n	800733a <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80072ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d104      	bne.n	80072cc <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80072c8:	e00c      	b.n	80072e4 <lfs_fs_deorphan+0x2e0>
                return err;
 80072ca:	e036      	b.n	800733a <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 80072cc:	bf00      	nop
 80072ce:	e009      	b.n	80072e4 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 80072d0:	f107 0408 	add.w	r4, r7, #8
 80072d4:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80072d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80072e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 80072e4:	f107 0308 	add.w	r3, r7, #8
 80072e8:	3318      	adds	r3, #24
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7f9 ff5d 	bl	80011aa <lfs_pair_isnull>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f083 0301 	eor.w	r3, r3, #1
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f47f aea9 	bne.w	8007050 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80072fe:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <lfs_fs_deorphan+0x306>
 8007306:	2300      	movs	r3, #0
 8007308:	e002      	b.n	8007310 <lfs_fs_deorphan+0x30c>
 800730a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800730e:	3301      	adds	r3, #1
 8007310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007318:	2b01      	cmp	r3, #1
 800731a:	f77f ae8a 	ble.w	8007032 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3330      	adds	r3, #48	; 0x30
 8007322:	4618      	mov	r0, r3
 8007324:	f7fa f8d2 	bl	80014cc <lfs_gstate_getorphans>
 8007328:	4603      	mov	r3, r0
 800732a:	425b      	negs	r3, r3
 800732c:	b2db      	uxtb	r3, r3
 800732e:	b25b      	sxtb	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff fcf4 	bl	8006d20 <lfs_fs_preporphans>
 8007338:	4603      	mov	r3, r0
}
 800733a:	4618      	mov	r0, r3
 800733c:	37b8      	adds	r7, #184	; 0xb8
 800733e:	46bd      	mov	sp, r7
 8007340:	bdb0      	pop	{r4, r5, r7, pc}
 8007342:	bf00      	nop
 8007344:	7ffffc00 	.word	0x7ffffc00
 8007348:	08009ec8 	.word	0x08009ec8
 800734c:	08009d80 	.word	0x08009d80
 8007350:	0800a9dc 	.word	0x0800a9dc
 8007354:	0800aa20 	.word	0x0800aa20
 8007358:	600ffc08 	.word	0x600ffc08
 800735c:	0800aa68 	.word	0x0800aa68
 8007360:	000ffc08 	.word	0x000ffc08

08007364 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fd61 	bl	8006e34 <lfs_fs_desuperblock>
 8007372:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <lfs_fs_forceconsistency+0x1a>
        return err;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	e013      	b.n	80073a6 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fdc4 	bl	8006f0c <lfs_fs_demove>
 8007384:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <lfs_fs_forceconsistency+0x2c>
        return err;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	e00a      	b.n	80073a6 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8007390:	2101      	movs	r1, #1
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fe36 	bl	8007004 <lfs_fs_deorphan>
 8007398:	60f8      	str	r0, [r7, #12]
    if (err) {
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <lfs_fs_forceconsistency+0x40>
        return err;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	e000      	b.n	80073a6 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	601a      	str	r2, [r3, #0]
    return 0;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 80073e0:	f107 0208 	add.w	r2, r7, #8
 80073e4:	2300      	movs	r3, #0
 80073e6:	4907      	ldr	r1, [pc, #28]	; (8007404 <lfs_fs_size_+0x30>)
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fa65 	bl	80068b8 <lfs_fs_traverse_>
 80073ee:	60f8      	str	r0, [r7, #12]
    if (err) {
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <lfs_fs_size_+0x26>
        return err;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	e000      	b.n	80073fc <lfs_fs_size_+0x28>
    }

    return size;
 80073fa:	68bb      	ldr	r3, [r7, #8]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	080073af 	.word	0x080073af

08007408 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <lfs_format+0x18>
        return err;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	e005      	b.n	800742c <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fe ff48 	bl	80062b8 <lfs_format_>
 8007428:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <lfs_mount+0x18>
        return err;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	e005      	b.n	8007458 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff f824 	bl	800649c <lfs_mount_>
 8007454:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
    if (err) {
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <lfs_file_open+0x1c>
        return err;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	e01a      	b.n	80074b2 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, (unsigned)flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f7fa f988 	bl	8001798 <lfs_mlist_isopen>
 8007488:	4603      	mov	r3, r0
 800748a:	f083 0301 	eor.w	r3, r3, #1
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <lfs_file_open+0x42>
 8007494:	4b09      	ldr	r3, [pc, #36]	; (80074bc <lfs_file_open+0x5c>)
 8007496:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <lfs_file_open+0x60>)
 8007498:	f241 71e5 	movw	r1, #6117	; 0x17e5
 800749c:	4809      	ldr	r0, [pc, #36]	; (80074c4 <lfs_file_open+0x64>)
 800749e:	f001 fc2d 	bl	8008cfc <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7fd fee7 	bl	800527c <lfs_file_open_>
 80074ae:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80074b0:	697b      	ldr	r3, [r7, #20]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	0800aab8 	.word	0x0800aab8
 80074c0:	0800ac54 	.word	0x0800ac54
 80074c4:	08009d80 	.word	0x08009d80

080074c8 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <lfs_file_close+0x18>
        return err;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	e015      	b.n	800750c <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fa f956 	bl	8001798 <lfs_mlist_isopen>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <lfs_file_close+0x38>
 80074f2:	4b08      	ldr	r3, [pc, #32]	; (8007514 <lfs_file_close+0x4c>)
 80074f4:	4a08      	ldr	r2, [pc, #32]	; (8007518 <lfs_file_close+0x50>)
 80074f6:	f641 0109 	movw	r1, #6153	; 0x1809
 80074fa:	4808      	ldr	r0, [pc, #32]	; (800751c <lfs_file_close+0x54>)
 80074fc:	f001 fbfe 	bl	8008cfc <__assert_func>

    err = lfs_file_close_(lfs, file);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fd fed2 	bl	80052ac <lfs_file_close_>
 8007508:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	0800aaf0 	.word	0x0800aaf0
 8007518:	0800ac64 	.word	0x0800ac64
 800751c:	08009d80 	.word	0x08009d80

08007520 <lfs_file_write>:
    return res;
}

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
    if (err) {
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <lfs_file_write+0x1c>
        return err;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	e017      	b.n	800756c <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	4618      	mov	r0, r3
 8007544:	f7fa f928 	bl	8001798 <lfs_mlist_isopen>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <lfs_file_write+0x3c>
 800754e:	4b09      	ldr	r3, [pc, #36]	; (8007574 <lfs_file_write+0x54>)
 8007550:	4a09      	ldr	r2, [pc, #36]	; (8007578 <lfs_file_write+0x58>)
 8007552:	f641 013d 	movw	r1, #6205	; 0x183d
 8007556:	4809      	ldr	r0, [pc, #36]	; (800757c <lfs_file_write+0x5c>)
 8007558:	f001 fbd0 	bl	8008cfc <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7fe fb12 	bl	8005b8c <lfs_file_write_>
 8007568:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800756a:	693b      	ldr	r3, [r7, #16]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	0800aaf0 	.word	0x0800aaf0
 8007578:	0800ac74 	.word	0x0800ac74
 800757c:	08009d80 	.word	0x08009d80

08007580 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e024      	b.n	80075e0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	091a      	lsrs	r2, r3, #4
 800759a:	6939      	ldr	r1, [r7, #16]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	440b      	add	r3, r1
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	404b      	eors	r3, r1
 80075a8:	f003 030f 	and.w	r3, r3, #15
 80075ac:	4912      	ldr	r1, [pc, #72]	; (80075f8 <lfs_crc+0x78>)
 80075ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075b2:	4053      	eors	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	091a      	lsrs	r2, r3, #4
 80075ba:	6939      	ldr	r1, [r7, #16]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	440b      	add	r3, r1
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	091b      	lsrs	r3, r3, #4
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	4619      	mov	r1, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	404b      	eors	r3, r1
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	4909      	ldr	r1, [pc, #36]	; (80075f8 <lfs_crc+0x78>)
 80075d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075d6:	4053      	eors	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	3301      	adds	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3d6      	bcc.n	8007596 <lfs_crc+0x16>
    }

    return crc;
 80075e8:	68fb      	ldr	r3, [r7, #12]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	0800ac84 	.word	0x0800ac84

080075fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007602:	4b35      	ldr	r3, [pc, #212]	; (80076d8 <SystemInit+0xdc>)
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007608:	4a33      	ldr	r2, [pc, #204]	; (80076d8 <SystemInit+0xdc>)
 800760a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800760e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8007612:	4b32      	ldr	r3, [pc, #200]	; (80076dc <SystemInit+0xe0>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007618:	4b30      	ldr	r3, [pc, #192]	; (80076dc <SystemInit+0xe0>)
 800761a:	2200      	movs	r2, #0
 800761c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800761e:	4b2f      	ldr	r3, [pc, #188]	; (80076dc <SystemInit+0xe0>)
 8007620:	2200      	movs	r2, #0
 8007622:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8007624:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <SystemInit+0xe0>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	492c      	ldr	r1, [pc, #176]	; (80076dc <SystemInit+0xe0>)
 800762a:	4b2d      	ldr	r3, [pc, #180]	; (80076e0 <SystemInit+0xe4>)
 800762c:	4013      	ands	r3, r2
 800762e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <SystemInit+0xe0>)
 8007632:	2200      	movs	r2, #0
 8007634:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8007636:	4b29      	ldr	r3, [pc, #164]	; (80076dc <SystemInit+0xe0>)
 8007638:	2200      	movs	r2, #0
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800763c:	4b27      	ldr	r3, [pc, #156]	; (80076dc <SystemInit+0xe0>)
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8007642:	4b26      	ldr	r3, [pc, #152]	; (80076dc <SystemInit+0xe0>)
 8007644:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <SystemInit+0xe8>)
 8007646:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <SystemInit+0xe0>)
 800764a:	2200      	movs	r2, #0
 800764c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800764e:	4b23      	ldr	r3, [pc, #140]	; (80076dc <SystemInit+0xe0>)
 8007650:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <SystemInit+0xe8>)
 8007652:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8007654:	4b21      	ldr	r3, [pc, #132]	; (80076dc <SystemInit+0xe0>)
 8007656:	2200      	movs	r2, #0
 8007658:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800765a:	4b20      	ldr	r3, [pc, #128]	; (80076dc <SystemInit+0xe0>)
 800765c:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <SystemInit+0xe8>)
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8007660:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <SystemInit+0xe0>)
 8007662:	2200      	movs	r2, #0
 8007664:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8007666:	4b1d      	ldr	r3, [pc, #116]	; (80076dc <SystemInit+0xe0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <SystemInit+0xe0>)
 800766c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007670:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8007672:	4b1a      	ldr	r3, [pc, #104]	; (80076dc <SystemInit+0xe0>)
 8007674:	2200      	movs	r2, #0
 8007676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <SystemInit+0xdc>)
 800767a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800767e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8007680:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <SystemInit+0xec>)
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8007688:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8007690:	d003      	beq.n	800769a <SystemInit+0x9e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007698:	d117      	bne.n	80076ca <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <SystemInit+0xec>)
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d005      	beq.n	80076b2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80076a6:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <SystemInit+0xec>)
 80076a8:	4a10      	ldr	r2, [pc, #64]	; (80076ec <SystemInit+0xf0>)
 80076aa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80076ac:	4b0e      	ldr	r3, [pc, #56]	; (80076e8 <SystemInit+0xec>)
 80076ae:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <SystemInit+0xf4>)
 80076b0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80076b2:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <SystemInit+0xec>)
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <SystemInit+0xec>)
 80076b8:	f043 0302 	orr.w	r3, r3, #2
 80076bc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80076be:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <SystemInit+0xec>)
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4a09      	ldr	r2, [pc, #36]	; (80076e8 <SystemInit+0xec>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	61d3      	str	r3, [r2, #28]
  }
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	e000ed00 	.word	0xe000ed00
 80076dc:	44020c00 	.word	0x44020c00
 80076e0:	eae2eae3 	.word	0xeae2eae3
 80076e4:	01010280 	.word	0x01010280
 80076e8:	40022000 	.word	0x40022000
 80076ec:	08192a3b 	.word	0x08192a3b
 80076f0:	4c5d6e7f 	.word	0x4c5d6e7f

080076f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076f8:	2003      	movs	r0, #3
 80076fa:	f000 f96c 	bl	80079d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076fe:	f001 f9b5 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8007702:	4602      	mov	r2, r0
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <HAL_Init+0x44>)
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	490b      	ldr	r1, [pc, #44]	; (800773c <HAL_Init+0x48>)
 800770e:	5ccb      	ldrb	r3, [r1, r3]
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_Init+0x4c>)
 8007716:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007718:	2004      	movs	r0, #4
 800771a:	f000 f9a3 	bl	8007a64 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800771e:	200f      	movs	r0, #15
 8007720:	f000 f810 	bl	8007744 <HAL_InitTick>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e002      	b.n	8007734 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800772e:	f7f8 ff68 	bl	8000602 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	44020c00 	.word	0x44020c00
 800773c:	0800acc4 	.word	0x0800acc4
 8007740:	20000058 	.word	0x20000058

08007744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007750:	4b33      	ldr	r3, [pc, #204]	; (8007820 <HAL_InitTick+0xdc>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e05c      	b.n	8007816 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800775c:	4b31      	ldr	r3, [pc, #196]	; (8007824 <HAL_InitTick+0xe0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d10c      	bne.n	8007782 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8007768:	4b2f      	ldr	r3, [pc, #188]	; (8007828 <HAL_InitTick+0xe4>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <HAL_InitTick+0xdc>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007776:	fbb3 f3f1 	udiv	r3, r3, r1
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e037      	b.n	80077f2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8007782:	f000 f9c7 	bl	8007b14 <HAL_SYSTICK_GetCLKSourceConfig>
 8007786:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d023      	beq.n	80077d6 <HAL_InitTick+0x92>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d82d      	bhi.n	80077f0 <HAL_InitTick+0xac>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_InitTick+0x5e>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d00d      	beq.n	80077bc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80077a0:	e026      	b.n	80077f0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80077a2:	4b21      	ldr	r3, [pc, #132]	; (8007828 <HAL_InitTick+0xe4>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b1e      	ldr	r3, [pc, #120]	; (8007820 <HAL_InitTick+0xdc>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80077b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80077b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b8:	60fb      	str	r3, [r7, #12]
        break;
 80077ba:	e01a      	b.n	80077f2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80077bc:	4b18      	ldr	r3, [pc, #96]	; (8007820 <HAL_InitTick+0xdc>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80077ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d2:	60fb      	str	r3, [r7, #12]
        break;
 80077d4:	e00d      	b.n	80077f2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <HAL_InitTick+0xdc>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	60fb      	str	r3, [r7, #12]
        break;
 80077ee:	e000      	b.n	80077f2 <HAL_InitTick+0xae>
        break;
 80077f0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f914 	bl	8007a20 <HAL_SYSTICK_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e009      	b.n	8007816 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007802:	2200      	movs	r2, #0
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	f000 f8ef 	bl	80079ec <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800780e:	4a07      	ldr	r2, [pc, #28]	; (800782c <HAL_InitTick+0xe8>)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000060 	.word	0x20000060
 8007824:	e000e010 	.word	0xe000e010
 8007828:	20000058 	.word	0x20000058
 800782c:	2000005c 	.word	0x2000005c

08007830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <HAL_IncTick+0x20>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <HAL_IncTick+0x24>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4413      	add	r3, r2
 8007840:	4a04      	ldr	r2, [pc, #16]	; (8007854 <HAL_IncTick+0x24>)
 8007842:	6013      	str	r3, [r2, #0]
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000060 	.word	0x20000060
 8007854:	200000e0 	.word	0x200000e0

08007858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  return uwTick;
 800785c:	4b03      	ldr	r3, [pc, #12]	; (800786c <HAL_GetTick+0x14>)
 800785e:	681b      	ldr	r3, [r3, #0]
}
 8007860:	4618      	mov	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	200000e0 	.word	0x200000e0

08007870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007878:	f7ff ffee 	bl	8007858 <HAL_GetTick>
 800787c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007888:	d005      	beq.n	8007896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800788a:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <HAL_Delay+0x44>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007896:	bf00      	nop
 8007898:	f7ff ffde 	bl	8007858 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d8f7      	bhi.n	8007898 <HAL_Delay+0x28>
  {
  }
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000060 	.word	0x20000060

080078b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078c8:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <__NVIC_SetPriorityGrouping+0x44>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078d4:	4013      	ands	r3, r2
 80078d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078ea:	4a04      	ldr	r2, [pc, #16]	; (80078fc <__NVIC_SetPriorityGrouping+0x44>)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	60d3      	str	r3, [r2, #12]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	e000ed00 	.word	0xe000ed00

08007900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <__NVIC_GetPriorityGrouping+0x18>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	f003 0307 	and.w	r3, r3, #7
}
 800790e:	4618      	mov	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000ed00 	.word	0xe000ed00

0800791c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800792c:	2b00      	cmp	r3, #0
 800792e:	db0a      	blt.n	8007946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	490c      	ldr	r1, [pc, #48]	; (8007968 <__NVIC_SetPriority+0x4c>)
 8007936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800793a:	0112      	lsls	r2, r2, #4
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	440b      	add	r3, r1
 8007940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007944:	e00a      	b.n	800795c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4908      	ldr	r1, [pc, #32]	; (800796c <__NVIC_SetPriority+0x50>)
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	3b04      	subs	r3, #4
 8007954:	0112      	lsls	r2, r2, #4
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	440b      	add	r3, r1
 800795a:	761a      	strb	r2, [r3, #24]
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	e000e100 	.word	0xe000e100
 800796c:	e000ed00 	.word	0xe000ed00

08007970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	; 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f1c3 0307 	rsb	r3, r3, #7
 800798a:	2b04      	cmp	r3, #4
 800798c:	bf28      	it	cs
 800798e:	2304      	movcs	r3, #4
 8007990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3304      	adds	r3, #4
 8007996:	2b06      	cmp	r3, #6
 8007998:	d902      	bls.n	80079a0 <NVIC_EncodePriority+0x30>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	3b03      	subs	r3, #3
 800799e:	e000      	b.n	80079a2 <NVIC_EncodePriority+0x32>
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a4:	f04f 32ff 	mov.w	r2, #4294967295
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	43da      	mvns	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	401a      	ands	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079b8:	f04f 31ff 	mov.w	r1, #4294967295
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	43d9      	mvns	r1, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079c8:	4313      	orrs	r3, r2
         );
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3724      	adds	r7, #36	; 0x24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ff6a 	bl	80078b8 <__NVIC_SetPriorityGrouping>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079fa:	f7ff ff81 	bl	8007900 <__NVIC_GetPriorityGrouping>
 80079fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	6978      	ldr	r0, [r7, #20]
 8007a06:	f7ff ffb3 	bl	8007970 <NVIC_EncodePriority>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff ff82 	bl	800791c <__NVIC_SetPriority>
}
 8007a18:	bf00      	nop
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a30:	d301      	bcc.n	8007a36 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8007a32:	2301      	movs	r3, #1
 8007a34:	e00d      	b.n	8007a52 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8007a36:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_SYSTICK_Config+0x40>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8007a3e:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_SYSTICK_Config+0x40>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8007a44:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_SYSTICK_Config+0x40>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a05      	ldr	r2, [pc, #20]	; (8007a60 <HAL_SYSTICK_Config+0x40>)
 8007a4a:	f043 0303 	orr.w	r3, r3, #3
 8007a4e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	e000e010 	.word	0xe000e010

08007a64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d844      	bhi.n	8007afc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a9b 	.word	0x08007a9b
 8007a7c:	08007ab9 	.word	0x08007ab9
 8007a80:	08007adb 	.word	0x08007adb
 8007a84:	08007afd 	.word	0x08007afd
 8007a88:	08007a8d 	.word	0x08007a8d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007a8c:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007a92:	f043 0304 	orr.w	r3, r3, #4
 8007a96:	6013      	str	r3, [r2, #0]
      break;
 8007a98:	e031      	b.n	8007afe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007a9a:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1b      	ldr	r2, [pc, #108]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007aa0:	f023 0304 	bic.w	r3, r3, #4
 8007aa4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8007aa6:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007aa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007aac:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007aae:	f023 030c 	bic.w	r3, r3, #12
 8007ab2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8007ab6:	e022      	b.n	8007afe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007ab8:	4b14      	ldr	r3, [pc, #80]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a13      	ldr	r2, [pc, #76]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007abe:	f023 0304 	bic.w	r3, r3, #4
 8007ac2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8007ac4:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ac6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007aca:	f023 030c 	bic.w	r3, r3, #12
 8007ace:	4a10      	ldr	r2, [pc, #64]	; (8007b10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ad0:	f043 0304 	orr.w	r3, r3, #4
 8007ad4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8007ad8:	e011      	b.n	8007afe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8007ada:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a0b      	ldr	r2, [pc, #44]	; (8007b0c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8007ae0:	f023 0304 	bic.w	r3, r3, #4
 8007ae4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007ae8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007aec:	f023 030c 	bic.w	r3, r3, #12
 8007af0:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8007af2:	f043 0308 	orr.w	r3, r3, #8
 8007af6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8007afa:	e000      	b.n	8007afe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8007afc:	bf00      	nop
  }
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	e000e010 	.word	0xe000e010
 8007b10:	44020c00 	.word	0x44020c00

08007b14 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8007b26:	2304      	movs	r3, #4
 8007b28:	607b      	str	r3, [r7, #4]
 8007b2a:	e01e      	b.n	8007b6a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8007b2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d00f      	beq.n	8007b5e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d80f      	bhi.n	8007b64 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d003      	beq.n	8007b58 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8007b50:	e008      	b.n	8007b64 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007b52:	2300      	movs	r3, #0
 8007b54:	607b      	str	r3, [r7, #4]
        break;
 8007b56:	e008      	b.n	8007b6a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	607b      	str	r3, [r7, #4]
        break;
 8007b5c:	e005      	b.n	8007b6a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	607b      	str	r3, [r7, #4]
        break;
 8007b62:	e002      	b.n	8007b6a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8007b64:	2300      	movs	r3, #0
 8007b66:	607b      	str	r3, [r7, #4]
        break;
 8007b68:	bf00      	nop
    }
  }
  return systick_source;
 8007b6a:	687b      	ldr	r3, [r7, #4]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	e000e010 	.word	0xe000e010
 8007b7c:	44020c00 	.word	0x44020c00

08007b80 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007b8e:	e142      	b.n	8007e16 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	2101      	movs	r1, #1
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 8134 	beq.w	8007e10 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d003      	beq.n	8007bb8 <HAL_GPIO_Init+0x38>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b12      	cmp	r3, #18
 8007bb6:	d125      	bne.n	8007c04 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	08da      	lsrs	r2, r3, #3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3208      	adds	r2, #8
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	220f      	movs	r2, #15
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	08da      	lsrs	r2, r3, #3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3208      	adds	r2, #8
 8007bfe:	6979      	ldr	r1, [r7, #20]
 8007c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	2203      	movs	r2, #3
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	43db      	mvns	r3, r3
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f003 0203 	and.w	r2, r3, #3
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d00b      	beq.n	8007c58 <HAL_GPIO_Init+0xd8>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d007      	beq.n	8007c58 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c4c:	2b11      	cmp	r3, #17
 8007c4e:	d003      	beq.n	8007c58 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b12      	cmp	r3, #18
 8007c56:	d130      	bne.n	8007cba <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	2203      	movs	r2, #3
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c8e:	2201      	movs	r2, #1
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	091b      	lsrs	r3, r3, #4
 8007ca4:	f003 0201 	and.w	r2, r3, #1
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d109      	bne.n	8007cda <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d11b      	bne.n	8007d0a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d017      	beq.n	8007d0a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43db      	mvns	r3, r3
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d07c      	beq.n	8007e10 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007d16:	4a47      	ldr	r2, [pc, #284]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	089b      	lsrs	r3, r3, #2
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d22:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	220f      	movs	r2, #15
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4013      	ands	r3, r2
 8007d38:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	0a9a      	lsrs	r2, r3, #10
 8007d3e:	4b3e      	ldr	r3, [pc, #248]	; (8007e38 <HAL_GPIO_Init+0x2b8>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	f002 0203 	and.w	r2, r2, #3
 8007d48:	00d2      	lsls	r2, r2, #3
 8007d4a:	4093      	lsls	r3, r2
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007d52:	4938      	ldr	r1, [pc, #224]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	3318      	adds	r3, #24
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007d60:	4b34      	ldr	r3, [pc, #208]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8007d84:	4a2b      	ldr	r2, [pc, #172]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007d8a:	4b2a      	ldr	r3, [pc, #168]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	4013      	ands	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8007dae:	4a21      	ldr	r2, [pc, #132]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007db4:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	43db      	mvns	r3, r3
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8007dda:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	43db      	mvns	r3, r3
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4013      	ands	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8007e08:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <HAL_GPIO_Init+0x2b4>)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	3301      	adds	r3, #1
 8007e14:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f aeb5 	bne.w	8007b90 <HAL_GPIO_Init+0x10>
  }
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	44022000 	.word	0x44022000
 8007e38:	002f7f7f 	.word	0x002f7f7f

08007e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	807b      	strh	r3, [r7, #2]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e4c:	787b      	ldrb	r3, [r7, #1]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e52:	887a      	ldrh	r2, [r7, #2]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e58:	e002      	b.n	8007e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e5a:	887a      	ldrh	r2, [r7, #2]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <HAL_ICACHE_Enable+0x1c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <HAL_ICACHE_Enable+0x1c>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40030400 	.word	0x40030400

08007e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d102      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f000 bc28 	b.w	80086f0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ea0:	4b94      	ldr	r3, [pc, #592]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	f003 0318 	and.w	r3, r3, #24
 8007ea8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8007eaa:	4b92      	ldr	r3, [pc, #584]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d05b      	beq.n	8007f78 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2b08      	cmp	r3, #8
 8007ec4:	d005      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x46>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b18      	cmp	r3, #24
 8007eca:	d114      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d111      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d102      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f000 bc08 	b.w	80086f0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007ee0:	4b84      	ldr	r3, [pc, #528]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	4981      	ldr	r1, [pc, #516]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007ef4:	e040      	b.n	8007f78 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d023      	beq.n	8007f46 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007efe:	4b7d      	ldr	r3, [pc, #500]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a7c      	ldr	r2, [pc, #496]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7ff fca5 	bl	8007858 <HAL_GetTick>
 8007f0e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007f10:	e008      	b.n	8007f24 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007f12:	f7ff fca1 	bl	8007858 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e3e5      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007f24:	4b73      	ldr	r3, [pc, #460]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0f0      	beq.n	8007f12 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007f30:	4b70      	ldr	r3, [pc, #448]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	496d      	ldr	r1, [pc, #436]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	618b      	str	r3, [r1, #24]
 8007f44:	e018      	b.n	8007f78 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f46:	4b6b      	ldr	r3, [pc, #428]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a6a      	ldr	r2, [pc, #424]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f52:	f7ff fc81 	bl	8007858 <HAL_GetTick>
 8007f56:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007f5a:	f7ff fc7d 	bl	8007858 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e3c1      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007f6c:	4b61      	ldr	r3, [pc, #388]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f0      	bne.n	8007f5a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80a0 	beq.w	80080c6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d005      	beq.n	8007f98 <HAL_RCC_OscConfig+0x10c>
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	2b18      	cmp	r3, #24
 8007f90:	d109      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d106      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 8092 	bne.w	80080c6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e3a4      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fae:	d106      	bne.n	8007fbe <HAL_RCC_OscConfig+0x132>
 8007fb0:	4b50      	ldr	r3, [pc, #320]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a4f      	ldr	r2, [pc, #316]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	e058      	b.n	8008070 <HAL_RCC_OscConfig+0x1e4>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d112      	bne.n	8007fec <HAL_RCC_OscConfig+0x160>
 8007fc6:	4b4b      	ldr	r3, [pc, #300]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a4a      	ldr	r2, [pc, #296]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4b48      	ldr	r3, [pc, #288]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a47      	ldr	r2, [pc, #284]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	4b45      	ldr	r3, [pc, #276]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a44      	ldr	r2, [pc, #272]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e041      	b.n	8008070 <HAL_RCC_OscConfig+0x1e4>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ff4:	d112      	bne.n	800801c <HAL_RCC_OscConfig+0x190>
 8007ff6:	4b3f      	ldr	r3, [pc, #252]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a3e      	ldr	r2, [pc, #248]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8007ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	4b3c      	ldr	r3, [pc, #240]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a3b      	ldr	r2, [pc, #236]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008008:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a38      	ldr	r2, [pc, #224]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	e029      	b.n	8008070 <HAL_RCC_OscConfig+0x1e4>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008024:	d112      	bne.n	800804c <HAL_RCC_OscConfig+0x1c0>
 8008026:	4b33      	ldr	r3, [pc, #204]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a32      	ldr	r2, [pc, #200]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 800802c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	4b30      	ldr	r3, [pc, #192]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a2f      	ldr	r2, [pc, #188]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	4b2d      	ldr	r3, [pc, #180]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a2c      	ldr	r2, [pc, #176]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	e011      	b.n	8008070 <HAL_RCC_OscConfig+0x1e4>
 800804c:	4b29      	ldr	r3, [pc, #164]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a28      	ldr	r2, [pc, #160]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	4b26      	ldr	r3, [pc, #152]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a25      	ldr	r2, [pc, #148]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 800805e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	4b23      	ldr	r3, [pc, #140]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a22      	ldr	r2, [pc, #136]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 800806a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800806e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d013      	beq.n	80080a0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7ff fbee 	bl	8007858 <HAL_GetTick>
 800807c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008080:	f7ff fbea 	bl	8007858 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	; 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e32e      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008092:	4b18      	ldr	r3, [pc, #96]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0f0      	beq.n	8008080 <HAL_RCC_OscConfig+0x1f4>
 800809e:	e012      	b.n	80080c6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a0:	f7ff fbda 	bl	8007858 <HAL_GetTick>
 80080a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80080a8:	f7ff fbd6 	bl	8007858 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b64      	cmp	r3, #100	; 0x64
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e31a      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080ba:	4b0e      	ldr	r3, [pc, #56]	; (80080f4 <HAL_RCC_OscConfig+0x268>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f0      	bne.n	80080a8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 809a 	beq.w	8008208 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_RCC_OscConfig+0x25a>
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2b18      	cmp	r3, #24
 80080de:	d149      	bne.n	8008174 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d146      	bne.n	8008174 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e2fe      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
 80080f2:	bf00      	nop
 80080f4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11c      	bne.n	8008138 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80080fe:	4b9a      	ldr	r3, [pc, #616]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0218 	and.w	r2, r3, #24
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	429a      	cmp	r2, r3
 800810c:	d014      	beq.n	8008138 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800810e:	4b96      	ldr	r3, [pc, #600]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f023 0218 	bic.w	r2, r3, #24
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	4993      	ldr	r1, [pc, #588]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800811c:	4313      	orrs	r3, r2
 800811e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8008120:	f000 fdd0 	bl	8008cc4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008124:	4b91      	ldr	r3, [pc, #580]	; (800836c <HAL_RCC_OscConfig+0x4e0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fb0b 	bl	8007744 <HAL_InitTick>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e2db      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7ff fb8e 	bl	8007858 <HAL_GetTick>
 800813c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008140:	f7ff fb8a 	bl	8007858 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e2ce      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008152:	4b85      	ldr	r3, [pc, #532]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800815e:	4b82      	ldr	r3, [pc, #520]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	041b      	lsls	r3, r3, #16
 800816c:	497e      	ldr	r1, [pc, #504]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800816e:	4313      	orrs	r3, r2
 8008170:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8008172:	e049      	b.n	8008208 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d02c      	beq.n	80081d6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800817c:	4b7a      	ldr	r3, [pc, #488]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f023 0218 	bic.w	r2, r3, #24
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	4977      	ldr	r1, [pc, #476]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800818a:	4313      	orrs	r3, r2
 800818c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800818e:	4b76      	ldr	r3, [pc, #472]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a75      	ldr	r2, [pc, #468]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819a:	f7ff fb5d 	bl	8007858 <HAL_GetTick>
 800819e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80081a2:	f7ff fb59 	bl	8007858 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e29d      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081b4:	4b6c      	ldr	r3, [pc, #432]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80081c0:	4b69      	ldr	r3, [pc, #420]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	041b      	lsls	r3, r3, #16
 80081ce:	4966      	ldr	r1, [pc, #408]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	610b      	str	r3, [r1, #16]
 80081d4:	e018      	b.n	8008208 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081d6:	4b64      	ldr	r3, [pc, #400]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a63      	ldr	r2, [pc, #396]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e2:	f7ff fb39 	bl	8007858 <HAL_GetTick>
 80081e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80081ea:	f7ff fb35 	bl	8007858 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e279      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081fc:	4b5a      	ldr	r3, [pc, #360]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f0      	bne.n	80081ea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d03c      	beq.n	800828e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01c      	beq.n	8008256 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800821c:	4b52      	ldr	r3, [pc, #328]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800821e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008222:	4a51      	ldr	r2, [pc, #324]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008228:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822c:	f7ff fb14 	bl	8007858 <HAL_GetTick>
 8008230:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008234:	f7ff fb10 	bl	8007858 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e254      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008246:	4b48      	ldr	r3, [pc, #288]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800824c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0ef      	beq.n	8008234 <HAL_RCC_OscConfig+0x3a8>
 8008254:	e01b      	b.n	800828e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008256:	4b44      	ldr	r3, [pc, #272]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800825c:	4a42      	ldr	r2, [pc, #264]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800825e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008262:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008266:	f7ff faf7 	bl	8007858 <HAL_GetTick>
 800826a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800826e:	f7ff faf3 	bl	8007858 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e237      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008280:	4b39      	ldr	r3, [pc, #228]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1ef      	bne.n	800826e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80d2 	beq.w	8008440 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800829c:	4b34      	ldr	r3, [pc, #208]	; (8008370 <HAL_RCC_OscConfig+0x4e4>)
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d118      	bne.n	80082da <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80082a8:	4b31      	ldr	r3, [pc, #196]	; (8008370 <HAL_RCC_OscConfig+0x4e4>)
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	4a30      	ldr	r2, [pc, #192]	; (8008370 <HAL_RCC_OscConfig+0x4e4>)
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082b4:	f7ff fad0 	bl	8007858 <HAL_GetTick>
 80082b8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082bc:	f7ff facc 	bl	8007858 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e210      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80082ce:	4b28      	ldr	r3, [pc, #160]	; (8008370 <HAL_RCC_OscConfig+0x4e4>)
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d108      	bne.n	80082f4 <HAL_RCC_OscConfig+0x468>
 80082e2:	4b21      	ldr	r3, [pc, #132]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80082e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082e8:	4a1f      	ldr	r2, [pc, #124]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80082f2:	e074      	b.n	80083de <HAL_RCC_OscConfig+0x552>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d118      	bne.n	800832e <HAL_RCC_OscConfig+0x4a2>
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 80082fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008302:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008304:	f023 0301 	bic.w	r3, r3, #1
 8008308:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800830c:	4b16      	ldr	r3, [pc, #88]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800830e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008312:	4a15      	ldr	r2, [pc, #84]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008318:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800831c:	4b12      	ldr	r3, [pc, #72]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800831e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008322:	4a11      	ldr	r2, [pc, #68]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008324:	f023 0304 	bic.w	r3, r3, #4
 8008328:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800832c:	e057      	b.n	80083de <HAL_RCC_OscConfig+0x552>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	2b05      	cmp	r3, #5
 8008334:	d11e      	bne.n	8008374 <HAL_RCC_OscConfig+0x4e8>
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800833c:	4a0a      	ldr	r2, [pc, #40]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800833e:	f043 0304 	orr.w	r3, r3, #4
 8008342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008346:	4b08      	ldr	r3, [pc, #32]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800834c:	4a06      	ldr	r2, [pc, #24]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800834e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008352:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008356:	4b04      	ldr	r3, [pc, #16]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 8008358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800835c:	4a02      	ldr	r2, [pc, #8]	; (8008368 <HAL_RCC_OscConfig+0x4dc>)
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008366:	e03a      	b.n	80083de <HAL_RCC_OscConfig+0x552>
 8008368:	44020c00 	.word	0x44020c00
 800836c:	2000005c 	.word	0x2000005c
 8008370:	44020800 	.word	0x44020800
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b85      	cmp	r3, #133	; 0x85
 800837a:	d118      	bne.n	80083ae <HAL_RCC_OscConfig+0x522>
 800837c:	4ba2      	ldr	r3, [pc, #648]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800837e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008382:	4aa1      	ldr	r2, [pc, #644]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008384:	f043 0304 	orr.w	r3, r3, #4
 8008388:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800838c:	4b9e      	ldr	r3, [pc, #632]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800838e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008392:	4a9d      	ldr	r2, [pc, #628]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008398:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800839c:	4b9a      	ldr	r3, [pc, #616]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800839e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083a2:	4a99      	ldr	r2, [pc, #612]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80083ac:	e017      	b.n	80083de <HAL_RCC_OscConfig+0x552>
 80083ae:	4b96      	ldr	r3, [pc, #600]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083b4:	4a94      	ldr	r2, [pc, #592]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083b6:	f023 0301 	bic.w	r3, r3, #1
 80083ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80083be:	4b92      	ldr	r3, [pc, #584]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083c4:	4a90      	ldr	r2, [pc, #576]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083c6:	f023 0304 	bic.w	r3, r3, #4
 80083ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80083ce:	4b8e      	ldr	r3, [pc, #568]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083d4:	4a8c      	ldr	r2, [pc, #560]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80083d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d016      	beq.n	8008414 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e6:	f7ff fa37 	bl	8007858 <HAL_GetTick>
 80083ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083ec:	e00a      	b.n	8008404 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ee:	f7ff fa33 	bl	8007858 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e175      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008404:	4b80      	ldr	r3, [pc, #512]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0ed      	beq.n	80083ee <HAL_RCC_OscConfig+0x562>
 8008412:	e015      	b.n	8008440 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008414:	f7ff fa20 	bl	8007858 <HAL_GetTick>
 8008418:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800841a:	e00a      	b.n	8008432 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800841c:	f7ff fa1c 	bl	8007858 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	f241 3288 	movw	r2, #5000	; 0x1388
 800842a:	4293      	cmp	r3, r2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e15e      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008432:	4b75      	ldr	r3, [pc, #468]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1ed      	bne.n	800841c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d036      	beq.n	80084ba <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d019      	beq.n	8008488 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008454:	4b6c      	ldr	r3, [pc, #432]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a6b      	ldr	r2, [pc, #428]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800845a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800845e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008460:	f7ff f9fa 	bl	8007858 <HAL_GetTick>
 8008464:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8008468:	f7ff f9f6 	bl	8007858 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e13a      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800847a:	4b63      	ldr	r3, [pc, #396]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0f0      	beq.n	8008468 <HAL_RCC_OscConfig+0x5dc>
 8008486:	e018      	b.n	80084ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008488:	4b5f      	ldr	r3, [pc, #380]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a5e      	ldr	r2, [pc, #376]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800848e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008492:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008494:	f7ff f9e0 	bl	8007858 <HAL_GetTick>
 8008498:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800849c:	f7ff f9dc 	bl	8007858 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e120      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80084ae:	4b56      	ldr	r3, [pc, #344]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1f0      	bne.n	800849c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8115 	beq.w	80086ee <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b18      	cmp	r3, #24
 80084c8:	f000 80af 	beq.w	800862a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	f040 8086 	bne.w	80085e2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80084d6:	4b4c      	ldr	r3, [pc, #304]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a4b      	ldr	r2, [pc, #300]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80084dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e2:	f7ff f9b9 	bl	8007858 <HAL_GetTick>
 80084e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80084e8:	e008      	b.n	80084fc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80084ea:	f7ff f9b5 	bl	8007858 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e0f9      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80084fc:	4b42      	ldr	r3, [pc, #264]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1f0      	bne.n	80084ea <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8008508:	4b3f      	ldr	r3, [pc, #252]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800850a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008510:	f023 0303 	bic.w	r3, r3, #3
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800851c:	0212      	lsls	r2, r2, #8
 800851e:	430a      	orrs	r2, r1
 8008520:	4939      	ldr	r1, [pc, #228]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008522:	4313      	orrs	r3, r2
 8008524:	628b      	str	r3, [r1, #40]	; 0x28
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852a:	3b01      	subs	r3, #1
 800852c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	3b01      	subs	r3, #1
 8008536:	025b      	lsls	r3, r3, #9
 8008538:	b29b      	uxth	r3, r3
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008540:	3b01      	subs	r3, #1
 8008542:	041b      	lsls	r3, r3, #16
 8008544:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	3b01      	subs	r3, #1
 8008550:	061b      	lsls	r3, r3, #24
 8008552:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008556:	492c      	ldr	r1, [pc, #176]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008558:	4313      	orrs	r3, r2
 800855a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800855c:	4b2a      	ldr	r3, [pc, #168]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	4a29      	ldr	r2, [pc, #164]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856c:	4a26      	ldr	r2, [pc, #152]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8008572:	4b25      	ldr	r3, [pc, #148]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	4a24      	ldr	r2, [pc, #144]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008578:	f043 0310 	orr.w	r3, r3, #16
 800857c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800857e:	4b22      	ldr	r3, [pc, #136]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008582:	f023 020c 	bic.w	r2, r3, #12
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	491f      	ldr	r1, [pc, #124]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800858c:	4313      	orrs	r3, r2
 800858e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8008590:	4b1d      	ldr	r3, [pc, #116]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f023 0220 	bic.w	r2, r3, #32
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800859c:	491a      	ldr	r1, [pc, #104]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085a2:	4b19      	ldr	r3, [pc, #100]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	4a18      	ldr	r2, [pc, #96]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80085ae:	4b16      	ldr	r3, [pc, #88]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ba:	f7ff f94d 	bl	8007858 <HAL_GetTick>
 80085be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80085c2:	f7ff f949 	bl	8007858 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e08d      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0f0      	beq.n	80085c2 <HAL_RCC_OscConfig+0x736>
 80085e0:	e085      	b.n	80086ee <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80085e2:	4b09      	ldr	r3, [pc, #36]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a08      	ldr	r2, [pc, #32]	; (8008608 <HAL_RCC_OscConfig+0x77c>)
 80085e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ee:	f7ff f933 	bl	8007858 <HAL_GetTick>
 80085f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80085f4:	e00a      	b.n	800860c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80085f6:	f7ff f92f 	bl	8007858 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d903      	bls.n	800860c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e073      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
 8008608:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800860c:	4b3a      	ldr	r3, [pc, #232]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1ee      	bne.n	80085f6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008618:	4b37      	ldr	r3, [pc, #220]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 800861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861c:	4a36      	ldr	r2, [pc, #216]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 800861e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	6293      	str	r3, [r2, #40]	; 0x28
 8008628:	e061      	b.n	80086ee <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800862a:	4b33      	ldr	r3, [pc, #204]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 800862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008630:	4b31      	ldr	r3, [pc, #196]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 8008632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008634:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	2b01      	cmp	r3, #1
 800863c:	d031      	beq.n	80086a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f003 0203 	and.w	r2, r3, #3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008648:	429a      	cmp	r2, r3
 800864a:	d12a      	bne.n	80086a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	0a1b      	lsrs	r3, r3, #8
 8008650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8008658:	429a      	cmp	r2, r3
 800865a:	d122      	bne.n	80086a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008666:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d11a      	bne.n	80086a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	0a5b      	lsrs	r3, r3, #9
 8008670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800867a:	429a      	cmp	r2, r3
 800867c:	d111      	bne.n	80086a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	0c1b      	lsrs	r3, r3, #16
 8008682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800868c:	429a      	cmp	r2, r3
 800868e:	d108      	bne.n	80086a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	0e1b      	lsrs	r3, r3, #24
 8008694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800869e:	429a      	cmp	r2, r3
 80086a0:	d001      	beq.n	80086a6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e024      	b.n	80086f0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	08db      	lsrs	r3, r3, #3
 80086ac:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d01a      	beq.n	80086ee <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80086b8:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 80086be:	f023 0310 	bic.w	r3, r3, #16
 80086c2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c4:	f7ff f8c8 	bl	8007858 <HAL_GetTick>
 80086c8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80086ca:	bf00      	nop
 80086cc:	f7ff f8c4 	bl	8007858 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d0f9      	beq.n	80086cc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086dc:	4a06      	ldr	r2, [pc, #24]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 80086e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e6:	4a04      	ldr	r2, [pc, #16]	; (80086f8 <HAL_RCC_OscConfig+0x86c>)
 80086e8:	f043 0310 	orr.w	r3, r3, #16
 80086ec:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3720      	adds	r7, #32
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	44020c00 	.word	0x44020c00

080086fc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e19e      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008710:	4b83      	ldr	r3, [pc, #524]	; (8008920 <HAL_RCC_ClockConfig+0x224>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d910      	bls.n	8008740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800871e:	4b80      	ldr	r3, [pc, #512]	; (8008920 <HAL_RCC_ClockConfig+0x224>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f023 020f 	bic.w	r2, r3, #15
 8008726:	497e      	ldr	r1, [pc, #504]	; (8008920 <HAL_RCC_ClockConfig+0x224>)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	4313      	orrs	r3, r2
 800872c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800872e:	4b7c      	ldr	r3, [pc, #496]	; (8008920 <HAL_RCC_ClockConfig+0x224>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d001      	beq.n	8008740 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e186      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b00      	cmp	r3, #0
 800874a:	d012      	beq.n	8008772 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	695a      	ldr	r2, [r3, #20]
 8008750:	4b74      	ldr	r3, [pc, #464]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	0a1b      	lsrs	r3, r3, #8
 8008756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800875a:	429a      	cmp	r2, r3
 800875c:	d909      	bls.n	8008772 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800875e:	4b71      	ldr	r3, [pc, #452]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	496d      	ldr	r1, [pc, #436]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 800876e:	4313      	orrs	r3, r2
 8008770:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d012      	beq.n	80087a4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691a      	ldr	r2, [r3, #16]
 8008782:	4b68      	ldr	r3, [pc, #416]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	091b      	lsrs	r3, r3, #4
 8008788:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800878c:	429a      	cmp	r2, r3
 800878e:	d909      	bls.n	80087a4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008790:	4b64      	ldr	r3, [pc, #400]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	4961      	ldr	r1, [pc, #388]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d010      	beq.n	80087d2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	4b5b      	ldr	r3, [pc, #364]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087bc:	429a      	cmp	r2, r3
 80087be:	d908      	bls.n	80087d2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80087c0:	4b58      	ldr	r3, [pc, #352]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	4955      	ldr	r1, [pc, #340]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d010      	beq.n	8008800 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	4b50      	ldr	r3, [pc, #320]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d908      	bls.n	8008800 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80087ee:	4b4d      	ldr	r3, [pc, #308]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	f023 020f 	bic.w	r2, r3, #15
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	494a      	ldr	r1, [pc, #296]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8093 	beq.w	8008934 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b03      	cmp	r3, #3
 8008814:	d107      	bne.n	8008826 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008816:	4b43      	ldr	r3, [pc, #268]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d121      	bne.n	8008866 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e113      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d107      	bne.n	800883e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800882e:	4b3d      	ldr	r3, [pc, #244]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d115      	bne.n	8008866 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e107      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d107      	bne.n	8008856 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8008846:	4b37      	ldr	r3, [pc, #220]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e0fb      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008856:	4b33      	ldr	r3, [pc, #204]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e0f3      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8008866:	4b2f      	ldr	r3, [pc, #188]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008868:	69db      	ldr	r3, [r3, #28]
 800886a:	f023 0203 	bic.w	r2, r3, #3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	492c      	ldr	r1, [pc, #176]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 8008874:	4313      	orrs	r3, r2
 8008876:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008878:	f7fe ffee 	bl	8007858 <HAL_GetTick>
 800887c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b03      	cmp	r3, #3
 8008884:	d112      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008886:	e00a      	b.n	800889e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008888:	f7fe ffe6 	bl	8007858 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	f241 3288 	movw	r2, #5000	; 0x1388
 8008896:	4293      	cmp	r3, r2
 8008898:	d901      	bls.n	800889e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e0d7      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800889e:	4b21      	ldr	r3, [pc, #132]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	f003 0318 	and.w	r3, r3, #24
 80088a6:	2b18      	cmp	r3, #24
 80088a8:	d1ee      	bne.n	8008888 <HAL_RCC_ClockConfig+0x18c>
 80088aa:	e043      	b.n	8008934 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d112      	bne.n	80088da <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088b4:	e00a      	b.n	80088cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80088b6:	f7fe ffcf 	bl	8007858 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e0c0      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088cc:	4b15      	ldr	r3, [pc, #84]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f003 0318 	and.w	r3, r3, #24
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d1ee      	bne.n	80088b6 <HAL_RCC_ClockConfig+0x1ba>
 80088d8:	e02c      	b.n	8008934 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d122      	bne.n	8008928 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80088e2:	e00a      	b.n	80088fa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80088e4:	f7fe ffb8 	bl	8007858 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e0a9      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80088fa:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <HAL_RCC_ClockConfig+0x228>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f003 0318 	and.w	r3, r3, #24
 8008902:	2b08      	cmp	r3, #8
 8008904:	d1ee      	bne.n	80088e4 <HAL_RCC_ClockConfig+0x1e8>
 8008906:	e015      	b.n	8008934 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008908:	f7fe ffa6 	bl	8007858 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	f241 3288 	movw	r2, #5000	; 0x1388
 8008916:	4293      	cmp	r3, r2
 8008918:	d906      	bls.n	8008928 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e097      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
 800891e:	bf00      	nop
 8008920:	40022000 	.word	0x40022000
 8008924:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008928:	4b4b      	ldr	r3, [pc, #300]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f003 0318 	and.w	r3, r3, #24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e9      	bne.n	8008908 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d010      	beq.n	8008962 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	4b44      	ldr	r3, [pc, #272]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	429a      	cmp	r2, r3
 800894e:	d208      	bcs.n	8008962 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8008950:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	f023 020f 	bic.w	r2, r3, #15
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	493e      	ldr	r1, [pc, #248]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008962:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <HAL_RCC_ClockConfig+0x360>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d210      	bcs.n	8008992 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008970:	4b3a      	ldr	r3, [pc, #232]	; (8008a5c <HAL_RCC_ClockConfig+0x360>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f023 020f 	bic.w	r2, r3, #15
 8008978:	4938      	ldr	r1, [pc, #224]	; (8008a5c <HAL_RCC_ClockConfig+0x360>)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	4313      	orrs	r3, r2
 800897e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008980:	4b36      	ldr	r3, [pc, #216]	; (8008a5c <HAL_RCC_ClockConfig+0x360>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d001      	beq.n	8008992 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e05d      	b.n	8008a4e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d010      	beq.n	80089c0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	4b2d      	ldr	r3, [pc, #180]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d208      	bcs.n	80089c0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80089ae:	4b2a      	ldr	r3, [pc, #168]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	4927      	ldr	r1, [pc, #156]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d012      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	091b      	lsrs	r3, r3, #4
 80089d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089da:	429a      	cmp	r2, r3
 80089dc:	d209      	bcs.n	80089f2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80089de:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	491a      	ldr	r1, [pc, #104]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d012      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	4b15      	ldr	r3, [pc, #84]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d209      	bcs.n	8008a24 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008a10:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	490e      	ldr	r1, [pc, #56]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a24:	f000 f822 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <HAL_RCC_ClockConfig+0x35c>)
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	490b      	ldr	r1, [pc, #44]	; (8008a60 <HAL_RCC_ClockConfig+0x364>)
 8008a34:	5ccb      	ldrb	r3, [r1, r3]
 8008a36:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	; (8008a64 <HAL_RCC_ClockConfig+0x368>)
 8008a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a3e:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <HAL_RCC_ClockConfig+0x36c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fe7e 	bl	8007744 <HAL_InitTick>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	44020c00 	.word	0x44020c00
 8008a5c:	40022000 	.word	0x40022000
 8008a60:	0800acc4 	.word	0x0800acc4
 8008a64:	20000058 	.word	0x20000058
 8008a68:	2000005c 	.word	0x2000005c

08008a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8008a72:	4b8c      	ldr	r3, [pc, #560]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f003 0318 	and.w	r3, r3, #24
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d102      	bne.n	8008a84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008a7e:	4b8a      	ldr	r3, [pc, #552]	; (8008ca8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	e107      	b.n	8008c94 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a84:	4b87      	ldr	r3, [pc, #540]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f003 0318 	and.w	r3, r3, #24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d112      	bne.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008a90:	4b84      	ldr	r3, [pc, #528]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a9c:	4b81      	ldr	r3, [pc, #516]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	4a81      	ldr	r2, [pc, #516]	; (8008cac <HAL_RCC_GetSysClockFreq+0x240>)
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	61fb      	str	r3, [r7, #28]
 8008aae:	e0f1      	b.n	8008c94 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008ab0:	4b7e      	ldr	r3, [pc, #504]	; (8008cac <HAL_RCC_GetSysClockFreq+0x240>)
 8008ab2:	61fb      	str	r3, [r7, #28]
 8008ab4:	e0ee      	b.n	8008c94 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ab6:	4b7b      	ldr	r3, [pc, #492]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f003 0318 	and.w	r3, r3, #24
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d102      	bne.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ac2:	4b7b      	ldr	r3, [pc, #492]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x244>)
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	e0e5      	b.n	8008c94 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ac8:	4b76      	ldr	r3, [pc, #472]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	f003 0318 	and.w	r3, r3, #24
 8008ad0:	2b18      	cmp	r3, #24
 8008ad2:	f040 80dd 	bne.w	8008c90 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008ad6:	4b73      	ldr	r3, [pc, #460]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008ae0:	4b70      	ldr	r3, [pc, #448]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	0a1b      	lsrs	r3, r3, #8
 8008ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008aec:	4b6d      	ldr	r3, [pc, #436]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008af8:	4b6a      	ldr	r3, [pc, #424]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8008afc:	08db      	lsrs	r3, r3, #3
 8008afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	fb02 f303 	mul.w	r3, r2, r3
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b10:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80b7 	beq.w	8008c8a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d003      	beq.n	8008b2a <HAL_RCC_GetSysClockFreq+0xbe>
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d056      	beq.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x16a>
 8008b28:	e077      	b.n	8008c1a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008b2a:	4b5e      	ldr	r3, [pc, #376]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d02d      	beq.n	8008b92 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b36:	4b5b      	ldr	r3, [pc, #364]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	08db      	lsrs	r3, r3, #3
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	4a5a      	ldr	r2, [pc, #360]	; (8008cac <HAL_RCC_GetSysClockFreq+0x240>)
 8008b42:	fa22 f303 	lsr.w	r3, r2, r3
 8008b46:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b60:	4b50      	ldr	r3, [pc, #320]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b70:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b74:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8008b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8008b90:	e065      	b.n	8008c5e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008cb8 <HAL_RCC_GetSysClockFreq+0x24c>
 8008ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba4:	4b3f      	ldr	r3, [pc, #252]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bb8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8008bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008bd4:	e043      	b.n	8008c5e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be0:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008cbc <HAL_RCC_GetSysClockFreq+0x250>
 8008be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be8:	4b2e      	ldr	r3, [pc, #184]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bfc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8008c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c14:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8008c18:	e021      	b.n	8008c5e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008cc0 <HAL_RCC_GetSysClockFreq+0x254>
 8008c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c40:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8008c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008c5c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x238>)
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	0a5b      	lsrs	r3, r3, #9
 8008c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c68:	3301      	adds	r3, #1
 8008c6a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c76:	edd7 6a06 	vldr	s13, [r7, #24]
 8008c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c82:	ee17 3a90 	vmov	r3, s15
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e004      	b.n	8008c94 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	e001      	b.n	8008c94 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <HAL_RCC_GetSysClockFreq+0x240>)
 8008c92:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8008c94:	69fb      	ldr	r3, [r7, #28]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3724      	adds	r7, #36	; 0x24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	44020c00 	.word	0x44020c00
 8008ca8:	003d0900 	.word	0x003d0900
 8008cac:	03d09000 	.word	0x03d09000
 8008cb0:	017d7840 	.word	0x017d7840
 8008cb4:	46000000 	.word	0x46000000
 8008cb8:	4c742400 	.word	0x4c742400
 8008cbc:	4bbebc20 	.word	0x4bbebc20
 8008cc0:	4a742400 	.word	0x4a742400

08008cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008cc8:	f7ff fed0 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008cd2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008cd6:	4907      	ldr	r1, [pc, #28]	; (8008cf4 <HAL_RCC_GetHCLKFreq+0x30>)
 8008cd8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008cda:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008cde:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce2:	4a05      	ldr	r2, [pc, #20]	; (8008cf8 <HAL_RCC_GetHCLKFreq+0x34>)
 8008ce4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8008ce6:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <HAL_RCC_GetHCLKFreq+0x34>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	44020c00 	.word	0x44020c00
 8008cf4:	0800acc4 	.word	0x0800acc4
 8008cf8:	20000058 	.word	0x20000058

08008cfc <__assert_func>:
 8008cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cfe:	4614      	mov	r4, r2
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <__assert_func+0x2c>)
 8008d04:	4605      	mov	r5, r0
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68d8      	ldr	r0, [r3, #12]
 8008d0a:	b14c      	cbz	r4, 8008d20 <__assert_func+0x24>
 8008d0c:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <__assert_func+0x30>)
 8008d0e:	9100      	str	r1, [sp, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	; (8008d30 <__assert_func+0x34>)
 8008d12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d16:	462b      	mov	r3, r5
 8008d18:	f000 f96e 	bl	8008ff8 <fiprintf>
 8008d1c:	f000 faba 	bl	8009294 <abort>
 8008d20:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <__assert_func+0x38>)
 8008d22:	461c      	mov	r4, r3
 8008d24:	e7f3      	b.n	8008d0e <__assert_func+0x12>
 8008d26:	bf00      	nop
 8008d28:	200000bc 	.word	0x200000bc
 8008d2c:	0800acd4 	.word	0x0800acd4
 8008d30:	0800ace1 	.word	0x0800ace1
 8008d34:	0800ad0f 	.word	0x0800ad0f

08008d38 <malloc>:
 8008d38:	4b02      	ldr	r3, [pc, #8]	; (8008d44 <malloc+0xc>)
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	f000 b82b 	b.w	8008d98 <_malloc_r>
 8008d42:	bf00      	nop
 8008d44:	200000bc 	.word	0x200000bc

08008d48 <free>:
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <free+0xc>)
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	f000 baa9 	b.w	80092a4 <_free_r>
 8008d52:	bf00      	nop
 8008d54:	200000bc 	.word	0x200000bc

08008d58 <sbrk_aligned>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	4e0e      	ldr	r6, [pc, #56]	; (8008d94 <sbrk_aligned+0x3c>)
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	4605      	mov	r5, r0
 8008d60:	6831      	ldr	r1, [r6, #0]
 8008d62:	b911      	cbnz	r1, 8008d6a <sbrk_aligned+0x12>
 8008d64:	f000 fa3a 	bl	80091dc <_sbrk_r>
 8008d68:	6030      	str	r0, [r6, #0]
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f000 fa35 	bl	80091dc <_sbrk_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d00a      	beq.n	8008d8c <sbrk_aligned+0x34>
 8008d76:	1cc4      	adds	r4, r0, #3
 8008d78:	f024 0403 	bic.w	r4, r4, #3
 8008d7c:	42a0      	cmp	r0, r4
 8008d7e:	d007      	beq.n	8008d90 <sbrk_aligned+0x38>
 8008d80:	1a21      	subs	r1, r4, r0
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 fa2a 	bl	80091dc <_sbrk_r>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d101      	bne.n	8008d90 <sbrk_aligned+0x38>
 8008d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d90:	4620      	mov	r0, r4
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	200000e8 	.word	0x200000e8

08008d98 <_malloc_r>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	1ccd      	adds	r5, r1, #3
 8008d9e:	4607      	mov	r7, r0
 8008da0:	f025 0503 	bic.w	r5, r5, #3
 8008da4:	3508      	adds	r5, #8
 8008da6:	2d0c      	cmp	r5, #12
 8008da8:	bf38      	it	cc
 8008daa:	250c      	movcc	r5, #12
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	db01      	blt.n	8008db4 <_malloc_r+0x1c>
 8008db0:	42a9      	cmp	r1, r5
 8008db2:	d905      	bls.n	8008dc0 <_malloc_r+0x28>
 8008db4:	230c      	movs	r3, #12
 8008db6:	2600      	movs	r6, #0
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e94 <_malloc_r+0xfc>
 8008dc4:	f000 f868 	bl	8008e98 <__malloc_lock>
 8008dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008dcc:	461c      	mov	r4, r3
 8008dce:	bb5c      	cbnz	r4, 8008e28 <_malloc_r+0x90>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f7ff ffc0 	bl	8008d58 <sbrk_aligned>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	4604      	mov	r4, r0
 8008ddc:	d155      	bne.n	8008e8a <_malloc_r+0xf2>
 8008dde:	f8d8 4000 	ldr.w	r4, [r8]
 8008de2:	4626      	mov	r6, r4
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	d145      	bne.n	8008e74 <_malloc_r+0xdc>
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	d048      	beq.n	8008e7e <_malloc_r+0xe6>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	4631      	mov	r1, r6
 8008df0:	4638      	mov	r0, r7
 8008df2:	eb04 0903 	add.w	r9, r4, r3
 8008df6:	f000 f9f1 	bl	80091dc <_sbrk_r>
 8008dfa:	4581      	cmp	r9, r0
 8008dfc:	d13f      	bne.n	8008e7e <_malloc_r+0xe6>
 8008dfe:	6821      	ldr	r1, [r4, #0]
 8008e00:	4638      	mov	r0, r7
 8008e02:	1a6d      	subs	r5, r5, r1
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7ff ffa7 	bl	8008d58 <sbrk_aligned>
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d037      	beq.n	8008e7e <_malloc_r+0xe6>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	442b      	add	r3, r5
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	f8d8 3000 	ldr.w	r3, [r8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d038      	beq.n	8008e8e <_malloc_r+0xf6>
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	42a2      	cmp	r2, r4
 8008e20:	d12b      	bne.n	8008e7a <_malloc_r+0xe2>
 8008e22:	2200      	movs	r2, #0
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	e00f      	b.n	8008e48 <_malloc_r+0xb0>
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	1b52      	subs	r2, r2, r5
 8008e2c:	d41f      	bmi.n	8008e6e <_malloc_r+0xd6>
 8008e2e:	2a0b      	cmp	r2, #11
 8008e30:	d917      	bls.n	8008e62 <_malloc_r+0xca>
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	6025      	str	r5, [r4, #0]
 8008e38:	bf18      	it	ne
 8008e3a:	6059      	strne	r1, [r3, #4]
 8008e3c:	6863      	ldr	r3, [r4, #4]
 8008e3e:	bf08      	it	eq
 8008e40:	f8c8 1000 	streq.w	r1, [r8]
 8008e44:	5162      	str	r2, [r4, r5]
 8008e46:	604b      	str	r3, [r1, #4]
 8008e48:	f104 060b 	add.w	r6, r4, #11
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f000 f829 	bl	8008ea4 <__malloc_unlock>
 8008e52:	1d23      	adds	r3, r4, #4
 8008e54:	f026 0607 	bic.w	r6, r6, #7
 8008e58:	1af2      	subs	r2, r6, r3
 8008e5a:	d0ae      	beq.n	8008dba <_malloc_r+0x22>
 8008e5c:	1b9b      	subs	r3, r3, r6
 8008e5e:	50a3      	str	r3, [r4, r2]
 8008e60:	e7ab      	b.n	8008dba <_malloc_r+0x22>
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	6862      	ldr	r2, [r4, #4]
 8008e66:	d1dd      	bne.n	8008e24 <_malloc_r+0x8c>
 8008e68:	f8c8 2000 	str.w	r2, [r8]
 8008e6c:	e7ec      	b.n	8008e48 <_malloc_r+0xb0>
 8008e6e:	4623      	mov	r3, r4
 8008e70:	6864      	ldr	r4, [r4, #4]
 8008e72:	e7ac      	b.n	8008dce <_malloc_r+0x36>
 8008e74:	4634      	mov	r4, r6
 8008e76:	6876      	ldr	r6, [r6, #4]
 8008e78:	e7b4      	b.n	8008de4 <_malloc_r+0x4c>
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	e7cc      	b.n	8008e18 <_malloc_r+0x80>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	4638      	mov	r0, r7
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	f000 f80e 	bl	8008ea4 <__malloc_unlock>
 8008e88:	e797      	b.n	8008dba <_malloc_r+0x22>
 8008e8a:	6025      	str	r5, [r4, #0]
 8008e8c:	e7dc      	b.n	8008e48 <_malloc_r+0xb0>
 8008e8e:	605b      	str	r3, [r3, #4]
 8008e90:	deff      	udf	#255	; 0xff
 8008e92:	bf00      	nop
 8008e94:	200000e4 	.word	0x200000e4

08008e98 <__malloc_lock>:
 8008e98:	4801      	ldr	r0, [pc, #4]	; (8008ea0 <__malloc_lock+0x8>)
 8008e9a:	f000 b9ec 	b.w	8009276 <__retarget_lock_acquire_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	2000022c 	.word	0x2000022c

08008ea4 <__malloc_unlock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__malloc_unlock+0x8>)
 8008ea6:	f000 b9e7 	b.w	8009278 <__retarget_lock_release_recursive>
 8008eaa:	bf00      	nop
 8008eac:	2000022c 	.word	0x2000022c

08008eb0 <std>:
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	8181      	strh	r1, [r0, #12]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6643      	str	r3, [r0, #100]	; 0x64
 8008ebe:	81c2      	strh	r2, [r0, #14]
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	6183      	str	r3, [r0, #24]
 8008ec4:	e9c0 3300 	strd	r3, r3, [r0]
 8008ec8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ecc:	305c      	adds	r0, #92	; 0x5c
 8008ece:	f000 f928 	bl	8009122 <memset>
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <std+0x58>)
 8008ed4:	6224      	str	r4, [r4, #32]
 8008ed6:	6263      	str	r3, [r4, #36]	; 0x24
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <std+0x5c>)
 8008eda:	62a3      	str	r3, [r4, #40]	; 0x28
 8008edc:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <std+0x60>)
 8008ede:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ee0:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <std+0x64>)
 8008ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <std+0x68>)
 8008ee6:	429c      	cmp	r4, r3
 8008ee8:	d006      	beq.n	8008ef8 <std+0x48>
 8008eea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008eee:	4294      	cmp	r4, r2
 8008ef0:	d002      	beq.n	8008ef8 <std+0x48>
 8008ef2:	33d0      	adds	r3, #208	; 0xd0
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d105      	bne.n	8008f04 <std+0x54>
 8008ef8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f00:	f000 b9b8 	b.w	8009274 <__retarget_lock_init_recursive>
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	bf00      	nop
 8008f08:	0800907d 	.word	0x0800907d
 8008f0c:	0800909f 	.word	0x0800909f
 8008f10:	080090d7 	.word	0x080090d7
 8008f14:	080090fb 	.word	0x080090fb
 8008f18:	200000ec 	.word	0x200000ec

08008f1c <stdio_exit_handler>:
 8008f1c:	4a02      	ldr	r2, [pc, #8]	; (8008f28 <stdio_exit_handler+0xc>)
 8008f1e:	4903      	ldr	r1, [pc, #12]	; (8008f2c <stdio_exit_handler+0x10>)
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <stdio_exit_handler+0x14>)
 8008f22:	f000 b87b 	b.w	800901c <_fwalk_sglue>
 8008f26:	bf00      	nop
 8008f28:	20000064 	.word	0x20000064
 8008f2c:	080099f1 	.word	0x080099f1
 8008f30:	20000070 	.word	0x20000070

08008f34 <cleanup_stdio>:
 8008f34:	6841      	ldr	r1, [r0, #4]
 8008f36:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <cleanup_stdio+0x34>)
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	d001      	beq.n	8008f44 <cleanup_stdio+0x10>
 8008f40:	f000 fd56 	bl	80099f0 <_fflush_r>
 8008f44:	68a1      	ldr	r1, [r4, #8]
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <cleanup_stdio+0x38>)
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	d002      	beq.n	8008f52 <cleanup_stdio+0x1e>
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 fd4f 	bl	80099f0 <_fflush_r>
 8008f52:	68e1      	ldr	r1, [r4, #12]
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <cleanup_stdio+0x3c>)
 8008f56:	4299      	cmp	r1, r3
 8008f58:	d004      	beq.n	8008f64 <cleanup_stdio+0x30>
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f60:	f000 bd46 	b.w	80099f0 <_fflush_r>
 8008f64:	bd10      	pop	{r4, pc}
 8008f66:	bf00      	nop
 8008f68:	200000ec 	.word	0x200000ec
 8008f6c:	20000154 	.word	0x20000154
 8008f70:	200001bc 	.word	0x200001bc

08008f74 <global_stdio_init.part.0>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <global_stdio_init.part.0+0x30>)
 8008f78:	2104      	movs	r1, #4
 8008f7a:	4c0b      	ldr	r4, [pc, #44]	; (8008fa8 <global_stdio_init.part.0+0x34>)
 8008f7c:	4a0b      	ldr	r2, [pc, #44]	; (8008fac <global_stdio_init.part.0+0x38>)
 8008f7e:	4620      	mov	r0, r4
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f7ff ff94 	bl	8008eb0 <std>
 8008f88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	2109      	movs	r1, #9
 8008f90:	f7ff ff8e 	bl	8008eb0 <std>
 8008f94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f98:	2202      	movs	r2, #2
 8008f9a:	2112      	movs	r1, #18
 8008f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa0:	f7ff bf86 	b.w	8008eb0 <std>
 8008fa4:	20000224 	.word	0x20000224
 8008fa8:	200000ec 	.word	0x200000ec
 8008fac:	08008f1d 	.word	0x08008f1d

08008fb0 <__sfp_lock_acquire>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__sfp_lock_acquire+0x8>)
 8008fb2:	f000 b960 	b.w	8009276 <__retarget_lock_acquire_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	2000022d 	.word	0x2000022d

08008fbc <__sfp_lock_release>:
 8008fbc:	4801      	ldr	r0, [pc, #4]	; (8008fc4 <__sfp_lock_release+0x8>)
 8008fbe:	f000 b95b 	b.w	8009278 <__retarget_lock_release_recursive>
 8008fc2:	bf00      	nop
 8008fc4:	2000022d 	.word	0x2000022d

08008fc8 <__sinit>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	4604      	mov	r4, r0
 8008fcc:	f7ff fff0 	bl	8008fb0 <__sfp_lock_acquire>
 8008fd0:	6a23      	ldr	r3, [r4, #32]
 8008fd2:	b11b      	cbz	r3, 8008fdc <__sinit+0x14>
 8008fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd8:	f7ff bff0 	b.w	8008fbc <__sfp_lock_release>
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <__sinit+0x28>)
 8008fde:	6223      	str	r3, [r4, #32]
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <__sinit+0x2c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1f5      	bne.n	8008fd4 <__sinit+0xc>
 8008fe8:	f7ff ffc4 	bl	8008f74 <global_stdio_init.part.0>
 8008fec:	e7f2      	b.n	8008fd4 <__sinit+0xc>
 8008fee:	bf00      	nop
 8008ff0:	08008f35 	.word	0x08008f35
 8008ff4:	20000224 	.word	0x20000224

08008ff8 <fiprintf>:
 8008ff8:	b40e      	push	{r1, r2, r3}
 8008ffa:	b503      	push	{r0, r1, lr}
 8008ffc:	ab03      	add	r3, sp, #12
 8008ffe:	4601      	mov	r1, r0
 8009000:	4805      	ldr	r0, [pc, #20]	; (8009018 <fiprintf+0x20>)
 8009002:	f853 2b04 	ldr.w	r2, [r3], #4
 8009006:	6800      	ldr	r0, [r0, #0]
 8009008:	9301      	str	r3, [sp, #4]
 800900a:	f000 f9c1 	bl	8009390 <_vfiprintf_r>
 800900e:	b002      	add	sp, #8
 8009010:	f85d eb04 	ldr.w	lr, [sp], #4
 8009014:	b003      	add	sp, #12
 8009016:	4770      	bx	lr
 8009018:	200000bc 	.word	0x200000bc

0800901c <_fwalk_sglue>:
 800901c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009020:	4607      	mov	r7, r0
 8009022:	4688      	mov	r8, r1
 8009024:	4614      	mov	r4, r2
 8009026:	2600      	movs	r6, #0
 8009028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800902c:	f1b9 0901 	subs.w	r9, r9, #1
 8009030:	d505      	bpl.n	800903e <_fwalk_sglue+0x22>
 8009032:	6824      	ldr	r4, [r4, #0]
 8009034:	2c00      	cmp	r4, #0
 8009036:	d1f7      	bne.n	8009028 <_fwalk_sglue+0xc>
 8009038:	4630      	mov	r0, r6
 800903a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d907      	bls.n	8009054 <_fwalk_sglue+0x38>
 8009044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009048:	3301      	adds	r3, #1
 800904a:	d003      	beq.n	8009054 <_fwalk_sglue+0x38>
 800904c:	4629      	mov	r1, r5
 800904e:	4638      	mov	r0, r7
 8009050:	47c0      	blx	r8
 8009052:	4306      	orrs	r6, r0
 8009054:	3568      	adds	r5, #104	; 0x68
 8009056:	e7e9      	b.n	800902c <_fwalk_sglue+0x10>

08009058 <iprintf>:
 8009058:	b40f      	push	{r0, r1, r2, r3}
 800905a:	b507      	push	{r0, r1, r2, lr}
 800905c:	4906      	ldr	r1, [pc, #24]	; (8009078 <iprintf+0x20>)
 800905e:	ab04      	add	r3, sp, #16
 8009060:	6808      	ldr	r0, [r1, #0]
 8009062:	f853 2b04 	ldr.w	r2, [r3], #4
 8009066:	6881      	ldr	r1, [r0, #8]
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	f000 f991 	bl	8009390 <_vfiprintf_r>
 800906e:	b003      	add	sp, #12
 8009070:	f85d eb04 	ldr.w	lr, [sp], #4
 8009074:	b004      	add	sp, #16
 8009076:	4770      	bx	lr
 8009078:	200000bc 	.word	0x200000bc

0800907c <__sread>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	f000 f898 	bl	80091b8 <_read_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	bfab      	itete	ge
 800908c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800908e:	89a3      	ldrhlt	r3, [r4, #12]
 8009090:	181b      	addge	r3, r3, r0
 8009092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009096:	bfac      	ite	ge
 8009098:	6563      	strge	r3, [r4, #84]	; 0x54
 800909a:	81a3      	strhlt	r3, [r4, #12]
 800909c:	bd10      	pop	{r4, pc}

0800909e <__swrite>:
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	461f      	mov	r7, r3
 80090a4:	898b      	ldrh	r3, [r1, #12]
 80090a6:	4605      	mov	r5, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	05db      	lsls	r3, r3, #23
 80090ac:	4616      	mov	r6, r2
 80090ae:	d505      	bpl.n	80090bc <__swrite+0x1e>
 80090b0:	2302      	movs	r3, #2
 80090b2:	2200      	movs	r2, #0
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	f000 f86c 	bl	8009194 <_lseek_r>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	4632      	mov	r2, r6
 80090c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c4:	4628      	mov	r0, r5
 80090c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	463b      	mov	r3, r7
 80090ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	f000 b893 	b.w	80091fc <_write_r>

080090d6 <__sseek>:
 80090d6:	b510      	push	{r4, lr}
 80090d8:	460c      	mov	r4, r1
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 f859 	bl	8009194 <_lseek_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	bf15      	itete	ne
 80090e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090f2:	81a3      	strheq	r3, [r4, #12]
 80090f4:	bf18      	it	ne
 80090f6:	81a3      	strhne	r3, [r4, #12]
 80090f8:	bd10      	pop	{r4, pc}

080090fa <__sclose>:
 80090fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fe:	f000 b839 	b.w	8009174 <_close_r>

08009102 <memcmp>:
 8009102:	3901      	subs	r1, #1
 8009104:	4402      	add	r2, r0
 8009106:	b510      	push	{r4, lr}
 8009108:	4290      	cmp	r0, r2
 800910a:	d101      	bne.n	8009110 <memcmp+0xe>
 800910c:	2000      	movs	r0, #0
 800910e:	e005      	b.n	800911c <memcmp+0x1a>
 8009110:	7803      	ldrb	r3, [r0, #0]
 8009112:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009116:	42a3      	cmp	r3, r4
 8009118:	d001      	beq.n	800911e <memcmp+0x1c>
 800911a:	1b18      	subs	r0, r3, r4
 800911c:	bd10      	pop	{r4, pc}
 800911e:	3001      	adds	r0, #1
 8009120:	e7f2      	b.n	8009108 <memcmp+0x6>

08009122 <memset>:
 8009122:	4402      	add	r2, r0
 8009124:	4603      	mov	r3, r0
 8009126:	4293      	cmp	r3, r2
 8009128:	d100      	bne.n	800912c <memset+0xa>
 800912a:	4770      	bx	lr
 800912c:	f803 1b01 	strb.w	r1, [r3], #1
 8009130:	e7f9      	b.n	8009126 <memset+0x4>

08009132 <strcspn>:
 8009132:	4603      	mov	r3, r0
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	461e      	mov	r6, r3
 8009138:	f813 4b01 	ldrb.w	r4, [r3], #1
 800913c:	b144      	cbz	r4, 8009150 <strcspn+0x1e>
 800913e:	1e4a      	subs	r2, r1, #1
 8009140:	e001      	b.n	8009146 <strcspn+0x14>
 8009142:	42a5      	cmp	r5, r4
 8009144:	d004      	beq.n	8009150 <strcspn+0x1e>
 8009146:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800914a:	2d00      	cmp	r5, #0
 800914c:	d1f9      	bne.n	8009142 <strcspn+0x10>
 800914e:	e7f2      	b.n	8009136 <strcspn+0x4>
 8009150:	1a30      	subs	r0, r6, r0
 8009152:	bd70      	pop	{r4, r5, r6, pc}

08009154 <strspn>:
 8009154:	4603      	mov	r3, r0
 8009156:	b570      	push	{r4, r5, r6, lr}
 8009158:	461e      	mov	r6, r3
 800915a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800915e:	b13c      	cbz	r4, 8009170 <strspn+0x1c>
 8009160:	1e4a      	subs	r2, r1, #1
 8009162:	e001      	b.n	8009168 <strspn+0x14>
 8009164:	42a5      	cmp	r5, r4
 8009166:	d0f7      	beq.n	8009158 <strspn+0x4>
 8009168:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800916c:	2d00      	cmp	r5, #0
 800916e:	d1f9      	bne.n	8009164 <strspn+0x10>
 8009170:	1a30      	subs	r0, r6, r0
 8009172:	bd70      	pop	{r4, r5, r6, pc}

08009174 <_close_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	2300      	movs	r3, #0
 8009178:	4d05      	ldr	r5, [pc, #20]	; (8009190 <_close_r+0x1c>)
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	f7f7 facb 	bl	800071a <_close>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_close_r+0x1a>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_close_r+0x1a>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20000228 	.word	0x20000228

08009194 <_lseek_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4604      	mov	r4, r0
 8009198:	4d06      	ldr	r5, [pc, #24]	; (80091b4 <_lseek_r+0x20>)
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f7 fae0 	bl	8000768 <_lseek>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_lseek_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_lseek_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000228 	.word	0x20000228

080091b8 <_read_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4604      	mov	r4, r0
 80091bc:	4d06      	ldr	r5, [pc, #24]	; (80091d8 <_read_r+0x20>)
 80091be:	4608      	mov	r0, r1
 80091c0:	4611      	mov	r1, r2
 80091c2:	2200      	movs	r2, #0
 80091c4:	602a      	str	r2, [r5, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f7f7 fa6e 	bl	80006a8 <_read>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_read_r+0x1e>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_read_r+0x1e>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	20000228 	.word	0x20000228

080091dc <_sbrk_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	2300      	movs	r3, #0
 80091e0:	4d05      	ldr	r5, [pc, #20]	; (80091f8 <_sbrk_r+0x1c>)
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7f7 facc 	bl	8000784 <_sbrk>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_sbrk_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_sbrk_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	20000228 	.word	0x20000228

080091fc <_write_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4604      	mov	r4, r0
 8009200:	4d06      	ldr	r5, [pc, #24]	; (800921c <_write_r+0x20>)
 8009202:	4608      	mov	r0, r1
 8009204:	4611      	mov	r1, r2
 8009206:	2200      	movs	r2, #0
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f7 fa69 	bl	80006e2 <_write>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_write_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_write_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000228 	.word	0x20000228

08009220 <__errno>:
 8009220:	4b01      	ldr	r3, [pc, #4]	; (8009228 <__errno+0x8>)
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	200000bc 	.word	0x200000bc

0800922c <__libc_init_array>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	4d0d      	ldr	r5, [pc, #52]	; (8009264 <__libc_init_array+0x38>)
 8009230:	2600      	movs	r6, #0
 8009232:	4c0d      	ldr	r4, [pc, #52]	; (8009268 <__libc_init_array+0x3c>)
 8009234:	1b64      	subs	r4, r4, r5
 8009236:	10a4      	asrs	r4, r4, #2
 8009238:	42a6      	cmp	r6, r4
 800923a:	d109      	bne.n	8009250 <__libc_init_array+0x24>
 800923c:	4d0b      	ldr	r5, [pc, #44]	; (800926c <__libc_init_array+0x40>)
 800923e:	2600      	movs	r6, #0
 8009240:	4c0b      	ldr	r4, [pc, #44]	; (8009270 <__libc_init_array+0x44>)
 8009242:	f000 fd69 	bl	8009d18 <_init>
 8009246:	1b64      	subs	r4, r4, r5
 8009248:	10a4      	asrs	r4, r4, #2
 800924a:	42a6      	cmp	r6, r4
 800924c:	d105      	bne.n	800925a <__libc_init_array+0x2e>
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	f855 3b04 	ldr.w	r3, [r5], #4
 8009254:	3601      	adds	r6, #1
 8009256:	4798      	blx	r3
 8009258:	e7ee      	b.n	8009238 <__libc_init_array+0xc>
 800925a:	f855 3b04 	ldr.w	r3, [r5], #4
 800925e:	3601      	adds	r6, #1
 8009260:	4798      	blx	r3
 8009262:	e7f2      	b.n	800924a <__libc_init_array+0x1e>
 8009264:	0800ad44 	.word	0x0800ad44
 8009268:	0800ad44 	.word	0x0800ad44
 800926c:	0800ad44 	.word	0x0800ad44
 8009270:	0800ad48 	.word	0x0800ad48

08009274 <__retarget_lock_init_recursive>:
 8009274:	4770      	bx	lr

08009276 <__retarget_lock_acquire_recursive>:
 8009276:	4770      	bx	lr

08009278 <__retarget_lock_release_recursive>:
 8009278:	4770      	bx	lr

0800927a <memcpy>:
 800927a:	440a      	add	r2, r1
 800927c:	1e43      	subs	r3, r0, #1
 800927e:	4291      	cmp	r1, r2
 8009280:	d100      	bne.n	8009284 <memcpy+0xa>
 8009282:	4770      	bx	lr
 8009284:	b510      	push	{r4, lr}
 8009286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800928a:	4291      	cmp	r1, r2
 800928c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009290:	d1f9      	bne.n	8009286 <memcpy+0xc>
 8009292:	bd10      	pop	{r4, pc}

08009294 <abort>:
 8009294:	2006      	movs	r0, #6
 8009296:	b508      	push	{r3, lr}
 8009298:	f000 fc90 	bl	8009bbc <raise>
 800929c:	2001      	movs	r0, #1
 800929e:	f7f7 f9f9 	bl	8000694 <_exit>
	...

080092a4 <_free_r>:
 80092a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092a6:	2900      	cmp	r1, #0
 80092a8:	d043      	beq.n	8009332 <_free_r+0x8e>
 80092aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ae:	1f0c      	subs	r4, r1, #4
 80092b0:	9001      	str	r0, [sp, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	bfb8      	it	lt
 80092b6:	18e4      	addlt	r4, r4, r3
 80092b8:	f7ff fdee 	bl	8008e98 <__malloc_lock>
 80092bc:	4a1e      	ldr	r2, [pc, #120]	; (8009338 <_free_r+0x94>)
 80092be:	9801      	ldr	r0, [sp, #4]
 80092c0:	6813      	ldr	r3, [r2, #0]
 80092c2:	b933      	cbnz	r3, 80092d2 <_free_r+0x2e>
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	6014      	str	r4, [r2, #0]
 80092c8:	b003      	add	sp, #12
 80092ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092ce:	f7ff bde9 	b.w	8008ea4 <__malloc_unlock>
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	d908      	bls.n	80092e8 <_free_r+0x44>
 80092d6:	6825      	ldr	r5, [r4, #0]
 80092d8:	1961      	adds	r1, r4, r5
 80092da:	428b      	cmp	r3, r1
 80092dc:	bf01      	itttt	eq
 80092de:	6819      	ldreq	r1, [r3, #0]
 80092e0:	685b      	ldreq	r3, [r3, #4]
 80092e2:	1949      	addeq	r1, r1, r5
 80092e4:	6021      	streq	r1, [r4, #0]
 80092e6:	e7ed      	b.n	80092c4 <_free_r+0x20>
 80092e8:	461a      	mov	r2, r3
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	b10b      	cbz	r3, 80092f2 <_free_r+0x4e>
 80092ee:	42a3      	cmp	r3, r4
 80092f0:	d9fa      	bls.n	80092e8 <_free_r+0x44>
 80092f2:	6811      	ldr	r1, [r2, #0]
 80092f4:	1855      	adds	r5, r2, r1
 80092f6:	42a5      	cmp	r5, r4
 80092f8:	d10b      	bne.n	8009312 <_free_r+0x6e>
 80092fa:	6824      	ldr	r4, [r4, #0]
 80092fc:	4421      	add	r1, r4
 80092fe:	1854      	adds	r4, r2, r1
 8009300:	6011      	str	r1, [r2, #0]
 8009302:	42a3      	cmp	r3, r4
 8009304:	d1e0      	bne.n	80092c8 <_free_r+0x24>
 8009306:	681c      	ldr	r4, [r3, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	440c      	add	r4, r1
 800930c:	6053      	str	r3, [r2, #4]
 800930e:	6014      	str	r4, [r2, #0]
 8009310:	e7da      	b.n	80092c8 <_free_r+0x24>
 8009312:	d902      	bls.n	800931a <_free_r+0x76>
 8009314:	230c      	movs	r3, #12
 8009316:	6003      	str	r3, [r0, #0]
 8009318:	e7d6      	b.n	80092c8 <_free_r+0x24>
 800931a:	6825      	ldr	r5, [r4, #0]
 800931c:	1961      	adds	r1, r4, r5
 800931e:	428b      	cmp	r3, r1
 8009320:	bf02      	ittt	eq
 8009322:	6819      	ldreq	r1, [r3, #0]
 8009324:	685b      	ldreq	r3, [r3, #4]
 8009326:	1949      	addeq	r1, r1, r5
 8009328:	6063      	str	r3, [r4, #4]
 800932a:	bf08      	it	eq
 800932c:	6021      	streq	r1, [r4, #0]
 800932e:	6054      	str	r4, [r2, #4]
 8009330:	e7ca      	b.n	80092c8 <_free_r+0x24>
 8009332:	b003      	add	sp, #12
 8009334:	bd30      	pop	{r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	200000e4 	.word	0x200000e4

0800933c <__sfputc_r>:
 800933c:	6893      	ldr	r3, [r2, #8]
 800933e:	3b01      	subs	r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	6093      	str	r3, [r2, #8]
 8009344:	b410      	push	{r4}
 8009346:	da08      	bge.n	800935a <__sfputc_r+0x1e>
 8009348:	6994      	ldr	r4, [r2, #24]
 800934a:	42a3      	cmp	r3, r4
 800934c:	db01      	blt.n	8009352 <__sfputc_r+0x16>
 800934e:	290a      	cmp	r1, #10
 8009350:	d103      	bne.n	800935a <__sfputc_r+0x1e>
 8009352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009356:	f000 bb73 	b.w	8009a40 <__swbuf_r>
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	1c58      	adds	r0, r3, #1
 800935e:	6010      	str	r0, [r2, #0]
 8009360:	4608      	mov	r0, r1
 8009362:	7019      	strb	r1, [r3, #0]
 8009364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009368:	4770      	bx	lr

0800936a <__sfputs_r>:
 800936a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936c:	4606      	mov	r6, r0
 800936e:	460f      	mov	r7, r1
 8009370:	4614      	mov	r4, r2
 8009372:	18d5      	adds	r5, r2, r3
 8009374:	42ac      	cmp	r4, r5
 8009376:	d101      	bne.n	800937c <__sfputs_r+0x12>
 8009378:	2000      	movs	r0, #0
 800937a:	e007      	b.n	800938c <__sfputs_r+0x22>
 800937c:	463a      	mov	r2, r7
 800937e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ffda 	bl	800933c <__sfputc_r>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d1f3      	bne.n	8009374 <__sfputs_r+0xa>
 800938c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009390 <_vfiprintf_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	460d      	mov	r5, r1
 8009396:	b09d      	sub	sp, #116	; 0x74
 8009398:	4614      	mov	r4, r2
 800939a:	4698      	mov	r8, r3
 800939c:	4606      	mov	r6, r0
 800939e:	b118      	cbz	r0, 80093a8 <_vfiprintf_r+0x18>
 80093a0:	6a03      	ldr	r3, [r0, #32]
 80093a2:	b90b      	cbnz	r3, 80093a8 <_vfiprintf_r+0x18>
 80093a4:	f7ff fe10 	bl	8008fc8 <__sinit>
 80093a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093aa:	07d9      	lsls	r1, r3, #31
 80093ac:	d405      	bmi.n	80093ba <_vfiprintf_r+0x2a>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	059a      	lsls	r2, r3, #22
 80093b2:	d402      	bmi.n	80093ba <_vfiprintf_r+0x2a>
 80093b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093b6:	f7ff ff5e 	bl	8009276 <__retarget_lock_acquire_recursive>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	071b      	lsls	r3, r3, #28
 80093be:	d501      	bpl.n	80093c4 <_vfiprintf_r+0x34>
 80093c0:	692b      	ldr	r3, [r5, #16]
 80093c2:	b99b      	cbnz	r3, 80093ec <_vfiprintf_r+0x5c>
 80093c4:	4629      	mov	r1, r5
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 fb78 	bl	8009abc <__swsetup_r>
 80093cc:	b170      	cbz	r0, 80093ec <_vfiprintf_r+0x5c>
 80093ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d0:	07dc      	lsls	r4, r3, #31
 80093d2:	d504      	bpl.n	80093de <_vfiprintf_r+0x4e>
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	b01d      	add	sp, #116	; 0x74
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	0598      	lsls	r0, r3, #22
 80093e2:	d4f7      	bmi.n	80093d4 <_vfiprintf_r+0x44>
 80093e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e6:	f7ff ff47 	bl	8009278 <__retarget_lock_release_recursive>
 80093ea:	e7f3      	b.n	80093d4 <_vfiprintf_r+0x44>
 80093ec:	2300      	movs	r3, #0
 80093ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f2:	f04f 0901 	mov.w	r9, #1
 80093f6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80095b0 <_vfiprintf_r+0x220>
 80093fa:	9309      	str	r3, [sp, #36]	; 0x24
 80093fc:	2320      	movs	r3, #32
 80093fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009402:	2330      	movs	r3, #48	; 0x30
 8009404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009408:	4623      	mov	r3, r4
 800940a:	469a      	mov	sl, r3
 800940c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009410:	b10a      	cbz	r2, 8009416 <_vfiprintf_r+0x86>
 8009412:	2a25      	cmp	r2, #37	; 0x25
 8009414:	d1f9      	bne.n	800940a <_vfiprintf_r+0x7a>
 8009416:	ebba 0b04 	subs.w	fp, sl, r4
 800941a:	d00b      	beq.n	8009434 <_vfiprintf_r+0xa4>
 800941c:	465b      	mov	r3, fp
 800941e:	4622      	mov	r2, r4
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f7ff ffa1 	bl	800936a <__sfputs_r>
 8009428:	3001      	adds	r0, #1
 800942a:	f000 80a9 	beq.w	8009580 <_vfiprintf_r+0x1f0>
 800942e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009430:	445a      	add	r2, fp
 8009432:	9209      	str	r2, [sp, #36]	; 0x24
 8009434:	f89a 3000 	ldrb.w	r3, [sl]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 80a1 	beq.w	8009580 <_vfiprintf_r+0x1f0>
 800943e:	2300      	movs	r3, #0
 8009440:	f04f 32ff 	mov.w	r2, #4294967295
 8009444:	f10a 0a01 	add.w	sl, sl, #1
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	9307      	str	r3, [sp, #28]
 800944c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009450:	931a      	str	r3, [sp, #104]	; 0x68
 8009452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009456:	4654      	mov	r4, sl
 8009458:	2205      	movs	r2, #5
 800945a:	4855      	ldr	r0, [pc, #340]	; (80095b0 <_vfiprintf_r+0x220>)
 800945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009460:	f000 fbc8 	bl	8009bf4 <memchr>
 8009464:	9a04      	ldr	r2, [sp, #16]
 8009466:	b9d8      	cbnz	r0, 80094a0 <_vfiprintf_r+0x110>
 8009468:	06d1      	lsls	r1, r2, #27
 800946a:	bf44      	itt	mi
 800946c:	2320      	movmi	r3, #32
 800946e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009472:	0713      	lsls	r3, r2, #28
 8009474:	bf44      	itt	mi
 8009476:	232b      	movmi	r3, #43	; 0x2b
 8009478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b2a      	cmp	r3, #42	; 0x2a
 8009482:	d015      	beq.n	80094b0 <_vfiprintf_r+0x120>
 8009484:	9a07      	ldr	r2, [sp, #28]
 8009486:	4654      	mov	r4, sl
 8009488:	2000      	movs	r0, #0
 800948a:	f04f 0c0a 	mov.w	ip, #10
 800948e:	4621      	mov	r1, r4
 8009490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009494:	3b30      	subs	r3, #48	; 0x30
 8009496:	2b09      	cmp	r3, #9
 8009498:	d94d      	bls.n	8009536 <_vfiprintf_r+0x1a6>
 800949a:	b1b0      	cbz	r0, 80094ca <_vfiprintf_r+0x13a>
 800949c:	9207      	str	r2, [sp, #28]
 800949e:	e014      	b.n	80094ca <_vfiprintf_r+0x13a>
 80094a0:	eba0 0308 	sub.w	r3, r0, r8
 80094a4:	46a2      	mov	sl, r4
 80094a6:	fa09 f303 	lsl.w	r3, r9, r3
 80094aa:	4313      	orrs	r3, r2
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	e7d2      	b.n	8009456 <_vfiprintf_r+0xc6>
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	1d19      	adds	r1, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	9103      	str	r1, [sp, #12]
 80094ba:	bfbb      	ittet	lt
 80094bc:	425b      	neglt	r3, r3
 80094be:	f042 0202 	orrlt.w	r2, r2, #2
 80094c2:	9307      	strge	r3, [sp, #28]
 80094c4:	9307      	strlt	r3, [sp, #28]
 80094c6:	bfb8      	it	lt
 80094c8:	9204      	strlt	r2, [sp, #16]
 80094ca:	7823      	ldrb	r3, [r4, #0]
 80094cc:	2b2e      	cmp	r3, #46	; 0x2e
 80094ce:	d10c      	bne.n	80094ea <_vfiprintf_r+0x15a>
 80094d0:	7863      	ldrb	r3, [r4, #1]
 80094d2:	2b2a      	cmp	r3, #42	; 0x2a
 80094d4:	d134      	bne.n	8009540 <_vfiprintf_r+0x1b0>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	3402      	adds	r4, #2
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	9203      	str	r2, [sp, #12]
 80094e2:	bfb8      	it	lt
 80094e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80095c0 <_vfiprintf_r+0x230>
 80094ee:	2203      	movs	r2, #3
 80094f0:	7821      	ldrb	r1, [r4, #0]
 80094f2:	4650      	mov	r0, sl
 80094f4:	f000 fb7e 	bl	8009bf4 <memchr>
 80094f8:	b138      	cbz	r0, 800950a <_vfiprintf_r+0x17a>
 80094fa:	eba0 000a 	sub.w	r0, r0, sl
 80094fe:	2240      	movs	r2, #64	; 0x40
 8009500:	9b04      	ldr	r3, [sp, #16]
 8009502:	3401      	adds	r4, #1
 8009504:	4082      	lsls	r2, r0
 8009506:	4313      	orrs	r3, r2
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950e:	2206      	movs	r2, #6
 8009510:	4828      	ldr	r0, [pc, #160]	; (80095b4 <_vfiprintf_r+0x224>)
 8009512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009516:	f000 fb6d 	bl	8009bf4 <memchr>
 800951a:	2800      	cmp	r0, #0
 800951c:	d03f      	beq.n	800959e <_vfiprintf_r+0x20e>
 800951e:	4b26      	ldr	r3, [pc, #152]	; (80095b8 <_vfiprintf_r+0x228>)
 8009520:	bb1b      	cbnz	r3, 800956a <_vfiprintf_r+0x1da>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	3307      	adds	r3, #7
 8009526:	f023 0307 	bic.w	r3, r3, #7
 800952a:	3308      	adds	r3, #8
 800952c:	9303      	str	r3, [sp, #12]
 800952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009530:	443b      	add	r3, r7
 8009532:	9309      	str	r3, [sp, #36]	; 0x24
 8009534:	e768      	b.n	8009408 <_vfiprintf_r+0x78>
 8009536:	fb0c 3202 	mla	r2, ip, r2, r3
 800953a:	460c      	mov	r4, r1
 800953c:	2001      	movs	r0, #1
 800953e:	e7a6      	b.n	800948e <_vfiprintf_r+0xfe>
 8009540:	2300      	movs	r3, #0
 8009542:	3401      	adds	r4, #1
 8009544:	f04f 0c0a 	mov.w	ip, #10
 8009548:	4619      	mov	r1, r3
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	4620      	mov	r0, r4
 800954e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009552:	3a30      	subs	r2, #48	; 0x30
 8009554:	2a09      	cmp	r2, #9
 8009556:	d903      	bls.n	8009560 <_vfiprintf_r+0x1d0>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0c6      	beq.n	80094ea <_vfiprintf_r+0x15a>
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	e7c4      	b.n	80094ea <_vfiprintf_r+0x15a>
 8009560:	fb0c 2101 	mla	r1, ip, r1, r2
 8009564:	4604      	mov	r4, r0
 8009566:	2301      	movs	r3, #1
 8009568:	e7f0      	b.n	800954c <_vfiprintf_r+0x1bc>
 800956a:	ab03      	add	r3, sp, #12
 800956c:	462a      	mov	r2, r5
 800956e:	a904      	add	r1, sp, #16
 8009570:	4630      	mov	r0, r6
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4b11      	ldr	r3, [pc, #68]	; (80095bc <_vfiprintf_r+0x22c>)
 8009576:	f3af 8000 	nop.w
 800957a:	4607      	mov	r7, r0
 800957c:	1c78      	adds	r0, r7, #1
 800957e:	d1d6      	bne.n	800952e <_vfiprintf_r+0x19e>
 8009580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009582:	07d9      	lsls	r1, r3, #31
 8009584:	d405      	bmi.n	8009592 <_vfiprintf_r+0x202>
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	059a      	lsls	r2, r3, #22
 800958a:	d402      	bmi.n	8009592 <_vfiprintf_r+0x202>
 800958c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958e:	f7ff fe73 	bl	8009278 <__retarget_lock_release_recursive>
 8009592:	89ab      	ldrh	r3, [r5, #12]
 8009594:	065b      	lsls	r3, r3, #25
 8009596:	f53f af1d 	bmi.w	80093d4 <_vfiprintf_r+0x44>
 800959a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959c:	e71c      	b.n	80093d8 <_vfiprintf_r+0x48>
 800959e:	ab03      	add	r3, sp, #12
 80095a0:	462a      	mov	r2, r5
 80095a2:	a904      	add	r1, sp, #16
 80095a4:	4630      	mov	r0, r6
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <_vfiprintf_r+0x22c>)
 80095aa:	f000 f87d 	bl	80096a8 <_printf_i>
 80095ae:	e7e4      	b.n	800957a <_vfiprintf_r+0x1ea>
 80095b0:	0800ad10 	.word	0x0800ad10
 80095b4:	0800ad1a 	.word	0x0800ad1a
 80095b8:	00000000 	.word	0x00000000
 80095bc:	0800936b 	.word	0x0800936b
 80095c0:	0800ad16 	.word	0x0800ad16

080095c4 <_printf_common>:
 80095c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c8:	4616      	mov	r6, r2
 80095ca:	4699      	mov	r9, r3
 80095cc:	688a      	ldr	r2, [r1, #8]
 80095ce:	4607      	mov	r7, r0
 80095d0:	690b      	ldr	r3, [r1, #16]
 80095d2:	460c      	mov	r4, r1
 80095d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095d8:	4293      	cmp	r3, r2
 80095da:	bfb8      	it	lt
 80095dc:	4613      	movlt	r3, r2
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095e4:	b10a      	cbz	r2, 80095ea <_printf_common+0x26>
 80095e6:	3301      	adds	r3, #1
 80095e8:	6033      	str	r3, [r6, #0]
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	0699      	lsls	r1, r3, #26
 80095ee:	bf42      	ittt	mi
 80095f0:	6833      	ldrmi	r3, [r6, #0]
 80095f2:	3302      	addmi	r3, #2
 80095f4:	6033      	strmi	r3, [r6, #0]
 80095f6:	6825      	ldr	r5, [r4, #0]
 80095f8:	f015 0506 	ands.w	r5, r5, #6
 80095fc:	d106      	bne.n	800960c <_printf_common+0x48>
 80095fe:	f104 0a19 	add.w	sl, r4, #25
 8009602:	68e3      	ldr	r3, [r4, #12]
 8009604:	6832      	ldr	r2, [r6, #0]
 8009606:	1a9b      	subs	r3, r3, r2
 8009608:	42ab      	cmp	r3, r5
 800960a:	dc2b      	bgt.n	8009664 <_printf_common+0xa0>
 800960c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009610:	1e13      	subs	r3, r2, #0
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	bf18      	it	ne
 8009616:	2301      	movne	r3, #1
 8009618:	0692      	lsls	r2, r2, #26
 800961a:	d430      	bmi.n	800967e <_printf_common+0xba>
 800961c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009620:	4649      	mov	r1, r9
 8009622:	4638      	mov	r0, r7
 8009624:	47c0      	blx	r8
 8009626:	3001      	adds	r0, #1
 8009628:	d023      	beq.n	8009672 <_printf_common+0xae>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	341a      	adds	r4, #26
 800962e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009632:	f003 0306 	and.w	r3, r3, #6
 8009636:	2b04      	cmp	r3, #4
 8009638:	bf0a      	itet	eq
 800963a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800963e:	2500      	movne	r5, #0
 8009640:	6833      	ldreq	r3, [r6, #0]
 8009642:	f04f 0600 	mov.w	r6, #0
 8009646:	bf08      	it	eq
 8009648:	1aed      	subeq	r5, r5, r3
 800964a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800964e:	bf08      	it	eq
 8009650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009654:	4293      	cmp	r3, r2
 8009656:	bfc4      	itt	gt
 8009658:	1a9b      	subgt	r3, r3, r2
 800965a:	18ed      	addgt	r5, r5, r3
 800965c:	42b5      	cmp	r5, r6
 800965e:	d11a      	bne.n	8009696 <_printf_common+0xd2>
 8009660:	2000      	movs	r0, #0
 8009662:	e008      	b.n	8009676 <_printf_common+0xb2>
 8009664:	2301      	movs	r3, #1
 8009666:	4652      	mov	r2, sl
 8009668:	4649      	mov	r1, r9
 800966a:	4638      	mov	r0, r7
 800966c:	47c0      	blx	r8
 800966e:	3001      	adds	r0, #1
 8009670:	d103      	bne.n	800967a <_printf_common+0xb6>
 8009672:	f04f 30ff 	mov.w	r0, #4294967295
 8009676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967a:	3501      	adds	r5, #1
 800967c:	e7c1      	b.n	8009602 <_printf_common+0x3e>
 800967e:	18e1      	adds	r1, r4, r3
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	2030      	movs	r0, #48	; 0x30
 8009684:	3302      	adds	r3, #2
 8009686:	4422      	add	r2, r4
 8009688:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800968c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009694:	e7c2      	b.n	800961c <_printf_common+0x58>
 8009696:	2301      	movs	r3, #1
 8009698:	4622      	mov	r2, r4
 800969a:	4649      	mov	r1, r9
 800969c:	4638      	mov	r0, r7
 800969e:	47c0      	blx	r8
 80096a0:	3001      	adds	r0, #1
 80096a2:	d0e6      	beq.n	8009672 <_printf_common+0xae>
 80096a4:	3601      	adds	r6, #1
 80096a6:	e7d9      	b.n	800965c <_printf_common+0x98>

080096a8 <_printf_i>:
 80096a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	7e0f      	ldrb	r7, [r1, #24]
 80096ae:	4691      	mov	r9, r2
 80096b0:	4680      	mov	r8, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	2f78      	cmp	r7, #120	; 0x78
 80096b6:	469a      	mov	sl, r3
 80096b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096be:	d807      	bhi.n	80096d0 <_printf_i+0x28>
 80096c0:	2f62      	cmp	r7, #98	; 0x62
 80096c2:	d80a      	bhi.n	80096da <_printf_i+0x32>
 80096c4:	2f00      	cmp	r7, #0
 80096c6:	f000 80d3 	beq.w	8009870 <_printf_i+0x1c8>
 80096ca:	2f58      	cmp	r7, #88	; 0x58
 80096cc:	f000 80bf 	beq.w	800984e <_printf_i+0x1a6>
 80096d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096d8:	e03a      	b.n	8009750 <_printf_i+0xa8>
 80096da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096de:	2b15      	cmp	r3, #21
 80096e0:	d8f6      	bhi.n	80096d0 <_printf_i+0x28>
 80096e2:	a101      	add	r1, pc, #4	; (adr r1, 80096e8 <_printf_i+0x40>)
 80096e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096e8:	08009741 	.word	0x08009741
 80096ec:	08009755 	.word	0x08009755
 80096f0:	080096d1 	.word	0x080096d1
 80096f4:	080096d1 	.word	0x080096d1
 80096f8:	080096d1 	.word	0x080096d1
 80096fc:	080096d1 	.word	0x080096d1
 8009700:	08009755 	.word	0x08009755
 8009704:	080096d1 	.word	0x080096d1
 8009708:	080096d1 	.word	0x080096d1
 800970c:	080096d1 	.word	0x080096d1
 8009710:	080096d1 	.word	0x080096d1
 8009714:	08009857 	.word	0x08009857
 8009718:	08009781 	.word	0x08009781
 800971c:	08009813 	.word	0x08009813
 8009720:	080096d1 	.word	0x080096d1
 8009724:	080096d1 	.word	0x080096d1
 8009728:	08009879 	.word	0x08009879
 800972c:	080096d1 	.word	0x080096d1
 8009730:	08009781 	.word	0x08009781
 8009734:	080096d1 	.word	0x080096d1
 8009738:	080096d1 	.word	0x080096d1
 800973c:	0800981b 	.word	0x0800981b
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	602a      	str	r2, [r5, #0]
 8009748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800974c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009750:	2301      	movs	r3, #1
 8009752:	e09e      	b.n	8009892 <_printf_i+0x1ea>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	682b      	ldr	r3, [r5, #0]
 8009758:	0607      	lsls	r7, r0, #24
 800975a:	f103 0104 	add.w	r1, r3, #4
 800975e:	6029      	str	r1, [r5, #0]
 8009760:	d501      	bpl.n	8009766 <_printf_i+0xbe>
 8009762:	681e      	ldr	r6, [r3, #0]
 8009764:	e003      	b.n	800976e <_printf_i+0xc6>
 8009766:	0646      	lsls	r6, r0, #25
 8009768:	d5fb      	bpl.n	8009762 <_printf_i+0xba>
 800976a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800976e:	2e00      	cmp	r6, #0
 8009770:	da03      	bge.n	800977a <_printf_i+0xd2>
 8009772:	232d      	movs	r3, #45	; 0x2d
 8009774:	4276      	negs	r6, r6
 8009776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977a:	4859      	ldr	r0, [pc, #356]	; (80098e0 <_printf_i+0x238>)
 800977c:	230a      	movs	r3, #10
 800977e:	e012      	b.n	80097a6 <_printf_i+0xfe>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	6820      	ldr	r0, [r4, #0]
 8009784:	1d19      	adds	r1, r3, #4
 8009786:	6029      	str	r1, [r5, #0]
 8009788:	0605      	lsls	r5, r0, #24
 800978a:	d501      	bpl.n	8009790 <_printf_i+0xe8>
 800978c:	681e      	ldr	r6, [r3, #0]
 800978e:	e002      	b.n	8009796 <_printf_i+0xee>
 8009790:	0641      	lsls	r1, r0, #25
 8009792:	d5fb      	bpl.n	800978c <_printf_i+0xe4>
 8009794:	881e      	ldrh	r6, [r3, #0]
 8009796:	2f6f      	cmp	r7, #111	; 0x6f
 8009798:	4851      	ldr	r0, [pc, #324]	; (80098e0 <_printf_i+0x238>)
 800979a:	bf0c      	ite	eq
 800979c:	2308      	moveq	r3, #8
 800979e:	230a      	movne	r3, #10
 80097a0:	2100      	movs	r1, #0
 80097a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097a6:	6865      	ldr	r5, [r4, #4]
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	60a5      	str	r5, [r4, #8]
 80097ac:	bfa2      	ittt	ge
 80097ae:	6821      	ldrge	r1, [r4, #0]
 80097b0:	f021 0104 	bicge.w	r1, r1, #4
 80097b4:	6021      	strge	r1, [r4, #0]
 80097b6:	b90e      	cbnz	r6, 80097bc <_printf_i+0x114>
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	d04a      	beq.n	8009852 <_printf_i+0x1aa>
 80097bc:	4615      	mov	r5, r2
 80097be:	fbb6 f1f3 	udiv	r1, r6, r3
 80097c2:	fb03 6711 	mls	r7, r3, r1, r6
 80097c6:	5dc7      	ldrb	r7, [r0, r7]
 80097c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097cc:	4637      	mov	r7, r6
 80097ce:	460e      	mov	r6, r1
 80097d0:	42bb      	cmp	r3, r7
 80097d2:	d9f4      	bls.n	80097be <_printf_i+0x116>
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d10b      	bne.n	80097f0 <_printf_i+0x148>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	07de      	lsls	r6, r3, #31
 80097dc:	d508      	bpl.n	80097f0 <_printf_i+0x148>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	6861      	ldr	r1, [r4, #4]
 80097e2:	4299      	cmp	r1, r3
 80097e4:	bfde      	ittt	le
 80097e6:	2330      	movle	r3, #48	; 0x30
 80097e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097f0:	1b52      	subs	r2, r2, r5
 80097f2:	6122      	str	r2, [r4, #16]
 80097f4:	464b      	mov	r3, r9
 80097f6:	aa03      	add	r2, sp, #12
 80097f8:	4621      	mov	r1, r4
 80097fa:	4640      	mov	r0, r8
 80097fc:	f8cd a000 	str.w	sl, [sp]
 8009800:	f7ff fee0 	bl	80095c4 <_printf_common>
 8009804:	3001      	adds	r0, #1
 8009806:	d149      	bne.n	800989c <_printf_i+0x1f4>
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	b004      	add	sp, #16
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	f043 0320 	orr.w	r3, r3, #32
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	2778      	movs	r7, #120	; 0x78
 800981c:	4831      	ldr	r0, [pc, #196]	; (80098e4 <_printf_i+0x23c>)
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009824:	061f      	lsls	r7, r3, #24
 8009826:	6829      	ldr	r1, [r5, #0]
 8009828:	f851 6b04 	ldr.w	r6, [r1], #4
 800982c:	d402      	bmi.n	8009834 <_printf_i+0x18c>
 800982e:	065f      	lsls	r7, r3, #25
 8009830:	bf48      	it	mi
 8009832:	b2b6      	uxthmi	r6, r6
 8009834:	07df      	lsls	r7, r3, #31
 8009836:	6029      	str	r1, [r5, #0]
 8009838:	bf44      	itt	mi
 800983a:	f043 0320 	orrmi.w	r3, r3, #32
 800983e:	6023      	strmi	r3, [r4, #0]
 8009840:	b91e      	cbnz	r6, 800984a <_printf_i+0x1a2>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	f023 0320 	bic.w	r3, r3, #32
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	2310      	movs	r3, #16
 800984c:	e7a8      	b.n	80097a0 <_printf_i+0xf8>
 800984e:	4824      	ldr	r0, [pc, #144]	; (80098e0 <_printf_i+0x238>)
 8009850:	e7e5      	b.n	800981e <_printf_i+0x176>
 8009852:	4615      	mov	r5, r2
 8009854:	e7be      	b.n	80097d4 <_printf_i+0x12c>
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	6826      	ldr	r6, [r4, #0]
 800985a:	1d18      	adds	r0, r3, #4
 800985c:	6961      	ldr	r1, [r4, #20]
 800985e:	6028      	str	r0, [r5, #0]
 8009860:	0635      	lsls	r5, r6, #24
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	d501      	bpl.n	800986a <_printf_i+0x1c2>
 8009866:	6019      	str	r1, [r3, #0]
 8009868:	e002      	b.n	8009870 <_printf_i+0x1c8>
 800986a:	0670      	lsls	r0, r6, #25
 800986c:	d5fb      	bpl.n	8009866 <_printf_i+0x1be>
 800986e:	8019      	strh	r1, [r3, #0]
 8009870:	2300      	movs	r3, #0
 8009872:	4615      	mov	r5, r2
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	e7bd      	b.n	80097f4 <_printf_i+0x14c>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	2100      	movs	r1, #0
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	602a      	str	r2, [r5, #0]
 8009880:	681d      	ldr	r5, [r3, #0]
 8009882:	6862      	ldr	r2, [r4, #4]
 8009884:	4628      	mov	r0, r5
 8009886:	f000 f9b5 	bl	8009bf4 <memchr>
 800988a:	b108      	cbz	r0, 8009890 <_printf_i+0x1e8>
 800988c:	1b40      	subs	r0, r0, r5
 800988e:	6060      	str	r0, [r4, #4]
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	2300      	movs	r3, #0
 8009896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800989a:	e7ab      	b.n	80097f4 <_printf_i+0x14c>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	462a      	mov	r2, r5
 80098a0:	4649      	mov	r1, r9
 80098a2:	4640      	mov	r0, r8
 80098a4:	47d0      	blx	sl
 80098a6:	3001      	adds	r0, #1
 80098a8:	d0ae      	beq.n	8009808 <_printf_i+0x160>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	079b      	lsls	r3, r3, #30
 80098ae:	d413      	bmi.n	80098d8 <_printf_i+0x230>
 80098b0:	68e0      	ldr	r0, [r4, #12]
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	4298      	cmp	r0, r3
 80098b6:	bfb8      	it	lt
 80098b8:	4618      	movlt	r0, r3
 80098ba:	e7a7      	b.n	800980c <_printf_i+0x164>
 80098bc:	2301      	movs	r3, #1
 80098be:	4632      	mov	r2, r6
 80098c0:	4649      	mov	r1, r9
 80098c2:	4640      	mov	r0, r8
 80098c4:	47d0      	blx	sl
 80098c6:	3001      	adds	r0, #1
 80098c8:	d09e      	beq.n	8009808 <_printf_i+0x160>
 80098ca:	3501      	adds	r5, #1
 80098cc:	68e3      	ldr	r3, [r4, #12]
 80098ce:	9903      	ldr	r1, [sp, #12]
 80098d0:	1a5b      	subs	r3, r3, r1
 80098d2:	42ab      	cmp	r3, r5
 80098d4:	dcf2      	bgt.n	80098bc <_printf_i+0x214>
 80098d6:	e7eb      	b.n	80098b0 <_printf_i+0x208>
 80098d8:	2500      	movs	r5, #0
 80098da:	f104 0619 	add.w	r6, r4, #25
 80098de:	e7f5      	b.n	80098cc <_printf_i+0x224>
 80098e0:	0800ad21 	.word	0x0800ad21
 80098e4:	0800ad32 	.word	0x0800ad32

080098e8 <__sflush_r>:
 80098e8:	898a      	ldrh	r2, [r1, #12]
 80098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	4605      	mov	r5, r0
 80098f0:	0710      	lsls	r0, r2, #28
 80098f2:	460c      	mov	r4, r1
 80098f4:	d458      	bmi.n	80099a8 <__sflush_r+0xc0>
 80098f6:	684b      	ldr	r3, [r1, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	dc05      	bgt.n	8009908 <__sflush_r+0x20>
 80098fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	dc02      	bgt.n	8009908 <__sflush_r+0x20>
 8009902:	2000      	movs	r0, #0
 8009904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800990a:	2e00      	cmp	r6, #0
 800990c:	d0f9      	beq.n	8009902 <__sflush_r+0x1a>
 800990e:	2300      	movs	r3, #0
 8009910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009914:	682f      	ldr	r7, [r5, #0]
 8009916:	6a21      	ldr	r1, [r4, #32]
 8009918:	602b      	str	r3, [r5, #0]
 800991a:	d032      	beq.n	8009982 <__sflush_r+0x9a>
 800991c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	075a      	lsls	r2, r3, #29
 8009922:	d505      	bpl.n	8009930 <__sflush_r+0x48>
 8009924:	6863      	ldr	r3, [r4, #4]
 8009926:	1ac0      	subs	r0, r0, r3
 8009928:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800992a:	b10b      	cbz	r3, 8009930 <__sflush_r+0x48>
 800992c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800992e:	1ac0      	subs	r0, r0, r3
 8009930:	2300      	movs	r3, #0
 8009932:	4602      	mov	r2, r0
 8009934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009936:	4628      	mov	r0, r5
 8009938:	6a21      	ldr	r1, [r4, #32]
 800993a:	47b0      	blx	r6
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	d106      	bne.n	8009950 <__sflush_r+0x68>
 8009942:	6829      	ldr	r1, [r5, #0]
 8009944:	291d      	cmp	r1, #29
 8009946:	d82b      	bhi.n	80099a0 <__sflush_r+0xb8>
 8009948:	4a28      	ldr	r2, [pc, #160]	; (80099ec <__sflush_r+0x104>)
 800994a:	410a      	asrs	r2, r1
 800994c:	07d6      	lsls	r6, r2, #31
 800994e:	d427      	bmi.n	80099a0 <__sflush_r+0xb8>
 8009950:	2200      	movs	r2, #0
 8009952:	04d9      	lsls	r1, r3, #19
 8009954:	6062      	str	r2, [r4, #4]
 8009956:	6922      	ldr	r2, [r4, #16]
 8009958:	6022      	str	r2, [r4, #0]
 800995a:	d504      	bpl.n	8009966 <__sflush_r+0x7e>
 800995c:	1c42      	adds	r2, r0, #1
 800995e:	d101      	bne.n	8009964 <__sflush_r+0x7c>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b903      	cbnz	r3, 8009966 <__sflush_r+0x7e>
 8009964:	6560      	str	r0, [r4, #84]	; 0x54
 8009966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009968:	602f      	str	r7, [r5, #0]
 800996a:	2900      	cmp	r1, #0
 800996c:	d0c9      	beq.n	8009902 <__sflush_r+0x1a>
 800996e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009972:	4299      	cmp	r1, r3
 8009974:	d002      	beq.n	800997c <__sflush_r+0x94>
 8009976:	4628      	mov	r0, r5
 8009978:	f7ff fc94 	bl	80092a4 <_free_r>
 800997c:	2000      	movs	r0, #0
 800997e:	6360      	str	r0, [r4, #52]	; 0x34
 8009980:	e7c0      	b.n	8009904 <__sflush_r+0x1c>
 8009982:	2301      	movs	r3, #1
 8009984:	4628      	mov	r0, r5
 8009986:	47b0      	blx	r6
 8009988:	1c41      	adds	r1, r0, #1
 800998a:	d1c8      	bne.n	800991e <__sflush_r+0x36>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0c5      	beq.n	800991e <__sflush_r+0x36>
 8009992:	2b1d      	cmp	r3, #29
 8009994:	d001      	beq.n	800999a <__sflush_r+0xb2>
 8009996:	2b16      	cmp	r3, #22
 8009998:	d101      	bne.n	800999e <__sflush_r+0xb6>
 800999a:	602f      	str	r7, [r5, #0]
 800999c:	e7b1      	b.n	8009902 <__sflush_r+0x1a>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a4:	81a3      	strh	r3, [r4, #12]
 80099a6:	e7ad      	b.n	8009904 <__sflush_r+0x1c>
 80099a8:	690f      	ldr	r7, [r1, #16]
 80099aa:	2f00      	cmp	r7, #0
 80099ac:	d0a9      	beq.n	8009902 <__sflush_r+0x1a>
 80099ae:	0793      	lsls	r3, r2, #30
 80099b0:	680e      	ldr	r6, [r1, #0]
 80099b2:	600f      	str	r7, [r1, #0]
 80099b4:	bf0c      	ite	eq
 80099b6:	694b      	ldreq	r3, [r1, #20]
 80099b8:	2300      	movne	r3, #0
 80099ba:	eba6 0807 	sub.w	r8, r6, r7
 80099be:	608b      	str	r3, [r1, #8]
 80099c0:	f1b8 0f00 	cmp.w	r8, #0
 80099c4:	dd9d      	ble.n	8009902 <__sflush_r+0x1a>
 80099c6:	4643      	mov	r3, r8
 80099c8:	463a      	mov	r2, r7
 80099ca:	6a21      	ldr	r1, [r4, #32]
 80099cc:	4628      	mov	r0, r5
 80099ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099d0:	47b0      	blx	r6
 80099d2:	2800      	cmp	r0, #0
 80099d4:	dc06      	bgt.n	80099e4 <__sflush_r+0xfc>
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e0:	81a3      	strh	r3, [r4, #12]
 80099e2:	e78f      	b.n	8009904 <__sflush_r+0x1c>
 80099e4:	4407      	add	r7, r0
 80099e6:	eba8 0800 	sub.w	r8, r8, r0
 80099ea:	e7e9      	b.n	80099c0 <__sflush_r+0xd8>
 80099ec:	dfbffffe 	.word	0xdfbffffe

080099f0 <_fflush_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	690b      	ldr	r3, [r1, #16]
 80099f4:	4605      	mov	r5, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	b913      	cbnz	r3, 8009a00 <_fflush_r+0x10>
 80099fa:	2500      	movs	r5, #0
 80099fc:	4628      	mov	r0, r5
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	b118      	cbz	r0, 8009a0a <_fflush_r+0x1a>
 8009a02:	6a03      	ldr	r3, [r0, #32]
 8009a04:	b90b      	cbnz	r3, 8009a0a <_fflush_r+0x1a>
 8009a06:	f7ff fadf 	bl	8008fc8 <__sinit>
 8009a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d0f3      	beq.n	80099fa <_fflush_r+0xa>
 8009a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a14:	07d0      	lsls	r0, r2, #31
 8009a16:	d404      	bmi.n	8009a22 <_fflush_r+0x32>
 8009a18:	0599      	lsls	r1, r3, #22
 8009a1a:	d402      	bmi.n	8009a22 <_fflush_r+0x32>
 8009a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a1e:	f7ff fc2a 	bl	8009276 <__retarget_lock_acquire_recursive>
 8009a22:	4628      	mov	r0, r5
 8009a24:	4621      	mov	r1, r4
 8009a26:	f7ff ff5f 	bl	80098e8 <__sflush_r>
 8009a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	07da      	lsls	r2, r3, #31
 8009a30:	d4e4      	bmi.n	80099fc <_fflush_r+0xc>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	059b      	lsls	r3, r3, #22
 8009a36:	d4e1      	bmi.n	80099fc <_fflush_r+0xc>
 8009a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a3a:	f7ff fc1d 	bl	8009278 <__retarget_lock_release_recursive>
 8009a3e:	e7dd      	b.n	80099fc <_fflush_r+0xc>

08009a40 <__swbuf_r>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	460e      	mov	r6, r1
 8009a44:	4614      	mov	r4, r2
 8009a46:	4605      	mov	r5, r0
 8009a48:	b118      	cbz	r0, 8009a52 <__swbuf_r+0x12>
 8009a4a:	6a03      	ldr	r3, [r0, #32]
 8009a4c:	b90b      	cbnz	r3, 8009a52 <__swbuf_r+0x12>
 8009a4e:	f7ff fabb 	bl	8008fc8 <__sinit>
 8009a52:	69a3      	ldr	r3, [r4, #24]
 8009a54:	60a3      	str	r3, [r4, #8]
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	071a      	lsls	r2, r3, #28
 8009a5a:	d525      	bpl.n	8009aa8 <__swbuf_r+0x68>
 8009a5c:	6923      	ldr	r3, [r4, #16]
 8009a5e:	b31b      	cbz	r3, 8009aa8 <__swbuf_r+0x68>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	b2f6      	uxtb	r6, r6
 8009a64:	6922      	ldr	r2, [r4, #16]
 8009a66:	4637      	mov	r7, r6
 8009a68:	1a98      	subs	r0, r3, r2
 8009a6a:	6963      	ldr	r3, [r4, #20]
 8009a6c:	4283      	cmp	r3, r0
 8009a6e:	dc04      	bgt.n	8009a7a <__swbuf_r+0x3a>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7ff ffbc 	bl	80099f0 <_fflush_r>
 8009a78:	b9e0      	cbnz	r0, 8009ab4 <__swbuf_r+0x74>
 8009a7a:	68a3      	ldr	r3, [r4, #8]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	60a3      	str	r3, [r4, #8]
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	6022      	str	r2, [r4, #0]
 8009a86:	701e      	strb	r6, [r3, #0]
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	6962      	ldr	r2, [r4, #20]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d004      	beq.n	8009a9a <__swbuf_r+0x5a>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	07db      	lsls	r3, r3, #31
 8009a94:	d506      	bpl.n	8009aa4 <__swbuf_r+0x64>
 8009a96:	2e0a      	cmp	r6, #10
 8009a98:	d104      	bne.n	8009aa4 <__swbuf_r+0x64>
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f7ff ffa7 	bl	80099f0 <_fflush_r>
 8009aa2:	b938      	cbnz	r0, 8009ab4 <__swbuf_r+0x74>
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f806 	bl	8009abc <__swsetup_r>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0d5      	beq.n	8009a60 <__swbuf_r+0x20>
 8009ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab8:	e7f4      	b.n	8009aa4 <__swbuf_r+0x64>
	...

08009abc <__swsetup_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <__swsetup_r+0xac>)
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	b118      	cbz	r0, 8009ad0 <__swsetup_r+0x14>
 8009ac8:	6a03      	ldr	r3, [r0, #32]
 8009aca:	b90b      	cbnz	r3, 8009ad0 <__swsetup_r+0x14>
 8009acc:	f7ff fa7c 	bl	8008fc8 <__sinit>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ad6:	0718      	lsls	r0, r3, #28
 8009ad8:	d422      	bmi.n	8009b20 <__swsetup_r+0x64>
 8009ada:	06d9      	lsls	r1, r3, #27
 8009adc:	d407      	bmi.n	8009aee <__swsetup_r+0x32>
 8009ade:	2309      	movs	r3, #9
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	e034      	b.n	8009b58 <__swsetup_r+0x9c>
 8009aee:	0758      	lsls	r0, r3, #29
 8009af0:	d512      	bpl.n	8009b18 <__swsetup_r+0x5c>
 8009af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009af4:	b141      	cbz	r1, 8009b08 <__swsetup_r+0x4c>
 8009af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009afa:	4299      	cmp	r1, r3
 8009afc:	d002      	beq.n	8009b04 <__swsetup_r+0x48>
 8009afe:	4628      	mov	r0, r5
 8009b00:	f7ff fbd0 	bl	80092a4 <_free_r>
 8009b04:	2300      	movs	r3, #0
 8009b06:	6363      	str	r3, [r4, #52]	; 0x34
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	2300      	movs	r3, #0
 8009b12:	6063      	str	r3, [r4, #4]
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	6023      	str	r3, [r4, #0]
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	f043 0308 	orr.w	r3, r3, #8
 8009b1e:	81a3      	strh	r3, [r4, #12]
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	b94b      	cbnz	r3, 8009b38 <__swsetup_r+0x7c>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b2e:	d003      	beq.n	8009b38 <__swsetup_r+0x7c>
 8009b30:	4621      	mov	r1, r4
 8009b32:	4628      	mov	r0, r5
 8009b34:	f000 f891 	bl	8009c5a <__smakebuf_r>
 8009b38:	89a0      	ldrh	r0, [r4, #12]
 8009b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b3e:	f010 0301 	ands.w	r3, r0, #1
 8009b42:	d00a      	beq.n	8009b5a <__swsetup_r+0x9e>
 8009b44:	2300      	movs	r3, #0
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	6963      	ldr	r3, [r4, #20]
 8009b4a:	425b      	negs	r3, r3
 8009b4c:	61a3      	str	r3, [r4, #24]
 8009b4e:	6923      	ldr	r3, [r4, #16]
 8009b50:	b943      	cbnz	r3, 8009b64 <__swsetup_r+0xa8>
 8009b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b56:	d1c4      	bne.n	8009ae2 <__swsetup_r+0x26>
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	0781      	lsls	r1, r0, #30
 8009b5c:	bf58      	it	pl
 8009b5e:	6963      	ldrpl	r3, [r4, #20]
 8009b60:	60a3      	str	r3, [r4, #8]
 8009b62:	e7f4      	b.n	8009b4e <__swsetup_r+0x92>
 8009b64:	2000      	movs	r0, #0
 8009b66:	e7f7      	b.n	8009b58 <__swsetup_r+0x9c>
 8009b68:	200000bc 	.word	0x200000bc

08009b6c <_raise_r>:
 8009b6c:	291f      	cmp	r1, #31
 8009b6e:	b538      	push	{r3, r4, r5, lr}
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	d904      	bls.n	8009b80 <_raise_r+0x14>
 8009b76:	2316      	movs	r3, #22
 8009b78:	6003      	str	r3, [r0, #0]
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b82:	b112      	cbz	r2, 8009b8a <_raise_r+0x1e>
 8009b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b88:	b94b      	cbnz	r3, 8009b9e <_raise_r+0x32>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f830 	bl	8009bf0 <_getpid_r>
 8009b90:	462a      	mov	r2, r5
 8009b92:	4601      	mov	r1, r0
 8009b94:	4620      	mov	r0, r4
 8009b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9a:	f000 b817 	b.w	8009bcc <_kill_r>
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d00a      	beq.n	8009bb8 <_raise_r+0x4c>
 8009ba2:	1c59      	adds	r1, r3, #1
 8009ba4:	d103      	bne.n	8009bae <_raise_r+0x42>
 8009ba6:	2316      	movs	r3, #22
 8009ba8:	6003      	str	r3, [r0, #0]
 8009baa:	2001      	movs	r0, #1
 8009bac:	e7e7      	b.n	8009b7e <_raise_r+0x12>
 8009bae:	2400      	movs	r4, #0
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bb6:	4798      	blx	r3
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e7e0      	b.n	8009b7e <_raise_r+0x12>

08009bbc <raise>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <raise+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f7ff bfd3 	b.w	8009b6c <_raise_r>
 8009bc6:	bf00      	nop
 8009bc8:	200000bc 	.word	0x200000bc

08009bcc <_kill_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4d06      	ldr	r5, [pc, #24]	; (8009bec <_kill_r+0x20>)
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	602b      	str	r3, [r5, #0]
 8009bda:	f7f6 fd4b 	bl	8000674 <_kill>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	d102      	bne.n	8009be8 <_kill_r+0x1c>
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	b103      	cbz	r3, 8009be8 <_kill_r+0x1c>
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	bd38      	pop	{r3, r4, r5, pc}
 8009bea:	bf00      	nop
 8009bec:	20000228 	.word	0x20000228

08009bf0 <_getpid_r>:
 8009bf0:	f7f6 bd38 	b.w	8000664 <_getpid>

08009bf4 <memchr>:
 8009bf4:	b2c9      	uxtb	r1, r1
 8009bf6:	4402      	add	r2, r0
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4290      	cmp	r0, r2
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	d101      	bne.n	8009c04 <memchr+0x10>
 8009c00:	2300      	movs	r3, #0
 8009c02:	e003      	b.n	8009c0c <memchr+0x18>
 8009c04:	781c      	ldrb	r4, [r3, #0]
 8009c06:	3001      	adds	r0, #1
 8009c08:	428c      	cmp	r4, r1
 8009c0a:	d1f6      	bne.n	8009bfa <memchr+0x6>
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	bd10      	pop	{r4, pc}

08009c10 <__swhatbuf_r>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c18:	b096      	sub	sp, #88	; 0x58
 8009c1a:	4615      	mov	r5, r2
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	461e      	mov	r6, r3
 8009c20:	da0c      	bge.n	8009c3c <__swhatbuf_r+0x2c>
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	2100      	movs	r1, #0
 8009c26:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c2a:	bf0c      	ite	eq
 8009c2c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c30:	2340      	movne	r3, #64	; 0x40
 8009c32:	2000      	movs	r0, #0
 8009c34:	6031      	str	r1, [r6, #0]
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	b016      	add	sp, #88	; 0x58
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	466a      	mov	r2, sp
 8009c3e:	f000 f849 	bl	8009cd4 <_fstat_r>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	dbed      	blt.n	8009c22 <__swhatbuf_r+0x12>
 8009c46:	9901      	ldr	r1, [sp, #4]
 8009c48:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c4c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c50:	4259      	negs	r1, r3
 8009c52:	4159      	adcs	r1, r3
 8009c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c58:	e7eb      	b.n	8009c32 <__swhatbuf_r+0x22>

08009c5a <__smakebuf_r>:
 8009c5a:	898b      	ldrh	r3, [r1, #12]
 8009c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c5e:	079d      	lsls	r5, r3, #30
 8009c60:	4606      	mov	r6, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	d507      	bpl.n	8009c76 <__smakebuf_r+0x1c>
 8009c66:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	6123      	str	r3, [r4, #16]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	6163      	str	r3, [r4, #20]
 8009c72:	b002      	add	sp, #8
 8009c74:	bd70      	pop	{r4, r5, r6, pc}
 8009c76:	ab01      	add	r3, sp, #4
 8009c78:	466a      	mov	r2, sp
 8009c7a:	f7ff ffc9 	bl	8009c10 <__swhatbuf_r>
 8009c7e:	9900      	ldr	r1, [sp, #0]
 8009c80:	4605      	mov	r5, r0
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff f888 	bl	8008d98 <_malloc_r>
 8009c88:	b948      	cbnz	r0, 8009c9e <__smakebuf_r+0x44>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	059a      	lsls	r2, r3, #22
 8009c90:	d4ef      	bmi.n	8009c72 <__smakebuf_r+0x18>
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	f043 0302 	orr.w	r3, r3, #2
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	e7e3      	b.n	8009c66 <__smakebuf_r+0xc>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	6020      	str	r0, [r4, #0]
 8009ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca6:	6120      	str	r0, [r4, #16]
 8009ca8:	81a3      	strh	r3, [r4, #12]
 8009caa:	9b00      	ldr	r3, [sp, #0]
 8009cac:	6163      	str	r3, [r4, #20]
 8009cae:	9b01      	ldr	r3, [sp, #4]
 8009cb0:	b15b      	cbz	r3, 8009cca <__smakebuf_r+0x70>
 8009cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f000 f81e 	bl	8009cf8 <_isatty_r>
 8009cbc:	b128      	cbz	r0, 8009cca <__smakebuf_r+0x70>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f023 0303 	bic.w	r3, r3, #3
 8009cc4:	f043 0301 	orr.w	r3, r3, #1
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	431d      	orrs	r5, r3
 8009cce:	81a5      	strh	r5, [r4, #12]
 8009cd0:	e7cf      	b.n	8009c72 <__smakebuf_r+0x18>
	...

08009cd4 <_fstat_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4d06      	ldr	r5, [pc, #24]	; (8009cf4 <_fstat_r+0x20>)
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	f7f6 fd26 	bl	8000732 <_fstat>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d102      	bne.n	8009cf0 <_fstat_r+0x1c>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	b103      	cbz	r3, 8009cf0 <_fstat_r+0x1c>
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	bd38      	pop	{r3, r4, r5, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000228 	.word	0x20000228

08009cf8 <_isatty_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4d05      	ldr	r5, [pc, #20]	; (8009d14 <_isatty_r+0x1c>)
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f6 fd25 	bl	8000752 <_isatty>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_isatty_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_isatty_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000228 	.word	0x20000228

08009d18 <_init>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr

08009d24 <_fini>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	bf00      	nop
 8009d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	469e      	mov	lr, r3
 8009d2e:	4770      	bx	lr
